{
  "Param": {
    "parent": null,
    "methods": [
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param1(T1 p1)",
      "void Param2(T1 p1, T2 p2)",
      "void Param3(T1 p1, T2 p2, T3 p3)",
      "void Param4(T1 p1, T2 p2, T3 p3, T4 p4)",
      "void Param5(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)",
      "void Param6(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)",
      "void Param7(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)",
      "void Param8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)",
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param1": {
    "parent": null,
    "methods": [
      "void Param1(T1 p1)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param2(T1 p1, T2 p2)",
      "void Param3(T1 p1, T2 p2, T3 p3)",
      "void Param4(T1 p1, T2 p2, T3 p3, T4 p4)",
      "void Param5(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)",
      "void Param6(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)",
      "void Param7(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)",
      "void Param8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)",
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param2": {
    "parent": null,
    "methods": [
      "void Param2(T1 p1, T2 p2)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param3(T1 p1, T2 p2, T3 p3)",
      "void Param4(T1 p1, T2 p2, T3 p3, T4 p4)",
      "void Param5(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)",
      "void Param6(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)",
      "void Param7(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)",
      "void Param8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)",
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param3": {
    "parent": null,
    "methods": [
      "void Param3(T1 p1, T2 p2, T3 p3)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param4(T1 p1, T2 p2, T3 p3, T4 p4)",
      "void Param5(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)",
      "void Param6(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)",
      "void Param7(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)",
      "void Param8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)",
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param4": {
    "parent": null,
    "methods": [
      "void Param4(T1 p1, T2 p2, T3 p3, T4 p4)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param5(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)",
      "void Param6(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)",
      "void Param7(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)",
      "void Param8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)",
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param5": {
    "parent": null,
    "methods": [
      "void Param5(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param6(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)",
      "void Param7(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)",
      "void Param8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)",
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param6": {
    "parent": null,
    "methods": [
      "void Param6(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param7(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)",
      "void Param8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)",
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param7": {
    "parent": null,
    "methods": [
      "void Param7(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)",
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param8": {
    "parent": null,
    "methods": [
      "void Param8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param9": {
    "parent": null,
    "methods": [
      "void Param9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)"
    ]
  },
  "Param10": {
    "parent": null,
    "methods": [
      "void Param10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)"
    ]
  },
  "TestClass": {
    "parent": null,
    "methods": []
  },
  "Workbench": {
    "parent": null,
    "methods": [
      "bool OpenModule(string type)",
      "bool CloseModule(string type)",
      "void Dialog(string caption, string text)",
      "int ScriptDialog(string caption, string text, Class data)",
      "bool SearchResources(string filter, func callback)",
      "int RunCmd(string command, bool wait = false)",
      "void GetCwd(out string currentDir)",
      "bool GetAbsolutePath(string relativePath, out string absPath)",
      "bool SetOpenedResource(string filename)",
      "int GetNumContainers()",
      "bool GetCmdLine(string name, out string value)",
      "bool Save()",
      "bool Close()",
      "bool GetCurrentFile(out string filename)",
      "int GetCurrentLine()",
      "bool BeginTerrainAction(string historyPointName = , string historyPointIcon = )",
      "void EndTerrainAction(string historyPointName = )",
      "bool BeginEntityAction(string historyPointName = , string historyPointIcon = )",
      "bool EndEntityAction(string historyPointName = )",
      "bool IsDoingEditAction()",
      "bool UndoOrRedoIsRestoring()",
      "bool IsModifyingData()",
      "void SetEntitySelection(IEntity ent)",
      "void AddToEntitySelection(IEntity ent)",
      "void ClearEntitySelection()",
      "void RemoveFromEntitySelection(IEntity ent)",
      "void SetPropertySelection(string id)",
      "bool ModifyEntityKey(IEntity ent, string key, string value)",
      "bool ModifyEntityTemplateKey(IEntitySource tmpl, string key, string value)",
      "bool DeleteEntity(IEntity ent)",
      "bool DeleteEntities(out array<IEntity> ents)",
      "bool TraceWorldPos(int x, int y, int traceFlags, out vector traceStart, out vector traceEnd, out vector traceDir)",
      "int GetSelectedEntitiesCount()",
      "void WorldEditorAPI()",
      "void OnKeyPressEvent(int key)",
      "void OnKeyReleaseEvent(int key)",
      "void OnEnterEvent()",
      "void OnLeaveEvent()",
      "void OnMouseMoveEvent(float x, float y)",
      "void OnMouseDoubleClickEvent(float x, float y)",
      "void OnMousePressEvent(float x, float y)",
      "void OnMouseReleaseEvent(float x, float y)",
      "void OnWheelEvent(int delta)",
      "void WorldEditorTool()",
      "void Run()",
      "void RunCommandline()",
      "void Configure()",
      "void ButtonAttribute(string label = , bool focused = false)",
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "WBModuleDef": {
    "parent": null,
    "methods": [
      "bool SetOpenedResource(string filename)",
      "int GetNumContainers()",
      "bool GetCmdLine(string name, out string value)",
      "bool Save()",
      "bool Close()",
      "bool GetCurrentFile(out string filename)",
      "int GetCurrentLine()",
      "bool BeginTerrainAction(string historyPointName = , string historyPointIcon = )",
      "void EndTerrainAction(string historyPointName = )",
      "bool BeginEntityAction(string historyPointName = , string historyPointIcon = )",
      "bool EndEntityAction(string historyPointName = )",
      "bool IsDoingEditAction()",
      "bool UndoOrRedoIsRestoring()",
      "bool IsModifyingData()",
      "void SetEntitySelection(IEntity ent)",
      "void AddToEntitySelection(IEntity ent)",
      "void ClearEntitySelection()",
      "void RemoveFromEntitySelection(IEntity ent)",
      "void SetPropertySelection(string id)",
      "bool ModifyEntityKey(IEntity ent, string key, string value)",
      "bool ModifyEntityTemplateKey(IEntitySource tmpl, string key, string value)",
      "bool DeleteEntity(IEntity ent)",
      "bool DeleteEntities(out array<IEntity> ents)",
      "bool TraceWorldPos(int x, int y, int traceFlags, out vector traceStart, out vector traceEnd, out vector traceDir)",
      "int GetSelectedEntitiesCount()",
      "void WorldEditorAPI()",
      "void OnKeyPressEvent(int key)",
      "void OnKeyReleaseEvent(int key)",
      "void OnEnterEvent()",
      "void OnLeaveEvent()",
      "void OnMouseMoveEvent(float x, float y)",
      "void OnMouseDoubleClickEvent(float x, float y)",
      "void OnMousePressEvent(float x, float y)",
      "void OnMouseReleaseEvent(float x, float y)",
      "void OnWheelEvent(int delta)",
      "void WorldEditorTool()",
      "void Run()",
      "void RunCommandline()",
      "void Configure()",
      "void ButtonAttribute(string label = , bool focused = false)",
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "ScriptEditor": {
    "parent": null,
    "methods": [
      "bool GetCurrentFile(out string filename)",
      "int GetCurrentLine()",
      "bool BeginTerrainAction(string historyPointName = , string historyPointIcon = )",
      "void EndTerrainAction(string historyPointName = )",
      "bool BeginEntityAction(string historyPointName = , string historyPointIcon = )",
      "bool EndEntityAction(string historyPointName = )",
      "bool IsDoingEditAction()",
      "bool UndoOrRedoIsRestoring()",
      "bool IsModifyingData()",
      "void SetEntitySelection(IEntity ent)",
      "void AddToEntitySelection(IEntity ent)",
      "void ClearEntitySelection()",
      "void RemoveFromEntitySelection(IEntity ent)",
      "void SetPropertySelection(string id)",
      "bool ModifyEntityKey(IEntity ent, string key, string value)",
      "bool ModifyEntityTemplateKey(IEntitySource tmpl, string key, string value)",
      "bool DeleteEntity(IEntity ent)",
      "bool DeleteEntities(out array<IEntity> ents)",
      "bool TraceWorldPos(int x, int y, int traceFlags, out vector traceStart, out vector traceEnd, out vector traceDir)",
      "int GetSelectedEntitiesCount()",
      "void WorldEditorAPI()",
      "void OnKeyPressEvent(int key)",
      "void OnKeyReleaseEvent(int key)",
      "void OnEnterEvent()",
      "void OnLeaveEvent()",
      "void OnMouseMoveEvent(float x, float y)",
      "void OnMouseDoubleClickEvent(float x, float y)",
      "void OnMousePressEvent(float x, float y)",
      "void OnMouseReleaseEvent(float x, float y)",
      "void OnWheelEvent(int delta)",
      "void WorldEditorTool()",
      "void Run()",
      "void RunCommandline()",
      "void Configure()",
      "void ButtonAttribute(string label = , bool focused = false)",
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "ResourceBrowser": {
    "parent": null,
    "methods": [
      "bool GetCurrentFile(out string filename)",
      "bool BeginTerrainAction(string historyPointName = , string historyPointIcon = )",
      "void EndTerrainAction(string historyPointName = )",
      "bool BeginEntityAction(string historyPointName = , string historyPointIcon = )",
      "bool EndEntityAction(string historyPointName = )",
      "bool IsDoingEditAction()",
      "bool UndoOrRedoIsRestoring()",
      "bool IsModifyingData()",
      "void SetEntitySelection(IEntity ent)",
      "void AddToEntitySelection(IEntity ent)",
      "void ClearEntitySelection()",
      "void RemoveFromEntitySelection(IEntity ent)",
      "void SetPropertySelection(string id)",
      "bool ModifyEntityKey(IEntity ent, string key, string value)",
      "bool ModifyEntityTemplateKey(IEntitySource tmpl, string key, string value)",
      "bool DeleteEntity(IEntity ent)",
      "bool DeleteEntities(out array<IEntity> ents)",
      "bool TraceWorldPos(int x, int y, int traceFlags, out vector traceStart, out vector traceEnd, out vector traceDir)",
      "int GetSelectedEntitiesCount()",
      "void WorldEditorAPI()",
      "void OnKeyPressEvent(int key)",
      "void OnKeyReleaseEvent(int key)",
      "void OnEnterEvent()",
      "void OnLeaveEvent()",
      "void OnMouseMoveEvent(float x, float y)",
      "void OnMouseDoubleClickEvent(float x, float y)",
      "void OnMousePressEvent(float x, float y)",
      "void OnMouseReleaseEvent(float x, float y)",
      "void OnWheelEvent(int delta)",
      "void WorldEditorTool()",
      "void Run()",
      "void RunCommandline()",
      "void Configure()",
      "void ButtonAttribute(string label = , bool focused = false)",
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "WorldEditor": {
    "parent": null,
    "methods": [
      "bool BeginTerrainAction(string historyPointName = , string historyPointIcon = )",
      "void EndTerrainAction(string historyPointName = )",
      "bool BeginEntityAction(string historyPointName = , string historyPointIcon = )",
      "bool EndEntityAction(string historyPointName = )",
      "bool IsDoingEditAction()",
      "bool UndoOrRedoIsRestoring()",
      "bool IsModifyingData()",
      "void SetEntitySelection(IEntity ent)",
      "void AddToEntitySelection(IEntity ent)",
      "void ClearEntitySelection()",
      "void RemoveFromEntitySelection(IEntity ent)",
      "void SetPropertySelection(string id)",
      "bool ModifyEntityKey(IEntity ent, string key, string value)",
      "bool ModifyEntityTemplateKey(IEntitySource tmpl, string key, string value)",
      "bool DeleteEntity(IEntity ent)",
      "bool DeleteEntities(out array<IEntity> ents)",
      "bool TraceWorldPos(int x, int y, int traceFlags, out vector traceStart, out vector traceEnd, out vector traceDir)",
      "int GetSelectedEntitiesCount()",
      "void WorldEditorAPI()",
      "void OnKeyPressEvent(int key)",
      "void OnKeyReleaseEvent(int key)",
      "void OnEnterEvent()",
      "void OnLeaveEvent()",
      "void OnMouseMoveEvent(float x, float y)",
      "void OnMouseDoubleClickEvent(float x, float y)",
      "void OnMousePressEvent(float x, float y)",
      "void OnMouseReleaseEvent(float x, float y)",
      "void OnWheelEvent(int delta)",
      "void WorldEditorTool()",
      "void Run()",
      "void RunCommandline()",
      "void Configure()",
      "void ButtonAttribute(string label = , bool focused = false)",
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "WorldEditorAPI": {
    "parent": null,
    "methods": [
      "bool BeginTerrainAction(string historyPointName = , string historyPointIcon = )",
      "void EndTerrainAction(string historyPointName = )",
      "bool BeginEntityAction(string historyPointName = , string historyPointIcon = )",
      "bool EndEntityAction(string historyPointName = )",
      "bool IsDoingEditAction()",
      "bool UndoOrRedoIsRestoring()",
      "bool IsModifyingData()",
      "void SetEntitySelection(IEntity ent)",
      "void AddToEntitySelection(IEntity ent)",
      "void ClearEntitySelection()",
      "void RemoveFromEntitySelection(IEntity ent)",
      "void SetPropertySelection(string id)",
      "bool ModifyEntityKey(IEntity ent, string key, string value)",
      "bool ModifyEntityTemplateKey(IEntitySource tmpl, string key, string value)",
      "bool DeleteEntity(IEntity ent)",
      "bool DeleteEntities(out array<IEntity> ents)",
      "bool TraceWorldPos(int x, int y, int traceFlags, out vector traceStart, out vector traceEnd, out vector traceDir)",
      "int GetSelectedEntitiesCount()",
      "void WorldEditorAPI()",
      "void OnKeyPressEvent(int key)",
      "void OnKeyReleaseEvent(int key)",
      "void OnEnterEvent()",
      "void OnLeaveEvent()",
      "void OnMouseMoveEvent(float x, float y)",
      "void OnMouseDoubleClickEvent(float x, float y)",
      "void OnMousePressEvent(float x, float y)",
      "void OnMouseReleaseEvent(float x, float y)",
      "void OnWheelEvent(int delta)",
      "void WorldEditorTool()",
      "void Run()",
      "void RunCommandline()",
      "void Configure()",
      "void ButtonAttribute(string label = , bool focused = false)",
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "WorldEditorTool": {
    "parent": null,
    "methods": [
      "void OnKeyPressEvent(int key)",
      "void OnKeyReleaseEvent(int key)",
      "void OnEnterEvent()",
      "void OnLeaveEvent()",
      "void OnMouseMoveEvent(float x, float y)",
      "void OnMouseDoubleClickEvent(float x, float y)",
      "void OnMousePressEvent(float x, float y)",
      "void OnMouseReleaseEvent(float x, float y)",
      "void OnWheelEvent(int delta)",
      "void WorldEditorTool()",
      "void Run()",
      "void RunCommandline()",
      "void Configure()",
      "void ButtonAttribute(string label = , bool focused = false)",
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "WorkbenchPlugin": {
    "parent": null,
    "methods": [
      "void Run()",
      "void RunCommandline()",
      "void Configure()",
      "void ButtonAttribute(string label = , bool focused = false)",
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "ButtonAttribute": {
    "parent": null,
    "methods": [
      "void ButtonAttribute(string label = , bool focused = false)",
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "WorkbenchPluginAttribute": {
    "parent": null,
    "methods": [
      "void WorkbenchPluginAttribute(string name, string description = , string shortcut = , string icon = , array<string> wbModules = null)"
    ]
  },
  "WorkbenchToolAttribute": {
    "parent": null,
    "methods": []
  },
  "Game": {
    "parent": null,
    "methods": [
      "void SetDebug(bool isDebug)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnAfterInit()",
      "void OnUpdate(float timeslice)",
      "bool SetWorldFile(string path, bool reload)",
      "string GetWorldFile()",
      "bool OnGameStart()",
      "void OnGameEnd()",
      "void ShowLoadingAnim()",
      "void HideLoadingAnim()",
      "void UpdateLoadingAnim(float timeslice, float progress)",
      "void RequestClose()",
      "void RequestReload()",
      "string GetBuildVersion()",
      "string GetBuildTime()",
      "int GetTickCount()",
      "void GameLibInit()"
    ]
  },
  "ActionManager": {
    "parent": null,
    "methods": [
      "void ActionManager(ActionManager parent)",
      "bool RegisterAction(string actionName)",
      "bool RegisterContext(string contextName)",
      "float LocalValue(string actionName)",
      "bool GetActionTriggered(string actionName)",
      "bool ActivateAction(string actionName, int duration = 0)",
      "bool IsActionActive(string actionName)",
      "bool ActivateContext(string contextName, int duration = 0)",
      "bool IsContextActive(string contextName)",
      "void AddActionListener(string actionName, InputTrigger trigger,  func callback)",
      "void SetContextDebug(string contextName, bool bDebug)",
      "void Setparent(ActionManager parent)",
      "void SetDebug(bool bDebug)",
      "void InputManager(ActionManager parent)",
      "void ResetAction(string actionName)",
      "void SetCursorPosition(int x, int y)",
      "bool RegisterActionManager(ActionManager pManager)",
      "bool UnregisterActionManager(ActionManager pManager)"
    ]
  },
  "InputManager": {
    "parent": null,
    "methods": [
      "void InputManager(ActionManager parent)",
      "void ResetAction(string actionName)",
      "void SetCursorPosition(int x, int y)",
      "bool RegisterActionManager(ActionManager pManager)",
      "bool UnregisterActionManager(ActionManager pManager)"
    ]
  },
  "MenuManager": {
    "parent": null,
    "methods": [
      "bool IsAnyMenuOpen()",
      "bool IsAnyDialogOpen()",
      "bool CloseMenuByPreset(ScriptMenuPresetEnum preset)",
      "bool CloseMenuByUserId(int userId)",
      "bool CloseMenu(MenuBase menu)",
      "void MenuManager()",
      "void MenuBindAttribute(string menuItemName = )",
      "int GetUserId()",
      "void Close()",
      "void OnMenuFocusGained()",
      "void OnMenuFocusLost()",
      "void OnMenuShow()",
      "void OnMenuHide()",
      "void OnMenuOpen()",
      "void OnMenuClose()",
      "void OnMenuInit()",
      "void OnMenuUpdate(float tDelta)",
      "void OnMenuItem(string menuItemName, bool changed, bool finished)",
      "void MenuBase()",
      "void Ok()",
      "bool LoadWorld(string worldFilePath)",
      "bool SaveWorld()"
    ]
  },
  "MenuBindAttribute": {
    "parent": null,
    "methods": [
      "void MenuBindAttribute(string menuItemName = )",
      "int GetUserId()",
      "void Close()",
      "void OnMenuFocusGained()",
      "void OnMenuFocusLost()",
      "void OnMenuShow()",
      "void OnMenuHide()",
      "void OnMenuOpen()",
      "void OnMenuClose()",
      "void OnMenuInit()",
      "void OnMenuUpdate(float tDelta)",
      "void OnMenuItem(string menuItemName, bool changed, bool finished)",
      "void MenuBase()",
      "void Ok()",
      "bool LoadWorld(string worldFilePath)",
      "bool SaveWorld()"
    ]
  },
  "MenuBase": {
    "parent": null,
    "methods": [
      "int GetUserId()",
      "void Close()",
      "void OnMenuFocusGained()",
      "void OnMenuFocusLost()",
      "void OnMenuShow()",
      "void OnMenuHide()",
      "void OnMenuOpen()",
      "void OnMenuClose()",
      "void OnMenuInit()",
      "void OnMenuUpdate(float tDelta)",
      "void OnMenuItem(string menuItemName, bool changed, bool finished)",
      "void MenuBase()",
      "void Ok()",
      "bool LoadWorld(string worldFilePath)",
      "bool SaveWorld()"
    ]
  },
  "MessageBox": {
    "parent": null,
    "methods": [
      "void Ok()",
      "bool LoadWorld(string worldFilePath)",
      "bool SaveWorld()"
    ]
  },
  "WorldEditorIngame": {
    "parent": null,
    "methods": [
      "bool LoadWorld(string worldFilePath)",
      "bool SaveWorld()"
    ]
  },
  "Settings": {
    "parent": null,
    "methods": [
      "static void OnChange(string variableName)",
      "static void OnAnyChange()",
      "static void OnLoad()",
      "static void OnSave()",
      "static void OnReset()",
      "static void OnRevert()",
      "static void OnApply()",
      "void Settings()",
      "bool AddSettings(typename settingsClass)",
      "void Save()",
      "void Reset()",
      "void Revert()",
      "void Apply()",
      "void Back()"
    ]
  },
  "GameSettings": {
    "parent": null,
    "methods": [
      "static void OnAnyChange()",
      "bool AddSettings(typename settingsClass)",
      "void Save()",
      "void Reset()",
      "void Revert()",
      "void Apply()",
      "void Back()"
    ]
  },
  "SettingsMenu": {
    "parent": null,
    "methods": [
      "bool AddSettings(typename settingsClass)",
      "void Save()",
      "void Reset()",
      "void Revert()",
      "void Apply()",
      "void Back()"
    ]
  },
  "ScriptCallQueue": {
    "parent": null,
    "methods": [
      "void Tick(float timeslice)",
      "void Call(func fn, void param1 = NULL, void param2 = NULL, void param3 = NULL, void param4 = NULL, void param5 = NULL, void param6 = NULL, void param7 = NULL, void param8 = NULL, void param9 = NULL)",
      "void CallByName(Class obj, string fnName , Param params = NULL)",
      "void CallLater(func fn, int delay = 0, bool repeat = false, void param1 = NULL, void param2 = NULL, void param3 = NULL, void param4 = NULL, void param5 = NULL, void param6 = NULL, void param7 = NULL, void param8 = NULL, void param9 = NULL)",
      "void CallLaterByName(Class obj, string fnName, int delay = 0, bool repeat = false, Param params = NULL)",
      "void Remove(func fn)",
      "int GetRemainingTime(func fn)",
      "void RemoveByName(Class obj, string fnName)",
      "int GetRemainingTimeByName(Class obj, string fnName)",
      "void Clear()",
      "void Invoke(void param1 = NULL, void param2 = NULL, void param3 = NULL, void param4 = NULL, void param5 = NULL, void param6 = NULL, void param7 = NULL, void param8 = NULL, void param9 = NULL)",
      "bool Insert(func fn, int flags = EScriptInvokerInsertFlags.IMMEDIATE)",
      "bool Remove(func fn, int flags = EScriptInvokerRemoveFlags.ALL)",
      "int Count(func fn)",
      "void ScriptCaller()",
      "void Init(func fn)",
      "void Invoke(void param1 = null, void param2 = null, void param3 = null, void param4 = null, void param5 = null, void param6 = null, void param7 = null, void param8 = null, void param9 = null)",
      "bool IsValid()",
      "bool Equals(notnull ScriptCaller other)"
    ]
  },
  "ScriptInvoker": {
    "parent": null,
    "methods": [
      "void Invoke(void param1 = NULL, void param2 = NULL, void param3 = NULL, void param4 = NULL, void param5 = NULL, void param6 = NULL, void param7 = NULL, void param8 = NULL, void param9 = NULL)",
      "bool Insert(func fn, int flags = EScriptInvokerInsertFlags.IMMEDIATE)",
      "bool Remove(func fn, int flags = EScriptInvokerRemoveFlags.ALL)",
      "int Count(func fn)",
      "void Clear()",
      "void ScriptCaller()",
      "void Init(func fn)",
      "void Invoke(void param1 = null, void param2 = null, void param3 = null, void param4 = null, void param5 = null, void param6 = null, void param7 = null, void param8 = null, void param9 = null)",
      "bool IsValid()",
      "bool Equals(notnull ScriptCaller other)"
    ]
  },
  "ScriptCaller": {
    "parent": null,
    "methods": [
      "void ScriptCaller()",
      "void Init(func fn)",
      "void Invoke(void param1 = null, void param2 = null, void param3 = null, void param4 = null, void param5 = null, void param6 = null, void param7 = null, void param8 = null, void param9 = null)",
      "bool IsValid()",
      "bool Equals(notnull ScriptCaller other)"
    ]
  },
  "AIBehaviourHLData": {
    "parent": null,
    "methods": [
      "void AIBehaviourHLData()",
      "void OnParseConfig()",
      "void ParseBehaviourSlot(string name)",
      "void ParseAlertLevel(string name)",
      "float ReadParamValue(string paramName, float defValue)",
      "void AIBehaviourHL()",
      "void OnInit()",
      "void Simulate(float timeDelta)",
      "void OnDamage(float damage, EntityAI source)",
      "void OnDamageInflicted()",
      "void OnAnimationEvent(int nameCrc)",
      "void SetNextBehaviour(int BehaviourCrc)",
      "void SwitchToNextBehaviour()",
      "void RegAIBehaviour(string behname,typename behClass, typename behClassData)",
      "void AIBehaviourHLZombie2()",
      "void ShowDebugInfo()",
      "void AIBehaviourHLDataZombie2()"
    ]
  },
  "AIBehaviourHL": {
    "parent": null,
    "methods": [
      "void AIBehaviourHL()",
      "void OnInit()",
      "void Simulate(float timeDelta)",
      "void OnDamage(float damage, EntityAI source)",
      "void OnDamageInflicted()",
      "void OnAnimationEvent(int nameCrc)",
      "void SetNextBehaviour(int BehaviourCrc)",
      "void SwitchToNextBehaviour()",
      "void RegAIBehaviour(string behname,typename behClass, typename behClassData)",
      "void AIBehaviourHLZombie2()",
      "void ShowDebugInfo()",
      "void AIBehaviourHLDataZombie2()",
      "void OnParseConfig()"
    ]
  },
  "AIBehaviourHLZombie2": {
    "parent": null,
    "methods": [
      "void AIBehaviourHLZombie2()",
      "void OnInit()",
      "void Simulate(float timeDelta)",
      "void ShowDebugInfo()",
      "void AIBehaviourHLDataZombie2()",
      "void OnParseConfig()"
    ]
  },
  "AIBehaviourHLDataZombie2": {
    "parent": null,
    "methods": [
      "void AIBehaviourHLDataZombie2()",
      "void OnParseConfig()"
    ]
  },
  "AmmoCamParams": {
    "parent": null,
    "methods": [
      "void Load(string ammoType)"
    ]
  },
  "AmmoEffects": {
    "parent": null,
    "methods": [
      "static int GetAmmoParticleID(string ammoType)",
      "static bool PlayAmmoParticle(string ammoType, vector pos)",
      "static bool PlayAmmoEffect(string ammoType, vector pos)",
      "static void Init()",
      "static void Cleanup()"
    ]
  },
  "BillboardSetHandler": {
    "parent": null,
    "methods": [
      "string GetTextureByType(string type)",
      "void OnRPCIndex(int index)",
      "bool LoadBillboardConfigs()",
      "static bool ActivateBillboardSet(string setClassName, PlayerIdentity identity)",
      "void BillboardSet(string path)",
      "void LoadConfig(string path)"
    ]
  },
  "BillboardSet": {
    "parent": null,
    "methods": [
      "void BillboardSet(string path)",
      "string GetTextureByType(string type)",
      "void LoadConfig(string path)"
    ]
  },
  "BleedChanceData": {
    "parent": null,
    "methods": [
      "static void InitBleedChanceData()",
      "static void InitMeleeChanceMap()",
      "static void InitInfectedChanceMap()",
      "static void Cleanup()",
      "static bool CalculateBleedChance(string damageType, float bloodDamage, float bleedThreshold, out float bleedChance)"
    ]
  },
  "Canvas": {
    "parent": null,
    "methods": [
      "void Canvas(int size_x, int size_y)",
      "void DrawPixel(int x, int y)",
      "void PrintOut()",
      "void SaveToFile(string filename)"
    ]
  },
  "CfgGameplayJson": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "void ITEM_DataBase()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_DataBase": {
    "parent": null,
    "methods": [
      "void ITEM_DataBase()",
      "bool ValidateServer()",
      "void InitServer()"
    ]
  },
  "ITEM_GeneralData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_PlayerData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_ShockHandlingData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_StaminaData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_MovementData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_WorldData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_BaseBuildingData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_HologramData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_ConstructionData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_UIData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_HitIndicationData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_MapData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_DrowningData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "ITEM_VehicleData": {
    "parent": null,
    "methods": [
      "void InitServer()",
      "bool ValidateServer()"
    ]
  },
  "CfgGameplayHandler": {
    "parent": null,
    "methods": [
      "static void RegisterItem(ITEM_DataBase item)",
      "static void ValidateItems()",
      "static void InitData()",
      "static void Output()",
      "static bool LoadData()",
      "static void OnLoaded()",
      "static void SyncDataSend(notnull Man player)",
      "static void SyncDataSendEx(notnull PlayerIdentity identity)",
      "static void OnRPC(Man player, ParamsReadContext ctx)",
      "static bool GetDisablePersonalLight()",
      "static int GetLightingConfig()",
      "static bool GetDisableBaseDamage()",
      "static bool GetDisableContainerDamage()",
      "static bool GetDisableRespawnDialog()",
      "static bool GetDisableRespawnInUnconsciousness()",
      "static float GetSprintStaminaModifierErc()",
      "static float GetSprintStaminaModifierCro()",
      "static float GetSprintSwimmingStaminaModifier()",
      "static float GetSprintLadderStaminaModifier()",
      "static float GetStaminaWeightLimitThreshold()",
      "static float GetStaminaMax()",
      "static float GetStaminaKgToStaminaPercentPenalty()",
      "static float GetStaminaMinCap()",
      "static float GetMeleeStaminaModifier()",
      "static float GetObstacleTraversalStaminaModifier()",
      "static float GetHoldBreathStaminaModifier()",
      "static float GetMovementTimeToStrafeJog()",
      "static float GetMovementTimeToSprint()",
      "static float GetMovementTimeToStrafeSprint()",
      "static float GetMovementRotationSpeedJog()",
      "static float GetMovementRotationSpeedSprint()",
      "static bool GetDisable2dMap()",
      "static bool GetDisableIsCollidingBBoxCheck()",
      "static bool GetDisableIsCollidingPlayerCheck()",
      "static bool GetDisableIsClippingRoofCheck()",
      "static bool GetDisableIsBaseViableCheck()",
      "static bool GetDisableIsInTerrainCheck()",
      "static bool GetDisableIsUnderwaterCheck()",
      "static bool GetDisableHeightPlacementCheck()",
      "static bool GetDisableIsPlacementPermittedCheck()",
      "static bool GetDisableIsCollidingAngleCheck()",
      "static bool GetDisableIsCollidingGPlotCheck()",
      "static bool GetDisableIsCollidingCheck()",
      "static bool GetDisablePerformRoofCheck()",
      "static bool GetDisableDistanceCheck()",
      "static bool GetDisableColdAreaPlacementCheck()",
      "static bool GetHitIndicationOverrideEnabled()",
      "static int GetHitIndicationMode()",
      "static int GetHitIndicationTypeID()",
      "static int GetHitIndicationIndicatorColor()",
      "static float GetHitIndicationMaxDuration()",
      "static float GetHitIndicationBreakPoint()",
      "static float GetHitIndicationScatter()",
      "static bool GetHitIndicationPPEEnabled()",
      "static bool GetUse3DMap()",
      "static float GetShockRefillSpeedConscious()",
      "static float GetShockRefillSpeedUnconscious()",
      "static bool GetAllowRefillSpeedModifier()",
      "static bool GetMapIgnoreMapOwnership()",
      "static bool GetMapIgnoreNavItemsOwnership()",
      "static bool GetMapDisplayPlayerPosition()",
      "static bool GetMapDisplayNavigationInfo()",
      "static float GetStaminaDepletionSpeed()",
      "static float GetHealthDepletionSpeed()",
      "static float GetShockDepletionSpeed()",
      "static bool GetAllowStaminaAffectInertia()",
      "static float GetBoatDecayMultiplier()"
    ]
  },
  "CfgPlayerRestrictedAreaHandler": {
    "parent": null,
    "methods": [
      "static bool LoadData()",
      "static bool IsInitialized()",
      "static void SyncDataSend(notnull PlayerIdentity identity)",
      "static void OnRPC(ParamsReadContext ctx)",
      "static bool IsPointInPlayerRestrictedAreaClosest(vector point, out PlayerRestrictedAreaInstance hitArea)",
      "static bool IsPointInPlayerRestrictedArea(vector point, out PlayerRestrictedAreaInstance hitArea)",
      "static bool IsCylinderInAreaBox(notnull PlayerRestrictedAreaInstance area, vector point, float cylinderRadius = 0.25, float cylinderHeight = 1)",
      "static bool IsPointInAreaPolygon(notnull PlayerRestrictedAreaInstance area, vector point)",
      "static void DrawBoxesDebug(bool draw)",
      "static void DrawPolygonLinesDebug(bool draw)"
    ]
  },
  "CfgPlayerRestrictedAreaJsonData": {
    "parent": null,
    "methods": [
      "bool InitializeAreas()",
      "void PRAShapeDataBase(array<ref array<float>> shapeDataArray)",
      "void InitPRAShapeData(array<ref array<float>> shapeDataArray)",
      "void Initialize()",
      "bool ValidatePlayerRestrictedAreaPositions()",
      "bool TranslateSafePositions()",
      "bool IsValid()"
    ]
  },
  "PRAShapeDataBase": {
    "parent": null,
    "methods": [
      "void PRAShapeDataBase(array<ref array<float>> shapeDataArray)",
      "void InitPRAShapeData(array<ref array<float>> shapeDataArray)",
      "void Initialize()",
      "bool ValidatePlayerRestrictedAreaPositions()",
      "bool TranslateSafePositions()",
      "bool IsValid()"
    ]
  },
  "PRAShapeBoxData": {
    "parent": null,
    "methods": [
      "void InitPRAShapeData(array<ref array<float>> shapeDataArray)",
      "void Initialize()",
      "bool ValidatePlayerRestrictedAreaPositions()",
      "bool TranslateSafePositions()",
      "bool IsValid()"
    ]
  },
  "PlayerRestrictedAreaInstance": {
    "parent": null,
    "methods": [
      "void Initialize()",
      "bool ValidatePlayerRestrictedAreaPositions()",
      "bool TranslateSafePositions()",
      "bool IsValid()"
    ]
  },
  "Colors": {
    "parent": null,
    "methods": []
  },
  "FadeColors": {
    "parent": null,
    "methods": []
  },
  "HitDirectionConstants": {
    "parent": null,
    "methods": []
  },
  "EmoteConstants": {
    "parent": null,
    "methods": []
  },
  "SoundConstants": {
    "parent": null,
    "methods": []
  },
  "GameConstants": {
    "parent": null,
    "methods": []
  },
  "ControlSchemeManager": {
    "parent": null,
    "methods": [
      "static void SetControlScheme( EControlSchemeState state )"
    ]
  },
  "TotalDamageResult": {
    "parent": null,
    "methods": [
      "float GetDamage(string zoneName, string healthType)",
      "float GetHighestDamage(string healthType)",
      "void CloseCombatDamage(EntityAI source, Object targetObject, int targetComponentIndex, string ammoTypeName, vector worldPos, int directDamageFlags = ProcessDirectDamageFlags.ALL_TRANSFER)",
      "void CloseCombatDamageName(EntityAI source, Object targetObject, string targetComponentName, string ammoTypeName, vector worldPos, int directDamageFlags = ProcessDirectDamageFlags.ALL_TRANSFER)",
      "void ExplosionDamage(EntityAI source, Object directHitObject, string ammoTypeName, vector worldPos, int damageType)",
      "static bool GetDamageZoneMap(EntityAI entity, out DamageZoneMap zoneMap)",
      "static bool GetDamageZoneFromComponentName(notnull EntityAI entity, string component, out string damageZone)",
      "static bool GetComponentNamesFromDamageZone(notnull EntityAI entity, string damageZone, out array<string> componentNames)",
      "static string GetDamageDisplayName(EntityAI entity, string zone)",
      "static void ResetAllZones(EntityAI entity)"
    ]
  },
  "DamageSystem": {
    "parent": null,
    "methods": [
      "void CloseCombatDamage(EntityAI source, Object targetObject, int targetComponentIndex, string ammoTypeName, vector worldPos, int directDamageFlags = ProcessDirectDamageFlags.ALL_TRANSFER)",
      "void CloseCombatDamageName(EntityAI source, Object targetObject, string targetComponentName, string ammoTypeName, vector worldPos, int directDamageFlags = ProcessDirectDamageFlags.ALL_TRANSFER)",
      "void ExplosionDamage(EntityAI source, Object directHitObject, string ammoTypeName, vector worldPos, int damageType)",
      "static bool GetDamageZoneMap(EntityAI entity, out DamageZoneMap zoneMap)",
      "static bool GetDamageZoneFromComponentName(notnull EntityAI entity, string component, out string damageZone)",
      "static bool GetComponentNamesFromDamageZone(notnull EntityAI entity, string damageZone, out array<string> componentNames)",
      "static string GetDamageDisplayName(EntityAI entity, string zone)",
      "static void ResetAllZones(EntityAI entity)"
    ]
  },
  "SoundLookupTable": {
    "parent": null,
    "methods": [
      "void SoundLookupTable()",
      "void InitTable(string tableCategoryName, string parameterName)",
      "void LoadTable(string soundLookupTableName)",
      "void StepSoundLookupTable()",
      "void AttachmentSoundLookupTable()",
      "void PlayerVoiceLookupTable()",
      "void SetNoiseParam(NoiseParams param)",
      "void ImpactSoundLookupTable()",
      "void ActionSoundLookupTable()",
      "void AnimSoundObjectBuilderBank()",
      "void AnimSoundLookupTableBank()"
    ]
  },
  "StepSoundLookupTable": {
    "parent": "SoundLookupTable",
    "methods": [
      "void StepSoundLookupTable()",
      "void AttachmentSoundLookupTable()",
      "void PlayerVoiceLookupTable()",
      "void SetNoiseParam(NoiseParams param)",
      "void ImpactSoundLookupTable()",
      "void ActionSoundLookupTable()",
      "void AnimSoundObjectBuilderBank()",
      "void AnimSoundLookupTableBank()"
    ]
  },
  "AttachmentSoundLookupTable": {
    "parent": "SoundLookupTable",
    "methods": [
      "void AttachmentSoundLookupTable()",
      "void PlayerVoiceLookupTable()",
      "void SetNoiseParam(NoiseParams param)",
      "void ImpactSoundLookupTable()",
      "void ActionSoundLookupTable()",
      "void AnimSoundObjectBuilderBank()",
      "void AnimSoundLookupTableBank()"
    ]
  },
  "PlayerVoiceLookupTable": {
    "parent": "SoundLookupTable",
    "methods": [
      "void PlayerVoiceLookupTable()",
      "void SetNoiseParam(NoiseParams param)",
      "void ImpactSoundLookupTable()",
      "void ActionSoundLookupTable()",
      "void AnimSoundObjectBuilderBank()",
      "void AnimSoundLookupTableBank()"
    ]
  },
  "ImpactSoundLookupTable": {
    "parent": "SoundLookupTable",
    "methods": [
      "void ImpactSoundLookupTable()",
      "void ActionSoundLookupTable()",
      "void AnimSoundObjectBuilderBank()",
      "void AnimSoundLookupTableBank()"
    ]
  },
  "ActionSoundLookupTable": {
    "parent": "SoundLookupTable",
    "methods": [
      "void ActionSoundLookupTable()",
      "void AnimSoundObjectBuilderBank()",
      "void AnimSoundLookupTableBank()"
    ]
  },
  "AnimSoundObjectBuilderBank": {
    "parent": null,
    "methods": [
      "void AnimSoundObjectBuilderBank()",
      "void AnimSoundLookupTableBank()"
    ]
  },
  "AnimSoundLookupTableBank": {
    "parent": null,
    "methods": [
      "void AnimSoundLookupTableBank()"
    ]
  },
  "AnimSoundEvent": {
    "parent": null,
    "methods": [
      "void AnimSoundEvent(string soundPath)",
      "bool IsValid()",
      "void AnimSoundVoiceEvent(string soundPath)",
      "void AnimStepEvent(string stepPath)",
      "void AnimDamageEvent(string damagePath)",
      "void AnimDamageParams(string damageName)",
      "void AnimEffectParams(string effectName)"
    ]
  },
  "AnimSoundVoiceEvent": {
    "parent": null,
    "methods": [
      "void AnimSoundVoiceEvent(string soundPath)",
      "bool IsValid()",
      "void AnimStepEvent(string stepPath)",
      "void AnimDamageEvent(string damagePath)",
      "void AnimDamageParams(string damageName)",
      "void AnimEffectParams(string effectName)"
    ]
  },
  "AnimStepEvent": {
    "parent": null,
    "methods": [
      "void AnimStepEvent(string stepPath)",
      "void AnimDamageEvent(string damagePath)",
      "void AnimDamageParams(string damageName)",
      "void AnimEffectParams(string effectName)"
    ]
  },
  "AnimDamageEvent": {
    "parent": null,
    "methods": [
      "void AnimDamageEvent(string damagePath)",
      "void AnimDamageParams(string damageName)",
      "void AnimEffectParams(string effectName)"
    ]
  },
  "AnimDamageParams": {
    "parent": null,
    "methods": [
      "void AnimDamageParams(string damageName)",
      "void AnimEffectParams(string effectName)"
    ]
  },
  "AnimEffectParams": {
    "parent": null,
    "methods": [
      "void AnimEffectParams(string effectName)"
    ]
  },
  "ProjectileStoppedInfo": {
    "parent": null,
    "methods": [
      "string GetAmmoType()",
      "float GetProjectileDamage()",
      "int GetComponentIndex()",
      "bool GetIsWater()",
      "static void RegisterSoundSet(string sound_set)",
      "static string GetSoundSetByHash(int hash)",
      "void Update(float timeslice)",
      "void Leave()",
      "bool CanChangeHintPage(float timeAccu)",
      "bool IsStatic()",
      "bool IsHandlingPlayerDeathEvent()",
      "void LoginQueueBase()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Show()",
      "void Hide()",
      "void SetPosition(int position)",
      "void LoginQueueStatic()",
      "void LoginTimeBase()",
      "void SetTime(int time)",
      "void SetStatus(string status)",
      "void SetRespawn(bool value)",
      "bool IsRespawn()",
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "CollisionInfoBase": {
    "parent": null,
    "methods": [
      "int GetComponentIndex()",
      "bool GetIsWater()",
      "static void RegisterSoundSet(string sound_set)",
      "static string GetSoundSetByHash(int hash)",
      "void Update(float timeslice)",
      "void Leave()",
      "bool CanChangeHintPage(float timeAccu)",
      "bool IsStatic()",
      "bool IsHandlingPlayerDeathEvent()",
      "void LoginQueueBase()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Show()",
      "void Hide()",
      "void SetPosition(int position)",
      "void LoginQueueStatic()",
      "void LoginTimeBase()",
      "void SetTime(int time)",
      "void SetStatus(string status)",
      "void SetRespawn(bool value)",
      "bool IsRespawn()",
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "ObjectCollisionInfo": {
    "parent": null,
    "methods": [
      "int GetComponentIndex()",
      "bool GetIsWater()",
      "static void RegisterSoundSet(string sound_set)",
      "static string GetSoundSetByHash(int hash)",
      "void Update(float timeslice)",
      "void Leave()",
      "bool CanChangeHintPage(float timeAccu)",
      "bool IsStatic()",
      "bool IsHandlingPlayerDeathEvent()",
      "void LoginQueueBase()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Show()",
      "void Hide()",
      "void SetPosition(int position)",
      "void LoginQueueStatic()",
      "void LoginTimeBase()",
      "void SetTime(int time)",
      "void SetStatus(string status)",
      "void SetRespawn(bool value)",
      "bool IsRespawn()",
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "TerrainCollisionInfo": {
    "parent": null,
    "methods": [
      "bool GetIsWater()",
      "static void RegisterSoundSet(string sound_set)",
      "static string GetSoundSetByHash(int hash)",
      "void Update(float timeslice)",
      "void Leave()",
      "bool CanChangeHintPage(float timeAccu)",
      "bool IsStatic()",
      "bool IsHandlingPlayerDeathEvent()",
      "void LoginQueueBase()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Show()",
      "void Hide()",
      "void SetPosition(int position)",
      "void LoginQueueStatic()",
      "void LoginTimeBase()",
      "void SetTime(int time)",
      "void SetStatus(string status)",
      "void SetRespawn(bool value)",
      "bool IsRespawn()",
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "CrashSoundSets": {
    "parent": null,
    "methods": [
      "static void RegisterSoundSet(string sound_set)",
      "static string GetSoundSetByHash(int hash)",
      "void Update(float timeslice)",
      "void Leave()",
      "bool CanChangeHintPage(float timeAccu)",
      "bool IsStatic()",
      "bool IsHandlingPlayerDeathEvent()",
      "void LoginQueueBase()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Show()",
      "void Hide()",
      "void SetPosition(int position)",
      "void LoginQueueStatic()",
      "void LoginTimeBase()",
      "void SetTime(int time)",
      "void SetStatus(string status)",
      "void SetRespawn(bool value)",
      "bool IsRespawn()",
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "LoginScreenBase": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void Update(float timeslice)",
      "void Leave()",
      "bool CanChangeHintPage(float timeAccu)",
      "bool IsStatic()",
      "bool IsHandlingPlayerDeathEvent()",
      "void LoginQueueBase()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Show()",
      "void Hide()",
      "void SetPosition(int position)",
      "void LoginQueueStatic()",
      "void LoginTimeBase()",
      "void SetTime(int time)",
      "void SetStatus(string status)",
      "void SetRespawn(bool value)",
      "bool IsRespawn()",
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "LoginQueueBase": {
    "parent": "LoginScreenBase",
    "methods": [
      "void LoginQueueBase()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Show()",
      "void Hide()",
      "void SetPosition(int position)",
      "bool CanChangeHintPage(float timeAccu)",
      "void LoginQueueStatic()",
      "void LoginTimeBase()",
      "void SetTime(int time)",
      "void SetStatus(string status)",
      "void SetRespawn(bool value)",
      "bool IsRespawn()",
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "LoginQueueStatic": {
    "parent": "LoginQueueBase",
    "methods": [
      "void LoginQueueStatic()",
      "void LoginTimeBase()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Show()",
      "void Hide()",
      "void SetTime(int time)",
      "void SetStatus(string status)",
      "void SetRespawn(bool value)",
      "bool IsRespawn()",
      "bool CanChangeHintPage(float timeAccu)",
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "LoginTimeBase": {
    "parent": "LoginScreenBase",
    "methods": [
      "void LoginTimeBase()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Show()",
      "void Hide()",
      "void SetTime(int time)",
      "void SetStatus(string status)",
      "void SetRespawn(bool value)",
      "bool IsRespawn()",
      "bool CanChangeHintPage(float timeAccu)",
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "LoginTimeStatic": {
    "parent": "LoginTimeBase",
    "methods": [
      "void LoginTimeStatic()",
      "void ConnectionLost(DayZGame game)",
      "void Show()",
      "void Hide()",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetStatus(string status)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "ConnectionLost": {
    "parent": null,
    "methods": [
      "void ConnectionLost(DayZGame game)",
      "void Show()",
      "void Hide()",
      "void SetText(string text)",
      "float GetDuration()",
      "void SetDuration(float duration)",
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetStatus(string status)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "DayZProfilesOptions": {
    "parent": null,
    "methods": [
      "void DayZProfilesOptions()",
      "void RegisterProfileOption(EDayZProfilesOptions option, string profileOptionName, bool def = true)",
      "void RegisterProfileOptionBool(EDayZProfilesOptions option, string profileOptionName, bool defaultValue = true)",
      "void RegisterProfileOptionInt(EDayZProfilesOptions option, string profileOptionName, int defaultValue = 0)",
      "void RegisterProfileOptionFloat(EDayZProfilesOptions option, string profileOptionName, float defaultValue = 0.0)",
      "void ResetOptionsBool()",
      "void ResetOptions()",
      "void ResetOptionsInt()",
      "void ResetOptionsFloat()",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetStatus(string status)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Show()",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "LoadingScreen": {
    "parent": null,
    "methods": [
      "void LoadingScreen(DayZGame game)",
      "void OnTimer()",
      "void Inc()",
      "void Dec()",
      "void EndLoading()",
      "bool IsLoading()",
      "void SetTitle(string title)",
      "void SetStatus(string status)",
      "void SetProgress(float val)",
      "void OnUpdate(float timeslice)",
      "void ShowEx(DayZGame game)",
      "void Show()",
      "void Hide(bool force)",
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "DayZGame": {
    "parent": "CGame",
    "methods": [
      "void DayZGame()",
      "void DeferredInit()",
      "void GlobalsInit()",
      "void RegisterProfilesOptions()",
      "void ResetProfileOptions()",
      "void SetMissionPath(string path)",
      "string GetMissionPath()",
      "string GetMissionFolderPath()",
      "void OnGameplayDataHandlerLoad()",
      "int GetMissionState()",
      "void SetMissionState(int state)",
      "bool GetProfileOption(EDayZProfilesOptions option)",
      "bool GetProfileOptionBool(EDayZProfilesOptions option)",
      "int GetProfileOptionInt(EDayZProfilesOptions option)",
      "float GetProfileOptionFloat(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefault(EDayZProfilesOptions option)",
      "bool GetProfileOptionDefaultBool(EDayZProfilesOptions option)",
      "int GetProfileOptionDefaultInt(EDayZProfilesOptions option)",
      "float GetProfileOptionDefaultFloat(EDayZProfilesOptions option)",
      "void SetProfileOption(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionBool(EDayZProfilesOptions option, bool value)",
      "void SetProfileOptionInt(EDayZProfilesOptions option, int value)",
      "void SetProfileOptionFloat(EDayZProfilesOptions option, float value)",
      "bool IsStressTest()",
      "bool IsAimLogEnabled()",
      "void SetGameState(DayZGameState state)",
      "void SetLoadState(DayZLoadState state)",
      "static bool ReportModded()",
      "bool IsInventoryOpen()",
      "void EarlyAccessDialog(UIScriptedMenu parent)",
      "void ReloadMission()",
      "void CancelLoginQueue()",
      "void CancelLoginTimeCountdown()",
      "void ClearConnectivityStates()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void SetConnectivityStatState(EConnectivityStatType type, EConnectivityStatLevel level)",
      "bool OnConnectivityStatChange(EConnectivityStatType type, EConnectivityStatLevel newLevel, EConnectivityStatLevel oldLevel)",
      "void DrawPerformanceStats(float pingAct, float pingAvg, float throttleInput, float throttleOutput)",
      "void AddVoiceNotification(VONStopSpeakingEventParams vonStartParams)",
      "void RemoveVoiceNotification(VONStopSpeakingEventParams vonStopParams)",
      "void UpdateLoginQueue(float timeslice)",
      "void OnLoginTimeEvent(int loginTime)",
      "void LoginTimeCountdown()",
      "void OnRespawnEvent(int time)",
      "void OnPreloadEvent(vector pos)",
      "void StoreLoginDataPrepare()",
      "void EnterLoginQueue(UIMenuPanel parent)",
      "void EnterLoginTime(UIMenuPanel parent)",
      "void OnMPConnectionLostEvent(int duration)",
      "void LoadProgressUpdate(int progressState, float progress, string title)",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void InitNotifications()",
      "string GetDatabaseID()",
      "void SetDatabaseID(string id)",
      "void CreateTitleScreen()",
      "void DeleteTitleScreen()",
      "bool ShouldShowControllerDisconnect()",
      "void UpdateInputDeviceDisconnectWarning()",
      "void JoinLaunch()",
      "void ConnectLaunch()",
      "void PartyLaunch()",
      "void MainMenuLaunch()",
      "void MissionLaunch()",
      "void AutoTestLaunch(string param)",
      "void SelectUser(int gamepad = -1)",
      "void SetPreviousGamepad(int gamepad)",
      "int GetPreviousGamepad()",
      "void GamepadCheck()",
      "void SelectGamepad()",
      "void TryConnect()",
      "bool GetLastVisitedServer(out string ip, out int port)",
      "void AddVisitedServer(string ip, int port)",
      "bool IsVisited(string ip, int port)",
      "void RefreshCurrentServerInfo()",
      "void Connect()",
      "void DisconnectSessionScript(bool displayJoinError = false)",
      "void DisconnectSessionEx(DisconnectSessionFlags flags)",
      "void ConnectFromServerBrowser(string ip, int port, string password = )",
      "void ConnectFromServerBrowserEx(string ip, int port, int steamQueryPort, string password = )",
      "void ConnectFromJoin(string ip, int port)",
      "void ConnectFromCLI()",
      "bool IsLeftCtrlDown()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnDeviceReset()",
      "float GetDeltaT()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void DelayedMidAirDetonation(float x, float y, float z)",
      "void CheckDialogs()",
      "void SetConnecting(bool value)",
      "bool IsConnecting()",
      "bool IsLoading()",
      "void SetKeyboardHandle(UIScriptedMenu handler)",
      "void LoadingShow()",
      "void LoadingHide(bool force = false)",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "void ExplosionEffectsEx(Object source, Object directHit, int componentIndex, float energyFactor, float explosionFactor, HitInfo hitInfo)",
      "void ExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\tfloat energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnProjectileStopped(ProjectileStoppedInfo info)",
      "void OnProjectileStoppedInTerrain(TerrainCollisionInfo info)",
      "void OnProjectileStoppedInObject(ObjectCollisionInfo info)",
      "void FirearmEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t vector exitPos, vector inSpeed, vector outSpeed, bool isWater, bool deflected, string ammoType)",
      "void CloseCombatEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal,\r\n\t\t bool isWater, string ammoType)",
      "void UpdateVoiceLevel(int level)",
      "void InitCharacterMenuDataInfo(int menudata_count)",
      "void SetPlayerGameName(string name)",
      "string GetPlayerGameName()",
      "void SetNewCharacter(bool state)",
      "bool IsNewCharacter()",
      "void SetUserFOV(float pFov)",
      "float GetUserFOV()",
      "static float GetUserFOVFromConfig()",
      "float GetFOVByZoomType(ECameraZoomType type)",
      "void SetHudBrightness(float value)",
      "float GetHUDBrightnessSetting()",
      "static bool CheckAmmoCompability(EntityAI weaponInHand, EntityAI ammo)",
      "void SetEVValue(float value)",
      "float GetCurrentEVValue()",
      "float GetPreviousEVValue()",
      "int GetCurrentDisplayLanguageIdx()",
      "bool IsWorldWetTempUpdateEnabled()",
      "bool IsFoodDecayEnabled()",
      "float GetFoodDecayModifier()",
      "void SetMouseCursorDesiredVisibility(bool visible)",
      "bool GetMouseCursorDesiredVisibility()",
      "bool CanDisplayMouseCursor()",
      "void RefreshMouseCursorVisibility()",
      "void CreateGamepadDisconnectMenu()",
      "void DeleteGamepadDisconnectMenu()"
    ]
  },
  "DayZPlayerCameraResult": {
    "parent": null,
    "methods": [
      "void DayZPlayerCameraResult()",
      "void DayZPlayerCamera(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool CanFreeLook()",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "string GetCameraName()",
      "float GetCurrentYaw()",
      "float GetCurrentPitch()",
      "float GetCurrentRoll()",
      "bool IsCamera3rdRaised()",
      "void SpawnDiagCameraShake()",
      "void SpawnCameraShake(float strength = 1, float radius = 2, float smoothness = 5, float radius_decay_speed = 6)",
      "void SpawnCameraShakeProper(float strength, float radius, float smoothness, float radius_decay_speed)",
      "void SendRecoilOffsetZ(float offset)",
      "void VegetationSound(SoundObjectBuilder soundObjectBuilder, TIntArray animEventIds)",
      "void SetDefaultItemInHandsProfile(string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "void ResetItemInHandsProfiles()",
      "int AddItemInHandsProfile(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "int AddItemInHandsProfileIK(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg, string pIkPoseAnim, string pWeaponStates = )",
      "int AddItemBoneRemap(string pItemClass, array<string> pBoneRemap)",
      "void DebugPreloadAnimationInstances()",
      "void ResetCameraCreators()",
      "void RegisterCameraCreator(int pCameraID, typename pCameraType)",
      "void RegisterCameraOnChangeFnStatic(typename pClass, string pFnName)",
      "void RegisterCameraOnChangeFn(Class pInstance, string pFnName)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCameraShootParams(float pRayDistance, float pRayRadius, float pMaxAngleCos)",
      "int GetHeadBoneIdx()",
      "void RegisterStepEvent(string pEventType, float pFilterTimeout)",
      "void RegisterSoundEvent(string pEventType, float pFilterTimeout)",
      "void RegisterParticleEvent(string pEventType, float pFilterTimeout)",
      "void RegisterStepSoundLookupTable(DayZPlayerTypeStepSoundLookupTable pSSLUT)",
      "void RegisterAttachmentSoundLookupTable(DayZPlayerTypeAttachmentSoundLookupTable pASLUT)",
      "void RegisterVoiceSoundLookupTable(DayZPlayerTypeVoiceSoundLookupTable pASLUT)",
      "void RegisterSoundTable(DayZPlayerTypeAnimTable pST)",
      "void LoadSoundWeaponEvent()",
      "void LoadVegetationSounds()",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void DayZPlayerType()",
      "void SDayZPlayerHeadingModel()",
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "DayZPlayerCamera": {
    "parent": null,
    "methods": [
      "void DayZPlayerCamera(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool CanFreeLook()",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "string GetCameraName()",
      "float GetCurrentYaw()",
      "float GetCurrentPitch()",
      "float GetCurrentRoll()",
      "bool IsCamera3rdRaised()",
      "void SpawnDiagCameraShake()",
      "void SpawnCameraShake(float strength = 1, float radius = 2, float smoothness = 5, float radius_decay_speed = 6)",
      "void SpawnCameraShakeProper(float strength, float radius, float smoothness, float radius_decay_speed)",
      "void SendRecoilOffsetZ(float offset)",
      "void VegetationSound(SoundObjectBuilder soundObjectBuilder, TIntArray animEventIds)",
      "void SetDefaultItemInHandsProfile(string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "void ResetItemInHandsProfiles()",
      "int AddItemInHandsProfile(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "int AddItemInHandsProfileIK(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg, string pIkPoseAnim, string pWeaponStates = )",
      "int AddItemBoneRemap(string pItemClass, array<string> pBoneRemap)",
      "void DebugPreloadAnimationInstances()",
      "void ResetCameraCreators()",
      "void RegisterCameraCreator(int pCameraID, typename pCameraType)",
      "void RegisterCameraOnChangeFnStatic(typename pClass, string pFnName)",
      "void RegisterCameraOnChangeFn(Class pInstance, string pFnName)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCameraShootParams(float pRayDistance, float pRayRadius, float pMaxAngleCos)",
      "int GetHeadBoneIdx()",
      "void RegisterStepEvent(string pEventType, float pFilterTimeout)",
      "void RegisterSoundEvent(string pEventType, float pFilterTimeout)",
      "void RegisterParticleEvent(string pEventType, float pFilterTimeout)",
      "void RegisterStepSoundLookupTable(DayZPlayerTypeStepSoundLookupTable pSSLUT)",
      "void RegisterAttachmentSoundLookupTable(DayZPlayerTypeAttachmentSoundLookupTable pASLUT)",
      "void RegisterVoiceSoundLookupTable(DayZPlayerTypeVoiceSoundLookupTable pASLUT)",
      "void RegisterSoundTable(DayZPlayerTypeAnimTable pST)",
      "void LoadSoundWeaponEvent()",
      "void LoadVegetationSounds()",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void DayZPlayerType()",
      "void SDayZPlayerHeadingModel()",
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "DayZPlayerTypeStepSoundLookupTable": {
    "parent": null,
    "methods": [
      "void VegetationSound(SoundObjectBuilder soundObjectBuilder, TIntArray animEventIds)",
      "void SetDefaultItemInHandsProfile(string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "void ResetItemInHandsProfiles()",
      "int AddItemInHandsProfile(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "int AddItemInHandsProfileIK(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg, string pIkPoseAnim, string pWeaponStates = )",
      "int AddItemBoneRemap(string pItemClass, array<string> pBoneRemap)",
      "void DebugPreloadAnimationInstances()",
      "void ResetCameraCreators()",
      "void RegisterCameraCreator(int pCameraID, typename pCameraType)",
      "void RegisterCameraOnChangeFnStatic(typename pClass, string pFnName)",
      "void RegisterCameraOnChangeFn(Class pInstance, string pFnName)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCameraShootParams(float pRayDistance, float pRayRadius, float pMaxAngleCos)",
      "int GetHeadBoneIdx()",
      "void RegisterStepEvent(string pEventType, float pFilterTimeout)",
      "void RegisterSoundEvent(string pEventType, float pFilterTimeout)",
      "void RegisterParticleEvent(string pEventType, float pFilterTimeout)",
      "void RegisterStepSoundLookupTable(DayZPlayerTypeStepSoundLookupTable pSSLUT)",
      "void RegisterAttachmentSoundLookupTable(DayZPlayerTypeAttachmentSoundLookupTable pASLUT)",
      "void RegisterVoiceSoundLookupTable(DayZPlayerTypeVoiceSoundLookupTable pASLUT)",
      "void RegisterSoundTable(DayZPlayerTypeAnimTable pST)",
      "void LoadSoundWeaponEvent()",
      "void LoadVegetationSounds()",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void DayZPlayerType()",
      "void SDayZPlayerHeadingModel()",
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "DayZPlayerTypeVoiceSoundLookupTable": {
    "parent": null,
    "methods": [
      "void VegetationSound(SoundObjectBuilder soundObjectBuilder, TIntArray animEventIds)",
      "void SetDefaultItemInHandsProfile(string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "void ResetItemInHandsProfiles()",
      "int AddItemInHandsProfile(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "int AddItemInHandsProfileIK(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg, string pIkPoseAnim, string pWeaponStates = )",
      "int AddItemBoneRemap(string pItemClass, array<string> pBoneRemap)",
      "void DebugPreloadAnimationInstances()",
      "void ResetCameraCreators()",
      "void RegisterCameraCreator(int pCameraID, typename pCameraType)",
      "void RegisterCameraOnChangeFnStatic(typename pClass, string pFnName)",
      "void RegisterCameraOnChangeFn(Class pInstance, string pFnName)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCameraShootParams(float pRayDistance, float pRayRadius, float pMaxAngleCos)",
      "int GetHeadBoneIdx()",
      "void RegisterStepEvent(string pEventType, float pFilterTimeout)",
      "void RegisterSoundEvent(string pEventType, float pFilterTimeout)",
      "void RegisterParticleEvent(string pEventType, float pFilterTimeout)",
      "void RegisterStepSoundLookupTable(DayZPlayerTypeStepSoundLookupTable pSSLUT)",
      "void RegisterAttachmentSoundLookupTable(DayZPlayerTypeAttachmentSoundLookupTable pASLUT)",
      "void RegisterVoiceSoundLookupTable(DayZPlayerTypeVoiceSoundLookupTable pASLUT)",
      "void RegisterSoundTable(DayZPlayerTypeAnimTable pST)",
      "void LoadSoundWeaponEvent()",
      "void LoadVegetationSounds()",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void DayZPlayerType()",
      "void SDayZPlayerHeadingModel()",
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "DayZPlayerTypeAttachmentSoundLookupTable": {
    "parent": null,
    "methods": [
      "void VegetationSound(SoundObjectBuilder soundObjectBuilder, TIntArray animEventIds)",
      "void SetDefaultItemInHandsProfile(string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "void ResetItemInHandsProfiles()",
      "int AddItemInHandsProfile(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "int AddItemInHandsProfileIK(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg, string pIkPoseAnim, string pWeaponStates = )",
      "int AddItemBoneRemap(string pItemClass, array<string> pBoneRemap)",
      "void DebugPreloadAnimationInstances()",
      "void ResetCameraCreators()",
      "void RegisterCameraCreator(int pCameraID, typename pCameraType)",
      "void RegisterCameraOnChangeFnStatic(typename pClass, string pFnName)",
      "void RegisterCameraOnChangeFn(Class pInstance, string pFnName)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCameraShootParams(float pRayDistance, float pRayRadius, float pMaxAngleCos)",
      "int GetHeadBoneIdx()",
      "void RegisterStepEvent(string pEventType, float pFilterTimeout)",
      "void RegisterSoundEvent(string pEventType, float pFilterTimeout)",
      "void RegisterParticleEvent(string pEventType, float pFilterTimeout)",
      "void RegisterStepSoundLookupTable(DayZPlayerTypeStepSoundLookupTable pSSLUT)",
      "void RegisterAttachmentSoundLookupTable(DayZPlayerTypeAttachmentSoundLookupTable pASLUT)",
      "void RegisterVoiceSoundLookupTable(DayZPlayerTypeVoiceSoundLookupTable pASLUT)",
      "void RegisterSoundTable(DayZPlayerTypeAnimTable pST)",
      "void LoadSoundWeaponEvent()",
      "void LoadVegetationSounds()",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void DayZPlayerType()",
      "void SDayZPlayerHeadingModel()",
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "DayZPlayerTypeAnimTable": {
    "parent": null,
    "methods": [
      "void VegetationSound(SoundObjectBuilder soundObjectBuilder, TIntArray animEventIds)",
      "void SetDefaultItemInHandsProfile(string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "void ResetItemInHandsProfiles()",
      "int AddItemInHandsProfile(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "int AddItemInHandsProfileIK(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg, string pIkPoseAnim, string pWeaponStates = )",
      "int AddItemBoneRemap(string pItemClass, array<string> pBoneRemap)",
      "void DebugPreloadAnimationInstances()",
      "void ResetCameraCreators()",
      "void RegisterCameraCreator(int pCameraID, typename pCameraType)",
      "void RegisterCameraOnChangeFnStatic(typename pClass, string pFnName)",
      "void RegisterCameraOnChangeFn(Class pInstance, string pFnName)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCameraShootParams(float pRayDistance, float pRayRadius, float pMaxAngleCos)",
      "int GetHeadBoneIdx()",
      "void RegisterStepEvent(string pEventType, float pFilterTimeout)",
      "void RegisterSoundEvent(string pEventType, float pFilterTimeout)",
      "void RegisterParticleEvent(string pEventType, float pFilterTimeout)",
      "void RegisterStepSoundLookupTable(DayZPlayerTypeStepSoundLookupTable pSSLUT)",
      "void RegisterAttachmentSoundLookupTable(DayZPlayerTypeAttachmentSoundLookupTable pASLUT)",
      "void RegisterVoiceSoundLookupTable(DayZPlayerTypeVoiceSoundLookupTable pASLUT)",
      "void RegisterSoundTable(DayZPlayerTypeAnimTable pST)",
      "void LoadSoundWeaponEvent()",
      "void LoadVegetationSounds()",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void DayZPlayerType()",
      "void SDayZPlayerHeadingModel()",
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "VegetationSound": {
    "parent": null,
    "methods": [
      "void VegetationSound(SoundObjectBuilder soundObjectBuilder, TIntArray animEventIds)",
      "void SetDefaultItemInHandsProfile(string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "void ResetItemInHandsProfiles()",
      "int AddItemInHandsProfile(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "int AddItemInHandsProfileIK(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg, string pIkPoseAnim, string pWeaponStates = )",
      "int AddItemBoneRemap(string pItemClass, array<string> pBoneRemap)",
      "void DebugPreloadAnimationInstances()",
      "void ResetCameraCreators()",
      "void RegisterCameraCreator(int pCameraID, typename pCameraType)",
      "void RegisterCameraOnChangeFnStatic(typename pClass, string pFnName)",
      "void RegisterCameraOnChangeFn(Class pInstance, string pFnName)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCameraShootParams(float pRayDistance, float pRayRadius, float pMaxAngleCos)",
      "int GetHeadBoneIdx()",
      "void RegisterStepEvent(string pEventType, float pFilterTimeout)",
      "void RegisterSoundEvent(string pEventType, float pFilterTimeout)",
      "void RegisterParticleEvent(string pEventType, float pFilterTimeout)",
      "void RegisterStepSoundLookupTable(DayZPlayerTypeStepSoundLookupTable pSSLUT)",
      "void RegisterAttachmentSoundLookupTable(DayZPlayerTypeAttachmentSoundLookupTable pASLUT)",
      "void RegisterVoiceSoundLookupTable(DayZPlayerTypeVoiceSoundLookupTable pASLUT)",
      "void RegisterSoundTable(DayZPlayerTypeAnimTable pST)",
      "void LoadSoundWeaponEvent()",
      "void LoadVegetationSounds()",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void DayZPlayerType()",
      "void SDayZPlayerHeadingModel()",
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "DayZPlayerType": {
    "parent": null,
    "methods": [
      "void SetDefaultItemInHandsProfile(string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "void ResetItemInHandsProfiles()",
      "int AddItemInHandsProfile(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg)",
      "int AddItemInHandsProfileIK(string pItemClass, string pAnimInstanceName, HumanItemBehaviorCfg pBehaviorCfg, string pIkPoseAnim, string pWeaponStates = )",
      "int AddItemBoneRemap(string pItemClass, array<string> pBoneRemap)",
      "void DebugPreloadAnimationInstances()",
      "void ResetCameraCreators()",
      "void RegisterCameraCreator(int pCameraID, typename pCameraType)",
      "void RegisterCameraOnChangeFnStatic(typename pClass, string pFnName)",
      "void RegisterCameraOnChangeFn(Class pInstance, string pFnName)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCameraShootParams(float pRayDistance, float pRayRadius, float pMaxAngleCos)",
      "int GetHeadBoneIdx()",
      "void RegisterStepEvent(string pEventType, float pFilterTimeout)",
      "void RegisterSoundEvent(string pEventType, float pFilterTimeout)",
      "void RegisterParticleEvent(string pEventType, float pFilterTimeout)",
      "void RegisterStepSoundLookupTable(DayZPlayerTypeStepSoundLookupTable pSSLUT)",
      "void RegisterAttachmentSoundLookupTable(DayZPlayerTypeAttachmentSoundLookupTable pASLUT)",
      "void RegisterVoiceSoundLookupTable(DayZPlayerTypeVoiceSoundLookupTable pASLUT)",
      "void RegisterSoundTable(DayZPlayerTypeAnimTable pST)",
      "void LoadSoundWeaponEvent()",
      "void LoadVegetationSounds()",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void DayZPlayerType()",
      "void SDayZPlayerHeadingModel()",
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "SDayZPlayerHeadingModel": {
    "parent": null,
    "methods": [
      "void SDayZPlayerHeadingModel()",
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "SDayZPlayerAimingModel": {
    "parent": null,
    "methods": [
      "void SDayZPlayerAimingModel()",
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "DayZPlayer": {
    "parent": "Human",
    "methods": [
      "string GetDebugName()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void GetCurrentCameraTransform(out vector position, out vector direction, out vector rotation)",
      "int GetCurrentPerItemCameraUD()",
      "bool IsCameraBlending()",
      "void AnimCallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void AnimSetFloat(int pVar, float pFlt)",
      "void AnimSetInt(int pVar, int pInt)",
      "void AnimSetBool(int pVar, bool pBool)",
      "int Random()",
      "float RandomRange(int pRange)",
      "float Random01()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "bool IsHoldingBreath()",
      "bool IsPerformingFBGesture()",
      "bool IsInThirdPerson()",
      "void ProcessMeleeHit(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, int pComponentIndex, vector pHitWorldPos)",
      "void ProcessMeleeHitName(InventoryItem pMeleeWeapon, int pMeleeModeIndex, Object pTarget, string pComponentName, vector pHitWorldPos)",
      "void ReleaseNetworkControls()",
      "void SendSyncJuncture(int pJunctureID, ParamsWriteContext ctx)",
      "void StoreInputForRemotes(ParamsWriteContext ctx)",
      "bool DebugSyncShadowSetup(DayZPlayer pPlayer)",
      "void SetLookLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void GetLookLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetAimLimits(float pDown, float pUp, float pLeft, float pRight)",
      "void GetAimLimits(out float pDown, out float pUp, out float pLeft, out float pRight)",
      "void SetVerticalMinimumAimLimit(float value)",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "float GetCurrentWaterLevel()",
      "bool IsPlayerInStance(int pStanceMask)",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "float IsPlayerSpeaking()",
      "void UpdateDummyPlayerProxyVisibility(EntityAI shoulder, EntityAI melee)",
      "void ForceStandUpForHeavyItems(notnull EntityAI item)",
      "void ForceStandUpForHeavyItemsSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void OnCommandDeathStart()"
    ]
  },
  "DebugWeatherRPCData": {
    "parent": null,
    "methods": []
  },
  "Effect": {
    "parent": null,
    "methods": [
      "void Effect()",
      "void InitEffect()",
      "bool IsSound()",
      "bool IsParticle()",
      "void Start()",
      "void ValidateStart()",
      "void Stop()",
      "bool IsPlaying()",
      "void Destroy()",
      "void SetAutodestroy(bool auto_destroy)",
      "bool IsAutodestroy()",
      "bool IsPendingDeletion()",
      "bool CanDestroy()",
      "void SetEnableEventFrame(bool enable)",
      "void Event_OnStarted()",
      "void Event_OnStopped()",
      "void Event_OnEffectStarted()",
      "void Event_OnEffectEnded()",
      "void Event_OnFrameUpdate(float time_delta)",
      "void Event_OnRegistered(int id)",
      "void Event_OnUnregistered()",
      "void OnCheckUpdate()",
      "void Setparent(Object parent_obj)",
      "void SetCurrentparent( Object parent_obj, bool updateCached = true )",
      "void SetPosition( vector pos )",
      "void SetCurrentPosition( vector pos, bool updateCached = true )",
      "void SetLocalPosition( vector pos )",
      "void SetCurrentLocalPosition( vector pos, bool updateCached = true )",
      "void SetID(int id)",
      "int GetID()",
      "bool IsRegistered()",
      "void SetAttachmentparent(Object obj)",
      "void SetAttachedLocalPos(vector pos)",
      "void SetAttachedLocalOri(vector ori)"
    ]
  },
  "SEffectManager": {
    "parent": null,
    "methods": [
      "static int PlayInWorld(notnull Effect eff, vector pos)",
      "static int PlayOnObject(notnull Effect eff, Object obj, vector local_pos = , vector local_ori = , bool force_rotation_relative_to_world = false)",
      "static void Stop(int effect_id)",
      "static void DestroyEffect(Effect effect)",
      "static bool IsEffectExist( int effect_id )",
      "static int EffectRegister(Effect effect)",
      "static int GetFreeEffecterID()",
      "static void EffectUnregister(int id)",
      "static void EffectUnregisterEx(Effect effect)",
      "static int GetFreeEffectID()",
      "static bool DestroySound(EffectSound sound_effect)",
      "static void Event_OnSoundWaveEnded(EffectSound effect_sound)",
      "static void Event_OnFrameUpdate(float time_delta)",
      "static void Init()",
      "static void InitServer()",
      "static void Cleanup()",
      "static int CreateParticleServer(vector pos, EffecterParameters parameters)",
      "static void ReinitParticleServer(int effecterID, EffecterParameters parameters)",
      "static void ReactivateParticleServer(int effecterID)",
      "static void StartParticleServer(int effecterID)",
      "static void StopParticleServer(int effecterID)",
      "static void DestroyEffecterParticleServer(int effecterID)",
      "static void OnUpdate(float timeslice)",
      "void EffecterParameters(string type, float lifespan)",
      "void ParticleEffecterParameters(string type, float lifespan, int particleID)",
      "void EffecterBase()",
      "void Init(int id, EffecterParameters parameters)",
      "void DecreaseLifespan(float timeSlice)",
      "void SetLifespan(float lifespan)",
      "void Start()",
      "void Stop()",
      "void Reactivate()",
      "void Process()",
      "int GetHideIconMask()",
      "void ParticleEffecter(int lifespan)",
      "void SetParticle(int particleID)",
      "void OnVariablesSynchronized()",
      "void EffectParticleGeneral()",
      "void SetParticle( int particleID )",
      "void SetParticleID( int id )"
    ]
  },
  "EffecterParameters": {
    "parent": null,
    "methods": [
      "void EffecterParameters(string type, float lifespan)",
      "void ParticleEffecterParameters(string type, float lifespan, int particleID)",
      "void EffecterBase()",
      "void Init(int id, EffecterParameters parameters)",
      "void DecreaseLifespan(float timeSlice)",
      "void SetLifespan(float lifespan)",
      "void Start()",
      "void Stop()",
      "void Reactivate()",
      "void Process()",
      "int GetHideIconMask()",
      "void ParticleEffecter(int lifespan)",
      "void SetParticle(int particleID)",
      "void OnVariablesSynchronized()",
      "void EffectParticleGeneral()",
      "void SetParticle( int particleID )",
      "void SetParticleID( int id )"
    ]
  },
  "ParticleEffecterParameters": {
    "parent": null,
    "methods": [
      "void ParticleEffecterParameters(string type, float lifespan, int particleID)",
      "void EffecterBase()",
      "void Init(int id, EffecterParameters parameters)",
      "void DecreaseLifespan(float timeSlice)",
      "void SetLifespan(float lifespan)",
      "void Start()",
      "void Stop()",
      "void Reactivate()",
      "void Process()",
      "int GetHideIconMask()",
      "void ParticleEffecter(int lifespan)",
      "void SetParticle(int particleID)",
      "void OnVariablesSynchronized()",
      "void EffectParticleGeneral()",
      "void SetParticle( int particleID )",
      "void SetParticleID( int id )"
    ]
  },
  "EffecterBase": {
    "parent": null,
    "methods": [
      "void EffecterBase()",
      "void Init(int id, EffecterParameters parameters)",
      "void DecreaseLifespan(float timeSlice)",
      "void SetLifespan(float lifespan)",
      "void Start()",
      "void Stop()",
      "void Reactivate()",
      "void Process()",
      "int GetHideIconMask()",
      "void ParticleEffecter(int lifespan)",
      "void SetParticle(int particleID)",
      "void OnVariablesSynchronized()",
      "void EffectParticleGeneral()",
      "void SetParticle( int particleID )",
      "void SetParticleID( int id )"
    ]
  },
  "ParticleEffecter": {
    "parent": null,
    "methods": [
      "void ParticleEffecter(int lifespan)",
      "void Init(int id, EffecterParameters parameters)",
      "void SetParticle(int particleID)",
      "void OnVariablesSynchronized()",
      "void EffectParticleGeneral()",
      "void SetParticle( int particleID )",
      "void SetParticleID( int id )"
    ]
  },
  "EffectParticleGeneral": {
    "parent": null,
    "methods": [
      "void EffectParticleGeneral()",
      "void SetParticle( int particleID )",
      "void SetParticleID( int id )"
    ]
  },
  "JsonSerializer": {
    "parent": null,
    "methods": [
      "void JsonSerializer()",
      "bool WriteToString(void variable_out, bool nice, out string result)",
      "bool ReadFromString(void variable_in, string jsonString, out string error)",
      "void ScriptRPC()",
      "void Reset()",
      "void Send(Object target, int rpc_type, bool guaranteed,PlayerIdentity recipient = NULL)",
      "void ScriptInputUserData()",
      "void Send()",
      "bool CopyFrom(ParamsReadContext other)",
      "static bool CanStoreInputUserData()",
      "void ScriptReadWriteContext()",
      "void ScriptRemoteInputUserData()",
      "void ScriptJunctureData()",
      "int GetModesCount()",
      "string GetModeName(int index)",
      "string GetAmmoTypeName(int index)",
      "float GetModeRange(int index)",
      "void MeleeCombatData()",
      "void Selection()",
      "string GetName()",
      "int GetVertexCount()",
      "int GetLODVertexIndex(int sel_vertex_index)",
      "void LOD()",
      "int GetSelectionCount()",
      "bool GetSelections(notnull out array<Selection> selections)",
      "string GetName(Object myObject)",
      "int GetPropertyCount()",
      "string GetPropertyName(int index)",
      "string GetPropertyValue(int index)",
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "ScriptRPC": {
    "parent": null,
    "methods": [
      "void ScriptRPC()",
      "void Reset()",
      "void Send(Object target, int rpc_type, bool guaranteed,PlayerIdentity recipient = NULL)",
      "void ScriptInputUserData()",
      "void Send()",
      "bool CopyFrom(ParamsReadContext other)",
      "static bool CanStoreInputUserData()",
      "void ScriptReadWriteContext()",
      "void ScriptRemoteInputUserData()",
      "void ScriptJunctureData()",
      "int GetModesCount()",
      "string GetModeName(int index)",
      "string GetAmmoTypeName(int index)",
      "float GetModeRange(int index)",
      "void MeleeCombatData()",
      "void Selection()",
      "string GetName()",
      "int GetVertexCount()",
      "int GetLODVertexIndex(int sel_vertex_index)",
      "void LOD()",
      "int GetSelectionCount()",
      "bool GetSelections(notnull out array<Selection> selections)",
      "string GetName(Object myObject)",
      "int GetPropertyCount()",
      "string GetPropertyName(int index)",
      "string GetPropertyValue(int index)",
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "ScriptInputUserData": {
    "parent": null,
    "methods": [
      "void ScriptInputUserData()",
      "void Reset()",
      "void Send()",
      "bool CopyFrom(ParamsReadContext other)",
      "static bool CanStoreInputUserData()",
      "void ScriptReadWriteContext()",
      "void ScriptRemoteInputUserData()",
      "void ScriptJunctureData()",
      "int GetModesCount()",
      "string GetModeName(int index)",
      "string GetAmmoTypeName(int index)",
      "float GetModeRange(int index)",
      "void MeleeCombatData()",
      "void Selection()",
      "string GetName()",
      "int GetVertexCount()",
      "int GetLODVertexIndex(int sel_vertex_index)",
      "void LOD()",
      "int GetSelectionCount()",
      "bool GetSelections(notnull out array<Selection> selections)",
      "string GetName(Object myObject)",
      "int GetPropertyCount()",
      "string GetPropertyName(int index)",
      "string GetPropertyValue(int index)",
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "ScriptReadWriteContext": {
    "parent": null,
    "methods": [
      "void ScriptReadWriteContext()",
      "void ScriptRemoteInputUserData()",
      "void Reset()",
      "void ScriptJunctureData()",
      "int GetModesCount()",
      "string GetModeName(int index)",
      "string GetAmmoTypeName(int index)",
      "float GetModeRange(int index)",
      "void MeleeCombatData()",
      "void Selection()",
      "string GetName()",
      "int GetVertexCount()",
      "int GetLODVertexIndex(int sel_vertex_index)",
      "void LOD()",
      "int GetSelectionCount()",
      "bool GetSelections(notnull out array<Selection> selections)",
      "string GetName(Object myObject)",
      "int GetPropertyCount()",
      "string GetPropertyName(int index)",
      "string GetPropertyValue(int index)",
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "ScriptRemoteInputUserData": {
    "parent": null,
    "methods": [
      "void ScriptRemoteInputUserData()",
      "void Reset()",
      "void ScriptJunctureData()",
      "int GetModesCount()",
      "string GetModeName(int index)",
      "string GetAmmoTypeName(int index)",
      "float GetModeRange(int index)",
      "void MeleeCombatData()",
      "void Selection()",
      "string GetName()",
      "int GetVertexCount()",
      "int GetLODVertexIndex(int sel_vertex_index)",
      "void LOD()",
      "int GetSelectionCount()",
      "bool GetSelections(notnull out array<Selection> selections)",
      "string GetName(Object myObject)",
      "int GetPropertyCount()",
      "string GetPropertyName(int index)",
      "string GetPropertyValue(int index)",
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "ScriptJunctureData": {
    "parent": null,
    "methods": [
      "void ScriptJunctureData()",
      "void Reset()",
      "int GetModesCount()",
      "string GetModeName(int index)",
      "string GetAmmoTypeName(int index)",
      "float GetModeRange(int index)",
      "void MeleeCombatData()",
      "void Selection()",
      "string GetName()",
      "int GetVertexCount()",
      "int GetLODVertexIndex(int sel_vertex_index)",
      "void LOD()",
      "int GetSelectionCount()",
      "bool GetSelections(notnull out array<Selection> selections)",
      "string GetName(Object myObject)",
      "int GetPropertyCount()",
      "string GetPropertyName(int index)",
      "string GetPropertyValue(int index)",
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "MeleeCombatData": {
    "parent": null,
    "methods": [
      "int GetModesCount()",
      "string GetModeName(int index)",
      "string GetAmmoTypeName(int index)",
      "float GetModeRange(int index)",
      "void MeleeCombatData()",
      "void Selection()",
      "string GetName()",
      "int GetVertexCount()",
      "int GetLODVertexIndex(int sel_vertex_index)",
      "void LOD()",
      "int GetSelectionCount()",
      "bool GetSelections(notnull out array<Selection> selections)",
      "string GetName(Object myObject)",
      "int GetPropertyCount()",
      "string GetPropertyName(int index)",
      "string GetPropertyValue(int index)",
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "Selection": {
    "parent": null,
    "methods": [
      "void Selection()",
      "string GetName()",
      "int GetVertexCount()",
      "int GetLODVertexIndex(int sel_vertex_index)",
      "void LOD()",
      "int GetSelectionCount()",
      "bool GetSelections(notnull out array<Selection> selections)",
      "string GetName(Object myObject)",
      "int GetPropertyCount()",
      "string GetPropertyName(int index)",
      "string GetPropertyValue(int index)",
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "LOD": {
    "parent": null,
    "methods": [
      "void LOD()",
      "int GetSelectionCount()",
      "bool GetSelections(notnull out array<Selection> selections)",
      "string GetName(Object myObject)",
      "int GetPropertyCount()",
      "string GetPropertyName(int index)",
      "string GetPropertyValue(int index)",
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetName()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "Plant": {
    "parent": "Object",
    "methods": [
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetName()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "ProxyInventory": {
    "parent": "ObjectTyped",
    "methods": [
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetName()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "ProxySubpart": {
    "parent": "Entity",
    "methods": [
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetName()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "ItemPreviewWidget": {
    "parent": null,
    "methods": [
      "void SetItem(EntityAI object)",
      "int GetView()",
      "void SetView(int viewIndex)",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void SetForceFlipEnable(bool enable)",
      "void SetForceFlip(bool value)",
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetName()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "PlayerPreviewWidget": {
    "parent": null,
    "methods": [
      "void UpdateItemInHands(EntityAI object)",
      "void SetPlayer(DayZPlayer player)",
      "void Refresh()",
      "void SetModelOrientation(vector vOrientation)",
      "void SetModelPosition(vector vPos)",
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetName()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "HtmlWidget": {
    "parent": "RichTextWidget",
    "methods": [
      "void LoadFile(string path)",
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetName()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "MapWidget": {
    "parent": null,
    "methods": [
      "void ClearUserMarks()",
      "void AddUserMark(vector pos, string text, int color , string texturePath)",
      "void SetMapPos(vector worldPos)",
      "float GetScale()",
      "void SetScale(float scale)",
      "float GetContourInterval()",
      "float GetCellSize(float pLegendWidth)",
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetName()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "PlayerIdentityBase": {
    "parent": null,
    "methods": [
      "int GetPingAct()",
      "int GetPingMin()",
      "int GetPingMax()",
      "int GetPingAvg()",
      "int GetBandwidthMin()",
      "int GetBandwidthMax()",
      "int GetBandwidthAvg()",
      "float GetOutputThrottle()",
      "float GetInputThrottle()",
      "string GetName()",
      "string GetPlainName()",
      "string GetFullName()",
      "string GetId()",
      "string GetPlainId()",
      "int GetPlayerId()",
      "void PlayerIdentityBase()",
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "PlayerIdentity": {
    "parent": null,
    "methods": [
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "CursorIcons": {
    "parent": null,
    "methods": [
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "Hud": {
    "parent": null,
    "methods": [
      "void Init(Widget hud_panel_widget)",
      "void DisplayNotifier(int key, int tendency, int status)",
      "void DisplayBadge(int key, int value)",
      "void SetStamina(int value, int range)",
      "void DisplayStance(int stance)",
      "void DisplayPresence()",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIcon(string icon)",
      "void SetCursorIconScale(string type, float percentage)",
      "void SetCursorIconOffset(string type, float x, float y)",
      "void SetCursorIconSize(string type, float x, float y)",
      "void ShowWalkieTalkie(bool show)",
      "void ShowWalkieTalkie(int fadeOutSeconds)",
      "void SetWalkieTalkieText(string text)",
      "void RefreshQuickbar(bool itemChanged = false)",
      "void Show(bool show)",
      "void UpdateBloodName()",
      "void SetTemperature(string temp)",
      "void SetStaminaBarVisibility(bool show)",
      "void Update(float timeslice)",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void InitHeatBufferUI(Man player)",
      "void ShowQuickbarUI(bool show)",
      "void ShowQuickbarPlayer(bool show)",
      "void ShowHudPlayer(bool show)",
      "void ShowHudUI(bool show)",
      "void ShowHudInventory(bool show)",
      "void ShowQuickBar(bool show)",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowHud(bool show)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void SetPermanentCrossHair(bool show)",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "Mission": {
    "parent": null,
    "methods": [
      "void OnInit()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void AddDummyPlayerToScheduler(Man player)",
      "void Reset()",
      "void ResetGUI()",
      "void OnGameplayDataHandlerLoad()",
      "bool IsPlayerDisconnecting(Man player)",
      "bool IsPaused()",
      "bool IsGame()",
      "bool IsServer()",
      "void Pause()",
      "void Continue()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsMissionGameplay()",
      "bool IsControlDisabled()",
      "int GetControlDisabledMode()",
      "void PlayerControlEnable(bool bForceSupress)",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "void EnableAllInputs(bool bForceSupress = false)",
      "void ShowInventory()",
      "void HideInventory()",
      "void ShowChat()",
      "void HideChat()",
      "void UpdateVoiceLevelWidgets(int level)",
      "void HideVoiceLevelWidgets()",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "bool InsertCorpse(Man player)",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void SetPlayerRespawning(bool state)",
      "void OnPlayerRespawned(Man player)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)",
      "int GetTimeStamp()",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "MenuData": {
    "parent": null,
    "methods": [
      "int GetCharactersCount()",
      "int GetLastPlayedCharacter()",
      "void GetLastServerAddress(int index, out string address)",
      "int GetLastServerPort(int index)",
      "int GetLastSteamQueryPort(int index)",
      "void GetLastServerName(int index, out string address)",
      "void RequestSetDefaultCharacterData()",
      "bool RequestGetDefaultCharacterData()",
      "void OnSetDefaultCharacter(ParamsWriteContext ctx)",
      "bool OnGetDefaultCharacter(ParamsReadContext ctx)",
      "void GetCharacterName(int index, out string name)",
      "void SetCharacterName(int index, string newName)",
      "void SaveCharacter(bool localPlayer, bool verified)",
      "void SaveDefaultCharacter(Man character)",
      "void SaveCharactersLocal()",
      "void LoadCharactersLocal()",
      "void ClearCharacters()",
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "MenuDefaultCharacterData": {
    "parent": null,
    "methods": [
      "void MenuDefaultCharacterData()",
      "void Init()",
      "void ClearAttachmentsMap()",
      "void SetDefaultAttachment(int slotID, string type)",
      "void GenerateRandomEquip()",
      "void EquipDefaultCharacter(Man player)",
      "void SerializeCharacterData(ParamsWriteContext ctx)",
      "bool DeserializeCharacterData(ParamsReadContext ctx)",
      "void SetCharacterName(string name)",
      "string GetCharacterName()",
      "void SetCharacterType(string character_type)",
      "string GetCharacterType()",
      "void SetRandomCharacterForced(bool state)",
      "bool IsRandomCharacterForced()",
      "void DumpAttMapContents()",
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "DefaultCharacterCreationmethods": {
    "parent": null,
    "methods": [
      "static string GetPathFromSlotID(int slot_ID)",
      "static int GetConfigArrayCountFromSlotID(int slot_ID)",
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "OptionsAccess": {
    "parent": null,
    "methods": [
      "int GetAccessType()",
      "int GetControlType()",
      "void Apply()",
      "void Test()",
      "void Revert()",
      "int IsChanged()",
      "int NeedRestart()",
      "int SetChangeImmediately()",
      "void SetScriptEvents(Managed events)",
      "void OnRevert()",
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetOptionsCount()",
      "void Initialize()"
    ]
  },
  "OptionsAccessEvents": {
    "parent": null,
    "methods": [
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "void Apply()",
      "void Revert()",
      "void Test()",
      "int GetOptionsCount()",
      "int NeedRestart()",
      "int IsChanged()",
      "void Initialize()"
    ]
  },
  "NumericOptionsAccess": {
    "parent": "OptionsAccess",
    "methods": [
      "float ReadValue()",
      "void WriteValue(float value)",
      "float GetMin()",
      "float GetMax()",
      "float GetDefault()",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "void Apply()",
      "void Revert()",
      "void Test()",
      "int GetOptionsCount()",
      "int NeedRestart()",
      "int IsChanged()",
      "void Initialize()"
    ]
  },
  "ListOptionsAccess": {
    "parent": "OptionsAccess",
    "methods": [
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void SetIndex(int index)",
      "int GetItemsCount()",
      "void GetItemText(int index, out string value)",
      "void GetAllItemsText(array<string> output)",
      "void Switch()",
      "void GetItemText(out string value)",
      "void Apply()",
      "void Revert()",
      "void Test()",
      "int GetOptionsCount()",
      "int NeedRestart()",
      "int IsChanged()",
      "void Initialize()"
    ]
  },
  "SwitchOptionsAccess": {
    "parent": "OptionsAccess",
    "methods": [
      "void Switch()",
      "void GetItemText(out string value)",
      "int GetIndex()",
      "int GetDefaultIndex()",
      "void Apply()",
      "void Revert()",
      "void Test()",
      "int GetOptionsCount()",
      "int NeedRestart()",
      "int IsChanged()",
      "void Initialize()"
    ]
  },
  "GameOptions": {
    "parent": null,
    "methods": [
      "void Apply()",
      "void Revert()",
      "void Test()",
      "int GetOptionsCount()",
      "int NeedRestart()",
      "int IsChanged()",
      "void Initialize()"
    ]
  },
  "Static": {
    "parent": null,
    "methods": []
  },
  "PrtTest": {
    "parent": null,
    "methods": []
  },
  "GameplayEffectWidgets_base": {
    "parent": "Managed",
    "methods": [
      "void IncreaseMaskUpdateCount()",
      "void ResetMaskUpdateCount()",
      "bool IsAnyEffectRunning()",
      "bool AreEffectsSuspended()",
      "void AddActiveEffects(array<int> effects)",
      "void RemoveActiveEffects(array<int> effects)",
      "void StopAllEffects()",
      "void AddSuspendRequest(int request_id)",
      "void RemoveSuspendRequest(int request_id)",
      "void ClearSuspendRequests()",
      "int GetSuspendRequestCount()",
      "void UpdateWidgets(int type = -1, float timeSlice = 0, Param p = null, int handle = -1)",
      "void Update(float timeSlice)",
      "void OnVoiceEvent(float breathing_resistance01)",
      "void SetBreathIntensityStamina(float stamina_cap, float stamina_current)",
      "void RegisterGameplayEffectData(int id, Param p)"
    ]
  },
  "HiddenSelectionsData": {
    "parent": null,
    "methods": [
      "void HiddenSelectionsData(string type)",
      "int GetHiddenSelectionIndex(string selection)"
    ]
  },
  "HitInfo": {
    "parent": null,
    "methods": [
      "float GetSurfaceNoiseMultiplier()",
      "string GetAmmoType()",
      "string GetSurface()",
      "bool IsWater()"
    ]
  },
  "HumanInputController": {
    "parent": null,
    "methods": [
      "void SetDisabled(bool pState)",
      "void GetMovement(out float pSpeed, out vector pLocalDirection)",
      "float GetHeadingAngle()",
      "bool CameraViewChanged()",
      "bool CameraIsFreeLook()",
      "void ResetFreeLookToggle()",
      "bool CameraIsTracking()",
      "bool Camera3rdIsRightShoulder()",
      "bool IsStanceChange()",
      "bool IsJumpClimb()",
      "bool IsMeleeEvade()",
      "bool IsMeleeFastAttackModifier()",
      "int IsMeleeLREvade()",
      "bool IsMeleeWeaponAttack()",
      "bool WeaponWasRaiseClick()",
      "bool IsWeaponRaised()",
      "bool WeaponADS()",
      "void ResetADS()",
      "bool IsThrowingModeChange()",
      "void ResetThrowingMode()",
      "bool IsWalkToggled()",
      "bool IsUseButton()",
      "bool IsUseButtonDown()",
      "bool IsUseItemButton()",
      "bool IsUseItemButtonDown()",
      "bool IsAttackButton()",
      "bool IsAttackButtonDown()",
      "bool IsSingleUse()",
      "bool IsContinuousUse()",
      "bool IsContinuousUseStart()",
      "bool IsContinuousUseEnd()",
      "bool IsImmediateAction()",
      "bool IsReloadOrMechanismSingleUse()",
      "bool IsReloadOrMechanismContinuousUse()",
      "bool IsReloadOrMechanismContinuousUseStart()",
      "bool IsReloadOrMechanismContinuousUseEnd()",
      "bool IsZoom()",
      "bool IsZoomToggle()",
      "void ResetZoomToggle()",
      "bool IsSightChange()",
      "bool IsZoomIn()",
      "bool IsZoomOut()",
      "bool IsFireModeChange()",
      "bool IsZeroingUp()",
      "bool IsZeroingDown()",
      "bool IsHoldBreath()",
      "void ResetHoldBreath()",
      "int IsGestureSlot()",
      "bool IsOtherController()",
      "int IsQuickBarSlot()",
      "bool IsQuickBarSingleUse()",
      "bool IsQuickBarContinuousUse()",
      "bool IsQuickBarContinuousUseStart()",
      "bool IsQuickBarContinuousUseEnd()",
      "void LimitsDisableSprint(bool pDisable)",
      "bool LimitsIsSprintDisabled()",
      "void OverrideMovementSpeed(HumanInputControllerOverrideType overrideType, float value)",
      "void OverrideMovementAngle(HumanInputControllerOverrideType overrideType, float value)",
      "void OverrideAimChangeX(HumanInputControllerOverrideType overrideType, float value)",
      "void OverrideAimChangeY(HumanInputControllerOverrideType overrideType, float value)",
      "void OverrideMeleeEvade(HumanInputControllerOverrideType overrideType, bool value)",
      "void OverrideRaise(HumanInputControllerOverrideType overrideType, bool value)",
      "void Override3rdIsRightShoulder(HumanInputControllerOverrideType overrideType, bool value)",
      "void OverrideFreeLook(HumanInputControllerOverrideType overrideType, bool value)",
      "void HumanInputController()",
      "void HumanAnimInterface()",
      "void HumanCommandActionCallback()",
      "void Cancel()",
      "void InternalCommand(int pInternalCommandId)",
      "void SetAligning(vector pPositionWS, vector pDirectionWS)",
      "void ResetAligning()",
      "void EnableCancelCondition(bool pEnable)",
      "bool DefaultCancelCondition()",
      "void RegisterAnimationEvent(string pAnimationEventStr, int pId)",
      "void EnableStateChangeCallback()",
      "int GetState()",
      "static string GetStateString(int pState)",
      "string GetStateString()",
      "void OnAnimationEvent(int pEventID)",
      "void OnFinish(bool pCanceled)",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "bool IsUserActionCallback()",
      "bool IsGestureCallback()",
      "bool IsSymptomCallback()",
      "void HumanCommandMove()",
      "float GetCurrentMovementAngle()",
      "bool GetCurrentInputAngle(out float pAngle)",
      "float GetCurrentMovementSpeed()",
      "bool IsChangingStance()",
      "bool IsOnBack()",
      "bool IsInRoll()",
      "bool IsLeavingUncon()",
      "bool IsStandingFromBack()",
      "void StartMeleeEvade()",
      "void StartMeleeEvadeA(float pDirAngle)",
      "void SetMeleeBlock(bool pBlock)",
      "void ForceStance(int pStanceIdx)",
      "void ForceStanceUp(int pStanceIdx)",
      "void SetRunSprintFilterModifier(float value)",
      "void SetDirectionFilterModifier(float value)",
      "void SetDirectionSprintFilterModifier(float value)",
      "void SetTurnSpanModifier(float value)",
      "void SetTurnSpanSprintModifier(float value)",
      "void SetCurrentWaterLevel(float value)",
      "void HumanCommandMelee()",
      "void ContinueCombo()",
      "bool IsInComboRange()",
      "bool WasHit()",
      "void HumanCommandMelee2()",
      "void ContinueCombo(bool pHeavyHit, float pComboValue, EntityAI target = null, vector hitPos = vector.Zero)",
      "int GetComboCount()",
      "int GetCurrentHitType()",
      "bool IsFinisher()",
      "void HumanCommandFall()",
      "bool PhysicsLanded()",
      "void Land(int pLandType)",
      "bool IsLanding()",
      "void OnSimulationEnd()",
      "bool ShouldSimulationBeDisabled()",
      "void HumanCommandDeath()",
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanAnimInterface": {
    "parent": null,
    "methods": [
      "void HumanAnimInterface()",
      "void HumanCommandActionCallback()",
      "void Cancel()",
      "void InternalCommand(int pInternalCommandId)",
      "void SetAligning(vector pPositionWS, vector pDirectionWS)",
      "void ResetAligning()",
      "void EnableCancelCondition(bool pEnable)",
      "bool DefaultCancelCondition()",
      "void RegisterAnimationEvent(string pAnimationEventStr, int pId)",
      "void EnableStateChangeCallback()",
      "int GetState()",
      "static string GetStateString(int pState)",
      "string GetStateString()",
      "void OnAnimationEvent(int pEventID)",
      "void OnFinish(bool pCanceled)",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "bool IsUserActionCallback()",
      "bool IsGestureCallback()",
      "bool IsSymptomCallback()",
      "void HumanCommandMove()",
      "float GetCurrentMovementAngle()",
      "bool GetCurrentInputAngle(out float pAngle)",
      "float GetCurrentMovementSpeed()",
      "bool IsChangingStance()",
      "bool IsOnBack()",
      "bool IsInRoll()",
      "bool IsLeavingUncon()",
      "bool IsStandingFromBack()",
      "void StartMeleeEvade()",
      "void StartMeleeEvadeA(float pDirAngle)",
      "bool IsMeleeEvade()",
      "void SetMeleeBlock(bool pBlock)",
      "void ForceStance(int pStanceIdx)",
      "void ForceStanceUp(int pStanceIdx)",
      "void SetRunSprintFilterModifier(float value)",
      "void SetDirectionFilterModifier(float value)",
      "void SetDirectionSprintFilterModifier(float value)",
      "void SetTurnSpanModifier(float value)",
      "void SetTurnSpanSprintModifier(float value)",
      "void SetCurrentWaterLevel(float value)",
      "void HumanCommandMelee()",
      "void ContinueCombo()",
      "bool IsInComboRange()",
      "bool WasHit()",
      "void HumanCommandMelee2()",
      "void ContinueCombo(bool pHeavyHit, float pComboValue, EntityAI target = null, vector hitPos = vector.Zero)",
      "int GetComboCount()",
      "int GetCurrentHitType()",
      "bool IsFinisher()",
      "void HumanCommandFall()",
      "bool PhysicsLanded()",
      "void Land(int pLandType)",
      "bool IsLanding()",
      "void OnSimulationEnd()",
      "bool ShouldSimulationBeDisabled()",
      "void HumanCommandDeath()",
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandActionCallback": {
    "parent": null,
    "methods": [
      "void HumanCommandActionCallback()",
      "void Cancel()",
      "void InternalCommand(int pInternalCommandId)",
      "void SetAligning(vector pPositionWS, vector pDirectionWS)",
      "void ResetAligning()",
      "void EnableCancelCondition(bool pEnable)",
      "bool DefaultCancelCondition()",
      "void RegisterAnimationEvent(string pAnimationEventStr, int pId)",
      "void EnableStateChangeCallback()",
      "int GetState()",
      "static string GetStateString(int pState)",
      "string GetStateString()",
      "void OnAnimationEvent(int pEventID)",
      "void OnFinish(bool pCanceled)",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "bool IsUserActionCallback()",
      "bool IsGestureCallback()",
      "bool IsSymptomCallback()",
      "void HumanCommandMove()",
      "float GetCurrentMovementAngle()",
      "bool GetCurrentInputAngle(out float pAngle)",
      "float GetCurrentMovementSpeed()",
      "bool IsChangingStance()",
      "bool IsOnBack()",
      "bool IsInRoll()",
      "bool IsLeavingUncon()",
      "bool IsStandingFromBack()",
      "void StartMeleeEvade()",
      "void StartMeleeEvadeA(float pDirAngle)",
      "bool IsMeleeEvade()",
      "void SetMeleeBlock(bool pBlock)",
      "void ForceStance(int pStanceIdx)",
      "void ForceStanceUp(int pStanceIdx)",
      "void SetRunSprintFilterModifier(float value)",
      "void SetDirectionFilterModifier(float value)",
      "void SetDirectionSprintFilterModifier(float value)",
      "void SetTurnSpanModifier(float value)",
      "void SetTurnSpanSprintModifier(float value)",
      "void SetCurrentWaterLevel(float value)",
      "void HumanCommandMelee()",
      "void ContinueCombo()",
      "bool IsInComboRange()",
      "bool WasHit()",
      "void HumanCommandMelee2()",
      "void ContinueCombo(bool pHeavyHit, float pComboValue, EntityAI target = null, vector hitPos = vector.Zero)",
      "int GetComboCount()",
      "int GetCurrentHitType()",
      "bool IsFinisher()",
      "void HumanCommandFall()",
      "bool PhysicsLanded()",
      "void Land(int pLandType)",
      "bool IsLanding()",
      "void OnSimulationEnd()",
      "bool ShouldSimulationBeDisabled()",
      "void HumanCommandDeath()",
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandMove": {
    "parent": null,
    "methods": [
      "void HumanCommandMove()",
      "float GetCurrentMovementAngle()",
      "bool GetCurrentInputAngle(out float pAngle)",
      "float GetCurrentMovementSpeed()",
      "bool IsChangingStance()",
      "bool IsOnBack()",
      "bool IsInRoll()",
      "bool IsLeavingUncon()",
      "bool IsStandingFromBack()",
      "void StartMeleeEvade()",
      "void StartMeleeEvadeA(float pDirAngle)",
      "bool IsMeleeEvade()",
      "void SetMeleeBlock(bool pBlock)",
      "void ForceStance(int pStanceIdx)",
      "void ForceStanceUp(int pStanceIdx)",
      "void SetRunSprintFilterModifier(float value)",
      "void SetDirectionFilterModifier(float value)",
      "void SetDirectionSprintFilterModifier(float value)",
      "void SetTurnSpanModifier(float value)",
      "void SetTurnSpanSprintModifier(float value)",
      "void SetCurrentWaterLevel(float value)",
      "void HumanCommandMelee()",
      "void ContinueCombo()",
      "bool IsInComboRange()",
      "bool WasHit()",
      "void Cancel()",
      "void HumanCommandMelee2()",
      "void ContinueCombo(bool pHeavyHit, float pComboValue, EntityAI target = null, vector hitPos = vector.Zero)",
      "int GetComboCount()",
      "int GetCurrentHitType()",
      "bool IsFinisher()",
      "void HumanCommandFall()",
      "bool PhysicsLanded()",
      "void Land(int pLandType)",
      "bool IsLanding()",
      "void OnSimulationEnd()",
      "bool ShouldSimulationBeDisabled()",
      "void HumanCommandDeath()",
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandMelee": {
    "parent": null,
    "methods": [
      "void HumanCommandMelee()",
      "void ContinueCombo()",
      "bool IsInComboRange()",
      "bool WasHit()",
      "void Cancel()",
      "bool IsOnBack()",
      "void HumanCommandMelee2()",
      "void ContinueCombo(bool pHeavyHit, float pComboValue, EntityAI target = null, vector hitPos = vector.Zero)",
      "int GetComboCount()",
      "int GetCurrentHitType()",
      "bool IsFinisher()",
      "void HumanCommandFall()",
      "bool PhysicsLanded()",
      "void Land(int pLandType)",
      "bool IsLanding()",
      "void OnSimulationEnd()",
      "bool ShouldSimulationBeDisabled()",
      "void HumanCommandDeath()",
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandMelee2": {
    "parent": null,
    "methods": [
      "void HumanCommandMelee2()",
      "void ContinueCombo(bool pHeavyHit, float pComboValue, EntityAI target = null, vector hitPos = vector.Zero)",
      "bool IsInComboRange()",
      "bool WasHit()",
      "void Cancel()",
      "bool IsOnBack()",
      "int GetComboCount()",
      "int GetCurrentHitType()",
      "bool IsFinisher()",
      "void HumanCommandFall()",
      "bool PhysicsLanded()",
      "void Land(int pLandType)",
      "bool IsLanding()",
      "void OnSimulationEnd()",
      "bool ShouldSimulationBeDisabled()",
      "void HumanCommandDeath()",
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandFall": {
    "parent": null,
    "methods": [
      "void HumanCommandFall()",
      "bool PhysicsLanded()",
      "void Land(int pLandType)",
      "bool IsLanding()",
      "void OnSimulationEnd()",
      "bool ShouldSimulationBeDisabled()",
      "void HumanCommandDeath()",
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandDeathCallback": {
    "parent": null,
    "methods": [
      "void OnSimulationEnd()",
      "bool ShouldSimulationBeDisabled()",
      "void HumanCommandDeath()",
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandDeath": {
    "parent": null,
    "methods": [
      "void HumanCommandDeath()",
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandUnconscious": {
    "parent": null,
    "methods": [
      "void HumanCommandUnconscious()",
      "void WakeUp(int targetStance = -1)",
      "bool IsWakingUp()",
      "bool IsOnLand()",
      "bool IsInWater()",
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandDamage": {
    "parent": null,
    "methods": [
      "void HumanCommandDamage()",
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandLadder": {
    "parent": null,
    "methods": [
      "void HumanCommandLadder()",
      "bool CanExit()",
      "void Exit()",
      "static bool DebugDrawLadder(Building pBuilding, int pLadderIndex)",
      "static int DebugGetLadderIndex(string pComponentName)",
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandSwim": {
    "parent": null,
    "methods": [
      "void HumanCommandSwim()",
      "void StopSwimming()",
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandVehicle": {
    "parent": null,
    "methods": [
      "void HumanCommandVehicle()",
      "int GetVehicleClass()",
      "int GetVehicleSeat()",
      "void SetVehicleType(int pVehicleType)",
      "int GetVehicleType()",
      "void GetOutVehicle()",
      "void KnockedOutVehicle()",
      "bool ShouldBeKnockedOut()",
      "void JumpOutVehicle()",
      "void SwitchSeat(int pTransportPositionIndex, int pVehicleSeat)",
      "bool IsGettingIn()",
      "bool IsGettingOut()",
      "bool IsSwitchSeat()",
      "bool WasGearChange()",
      "void SetClutchState(bool pState)",
      "void KeepInVehicleSpaceAfterLeave(bool pState)",
      "void ProcessLeaveEvents()",
      "bool IsObjectIgnoredOnGettingOut(IEntity entity)",
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "SHumanCommandClimbResult": {
    "parent": null,
    "methods": [
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandClimb": {
    "parent": null,
    "methods": [
      "void HumanCommandClimb()",
      "int GetState()",
      "static bool DoClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DoPerformClimbTest(Human pHuman, SHumanCommandClimbResult pResult, int pDebugDrawLevel)",
      "static bool DebugDrawClimb(Human pHuman, int pLevel)",
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandFullBodyDamage": {
    "parent": null,
    "methods": [
      "void HumanCommandFullBodyDamage()",
      "string WeaponActionTypeToString(int A, int AT)",
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandWeapons": {
    "parent": null,
    "methods": [
      "void HumanCommandWeapons()",
      "bool IsActionFinished()",
      "int GetRunningAction()",
      "int GetRunningActionType()",
      "void SetActionProgressParams(float pStart, float pEnd)",
      "bool StartAction(WeaponActions pAction, int pActionType)",
      "void RegisterEvent(string pName, int pId)",
      "int IsEvent()",
      "bool IsInWeaponReloadBulletSwitchState()",
      "void SetADS(bool pState)",
      "void LiftWeapon(bool pState)",
      "float GetAimingHandsOffsetUD()",
      "float GetAimingHandsOffsetLR()",
      "void RegisterDefaultEvents()",
      "void SetInitState(int pFrameIndex)",
      "static void StaticSetInitState(Human pHuman, int pFrameIdx)",
      "float GetBaseAimingAngleUD()",
      "float GetBaseAimingAngleLR()",
      "void SetThrowingMode(bool pState)",
      "bool IsThrowingMode()",
      "void ThrowItem(int throwType)",
      "bool WasItemLeaveHandsEvent()",
      "int DebugIsEvent()",
      "void DebugResetEvents()",
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandAdditives": {
    "parent": null,
    "methods": [
      "void HumanCommandAdditives()",
      "void SetInjured(float pValue, bool pInterpolate)",
      "void SetExhaustion(float pValue, bool pInterpolate)",
      "void SetTalking(bool pValue)",
      "void StartModifier(int pType)",
      "void CancelModifier()",
      "bool IsModifierActive()",
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanMovementState": {
    "parent": null,
    "methods": [
      "bool IsRaised()",
      "bool IsRaisedInProne()",
      "bool IsInProne()",
      "bool IsInRaisedProne()",
      "bool IsLeaning()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanCommandScript": {
    "parent": null,
    "methods": [
      "void OnActivate()",
      "void OnDeactivate()",
      "void SetFlagFinished(bool pFinished)",
      "void SetHeading(float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "void AddHeadingRelativeTo(HumanRelativeHeadingMode mode, float yawAngle, float filterDt = -1, float maxYawSpeed = FLT_MAX)",
      "int GetCurrentStance()",
      "int GetCurrentMovement()",
      "float GetCurrentLeaning()",
      "void PreAnimUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "void PreAnim_SetFilteredHeading(float pYawAngle, float pFilterDt, float pMaxYawSpeed)",
      "void PrePhysUpdate(float pDt)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "Human": {
    "parent": "Man",
    "methods": [
      "void GetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformWS(out vector pTm[4])",
      "void PhysicsGetTransformLS(out vector pTm[4])",
      "bool CheckFreeSpace(vector localDir, float distance, bool useHeading, vector posOffset = vector.Zero, float xzScale = 1.0)",
      "float CollisionMoveTest(vector dir, vector offset, float xzScale, IEntity ignoreEntity, out IEntity hitEntity, out vector hitPosition, out vector hitNormal)",
      "void LinkToLocalSpaceOf(notnull IEntity child, vector pLocalSpaceMatrix[4])",
      "void UnlinkFromLocalSpace()",
      "void AlignPositionWS(vector position)",
      "void AlignTranslationWS(vector translation)",
      "void AlignTranslationLS(vector translation)",
      "void AlignDirectionWS(vector direction)",
      "void OnPhysMove(float dt, vector transform[4])",
      "int GetBoneIndexByName(string pBoneName)",
      "bool PhysicsIsFalling(bool pValidate)",
      "bool PhysicsWasSlidingOffLinkedEntity()",
      "void PhysicsGetVelocity(out vector pVelocity)",
      "void PhysicsEnableGravity(bool pEnable)",
      "bool PhysicsIsSolid()",
      "void PhysicsSetSolid(bool pSolid)",
      "void PhysicsSetRagdoll(bool pEnable)",
      "void GetMovementState(HumanMovementState pState)",
      "int GetCurrentCommandID()",
      "int GetCommandModifierCount()",
      "int GetCommandModifierID(int pIndex)",
      "void DeleteCommandModifier_Action(HumanCommandActionCallback pCallback)",
      "void DeleteCommandModifier_Damage(HumanCommandDamage pDamage)",
      "string DebugGetItemClass()",
      "string DebugGetItemSuperClass()",
      "string DebugGetItemAnimInstance()",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "void OnCommandMoveStart()",
      "void OnCommandMoveFinish()",
      "void OnCommandMeleeStart()",
      "void OnCommandMeleeFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandDeathStart()",
      "void OnCommandDeathFinish()",
      "void OnCommandUnconsciousStart()",
      "void OnCommandUnconsciousFinish()",
      "void OnCommandDamageFullbodyStart()",
      "void OnCommandDamageFullbodyFinish()",
      "void OnCommandDamageAdditiveStart()",
      "void OnCommandDamageAdditiveFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandActionFullbodyStart()",
      "void OnCommandActionFullbodyFinish()",
      "void OnCommandActionAdditiveStart()",
      "void OnCommandActionAdditiveFinish()",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()"
    ]
  },
  "HumanItemBehaviorCfg": {
    "parent": null,
    "methods": [
      "void SetIK(int pStance, int pMovement, bool pAim, bool pRArm, bool pLArm)",
      "void SetIKStance(int pStance, bool pAim, bool pRArm, bool pLArm)",
      "void SetIKMelee(int pHitType, bool pAim, bool pRArm, bool pLArm)",
      "void SetIKAll(bool pAim, bool pRArm, bool pLArm)",
      "void OnItemInHandsChanged(bool pInstant = false)",
      "void ResetWeaponInHands()",
      "void HideItemInHands(bool pState)",
      "bool IsItemInHandsHidden()",
      "bool IsItemInHandsWeapon()",
      "bool WeaponGetCameraPoint(out vector pPos, out vector pRot)",
      "bool WeaponGetCameraPointMSTransform(notnull EntityAI pCamEntity, vector pCamPoint, vector pCamDir, out vector pTm[4])",
      "bool WeaponGetCameraPointBoneRelative(notnull EntityAI pCamEntity, vector pCamPoint, vector pCamDir, int pBoneIndex, out vector pTm[4])",
      "bool WeaponGetAimingModelDirTm(out vector pTm[4])",
      "void HumanItemAccessor()"
    ]
  },
  "HumanItemAccessor": {
    "parent": null,
    "methods": [
      "void OnItemInHandsChanged(bool pInstant = false)",
      "void ResetWeaponInHands()",
      "void HideItemInHands(bool pState)",
      "bool IsItemInHandsHidden()",
      "bool IsItemInHandsWeapon()",
      "bool WeaponGetCameraPoint(out vector pPos, out vector pRot)",
      "bool WeaponGetCameraPointMSTransform(notnull EntityAI pCamEntity, vector pCamPoint, vector pCamDir, out vector pTm[4])",
      "bool WeaponGetCameraPointBoneRelative(notnull EntityAI pCamEntity, vector pCamPoint, vector pCamDir, int pBoneIndex, out vector pTm[4])",
      "bool WeaponGetAimingModelDirTm(out vector pTm[4])",
      "void HumanItemAccessor()"
    ]
  },
  "SHumanGlobalSettings": {
    "parent": null,
    "methods": [
      "void SHumanGlobalSettings()",
      "void SHumanCommandMoveSettings()",
      "void SHumanCommandSwimSettings()",
      "void SHumanCommandClimbSettings()"
    ]
  },
  "SHumanCommandMoveSettings": {
    "parent": null,
    "methods": [
      "void SHumanCommandMoveSettings()",
      "void SHumanCommandSwimSettings()",
      "void SHumanCommandClimbSettings()"
    ]
  },
  "SHumanCommandSwimSettings": {
    "parent": null,
    "methods": [
      "void SHumanCommandSwimSettings()",
      "void SHumanCommandClimbSettings()"
    ]
  },
  "SHumanCommandClimbSettings": {
    "parent": null,
    "methods": [
      "void SHumanCommandClimbSettings()"
    ]
  },
  "ImpactEffectsData": {
    "parent": null,
    "methods": [
      "static int RegisterSurface(string surface)",
      "static bool UnregisterSurface(string surface)",
      "static int RegisterIgnoredAmmo(string ammo)",
      "static bool UnregisterIgnoredAmmo(string ammo)",
      "static void EvaluateImpactEffectEx(ImpactEffectsData pData)",
      "static void EvaluateImpactEffect(Object directHit, int componentIndex, string surface, vector pos, int impact_type, vector surfNormal, vector exitPos, vector inSpeed, vector outSpeed, bool deflected, string ammoType, bool isWater)"
    ]
  },
  "ImpactMaterials": {
    "parent": null,
    "methods": [
      "static int RegisterSurface(string surface)",
      "static bool UnregisterSurface(string surface)",
      "static int RegisterIgnoredAmmo(string ammo)",
      "static bool UnregisterIgnoredAmmo(string ammo)",
      "static void EvaluateImpactEffectEx(ImpactEffectsData pData)",
      "static void EvaluateImpactEffect(Object directHit, int componentIndex, string surface, vector pos, int impact_type, vector surfNormal, vector exitPos, vector inSpeed, vector outSpeed, bool deflected, string ammoType, bool isWater)"
    ]
  },
  "InventoryItemType": {
    "parent": null,
    "methods": [
      "void InventoryItemType()",
      "void LoadSoundEvents()",
      "string GetName()"
    ]
  },
  "BoxCollidingParams": {
    "parent": null,
    "methods": [
      "void SetParams(vector center, vector orientation, vector edgeLength, ObjIntersect primaryType, ObjIntersect secondaryType, bool fullComponentInfo)"
    ]
  },
  "ComponentInfo": {
    "parent": null,
    "methods": []
  },
  "BoxCollidingResult": {
    "parent": null,
    "methods": []
  },
  "KillerData": {
    "parent": null,
    "methods": []
  },
  "ModInfo": {
    "parent": null,
    "methods": [
      "string GetName()",
      "string GetPicture()",
      "string GetLogo()",
      "string GetLogoSmall()",
      "string GetLogoOver()",
      "string GetTooltip()",
      "string GetOverview()",
      "string GetAction()",
      "string GetAuthor()",
      "string GetVersion()",
      "bool GetDefault()",
      "bool GetIsDLC()",
      "bool GetIsOwned()",
      "void GoToStore()"
    ]
  },
  "NoiseSystem": {
    "parent": null,
    "methods": [
      "void NoiseSystem()",
      "void AddNoise(EntityAI source_entity, NoiseParams noise_params, float external_strenght_multiplier = 1.0)",
      "void AddNoisePos(EntityAI source_entity, vector pos, NoiseParams noise_params, float external_strenght_multiplier = 1.0)",
      "void AddNoiseTarget(vector pos, float lifetime, NoiseParams noise_params, float external_strength_multiplier = 1.0)",
      "void NoiseParams()",
      "void Load(string noise_name)",
      "void LoadFromPath(string noise_path)"
    ]
  },
  "NoiseParams": {
    "parent": null,
    "methods": [
      "void NoiseParams()",
      "void Load(string noise_name)",
      "void LoadFromPath(string noise_path)"
    ]
  },
  "ObjectSpawnerHandler": {
    "parent": null,
    "methods": [
      "static void SpawnObjects()",
      "static void SpawnObject(ITEM_SpawnerObject item)",
      "static void OnGameplayDataHandlerLoad()",
      "static bool ValidatePath(string path)",
      "static void SpawnInit()",
      "static void AddSpawnData(string objectName, vector position, vector orientation)"
    ]
  },
  "ObjectSpawnerJson": {
    "parent": null,
    "methods": [
      "static void SpawnObjects()",
      "static void SpawnInit()",
      "static void AddSpawnData(string objectName, vector position, vector orientation)"
    ]
  },
  "ITEM_SpawnerObject": {
    "parent": null,
    "methods": [
      "static void SpawnObjects()",
      "static void SpawnInit()",
      "static void AddSpawnData(string objectName, vector position, vector orientation)"
    ]
  },
  "SpawnDataConverter": {
    "parent": null,
    "methods": [
      "static void SpawnObjects()",
      "static void SpawnInit()",
      "static void AddSpawnData(string objectName, vector position, vector orientation)"
    ]
  },
  "PlayerConstants": {
    "parent": null,
    "methods": []
  },
  "PPEffects": {
    "parent": null,
    "methods": [
      "static void Init()",
      "static void ResetBlurEffects()",
      "static void ResetRadialBlur()",
      "static void SetBlurValue(int index, float value)",
      "static int RegisterBlurEffect()",
      "static void SetRadialBlur(float powerX, float powerY, float offsetX, float offsetY )",
      "static void SetBlur(float value)",
      "static void UpdateBlur()",
      "static void SetBlurInventory(float value)",
      "static void SetBlurDrunk(float value)",
      "static void SetBlurFever(float value)",
      "static void SetBlurMenu(float value)",
      "static void SetBlurOptics(float value)",
      "static void SetBlurFlashbang(float value)",
      "static void SetBlurShock(float value)",
      "static int RegisterChromAbbEffect()",
      "static void ResetChromAbbEffects()",
      "static void SetChromAbbValue(int index, float value)",
      "static void SetChromAbb(float value)",
      "static void UpdateChromAbb()",
      "static void SetChromAbbOptic(float value)",
      "static void ResetColorEffects()",
      "static void SetColorValue(int index, float r, float g, float b, float a, float overlay)",
      "static int RegisterColorEffect()",
      "static void UpdateColor()",
      "static void SetLensEffect(float lens, float chromAbb, float centerX, float centerY)",
      "static void PerformSetLensEffect(float lens, float chromAbb, float centerX, float centerY)",
      "static void SetVignette(float intensity, float R, float G, float B, float A)",
      "static void SetVignetteEffectValue(int index, float intensity, float r, float g, float b, float a)",
      "static int RegisterVignetteEffect()",
      "static void SetUnconsciousnessVignette(float value)",
      "static void SetShockVignette(float value)",
      "static void SetTunnelVignette(float value)",
      "static void SetMenuVignette(float value)",
      "static void ResetVignettes()",
      "static void OverrideDOF(bool enable, float focusDistance, float focusLength, float focusLengthNear, float blur, float focusDepthOffset)",
      "static void AddPPMask(float ndcX, float ndcY, float ndcRadius, float ndcBlur)",
      "static void ResetPPMask()",
      "static void ResetDOFOverride()",
      "static void ResetLensEffect()",
      "static void HitEffect(float value)",
      "static void SetShockEffectColor(float value)",
      "static void FlashbangEffect(float value)",
      "static void EnableBurlapSackBlindness()",
      "static void DisableBurlapSackBlindness()",
      "static void SetDeathDarkening(float value)",
      "static void UpdateSaturation()",
      "static void UpdateVignette()",
      "static void SetBloodSaturation(float value)",
      "static void SetColorizationNV(float r, float g, float b)",
      "static void UpdateColorize()",
      "static void ResetColorize()",
      "static void SetEVValuePP(float value)",
      "static void SetNVParams(float light_mult, float noise_intensity, float sharpness, float grain_size)",
      "static void SetBloom(float thres, float steep, float inten)",
      "static void ResetAll()"
    ]
  },
  "ProgressAsync": {
    "parent": null,
    "methods": [
      "void SetUserData(Widget inst)",
      "void SetProgressData(Widget inst)",
      "void DestroyAllPendingProgresses()",
      "void StartProgress()"
    ]
  },
  "RemotelyActivatedItemBehaviour": {
    "parent": null,
    "methods": [
      "void RemotelyActivatedItemBehaviour(notnull EntityAI pparent)",
      "void SetTrigger()",
      "void OnVariableSynchronized()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnAfterLoad()",
      "static int GeneratePersistentID()",
      "void SetPersistentPairID(int id)",
      "void Pair()",
      "void Pair(notnull EntityAI device)",
      "void Unpair()",
      "bool IsPaired()",
      "void SetPairDeviceNetIds(notnull EntityAI device)",
      "int GetPairDeviceNetIdLow()",
      "int GetPairDeviceNetIdHigh()"
    ]
  },
  "AbstractSoundScene": {
    "parent": null,
    "methods": [
      "void AbstractSoundScene()",
      "float GetRadioVolume()",
      "void SetRadioVolume(float vol, float time)",
      "float GetSpeechExVolume()",
      "void SetSpeechExVolume(float vol, float time)",
      "float GetMusicVolume()",
      "void SetMusicVolume(float vol, float time)",
      "float GetSoundVolume()",
      "void SetSoundVolume(float vol, float time)",
      "float GetVOIPVolume()",
      "void SetVOIPVolume(float vol, float time)",
      "float GetSilenceThreshold()",
      "float GetAudioLevel()",
      "void SoundObjectBuilder(SoundParams soundParams)",
      "void Initialize(SoundParams soundParams)",
      "void AddEnvSoundVariables(vector position)",
      "void AddVariable(string name, float value)",
      "void AddVariables(notnull array<string> names, array<float> values = null)",
      "void UpdateEnvSoundControllers(vector position)",
      "void SetVariable(string name, float value)",
      "void SoundObject(SoundParams soundParams)",
      "void UpdateVariables(notnull array<float> values)",
      "void Setparent(IEntity parent, int pivot = -1)",
      "int GetHierarchyPivot()",
      "void SetPosition(vector position)",
      "void SetSpeed(vector speed)",
      "void SetOcclusionObstruction(float occlusion, float obstruction)",
      "void SetKind(WaveKind kind)",
      "void SoundParams(string name)",
      "bool Load(string name)",
      "bool IsValid()",
      "string GetName()",
      "void InitEvents()",
      "void AbstractWave()",
      "void SetUserData(Managed inst)",
      "void Play()",
      "void PlayWithOffset(float offset)",
      "void Stop()",
      "void Restart()",
      "void SetStartOffset(float offset)",
      "float GetLength()",
      "float GetCurrPosition()",
      "void Loop(bool setLoop)",
      "float GetVolume()",
      "void SetVolume(float value)",
      "void SetVolumeRelative(float value)",
      "void SetFrequency(float value)",
      "float GetFrequency()",
      "void SetPosition(vector position, vector velocity = )",
      "void SetFadeInFactor(float volume)",
      "void SetFadeOutFactor(float volume)",
      "void SetDoppler(bool setDoppler)",
      "void Skip(float timeSec)",
      "bool IsHeaderLoaded()",
      "void OnPlay()",
      "void OnStop()",
      "void OnLoad()",
      "void OnHeaderLoad()",
      "void OnEnd()"
    ]
  },
  "SoundObjectBuilder": {
    "parent": null,
    "methods": [
      "void SoundObjectBuilder(SoundParams soundParams)",
      "void Initialize(SoundParams soundParams)",
      "void AddEnvSoundVariables(vector position)",
      "void AddVariable(string name, float value)",
      "void AddVariables(notnull array<string> names, array<float> values = null)",
      "void UpdateEnvSoundControllers(vector position)",
      "void SetVariable(string name, float value)",
      "void SoundObject(SoundParams soundParams)",
      "void UpdateVariables(notnull array<float> values)",
      "void Setparent(IEntity parent, int pivot = -1)",
      "int GetHierarchyPivot()",
      "void SetPosition(vector position)",
      "void SetSpeed(vector speed)",
      "void SetOcclusionObstruction(float occlusion, float obstruction)",
      "void SetKind(WaveKind kind)",
      "void SoundParams(string name)",
      "bool Load(string name)",
      "bool IsValid()",
      "string GetName()",
      "void InitEvents()",
      "void AbstractWave()",
      "void SetUserData(Managed inst)",
      "void Play()",
      "void PlayWithOffset(float offset)",
      "void Stop()",
      "void Restart()",
      "void SetStartOffset(float offset)",
      "float GetLength()",
      "float GetCurrPosition()",
      "void Loop(bool setLoop)",
      "float GetVolume()",
      "void SetVolume(float value)",
      "void SetVolumeRelative(float value)",
      "void SetFrequency(float value)",
      "float GetFrequency()",
      "void SetPosition(vector position, vector velocity = )",
      "void SetFadeInFactor(float volume)",
      "void SetFadeOutFactor(float volume)",
      "void SetDoppler(bool setDoppler)",
      "void Skip(float timeSec)",
      "bool IsHeaderLoaded()",
      "void OnPlay()",
      "void OnStop()",
      "void OnLoad()",
      "void OnHeaderLoad()",
      "void OnEnd()"
    ]
  },
  "SoundObject": {
    "parent": null,
    "methods": [
      "void SoundObject(SoundParams soundParams)",
      "void UpdateVariables(notnull array<float> values)",
      "void Setparent(IEntity parent, int pivot = -1)",
      "int GetHierarchyPivot()",
      "void SetPosition(vector position)",
      "void SetSpeed(vector speed)",
      "void SetOcclusionObstruction(float occlusion, float obstruction)",
      "void SetKind(WaveKind kind)",
      "void Initialize(SoundParams soundParams)",
      "void SoundParams(string name)",
      "bool Load(string name)",
      "bool IsValid()",
      "string GetName()",
      "void InitEvents()",
      "void AbstractWave()",
      "void SetUserData(Managed inst)",
      "void Play()",
      "void PlayWithOffset(float offset)",
      "void Stop()",
      "void Restart()",
      "void SetStartOffset(float offset)",
      "float GetLength()",
      "float GetCurrPosition()",
      "void Loop(bool setLoop)",
      "float GetVolume()",
      "void SetVolume(float value)",
      "void SetVolumeRelative(float value)",
      "void SetFrequency(float value)",
      "float GetFrequency()",
      "void SetPosition(vector position, vector velocity = )",
      "void SetFadeInFactor(float volume)",
      "void SetFadeOutFactor(float volume)",
      "void SetDoppler(bool setDoppler)",
      "void Skip(float timeSec)",
      "bool IsHeaderLoaded()",
      "void OnPlay()",
      "void OnStop()",
      "void OnLoad()",
      "void OnHeaderLoad()",
      "void OnEnd()"
    ]
  },
  "SoundParams": {
    "parent": null,
    "methods": [
      "void SoundParams(string name)",
      "bool Load(string name)",
      "bool IsValid()",
      "string GetName()",
      "void InitEvents()",
      "void AbstractWave()",
      "void SetUserData(Managed inst)",
      "void Play()",
      "void PlayWithOffset(float offset)",
      "void Stop()",
      "void Restart()",
      "void SetStartOffset(float offset)",
      "float GetLength()",
      "float GetCurrPosition()",
      "void Loop(bool setLoop)",
      "float GetVolume()",
      "void SetVolume(float value)",
      "void SetVolumeRelative(float value)",
      "void SetFrequency(float value)",
      "float GetFrequency()",
      "void SetPosition(vector position, vector velocity = )",
      "void SetFadeInFactor(float volume)",
      "void SetFadeOutFactor(float volume)",
      "void SetDoppler(bool setDoppler)",
      "void Skip(float timeSec)",
      "bool IsHeaderLoaded()",
      "void OnPlay()",
      "void OnStop()",
      "void OnLoad()",
      "void OnHeaderLoad()",
      "void OnEnd()"
    ]
  },
  "AbstractWaveEvents": {
    "parent": null,
    "methods": [
      "void InitEvents()",
      "void AbstractWave()",
      "void SetUserData(Managed inst)",
      "void Play()",
      "void PlayWithOffset(float offset)",
      "void Stop()",
      "void Restart()",
      "void SetStartOffset(float offset)",
      "float GetLength()",
      "float GetCurrPosition()",
      "void Loop(bool setLoop)",
      "float GetVolume()",
      "void SetVolume(float value)",
      "void SetVolumeRelative(float value)",
      "void SetFrequency(float value)",
      "float GetFrequency()",
      "void SetPosition(vector position, vector velocity = )",
      "void SetFadeInFactor(float volume)",
      "void SetFadeOutFactor(float volume)",
      "void SetDoppler(bool setDoppler)",
      "void Skip(float timeSec)",
      "bool IsHeaderLoaded()",
      "void OnPlay()",
      "void OnStop()",
      "void OnLoad()",
      "void OnHeaderLoad()",
      "void OnEnd()"
    ]
  },
  "AbstractWave": {
    "parent": null,
    "methods": [
      "void InitEvents()",
      "void AbstractWave()",
      "void SetUserData(Managed inst)",
      "void Play()",
      "void PlayWithOffset(float offset)",
      "void Stop()",
      "void Restart()",
      "void SetStartOffset(float offset)",
      "float GetLength()",
      "float GetCurrPosition()",
      "void Loop(bool setLoop)",
      "float GetVolume()",
      "void SetVolume(float value)",
      "void SetVolumeRelative(float value)",
      "void SetFrequency(float value)",
      "float GetFrequency()",
      "void SetPosition(vector position, vector velocity = )",
      "void SetFadeInFactor(float volume)",
      "void SetFadeOutFactor(float volume)",
      "void SetDoppler(bool setDoppler)",
      "void Skip(float timeSec)",
      "bool IsHeaderLoaded()",
      "void OnPlay()",
      "void OnStop()",
      "void OnLoad()",
      "void OnHeaderLoad()",
      "void OnEnd()"
    ]
  },
  "SurfaceInfo": {
    "parent": null,
    "methods": [
      "void SurfaceInfo()",
      "string GetName()",
      "string GetEntryName()",
      "string GetSurfaceType()",
      "float GetRoughness()",
      "float GetDustness()",
      "float GetBulletPenetrability()",
      "float GetThickness()",
      "float GetDeflection()",
      "float GetTransparency()",
      "float GetAudability()",
      "bool IsLiquid()",
      "bool IsStairs()",
      "bool IsPassthrough()",
      "bool IsSolid()",
      "string GetSoundEnv()",
      "string GetImpact()",
      "int GetLiquidType()",
      "int GetStepParticleId()",
      "int GetWheelParticleId()"
    ]
  },
  "SurfaceDetectionParameters": {
    "parent": null,
    "methods": []
  },
  "SurfaceDetectionResult": {
    "parent": null,
    "methods": []
  },
  "SyncEvents": {
    "parent": null,
    "methods": [
      "static void RegisterEvents()",
      "static void Event_OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "static void OnSyncEvent( ESyncEvent event_type, SyncData data, Object target )",
      "static void SendPlayerList()",
      "static void SendEntityKilled( EntityAI victim, EntityAI killer, EntityAI source, bool is_headshot )",
      "static void SendPlayerIgnatedFireplace( Man player, EFireIgniteType ignite_type )",
      "static void SendSyncEvent( ERPCs rpc_event_id, ESyncEvent sync_event_type, SyncData data = null, bool guaranteed = true, PlayerIdentity player_target = null )",
      "static void SendSyncEventEx( ERPCs rpc_event_id, ESyncEvent sync_event_type, SyncData data = null, bool guaranteed = true, Man recipient = null )"
    ]
  },
  "UndergroundTriggerCarrierBase": {
    "parent": "ScriptedEntity",
    "methods": [
      "void SetIndex(int index)"
    ]
  },
  "JsonUndergroundTriggers": {
    "parent": null,
    "methods": [
      "static void SpawnAllTriggerCarriers()",
      "static void SpawnTriggerCarrier(int index, JsonUndergroundAreaTriggerData data)",
      "static void SyncDataSend(PlayerIdentity identity)",
      "static void OnRPC(ParamsReadContext ctx)"
    ]
  },
  "JsonUndergroundAreaBreadcrumb": {
    "parent": null,
    "methods": [
      "static void SpawnAllTriggerCarriers()",
      "static void SpawnTriggerCarrier(int index, JsonUndergroundAreaTriggerData data)",
      "static void SyncDataSend(PlayerIdentity identity)",
      "static void OnRPC(ParamsReadContext ctx)"
    ]
  },
  "JsonUndergroundAreaTriggerData": {
    "parent": null,
    "methods": [
      "static void SpawnAllTriggerCarriers()",
      "static void SpawnTriggerCarrier(int index, JsonUndergroundAreaTriggerData data)",
      "static void SyncDataSend(PlayerIdentity identity)",
      "static void OnRPC(ParamsReadContext ctx)"
    ]
  },
  "UndergroundAreaLoader": {
    "parent": null,
    "methods": [
      "static void SpawnAllTriggerCarriers()",
      "static void SpawnTriggerCarrier(int index, JsonUndergroundAreaTriggerData data)",
      "static void SyncDataSend(PlayerIdentity identity)",
      "static void OnRPC(ParamsReadContext ctx)"
    ]
  },
  "VONManagerBase": {
    "parent": null,
    "methods": [
      "void VONManagerBase()",
      "void HideVoiceNotification()",
      "void ShowVoiceNotification(int level, bool fading)",
      "void HandleInput(Input inp)",
      "void OnVOIPThresholdChanged()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "bool IsVonToggled()",
      "void VONManagerImplementation()",
      "void UpdateVoiceIcon()",
      "static void Init()",
      "static void CleanupInstance()",
      "static bool IsVONToggled()",
      "static bool IsVoiceThresholdMinimum()"
    ]
  },
  "VONManagerImplementation": {
    "parent": null,
    "methods": [
      "void VONManagerImplementation()",
      "void HideVoiceNotification()",
      "void ShowVoiceNotification(int level, bool fading)",
      "void HandleInput(Input inp)",
      "void UpdateVoiceIcon()",
      "void OnVOIPThresholdChanged()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "static void Init()",
      "static void CleanupInstance()",
      "static bool IsVONToggled()",
      "static bool IsVoiceThresholdMinimum()"
    ]
  },
  "VONManager": {
    "parent": null,
    "methods": [
      "static void Init()",
      "static void CleanupInstance()",
      "static bool IsVONToggled()",
      "static bool IsVoiceThresholdMinimum()"
    ]
  },
  "WeatherPhenomenon": {
    "parent": null,
    "methods": [
      "void WeatherPhenomenon()",
      "float GetActual()",
      "float GetForecast()",
      "void Set( float forecast, float time = 0, float minDuration = 0 )",
      "float GetNextChange()",
      "void SetNextChange( float time )",
      "void GetLimits( out float fnMin, out float fnMax )",
      "void SetLimits( float fnMin, float fnMax )",
      "void GetForecastChangeLimits( out float fcMin, out float fcMax )",
      "void SetForecastChangeLimits( float fcMin, float fcMax )",
      "void GetForecastTimeLimits( out float ftMin, out float ftMax )",
      "void SetForecastTimeLimits( float ftMin, float ftMax )",
      "bool OnBeforeChange( float change, float time )",
      "void Weather()",
      "float GetTime()",
      "void SetStorm( float density, float threshold, float timeOut )",
      "void SuppressLightningSimulation(bool state)",
      "void SetWind( vector wind )",
      "float GetWindSpeed()",
      "void SetWindSpeed( float speed )",
      "float GetWindMaximumSpeed()",
      "void SetWindMaximumSpeed( float maxSpeed )",
      "void GetWindFunctionParams( out float fnMin, out float fnMax, out float fnSpeed )",
      "void SetWindFunctionParams( float fnMin, float fnMax, float fnSpeed )",
      "void SetRainThresholds( float tMin, float tMax, float tTime )",
      "void SetSnowfallThresholds( float tMin, float tMax, float tTime )",
      "void SetSnowflakeScale(float scale)",
      "float GetSnowflakeScale()",
      "float WindDirectionToAngle( vector dir )",
      "bool IsDynVolFogEnabled()",
      "void SetDynVolFogDistanceDensity(float value, float time = 0)",
      "float GetDynVolFogDistanceDensity()",
      "void SetDynVolFogHeightDensity(float value, float time = 0)",
      "float GetDynVolFogHeightDensity()",
      "void SetDynVolFogHeightBias(float value, float time = 0)",
      "float GetDynVolFogHeightBias()",
      "void MissionWeather( bool use )",
      "bool GetMissionWeather()",
      "float GetNoiseReductionByWeather()"
    ]
  },
  "Weather": {
    "parent": null,
    "methods": [
      "void Weather()",
      "float GetTime()",
      "void SetStorm( float density, float threshold, float timeOut )",
      "void SuppressLightningSimulation(bool state)",
      "void SetWind( vector wind )",
      "float GetWindSpeed()",
      "void SetWindSpeed( float speed )",
      "float GetWindMaximumSpeed()",
      "void SetWindMaximumSpeed( float maxSpeed )",
      "void GetWindFunctionParams( out float fnMin, out float fnMax, out float fnSpeed )",
      "void SetWindFunctionParams( float fnMin, float fnMax, float fnSpeed )",
      "void SetRainThresholds( float tMin, float tMax, float tTime )",
      "void SetSnowfallThresholds( float tMin, float tMax, float tTime )",
      "void SetSnowflakeScale(float scale)",
      "float GetSnowflakeScale()",
      "float WindDirectionToAngle( vector dir )",
      "bool IsDynVolFogEnabled()",
      "void SetDynVolFogDistanceDensity(float value, float time = 0)",
      "float GetDynVolFogDistanceDensity()",
      "void SetDynVolFogHeightDensity(float value, float time = 0)",
      "float GetDynVolFogHeightDensity()",
      "void SetDynVolFogHeightBias(float value, float time = 0)",
      "float GetDynVolFogHeightBias()",
      "void MissionWeather( bool use )",
      "bool GetMissionWeather()",
      "float GetNoiseReductionByWeather()"
    ]
  },
  "WorldData": {
    "parent": null,
    "methods": [
      "void WorldData()",
      "void Init()",
      "float GetApproxSunriseTime( float monthday )",
      "float GetApproxSunsetTime( float monthday )",
      "int GetDaytime()",
      "float CalcBaseEnvironmentTemperature( float monthday, float daytime )",
      "void UpdateBaseEnvTemperature(float timeslice)",
      "void UpdateWeatherEffects( Weather weather, float timeslice )",
      "float ComputeSnowflakeScale( Weather weather )",
      "float GetBaseEnvTemperature()",
      "float GetBaseEnvTemperatureAtObject(notnull Object object)",
      "float GetBaseEnvTemperatureAtPosition(vector pos)",
      "float GetBaseEnvTemperatureExact(int month, int day, int hour, int minute)",
      "float GetLiquidTypeEnviroTemperature(int liquidType)",
      "bool WeatherOnBeforeChange( EWeatherPhenomenon type, float actual, float change, float time )",
      "float GetAgentSpawnChance(eAgents agent)",
      "float GetColdAreaToolDamageModifier()",
      "void BaseTempDebug(int month, int day)",
      "int GetPollution()",
      "float GetWindCoef()",
      "float GetUniversalTemperatureSourceCapModifier()",
      "float GetTemperature(Object object, EEnvironmentTemperatureComponent properties = EEnvironmentTemperatureComponent.BASE)",
      "float GetTemperatureComponentValue(float temperatureIn, EEnvironmentTemperatureComponent properties = 0)",
      "float WindEffectTemperatureValue(float temperatureInput)",
      "void CalculateWind(int newWeather, bool suddenChange, out float magnitude, out float direction)",
      "void CalculateVolFog(float lerpValue, float windMagnitude, float changeTime)",
      "void CreateYieldBank()",
      "void InitYieldBank()",
      "void SetupWeatherSettings()",
      "void SetupLiquidTemperatures()",
      "float GetDayTemperature()",
      "float GetNightTemperature()",
      "static string ToString(int value)"
    ]
  },
  "WorldDataWeatherConstants": {
    "parent": null,
    "methods": [
      "static string ToString(int value)"
    ]
  },
  "WorldDataWeatherSettings": {
    "parent": null,
    "methods": [
      "static string ToString(int value)"
    ]
  },
  "WorldDataLiquidSettings": {
    "parent": null,
    "methods": [
      "static string ToString(int value)"
    ]
  },
  "WorldDataDaytime": {
    "parent": null,
    "methods": [
      "static string ToString(int value)"
    ]
  },
  "WorldLighting": {
    "parent": null,
    "methods": [
      "void WorldLighting()",
      "void SetGlobalLighting( int lightingID )"
    ]
  },
  "DayZIntroScene": {
    "parent": null,
    "methods": [
      "void DayZIntroScene()",
      "void ResetIntroCamera()",
      "void SetInitPostprocesses()",
      "void GetSelectedUserName()"
    ]
  },
  "DayZIntroScenePC": {
    "parent": null,
    "methods": [
      "void DayZIntroScenePC()",
      "void SetInitPostprocesses()",
      "void SetClickEnable( bool enable )",
      "bool IsClickEnabled()",
      "void CharacterRotationStart()",
      "void CharacterRotationStop()",
      "bool IsRotatingCharacter()",
      "void CharacterRotate()",
      "void Update()"
    ]
  },
  "DayZIntroSceneXbox": {
    "parent": null,
    "methods": [
      "void DayZIntroSceneXbox()",
      "void SetInitPostprocesses()",
      "void SetupCharacter()",
      "void SetupParticles()",
      "void SetupDate()",
      "void CheckXboxClientUpdateLoopStart()",
      "void CheckXboxClientUpdateLoopStop()",
      "bool CheckXboxClientUpdate()",
      "void ResetIntroCamera()",
      "void SetCharacterFemale(bool fem)",
      "bool IsCharacterFemale()",
      "void CreateRandomCharacter()",
      "void UpdateSelectedUserName()",
      "void UpdateCharacterPos()",
      "void SaveCharName( string name )"
    ]
  },
  "DbgUI": {
    "parent": null,
    "methods": [
      "void DbgUI()",
      "void DoUnitTest()",
      "void Text(string label)",
      "void ColoredText(int color, string label)",
      "void Check(string label, out bool checked)",
      "void Combo(string label, out int selection, TStringArray elems)",
      "void List(string label, out int selection, TStringArray elems)",
      "void SliderFloat(string label, out float value, float min, float max, int pxWidth = 150)",
      "void Spacer(int height)",
      "void Panel(string label, int width, int height, int color = 0xaa555555)",
      "bool Button(string txt, int minWidth = 0)",
      "void InputText(string txt, out string value, int pxWidth = 150)",
      "void InputInt(string txt, out int value, int pxWidth = 150)",
      "void InputFloat(string txt, out float value, int pxWidth = 150)",
      "void PlotLive(string label, int sizeX, int sizeY, float val, int timeStep = 100, int historySize = 30, int color = 0xFFFFFFFF)",
      "void SameLine()",
      "void SameSpot()",
      "void PushID_Int(int int_id)",
      "void PushID_Str(string str_id)",
      "void PopID()",
      "void BeginCleanupScope()",
      "void EndCleanupScope()",
      "void Begin(string windowTitle, float x = 0, float y = 0)",
      "void End()"
    ]
  },
  "AudioSystem": {
    "parent": null,
    "methods": [
      "static void SoundDestroy(AudioHandle handle)"
    ]
  },
  "bool": {
    "parent": null,
    "methods": [
      "string ToString()",
      "void SetInstance(Class inst)",
      "string AsciiToString()",
      "string ToStringLen(int len)",
      "bool InRange( int min, int max, bool inclusive_min = true, bool inclusive_max = true )",
      "string ToString(bool simple = true)",
      "string ToString(bool beautify = true)",
      "float Normalize()",
      "float Length()",
      "float LengthSq()",
      "float Distance(vector v1, vector v2)",
      "float DistanceSq(vector v1, vector v2)",
      "static float Dot(vector v1, vector v2)",
      "float VectorToYaw()",
      "void RotationMatrixFromAngles(out vector mat[3])",
      "string GetModule()",
      "bool IsInherited(typename baseType)",
      "int GetVariableCount()",
      "string GetVariableName(int vIdx)",
      "bool GetVariableValue(Class var, int vIdx, out void val)",
      "static string EnumToString(typename e, int enumValue)",
      "static int StringToEnum(typename e, string enumName)",
      "void EnumTools()",
      "static int GetEnumSize(typename e)",
      "static int GetEnumValue(typename e, int idx)",
      "static int GetLastEnumValue(typename e)"
    ]
  },
  "func": {
    "parent": null,
    "methods": [
      "void SetInstance(Class inst)",
      "string ToString()",
      "string AsciiToString()",
      "string ToStringLen(int len)",
      "bool InRange( int min, int max, bool inclusive_min = true, bool inclusive_max = true )",
      "string ToString(bool simple = true)",
      "string ToString(bool beautify = true)",
      "float Normalize()",
      "float Length()",
      "float LengthSq()",
      "float Distance(vector v1, vector v2)",
      "float DistanceSq(vector v1, vector v2)",
      "static float Dot(vector v1, vector v2)",
      "float VectorToYaw()",
      "void RotationMatrixFromAngles(out vector mat[3])",
      "string GetModule()",
      "bool IsInherited(typename baseType)",
      "int GetVariableCount()",
      "string GetVariableName(int vIdx)",
      "bool GetVariableValue(Class var, int vIdx, out void val)",
      "static string EnumToString(typename e, int enumValue)",
      "static int StringToEnum(typename e, string enumName)",
      "void EnumTools()",
      "static int GetEnumSize(typename e)",
      "static int GetEnumValue(typename e, int idx)",
      "static int GetLastEnumValue(typename e)"
    ]
  },
  "int": {
    "parent": null,
    "methods": [
      "string ToString()",
      "string AsciiToString()",
      "string ToStringLen(int len)",
      "bool InRange( int min, int max, bool inclusive_min = true, bool inclusive_max = true )",
      "string ToString(bool simple = true)",
      "string ToString(bool beautify = true)",
      "float Normalize()",
      "float Length()",
      "float LengthSq()",
      "float Distance(vector v1, vector v2)",
      "float DistanceSq(vector v1, vector v2)",
      "static float Dot(vector v1, vector v2)",
      "float VectorToYaw()",
      "void RotationMatrixFromAngles(out vector mat[3])",
      "string GetModule()",
      "bool IsInherited(typename baseType)",
      "int GetVariableCount()",
      "string GetVariableName(int vIdx)",
      "bool GetVariableValue(Class var, int vIdx, out void val)",
      "static string EnumToString(typename e, int enumValue)",
      "static int StringToEnum(typename e, string enumName)",
      "void EnumTools()",
      "static int GetEnumSize(typename e)",
      "static int GetEnumValue(typename e, int idx)",
      "static int GetLastEnumValue(typename e)"
    ]
  },
  "float": {
    "parent": null,
    "methods": [
      "string ToString(bool simple = true)",
      "string ToString(bool beautify = true)",
      "float Normalize()",
      "float Length()",
      "float LengthSq()",
      "float Distance(vector v1, vector v2)",
      "float DistanceSq(vector v1, vector v2)",
      "static float Dot(vector v1, vector v2)",
      "float VectorToYaw()",
      "void RotationMatrixFromAngles(out vector mat[3])",
      "string GetModule()",
      "string ToString()",
      "bool IsInherited(typename baseType)",
      "int GetVariableCount()",
      "string GetVariableName(int vIdx)",
      "bool GetVariableValue(Class var, int vIdx, out void val)",
      "static string EnumToString(typename e, int enumValue)",
      "static int StringToEnum(typename e, string enumName)",
      "void EnumTools()",
      "static int GetEnumSize(typename e)",
      "static int GetEnumValue(typename e, int idx)",
      "static int GetLastEnumValue(typename e)"
    ]
  },
  "vector": {
    "parent": null,
    "methods": [
      "string ToString(bool beautify = true)",
      "float Normalize()",
      "float Length()",
      "float LengthSq()",
      "float Distance(vector v1, vector v2)",
      "float DistanceSq(vector v1, vector v2)",
      "static float Dot(vector v1, vector v2)",
      "float VectorToYaw()",
      "void RotationMatrixFromAngles(out vector mat[3])",
      "string GetModule()",
      "string ToString()",
      "bool IsInherited(typename baseType)",
      "int GetVariableCount()",
      "string GetVariableName(int vIdx)",
      "bool GetVariableValue(Class var, int vIdx, out void val)",
      "static string EnumToString(typename e, int enumValue)",
      "static int StringToEnum(typename e, string enumName)",
      "void EnumTools()",
      "static int GetEnumSize(typename e)",
      "static int GetEnumValue(typename e, int idx)",
      "static int GetLastEnumValue(typename e)"
    ]
  },
  "typename": {
    "parent": null,
    "methods": [
      "string GetModule()",
      "string ToString()",
      "bool IsInherited(typename baseType)",
      "int GetVariableCount()",
      "string GetVariableName(int vIdx)",
      "bool GetVariableValue(Class var, int vIdx, out void val)",
      "static string EnumToString(typename e, int enumValue)",
      "static int StringToEnum(typename e, string enumName)",
      "void EnumTools()",
      "static int GetEnumSize(typename e)",
      "static int GetEnumValue(typename e, int idx)",
      "static int GetLastEnumValue(typename e)"
    ]
  },
  "EnumTools": {
    "parent": null,
    "methods": [
      "void EnumTools()",
      "static string EnumToString(typename e, int enumValue)",
      "static int StringToEnum(typename e, string enumName)",
      "static int GetEnumSize(typename e)",
      "static int GetEnumValue(typename e, int idx)",
      "static int GetLastEnumValue(typename e)"
    ]
  },
  "Shape": {
    "parent": null,
    "methods": [
      "void GetMatrix(out vector mat[4])",
      "void SetMatrix(vector mat[4])",
      "void SetDirection(vector direction)",
      "void SetPosition(vector position)",
      "void SetColor(int color)",
      "void SetFlags(ShapeFlags flags)",
      "void Destroy()",
      "static void CreateMatrix(vector mat[4])",
      "bool IsInitialized()",
      "void InitScriptDiags()",
      "void ClearScriptDiags()",
      "void RegisterMenu(int id, string name, int parent)",
      "void RegisterItem(int id, string shortcut, string name, int parent, string values, func callback = null)",
      "void RegisterBool(int id, string shortcut, string name, int parent, bool reverse = false, func callback = null)",
      "void RegisterRange(int id, string shortcut, string name, int parent, string valuenames, func callback = null)",
      "void Unregister(int id)",
      "bool IsRegistered(int id)",
      "bool BindCallback(int id, func callback)",
      "void UnbindCallback(int id)",
      "bool GetBool(int id, bool reverse = false)",
      "int GetValue(int id)",
      "void SetValue(int id, int value)",
      "float GetRangeValue(int id)",
      "void SetRangeValue(int id, float value)",
      "int GetEngineValue(int id)",
      "void SetEngineValue(int id, int value)",
      "float GetEngineRangeValue(int id)",
      "void SetEngineRangeValue(int id, float value)",
      "bool MenuExists(string name)"
    ]
  },
  "DiagMenu": {
    "parent": null,
    "methods": [
      "bool IsInitialized()",
      "void InitScriptDiags()",
      "void ClearScriptDiags()",
      "void RegisterMenu(int id, string name, int parent)",
      "void RegisterItem(int id, string shortcut, string name, int parent, string values, func callback = null)",
      "void RegisterBool(int id, string shortcut, string name, int parent, bool reverse = false, func callback = null)",
      "void RegisterRange(int id, string shortcut, string name, int parent, string valuenames, func callback = null)",
      "void Unregister(int id)",
      "bool IsRegistered(int id)",
      "bool BindCallback(int id, func callback)",
      "void UnbindCallback(int id)",
      "bool GetBool(int id, bool reverse = false)",
      "int GetValue(int id)",
      "void SetValue(int id, int value)",
      "float GetRangeValue(int id)",
      "void SetRangeValue(int id, float value)",
      "int GetEngineValue(int id)",
      "void SetEngineValue(int id, int value)",
      "float GetEngineRangeValue(int id)",
      "void SetEngineRangeValue(int id, float value)",
      "bool MenuExists(string name)"
    ]
  },
  "BaseContainer": {
    "parent": null,
    "methods": [
      "string GetClassName()",
      "string GetName()",
      "int VarIndex(string varName)",
      "bool IsVariableSet(int varIndex)",
      "bool IsType(int varIndex, typename type)",
      "bool Get(int varIndex, out void val)",
      "void EOnTouch(IEntity other, int extra)",
      "void EOnInit(IEntity other, int extra)",
      "void EOnExtra(IEntity other, int extra)",
      "void EOnNotVisible(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "int EOnVisible(IEntity other, int extra)",
      "void EOnPostFrame(IEntity other, int extra)",
      "void EOnWorldProcess(IEntity other, int extra)",
      "void EOnAnimEvent(IEntity other, AnimEvent extra)",
      "void EOnSoundEvent(IEntity other, SoundEvent extra)",
      "void EOnSimulate(IEntity other, float dt)",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void EOnJointBreak(IEntity other, int extra)",
      "void EOnPhysicsMove(IEntity other, int extra)",
      "void EOnContact(IEntity other, Contact extra)",
      "void EOnUser0(IEntity other, int extra)",
      "void EOnUser1(IEntity other, int extra)",
      "void EOnEnter(IEntity other, int extra)",
      "void EOnLeave(IEntity other, int extra)",
      "void EOnUser4(IEntity other, int extra)",
      "void EOnDummy020(IEntity other, int extra)",
      "void EOnDummy021(IEntity other, int extra)",
      "void EOnDummy022(IEntity other, int extra)",
      "void EOnDummy023(IEntity other, int extra)",
      "void EOnDummy024(IEntity other, int extra)",
      "void EOnDummy025(IEntity other, int extra)",
      "void EOnDummy026(IEntity other, int extra)",
      "void EOnDummy027(IEntity other, int extra)",
      "void EOnDummy028(IEntity other, int extra)",
      "void EOnDummy029(IEntity other, int extra)",
      "void EOnDummy030(IEntity other, int extra)",
      "void EOnDummy031(IEntity other, int extra)",
      "void GetTransform(out vector mat[])",
      "void GetRenderTransform(out vector mat[])",
      "void GetLocalTransform(out vector mat[])",
      "void SetTransform(vector mat[4])",
      "void SetYawPitchRoll(vector angles)",
      "void SetAngles(vector angles)",
      "void SetOrigin(vector orig)",
      "float GetScale()",
      "void SetScale(float scale)",
      "int GetID()",
      "void SetID(int id)",
      "void SetName(string name)",
      "bool AddChild(notnull IEntity child, int pivot, bool positionOnly = false)",
      "bool RemoveChild(notnull IEntity child, bool keepTransform = false)",
      "bool IsHierarchyPositionOnly()",
      "int GetHierarchyPivot()",
      "void GetBounds(out vector mins, out vector maxs)",
      "void GetWorldBounds(out vector mins, out vector maxs)",
      "bool IsFlagSet(EntityFlags flags)",
      "void SendEvent(notnull IEntity actor, EntityEvent e, void extra)",
      "void SetObject(vobject object, string options)",
      "int Animate(float speed, int loop)",
      "int AnimateEx(float speed, int loop, out vector lin, out vector ang)",
      "int SetCameraMask(int mask)",
      "void FilterNextTrace()",
      "int Update()",
      "void IEntity(IEntitySource src, IEntity parent)",
      "void SetFixedLOD(IEntity ent, int lod)",
      "void SetRenderView(IEntity ent, int cam_index, int width, int height)",
      "void GetRenderView(IEntity ent, out int cam_index, out int width, out int height)",
      "void ParamEnum(string key, string value, string desc = )",
      "void Attribute(string defvalue, string uiwidget, string desc = , string rangescale = , ParamEnumArray enums = NULL)",
      "void EditorAttribute(string style, string category, string description, vector sizeMin, vector sizeMax, string color, string color2 = , bool visible = true, bool insertable = true, bool dynamicBox = false)"
    ]
  },
  "IEntitySource": {
    "parent": null,
    "methods": [
      "void EOnTouch(IEntity other, int extra)",
      "void EOnInit(IEntity other, int extra)",
      "void EOnExtra(IEntity other, int extra)",
      "void EOnNotVisible(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "int EOnVisible(IEntity other, int extra)",
      "void EOnPostFrame(IEntity other, int extra)",
      "void EOnWorldProcess(IEntity other, int extra)",
      "void EOnAnimEvent(IEntity other, AnimEvent extra)",
      "void EOnSoundEvent(IEntity other, SoundEvent extra)",
      "void EOnSimulate(IEntity other, float dt)",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void EOnJointBreak(IEntity other, int extra)",
      "void EOnPhysicsMove(IEntity other, int extra)",
      "void EOnContact(IEntity other, Contact extra)",
      "void EOnUser0(IEntity other, int extra)",
      "void EOnUser1(IEntity other, int extra)",
      "void EOnEnter(IEntity other, int extra)",
      "void EOnLeave(IEntity other, int extra)",
      "void EOnUser4(IEntity other, int extra)",
      "void EOnDummy020(IEntity other, int extra)",
      "void EOnDummy021(IEntity other, int extra)",
      "void EOnDummy022(IEntity other, int extra)",
      "void EOnDummy023(IEntity other, int extra)",
      "void EOnDummy024(IEntity other, int extra)",
      "void EOnDummy025(IEntity other, int extra)",
      "void EOnDummy026(IEntity other, int extra)",
      "void EOnDummy027(IEntity other, int extra)",
      "void EOnDummy028(IEntity other, int extra)",
      "void EOnDummy029(IEntity other, int extra)",
      "void EOnDummy030(IEntity other, int extra)",
      "void EOnDummy031(IEntity other, int extra)",
      "void GetTransform(out vector mat[])",
      "void GetRenderTransform(out vector mat[])",
      "void GetLocalTransform(out vector mat[])",
      "void SetTransform(vector mat[4])",
      "void SetYawPitchRoll(vector angles)",
      "void SetAngles(vector angles)",
      "void SetOrigin(vector orig)",
      "float GetScale()",
      "void SetScale(float scale)",
      "int GetID()",
      "void SetID(int id)",
      "void SetName(string name)",
      "string GetName()",
      "bool AddChild(notnull IEntity child, int pivot, bool positionOnly = false)",
      "bool RemoveChild(notnull IEntity child, bool keepTransform = false)",
      "bool IsHierarchyPositionOnly()",
      "int GetHierarchyPivot()",
      "void GetBounds(out vector mins, out vector maxs)",
      "void GetWorldBounds(out vector mins, out vector maxs)",
      "bool IsFlagSet(EntityFlags flags)",
      "void SendEvent(notnull IEntity actor, EntityEvent e, void extra)",
      "void SetObject(vobject object, string options)",
      "int Animate(float speed, int loop)",
      "int AnimateEx(float speed, int loop, out vector lin, out vector ang)",
      "int SetCameraMask(int mask)",
      "void FilterNextTrace()",
      "int Update()",
      "void IEntity(IEntitySource src, IEntity parent)",
      "void SetFixedLOD(IEntity ent, int lod)",
      "void SetRenderView(IEntity ent, int cam_index, int width, int height)",
      "void GetRenderView(IEntity ent, out int cam_index, out int width, out int height)",
      "void ParamEnum(string key, string value, string desc = )",
      "void Attribute(string defvalue, string uiwidget, string desc = , string rangescale = , ParamEnumArray enums = NULL)",
      "void EditorAttribute(string style, string category, string description, vector sizeMin, vector sizeMax, string color, string color2 = , bool visible = true, bool insertable = true, bool dynamicBox = false)"
    ]
  },
  "WidgetSource": {
    "parent": null,
    "methods": [
      "void EOnTouch(IEntity other, int extra)",
      "void EOnInit(IEntity other, int extra)",
      "void EOnExtra(IEntity other, int extra)",
      "void EOnNotVisible(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "int EOnVisible(IEntity other, int extra)",
      "void EOnPostFrame(IEntity other, int extra)",
      "void EOnWorldProcess(IEntity other, int extra)",
      "void EOnAnimEvent(IEntity other, AnimEvent extra)",
      "void EOnSoundEvent(IEntity other, SoundEvent extra)",
      "void EOnSimulate(IEntity other, float dt)",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void EOnJointBreak(IEntity other, int extra)",
      "void EOnPhysicsMove(IEntity other, int extra)",
      "void EOnContact(IEntity other, Contact extra)",
      "void EOnUser0(IEntity other, int extra)",
      "void EOnUser1(IEntity other, int extra)",
      "void EOnEnter(IEntity other, int extra)",
      "void EOnLeave(IEntity other, int extra)",
      "void EOnUser4(IEntity other, int extra)",
      "void EOnDummy020(IEntity other, int extra)",
      "void EOnDummy021(IEntity other, int extra)",
      "void EOnDummy022(IEntity other, int extra)",
      "void EOnDummy023(IEntity other, int extra)",
      "void EOnDummy024(IEntity other, int extra)",
      "void EOnDummy025(IEntity other, int extra)",
      "void EOnDummy026(IEntity other, int extra)",
      "void EOnDummy027(IEntity other, int extra)",
      "void EOnDummy028(IEntity other, int extra)",
      "void EOnDummy029(IEntity other, int extra)",
      "void EOnDummy030(IEntity other, int extra)",
      "void EOnDummy031(IEntity other, int extra)",
      "void GetTransform(out vector mat[])",
      "void GetRenderTransform(out vector mat[])",
      "void GetLocalTransform(out vector mat[])",
      "void SetTransform(vector mat[4])",
      "void SetYawPitchRoll(vector angles)",
      "void SetAngles(vector angles)",
      "void SetOrigin(vector orig)",
      "float GetScale()",
      "void SetScale(float scale)",
      "int GetID()",
      "void SetID(int id)",
      "void SetName(string name)",
      "string GetName()",
      "bool AddChild(notnull IEntity child, int pivot, bool positionOnly = false)",
      "bool RemoveChild(notnull IEntity child, bool keepTransform = false)",
      "bool IsHierarchyPositionOnly()",
      "int GetHierarchyPivot()",
      "void GetBounds(out vector mins, out vector maxs)",
      "void GetWorldBounds(out vector mins, out vector maxs)",
      "bool IsFlagSet(EntityFlags flags)",
      "void SendEvent(notnull IEntity actor, EntityEvent e, void extra)",
      "void SetObject(vobject object, string options)",
      "int Animate(float speed, int loop)",
      "int AnimateEx(float speed, int loop, out vector lin, out vector ang)",
      "int SetCameraMask(int mask)",
      "void FilterNextTrace()",
      "int Update()",
      "void IEntity(IEntitySource src, IEntity parent)",
      "void SetFixedLOD(IEntity ent, int lod)",
      "void SetRenderView(IEntity ent, int cam_index, int width, int height)",
      "void GetRenderView(IEntity ent, out int cam_index, out int width, out int height)",
      "void ParamEnum(string key, string value, string desc = )",
      "void Attribute(string defvalue, string uiwidget, string desc = , string rangescale = , ParamEnumArray enums = NULL)",
      "void EditorAttribute(string style, string category, string description, vector sizeMin, vector sizeMax, string color, string color2 = , bool visible = true, bool insertable = true, bool dynamicBox = false)"
    ]
  },
  "IEntity": {
    "parent": null,
    "methods": [
      "void EOnTouch(IEntity other, int extra)",
      "void EOnInit(IEntity other, int extra)",
      "void EOnExtra(IEntity other, int extra)",
      "void EOnNotVisible(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "int EOnVisible(IEntity other, int extra)",
      "void EOnPostFrame(IEntity other, int extra)",
      "void EOnWorldProcess(IEntity other, int extra)",
      "void EOnAnimEvent(IEntity other, AnimEvent extra)",
      "void EOnSoundEvent(IEntity other, SoundEvent extra)",
      "void EOnSimulate(IEntity other, float dt)",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void EOnJointBreak(IEntity other, int extra)",
      "void EOnPhysicsMove(IEntity other, int extra)",
      "void EOnContact(IEntity other, Contact extra)",
      "void EOnUser0(IEntity other, int extra)",
      "void EOnUser1(IEntity other, int extra)",
      "void EOnEnter(IEntity other, int extra)",
      "void EOnLeave(IEntity other, int extra)",
      "void EOnUser4(IEntity other, int extra)",
      "void EOnDummy020(IEntity other, int extra)",
      "void EOnDummy021(IEntity other, int extra)",
      "void EOnDummy022(IEntity other, int extra)",
      "void EOnDummy023(IEntity other, int extra)",
      "void EOnDummy024(IEntity other, int extra)",
      "void EOnDummy025(IEntity other, int extra)",
      "void EOnDummy026(IEntity other, int extra)",
      "void EOnDummy027(IEntity other, int extra)",
      "void EOnDummy028(IEntity other, int extra)",
      "void EOnDummy029(IEntity other, int extra)",
      "void EOnDummy030(IEntity other, int extra)",
      "void EOnDummy031(IEntity other, int extra)",
      "void GetTransform(out vector mat[])",
      "void GetRenderTransform(out vector mat[])",
      "void GetLocalTransform(out vector mat[])",
      "void SetTransform(vector mat[4])",
      "void SetYawPitchRoll(vector angles)",
      "void SetAngles(vector angles)",
      "void SetOrigin(vector orig)",
      "float GetScale()",
      "void SetScale(float scale)",
      "int GetID()",
      "void SetID(int id)",
      "void SetName(string name)",
      "string GetName()",
      "bool AddChild(notnull IEntity child, int pivot, bool positionOnly = false)",
      "bool RemoveChild(notnull IEntity child, bool keepTransform = false)",
      "bool IsHierarchyPositionOnly()",
      "int GetHierarchyPivot()",
      "void GetBounds(out vector mins, out vector maxs)",
      "void GetWorldBounds(out vector mins, out vector maxs)",
      "bool IsFlagSet(EntityFlags flags)",
      "void SendEvent(notnull IEntity actor, EntityEvent e, void extra)",
      "void SetObject(vobject object, string options)",
      "int Animate(float speed, int loop)",
      "int AnimateEx(float speed, int loop, out vector lin, out vector ang)",
      "int SetCameraMask(int mask)",
      "void FilterNextTrace()",
      "int Update()",
      "void IEntity(IEntitySource src, IEntity parent)",
      "void SetFixedLOD(IEntity ent, int lod)",
      "void SetRenderView(IEntity ent, int cam_index, int width, int height)",
      "void GetRenderView(IEntity ent, out int cam_index, out int width, out int height)",
      "void ParamEnum(string key, string value, string desc = )",
      "void Attribute(string defvalue, string uiwidget, string desc = , string rangescale = , ParamEnumArray enums = NULL)",
      "void EditorAttribute(string style, string category, string description, vector sizeMin, vector sizeMax, string color, string color2 = , bool visible = true, bool insertable = true, bool dynamicBox = false)"
    ]
  },
  "ParamEnum": {
    "parent": null,
    "methods": [
      "void ParamEnum(string key, string value, string desc = )",
      "void Attribute(string defvalue, string uiwidget, string desc = , string rangescale = , ParamEnumArray enums = NULL)",
      "void EditorAttribute(string style, string category, string description, vector sizeMin, vector sizeMax, string color, string color2 = , bool visible = true, bool insertable = true, bool dynamicBox = false)"
    ]
  },
  "ParamEnumArray": {
    "parent": null,
    "methods": [
      "void Attribute(string defvalue, string uiwidget, string desc = , string rangescale = , ParamEnumArray enums = NULL)",
      "void EditorAttribute(string style, string category, string description, vector sizeMin, vector sizeMax, string color, string color2 = , bool visible = true, bool insertable = true, bool dynamicBox = false)"
    ]
  },
  "Attribute": {
    "parent": null,
    "methods": [
      "void Attribute(string defvalue, string uiwidget, string desc = , string rangescale = , ParamEnumArray enums = NULL)",
      "void EditorAttribute(string style, string category, string description, vector sizeMin, vector sizeMax, string color, string color2 = , bool visible = true, bool insertable = true, bool dynamicBox = false)"
    ]
  },
  "EditorAttribute": {
    "parent": null,
    "methods": [
      "void EditorAttribute(string style, string category, string description, vector sizeMin, vector sizeMax, string color, string color2 = , bool visible = true, bool insertable = true, bool dynamicBox = false)"
    ]
  },
  "Math": {
    "parent": null,
    "methods": [
      "void Math()",
      "static int GetNumberOfSetBits(int i)",
      "static int GetNthBitSet(int value, int n)",
      "static int RandomInt(int min, int max)",
      "static int RandomIntInclusive(int min, int max)",
      "static bool RandomBool()",
      "static float RandomFloat(float min, float max)",
      "static float RandomFloatInclusive(float min, float max)",
      "static float RandomFloat01()",
      "static int Randomize(int seed)",
      "static float NormalizeAngle(float ang)",
      "static float DiffAngle(float angle1, float angle2)",
      "static float Pow(float v, float power)",
      "static float ModFloat(float x, float y)",
      "static float RemainderFloat(float x, float y)",
      "static float AbsFloat(float f)",
      "static int AbsInt(int i)",
      "static float SignFloat(float f)",
      "static int SignInt(int i)",
      "static float SqrFloat(float f)",
      "static int SqrInt(int i)",
      "static float Sqrt(float val)",
      "static float Log2(float x)",
      "static float Sin(float angle)",
      "static float Cos(float angle)",
      "static float Tan(float angle)",
      "static float Asin(float s)",
      "static float Acos(float c)",
      "static float Atan(float x)",
      "static float Atan2(float y, float x)",
      "static float Round(float f)",
      "static float Floor(float f)",
      "static float Ceil(float f)",
      "static float WrapFloat(float f, float min, float max)",
      "static float WrapFloatInclusive(float f, float min, float max)",
      "static float WrapFloat0X(float f, float max)",
      "static float WrapFloat0XInclusive(float f, float max)",
      "static int WrapInt(int i, int min, int max)",
      "static int WrapInt0X(int i, int max)",
      "static float Clamp(float value, float min, float max)",
      "static float Min(float x, float y)",
      "static float Max(float x, float y)",
      "static bool IsInRange(float v, float min, float max)",
      "static bool IsInRangeInt(int v, int min, int max)",
      "static float Lerp(float a, float b, float time)",
      "static float InverseLerp(float a, float b, float value)",
      "static float AreaOfRightTriangle(float s, float a)",
      "static float HypotenuseOfRightTriangle(float s, float a)",
      "static bool IsPointInCircle(vector c, float r, vector p)",
      "static bool IsPointInRectangle(vector mi, vector ma, vector p)",
      "static float SmoothCD(float val, float target, inout float velocity[], float smoothTime, float maxVelocity, float dt)",
      "static float SmoothCDPI2PI(float val, float target, inout float velocity[], float smoothTime, float maxVelocity, float dt)",
      "static float Poisson(float mean, int occurences)",
      "static int Factorial(int val)",
      "static float Remap(float inputMin, float inputMax, float outputMin, float outputMax, float inputValue, bool clampedOutput = true)"
    ]
  },
  "Math2D": {
    "parent": null,
    "methods": [
      "void Math2D()",
      "bool IsPointInPolygonXZ(notnull array<vector> polygon, vector point)",
      "bool IsPointInTriangleXZ(vector p1, vector p2, vector p3, vector point)",
      "bool IsPointInPolygon(notnull array<float> polygon, float x, float y)"
    ]
  },
  "Math3D": {
    "parent": null,
    "methods": [
      "void Math3D()",
      "static float IntersectRaySphere(vector raybase, vector raycos, vector center, float radius)",
      "static float IntersectRayBox(vector start, vector end, vector mins, vector maxs)",
      "static bool IntersectSphereBox(vector origin, float radius, vector mins, vector maxs)",
      "static bool IntersectSphereCone(vector origin, float radius, vector conepos, vector axis, float angle)",
      "static bool IntersectWholeSphereCone(vector origin, float radius, vector conepos, vector axis, float angle)",
      "static bool IntersectCylinderOBB(vector mins, vector maxs, vector obbMat[4], vector cylMat[4], float cylinderRadius, float cylinderHeight)",
      "static bool IntersectRayCylinder(vector rayStart, vector rayEnd, vector center, float radius, float height)",
      "static int IntersectRayPlane(vector rayStart, vector rayEnd, vector planeNormal, float planeDist, out vector intersection)",
      "static void YawPitchRollMatrix(vector ang, out vector mat[3])",
      "static void DirectionAndUpMatrix(vector dir, vector up, out vector mat[4])",
      "static void MatrixMultiply4(vector mat0[4], vector mat1[4], out vector res[4])",
      "static void MatrixMultiply3(vector mat0[3], vector mat1[3], out vector res[3])",
      "static void MatrixInvMultiply4(vector mat0[4], vector mat1[4], out vector res[4])",
      "static void MatrixInvMultiply3(vector mat0[3], vector mat1[3], out vector res[3])",
      "static void MatrixInverse4(vector mat[4])",
      "static void MatrixInverse3(vector mat[3])",
      "static void MatrixOrthogonalize4(vector mat[4])",
      "static void MatrixOrthogonalize3(vector mat[3])",
      "static void MatrixIdentity4(out vector mat[4])",
      "static void MatrixIdentity3(out vector mat[3])",
      "static void ScaleMatrix(float scale, out vector mat[3])",
      "static void QuatIdentity(out float q[4])",
      "static void QuatCopy(float s[4], out float d[4])",
      "static void MatrixToQuat(vector mat[3], out float d[4])",
      "static void QuatToMatrix(float q[4], out vector mat[3])",
      "static void QuatLerp(out float qout[4], float q1[4], float q2[4], float frac)",
      "static void QuatMultiply(out float qout[4], float q1[4], float q2[4])",
      "static int CheckBoundBox(vector mins1, vector maxs1, vector mins2, vector maxs2)",
      "static float AngleFromPosition(vector origin, vector originDir, vector target)",
      "static void ConePoints(vector origin, float length, float halfAngle, float angleOffset, out vector leftPoint, out vector rightPoint)"
    ]
  },
  "PhysicsGeomDef": {
    "parent": null,
    "methods": [
      "void PhysicsGeomDef(string name, dGeom geom, string materialName, int layerMask)",
      "bool dBodyCreateStaticEx(notnull IEntity ent, PhysicsGeomDef geoms[])",
      "bool dBodyCreateGhostEx(notnull IEntity ent, PhysicsGeomDef geoms[])",
      "bool dBodyCreateDynamicEx(notnull IEntity ent, vector centerOfMass, float mass, PhysicsGeomDef geoms[])",
      "void dBodyDestroy(notnull IEntity ent)",
      "bool dBodyIsSet(notnull IEntity ent)",
      "void dBodySetInteractionLayer(notnull IEntity ent, int mask)",
      "int dBodyGetInteractionLayer(notnull IEntity ent)",
      "void dBodySetGeomInteractionLayer(notnull IEntity ent, int index, int mask)",
      "int dBodyGetGeomInteractionLayer(notnull IEntity ent, int index)",
      "void dBodyActive(notnull IEntity ent, ActiveState activeState)",
      "void dBodyDynamic(notnull IEntity ent, bool dynamic)",
      "bool dBodyIsDynamic(notnull IEntity ent)",
      "bool dBodyIsActive(notnull IEntity ent)",
      "bool dBodyEnableGravity(notnull IEntity ent, bool enable)",
      "void dBodySetDamping(notnull IEntity ent, float linearDamping, float angularDamping)",
      "void dBodySetSleepingTreshold(notnull IEntity body, float linearTreshold, float angularTreshold)",
      "bool dBodyIsSolid(notnull IEntity ent)",
      "void dBodySetSolid(notnull IEntity ent, bool solid)",
      "void dBodyEnableCCD(notnull IEntity body, float maxMotion, float sphereCastRadius)",
      "void dBodySetLinearFactor(notnull IEntity body, vector linearFactor)",
      "void SetVelocity(notnull IEntity ent, vector vel)",
      "void dBodyRemoveBlock(notnull IEntity worldEntity, dBlock block)",
      "void dBodySetInertiaTensorV(notnull IEntity body, vector v)",
      "void dBodySetInertiaTensorM(notnull IEntity body, vector m[3])",
      "float dBodyGetMass(notnull IEntity ent)",
      "void dBodySetMass(notnull IEntity body, float mass)",
      "void dBodyApplyTorqueImpulse(notnull IEntity ent, vector torqueImpulse)",
      "float dBodyComputeImpulseDenominator(notnull IEntity ent, vector position, vector normal)",
      "float dBodyComputeAngularImpulseDenominator(notnull IEntity ent, vector axis)",
      "void dBodyGetInvInertiaTensorWorld(notnull IEntity body, out vector inertiaTensorWS[3])",
      "void dBodyApplyImpulseAt(notnull IEntity body, vector impulse, vector pos)",
      "void dBodyApplyImpulse(notnull IEntity body, vector impulse)",
      "void dBodyApplyForce(notnull IEntity body, vector force)",
      "void dBodyApplyForceAt(notnull IEntity body, vector pos, vector force)",
      "void dBodyApplyTorque(notnull IEntity body, vector torque)",
      "void dBodySetAngularVelocity(notnull IEntity body, vector angvel)",
      "void dBodySetTargetMatrix(notnull IEntity body, vector matrix[4], float timeslice)",
      "void dBodyGetWorldTransform(notnull IEntity body, out vector matrix[4])",
      "void dBodyGetDirectWorldTransform(notnull IEntity body, out vector matrix[4])",
      "float dBodyGetKineticEnergy(notnull IEntity body)",
      "void dGeomDestroy(dGeom geom)",
      "int dBodyGetGeom(notnull IEntity ent, string name)",
      "int dBodyGetNumGeoms(notnull IEntity ent)",
      "void dJointDestroy(dJoint joint)",
      "void dJointHingeSetLimits(dJoint joint, float low, float high, float softness, float biasFactor, float relaxationFactor)",
      "void dJointHingeSetAxis(dJoint joint, vector axis)",
      "void dJointHingeSetMotorTargetAngle(dJoint joint, float angle, float dt, float maxImpulse)",
      "void dJointConeTwistSetAngularOnly(dJoint joint, bool angularOnly)",
      "void dJointConeTwistSetLimit(dJoint joint, int limitIndex, float limitValue)",
      "void dJointConeTwistSetLimits(dJoint joint, float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor, float _relaxationFactor)",
      "void dJoint6DOFSetLinearLimits(dJoint joint, vector linearLower, vector linearUpper)",
      "void dJoint6DOFSetAngularLimits(dJoint joint, vector angularLower, vector angularUpper)",
      "void dJoint6DOFSetLimit(dJoint joint, int axis, float lo, float hi)",
      "void dJoint6DOFSpringSetSpring(dJoint joint, int axis, float stiffness, float damping)",
      "void dJointSliderSetLinearLimits(dJoint joint, float lowerLimit, float upperLimit)",
      "void dJointSliderSetAngularLimits(dJoint joint, float lowerLimit, float upperLimit)",
      "void dJointSliderSetDirLinear(dJoint joint, float softness, float restitution, float damping)",
      "void dJointSliderSetDirAngular(dJoint joint, float softness, float restitution, float damping)",
      "void dJointSliderSetLimLinear(dJoint joint, float softness, float restitution, float damping)",
      "void dJointSliderSetLimAngular(dJoint joint, float softness, float restitution, float damping)",
      "void dJointSliderSetOrthoLinear(dJoint joint, float softness, float restitution, float damping)",
      "void dJointSliderSetOrthoAngular(dJoint joint, float softness, float restitution, float damping)",
      "void dJointSliderSetLinearMotor(dJoint joint, float velocity, float force)",
      "void dJointSliderSetAngularMotor(dJoint joint, float velocity, float force)",
      "float dJointSliderGetLinearPos(dJoint joint)",
      "float dJointSliderGetAngularPos(dJoint joint)",
      "void Contact()",
      "float GetRelativeVelocityBefore(vector vel)",
      "float GetRelativeVelocityAfter(vector vel)"
    ]
  },
  "Contact": {
    "parent": null,
    "methods": [
      "void Contact()",
      "float GetRelativeVelocityBefore(vector vel)",
      "float GetRelativeVelocityAfter(vector vel)"
    ]
  },
  "EnProfiler": {
    "parent": null,
    "methods": [
      "void Enable(bool enable, bool immediate = false, bool sessionReset = true)",
      "int IsEnabled()",
      "static bool IsEnabledD()",
      "static bool IsEnabledP()",
      "static bool IsEnabledC()",
      "void SortData()",
      "void ResetSession(bool fullReset = false)",
      "int SetFlags(int flags, bool sessionReset = true)",
      "int GetFlags()",
      "bool IsFlagsSet(int flags)",
      "int AddFlags(int flags, bool sessionReset = true)",
      "int RemoveFlags(int flags, bool sessionReset = true)",
      "int ClearFlags(bool sessionReset = true)",
      "void SetModule(EnProfilerModule module, bool sessionReset = true)",
      "string ModuleToName(EnProfilerModule module)",
      "bool NameToModule(string moduleName, out EnProfilerModule module)",
      "void SetInterval(int interval, bool sessionReset = true)",
      "int GetInterval()",
      "void SetTimeResolution(int resolution)",
      "int GetTimeResolution()",
      "void EnableAverage(bool enable)",
      "bool IsAverage()",
      "void Dump()",
      "int GetGameFrame()",
      "int GetSessionFrame()",
      "int GetTotalFrames()",
      "int GetProfiledSessionFrames()",
      "int GetProfiledFrames()",
      "void GetTimePerClass(notnull out array<ref EnProfilerTimeClassPair> outArr, int count = int.MAX)",
      "void GetAllocationsPerClass(notnull out array<ref EnProfilerCountClassPair> outArr, int count = int.MAX)",
      "void GetInstancesPerClass(notnull out array<ref EnProfilerCountClassPair> outArr, int count = int.MAX)",
      "void GetTimePerFunc(notnull out array<ref EnProfilerTimeFuncPair> outArr, int count = int.MAX)",
      "void GetCountPerFunc(notnull out array<ref EnProfilerCountFuncPair> outArr, int count = int.MAX)",
      "float GetTimeOfClass(typename clss, bool immediate = false)",
      "int GetAllocationsOfClass(typename clss, bool immediate = false)",
      "int GetInstancesOfClass(typename clss, bool immediate = false)",
      "float GetTimeOfFunc(string funct, typename clss, bool immediate = false)",
      "float GetTimeOfFuncG(string funct, bool immediate = false)",
      "int GetCountOfFunc(string funct, typename clss, bool immediate = false)",
      "int GetCountOfFuncG(string funct, bool immediate = false)",
      "static bool RequestImmediateData()"
    ]
  },
  "Class": {
    "parent": null,
    "methods": [
      "bool IsInherited(typename type)",
      "string ClassName()",
      "string GetDebugName()",
      "string ToString()",
      "static bool CastTo(out Class to, Class from)",
      "static bool SafeCastType(Class type, out Class to, Class from)",
      "int Call(Class inst, string function, void parm)",
      "int CallFunction(Class inst, string function, out void returnVal, void parm)",
      "int CallFunctionParams(Class inst, string function, out void returnVal, Class parms)",
      "void Release()",
      "void EnScript()",
      "int GetClassVar(Class inst, string varname,int index, out void result)",
      "int SetClassVar(Class inst, string varname, int index, void input)",
      "int SetVar(out void var, string value)",
      "void Watch(void var, int flags)",
      "void Sort(void param_array[], int num)",
      "void reversearray(void param_array)",
      "void copyarray(void destArray, void srcArray)",
      "int ParseStringEx(inout string input, string token)",
      "int ParseString(string input, out string tokens[])",
      "int KillThread(Class owner, string name)",
      "void Idle()",
      "string ThreadFunction(Class owner, string name, int backtrace, out int linenumber)",
      "string String(string s)",
      "void PrintString(string s)",
      "int Count()",
      "void Clear()",
      "void Set(int n, T value)",
      "int Find(T value)",
      "int Insert(T value)",
      "int InsertAt(T value, int index)",
      "void InsertAll(notnull array<T> from)",
      "void Remove(int index)",
      "void RemoveOrdered(int index)",
      "void Resize(int newSize)",
      "void Reserve(int newSize)",
      "void Swap(notnull array<T> other)",
      "void Sort(bool reverse = false)",
      "int Copy(notnull array<T> from)",
      "int Init(T init[])",
      "void RemoveItem(T value)",
      "void RemoveItemUnOrdered(T value)",
      "bool IsValidIndex( int index )",
      "void Debug()",
      "int GetRandomIndex()",
      "void SwapItems(int item1_index, int item2_index)",
      "void InsertArray(array<T> other)",
      "void Invert()",
      "int MoveIndex(int curr_index, int move_number)",
      "void ShuffleArray()",
      "int DifferentAtPosition(array<T> pOtherArray)",
      "int Copy(set<T> from)",
      "void Swap(set<T> other)",
      "void InsertSet(set<T> other)",
      "void RemoveItems(set<T> other)",
      "bool Find(TKey key, out TValue val)",
      "void Set(TKey key, TValue value)",
      "void Remove(TKey key)",
      "void RemoveElement(int i)",
      "bool Contains(TKey key)",
      "bool Insert(TKey key, TValue value)",
      "int Copy(map<TKey,TValue> from)",
      "bool ReplaceKey(TKey old_key, TKey new_key)",
      "bool GetKeyByValueChecked(TValue value, out TKey key)"
    ]
  },
  "Managed": {
    "parent": null,
    "methods": [
      "int Call(Class inst, string function, void parm)",
      "int CallFunction(Class inst, string function, out void returnVal, void parm)",
      "int CallFunctionParams(Class inst, string function, out void returnVal, Class parms)",
      "void Release()",
      "void EnScript()",
      "int GetClassVar(Class inst, string varname,int index, out void result)",
      "int SetClassVar(Class inst, string varname, int index, void input)",
      "int SetVar(out void var, string value)",
      "void Watch(void var, int flags)",
      "void Sort(void param_array[], int num)",
      "void reversearray(void param_array)",
      "void copyarray(void destArray, void srcArray)",
      "int ParseStringEx(inout string input, string token)",
      "int ParseString(string input, out string tokens[])",
      "int KillThread(Class owner, string name)",
      "void Idle()",
      "string ThreadFunction(Class owner, string name, int backtrace, out int linenumber)",
      "string String(string s)",
      "void PrintString(string s)",
      "int Count()",
      "void Clear()",
      "void Set(int n, T value)",
      "int Find(T value)",
      "int Insert(T value)",
      "int InsertAt(T value, int index)",
      "void InsertAll(notnull array<T> from)",
      "void Remove(int index)",
      "void RemoveOrdered(int index)",
      "void Resize(int newSize)",
      "void Reserve(int newSize)",
      "void Swap(notnull array<T> other)",
      "void Sort(bool reverse = false)",
      "int Copy(notnull array<T> from)",
      "int Init(T init[])",
      "void RemoveItem(T value)",
      "void RemoveItemUnOrdered(T value)",
      "bool IsValidIndex( int index )",
      "void Debug()",
      "int GetRandomIndex()",
      "void SwapItems(int item1_index, int item2_index)",
      "void InsertArray(array<T> other)",
      "void Invert()",
      "int MoveIndex(int curr_index, int move_number)",
      "void ShuffleArray()",
      "int DifferentAtPosition(array<T> pOtherArray)",
      "int Copy(set<T> from)",
      "void Swap(set<T> other)",
      "void InsertSet(set<T> other)",
      "void RemoveItems(set<T> other)",
      "bool Find(TKey key, out TValue val)",
      "void Set(TKey key, TValue value)",
      "void Remove(TKey key)",
      "void RemoveElement(int i)",
      "bool Contains(TKey key)",
      "bool Insert(TKey key, TValue value)",
      "int Copy(map<TKey,TValue> from)",
      "bool ReplaceKey(TKey old_key, TKey new_key)",
      "bool GetKeyByValueChecked(TValue value, out TKey key)"
    ]
  },
  "NonSerialized": {
    "parent": null,
    "methods": [
      "int Call(Class inst, string function, void parm)",
      "int CallFunction(Class inst, string function, out void returnVal, void parm)",
      "int CallFunctionParams(Class inst, string function, out void returnVal, Class parms)",
      "void Release()",
      "void EnScript()",
      "int GetClassVar(Class inst, string varname,int index, out void result)",
      "int SetClassVar(Class inst, string varname, int index, void input)",
      "int SetVar(out void var, string value)",
      "void Watch(void var, int flags)",
      "void Sort(void param_array[], int num)",
      "void reversearray(void param_array)",
      "void copyarray(void destArray, void srcArray)",
      "int ParseStringEx(inout string input, string token)",
      "int ParseString(string input, out string tokens[])",
      "int KillThread(Class owner, string name)",
      "void Idle()",
      "string ThreadFunction(Class owner, string name, int backtrace, out int linenumber)",
      "string String(string s)",
      "void PrintString(string s)",
      "int Count()",
      "void Clear()",
      "void Set(int n, T value)",
      "int Find(T value)",
      "int Insert(T value)",
      "int InsertAt(T value, int index)",
      "void InsertAll(notnull array<T> from)",
      "void Remove(int index)",
      "void RemoveOrdered(int index)",
      "void Resize(int newSize)",
      "void Reserve(int newSize)",
      "void Swap(notnull array<T> other)",
      "void Sort(bool reverse = false)",
      "int Copy(notnull array<T> from)",
      "int Init(T init[])",
      "void RemoveItem(T value)",
      "void RemoveItemUnOrdered(T value)",
      "bool IsValidIndex( int index )",
      "void Debug()",
      "int GetRandomIndex()",
      "void SwapItems(int item1_index, int item2_index)",
      "void InsertArray(array<T> other)",
      "void Invert()",
      "int MoveIndex(int curr_index, int move_number)",
      "void ShuffleArray()",
      "int DifferentAtPosition(array<T> pOtherArray)",
      "int Copy(set<T> from)",
      "void Swap(set<T> other)",
      "void InsertSet(set<T> other)",
      "void RemoveItems(set<T> other)",
      "bool Find(TKey key, out TValue val)",
      "void Set(TKey key, TValue value)",
      "void Remove(TKey key)",
      "void RemoveElement(int i)",
      "bool Contains(TKey key)",
      "bool Insert(TKey key, TValue value)",
      "int Copy(map<TKey,TValue> from)",
      "bool ReplaceKey(TKey old_key, TKey new_key)",
      "bool GetKeyByValueChecked(TValue value, out TKey key)"
    ]
  },
  "ScriptModule": {
    "parent": null,
    "methods": [
      "int Call(Class inst, string function, void parm)",
      "int CallFunction(Class inst, string function, out void returnVal, void parm)",
      "int CallFunctionParams(Class inst, string function, out void returnVal, Class parms)",
      "void Release()",
      "void EnScript()",
      "int GetClassVar(Class inst, string varname,int index, out void result)",
      "int SetClassVar(Class inst, string varname, int index, void input)",
      "int SetVar(out void var, string value)",
      "void Watch(void var, int flags)",
      "void Sort(void param_array[], int num)",
      "void reversearray(void param_array)",
      "void copyarray(void destArray, void srcArray)",
      "int ParseStringEx(inout string input, string token)",
      "int ParseString(string input, out string tokens[])",
      "int KillThread(Class owner, string name)",
      "void Idle()",
      "string ThreadFunction(Class owner, string name, int backtrace, out int linenumber)",
      "string String(string s)",
      "void PrintString(string s)",
      "int Count()",
      "void Clear()",
      "void Set(int n, T value)",
      "int Find(T value)",
      "int Insert(T value)",
      "int InsertAt(T value, int index)",
      "void InsertAll(notnull array<T> from)",
      "void Remove(int index)",
      "void RemoveOrdered(int index)",
      "void Resize(int newSize)",
      "void Reserve(int newSize)",
      "void Swap(notnull array<T> other)",
      "void Sort(bool reverse = false)",
      "int Copy(notnull array<T> from)",
      "int Init(T init[])",
      "void RemoveItem(T value)",
      "void RemoveItemUnOrdered(T value)",
      "bool IsValidIndex( int index )",
      "void Debug()",
      "int GetRandomIndex()",
      "void SwapItems(int item1_index, int item2_index)",
      "void InsertArray(array<T> other)",
      "void Invert()",
      "int MoveIndex(int curr_index, int move_number)",
      "void ShuffleArray()",
      "int DifferentAtPosition(array<T> pOtherArray)",
      "int Copy(set<T> from)",
      "void Swap(set<T> other)",
      "void InsertSet(set<T> other)",
      "void RemoveItems(set<T> other)",
      "bool Find(TKey key, out TValue val)",
      "void Set(TKey key, TValue value)",
      "void Remove(TKey key)",
      "void RemoveElement(int i)",
      "bool Contains(TKey key)",
      "bool Insert(TKey key, TValue value)",
      "int Copy(map<TKey,TValue> from)",
      "bool ReplaceKey(TKey old_key, TKey new_key)",
      "bool GetKeyByValueChecked(TValue value, out TKey key)"
    ]
  },
  "EnScript": {
    "parent": null,
    "methods": [
      "void EnScript()",
      "int GetClassVar(Class inst, string varname,int index, out void result)",
      "int SetClassVar(Class inst, string varname, int index, void input)",
      "int SetVar(out void var, string value)",
      "void Watch(void var, int flags)",
      "void Sort(void param_array[], int num)",
      "void reversearray(void param_array)",
      "void copyarray(void destArray, void srcArray)",
      "int ParseStringEx(inout string input, string token)",
      "int ParseString(string input, out string tokens[])",
      "int KillThread(Class owner, string name)",
      "void Idle()",
      "string ThreadFunction(Class owner, string name, int backtrace, out int linenumber)",
      "string String(string s)",
      "void PrintString(string s)",
      "int Count()",
      "void Clear()",
      "void Set(int n, T value)",
      "int Find(T value)",
      "int Insert(T value)",
      "int InsertAt(T value, int index)",
      "void InsertAll(notnull array<T> from)",
      "void Remove(int index)",
      "void RemoveOrdered(int index)",
      "void Resize(int newSize)",
      "void Reserve(int newSize)",
      "void Swap(notnull array<T> other)",
      "void Sort(bool reverse = false)",
      "int Copy(notnull array<T> from)",
      "int Init(T init[])",
      "void RemoveItem(T value)",
      "void RemoveItemUnOrdered(T value)",
      "bool IsValidIndex( int index )",
      "void Debug()",
      "int GetRandomIndex()",
      "void SwapItems(int item1_index, int item2_index)",
      "void InsertArray(array<T> other)",
      "void Invert()",
      "int MoveIndex(int curr_index, int move_number)",
      "void ShuffleArray()",
      "int DifferentAtPosition(array<T> pOtherArray)",
      "int Copy(set<T> from)",
      "void Swap(set<T> other)",
      "void InsertSet(set<T> other)",
      "void RemoveItems(set<T> other)",
      "bool Find(TKey key, out TValue val)",
      "void Set(TKey key, TValue value)",
      "void Remove(TKey key)",
      "void RemoveElement(int i)",
      "bool Contains(TKey key)",
      "bool Insert(TKey key, TValue value)",
      "int Copy(map<TKey,TValue> from)",
      "bool ReplaceKey(TKey old_key, TKey new_key)",
      "bool GetKeyByValueChecked(TValue value, out TKey key)"
    ]
  },
  "array": {
    "parent": null,
    "methods": [
      "int Count()",
      "void Clear()",
      "void Set(int n, T value)",
      "int Find(T value)",
      "int Insert(T value)",
      "int InsertAt(T value, int index)",
      "void InsertAll(notnull array<T> from)",
      "void Remove(int index)",
      "void RemoveOrdered(int index)",
      "void Resize(int newSize)",
      "void Reserve(int newSize)",
      "void Swap(notnull array<T> other)",
      "void Sort(bool reverse = false)",
      "int Copy(notnull array<T> from)",
      "int Init(T init[])",
      "void RemoveItem(T value)",
      "void RemoveItemUnOrdered(T value)",
      "bool IsValidIndex( int index )",
      "void Debug()",
      "int GetRandomIndex()",
      "void SwapItems(int item1_index, int item2_index)",
      "void InsertArray(array<T> other)",
      "void Invert()",
      "int MoveIndex(int curr_index, int move_number)",
      "void ShuffleArray()",
      "int DifferentAtPosition(array<T> pOtherArray)",
      "int Copy(set<T> from)",
      "void Swap(set<T> other)",
      "void InsertSet(set<T> other)",
      "void RemoveItems(set<T> other)",
      "bool Find(TKey key, out TValue val)",
      "void Set(TKey key, TValue value)",
      "void Remove(TKey key)",
      "void RemoveElement(int i)",
      "bool Contains(TKey key)",
      "bool Insert(TKey key, TValue value)",
      "int Copy(map<TKey,TValue> from)",
      "bool ReplaceKey(TKey old_key, TKey new_key)",
      "bool GetKeyByValueChecked(TValue value, out TKey key)"
    ]
  },
  "set": {
    "parent": null,
    "methods": [
      "int Count()",
      "void Clear()",
      "int Find(T value)",
      "int Insert(T value)",
      "int InsertAt(T value, int index)",
      "void Remove(int index)",
      "int Copy(set<T> from)",
      "void Swap(set<T> other)",
      "int Init(T init[])",
      "void InsertSet(set<T> other)",
      "void RemoveItem(T value)",
      "void RemoveItems(set<T> other)",
      "void Debug()",
      "bool Find(TKey key, out TValue val)",
      "void Set(TKey key, TValue value)",
      "void Remove(TKey key)",
      "void RemoveElement(int i)",
      "bool Contains(TKey key)",
      "bool Insert(TKey key, TValue value)",
      "int Copy(map<TKey,TValue> from)",
      "bool ReplaceKey(TKey old_key, TKey new_key)",
      "bool GetKeyByValueChecked(TValue value, out TKey key)"
    ]
  },
  "map": {
    "parent": null,
    "methods": [
      "int Count()",
      "void Clear()",
      "bool Find(TKey key, out TValue val)",
      "void Set(TKey key, TValue value)",
      "void Remove(TKey key)",
      "void RemoveElement(int i)",
      "bool Contains(TKey key)",
      "bool Insert(TKey key, TValue value)",
      "int Copy(map<TKey,TValue> from)",
      "bool ReplaceKey(TKey old_key, TKey new_key)",
      "bool GetKeyByValueChecked(TValue value, out TKey key)"
    ]
  },
  "string": {
    "parent": null,
    "methods": [
      "int ToInt()",
      "int HexToInt()",
      "float ToFloat()",
      "int ToAscii()",
      "string ToString(void var, bool type = false, bool name = false, bool quotes = true)",
      "string Substring(int start, int len)",
      "string SubstringInverted( string string_to_split, int position_start, int position_end )",
      "string SubstringUtf8(int startChar, int len)",
      "int Replace(string sample, string replace)",
      "int ToLower()",
      "int ToUpper()",
      "int Length()",
      "int LengthUtf8()",
      "int Hash()",
      "int IndexOf(string sample)",
      "int LastIndexOf(string sample)",
      "int IndexOfFrom(int start, string sample)",
      "bool Contains(string sample)",
      "string Trim()",
      "int TrimInPlace()",
      "int ParseStringEx(out string token)",
      "int ParseString(out string tokens[])",
      "void Split(string sample, out array<string> output)",
      "static string Join(string separator, notnull TStringArray tokens)",
      "string Get(int index)",
      "void Set(int index, string input)",
      "void OldSet(int n, string _value)",
      "void Insert(int index, string input)",
      "string Format(string fmt, void param1 = NULL, void param2 = NULL, void param3 = NULL, void param4 = NULL, void param5 = NULL, void param6 = NULL, void param7 = NULL, void param8 = NULL, void param9 = NULL)"
    ]
  },
  "BoneMask": {
    "parent": null,
    "methods": [
      "void SetAnimSlot(notnull IEntity ent, int slot, vobject anim, float blendin, float blendout, BoneMask mask, int fps, AnimFlags flags)",
      "void ChangeAnimSlotMask(notnull IEntity ent, int slot, float blendin, BoneMask mask)",
      "void ChangeAnimSlotFPS(notnull IEntity ent, int slot, int fps)",
      "void SetAnimMask(notnull IEntity ent, int mask)",
      "int ClearAnimMask(notnull IEntity ent, int mask)",
      "int IsAnimSlotPlaying(notnull IEntity ent, int mask)",
      "bool SetMorphState(notnull IEntity ent, string morph, float value)",
      "int GetParticleCount(notnull IEntity ent)",
      "bool HasActiveParticle(notnull IEntity ent)",
      "int ParticleGetCount(IEntity ent)",
      "bool ParticleHasActive(IEntity ent)",
      "int GetParticleEmitors(notnull IEntity ent, out string emitors[], int max)",
      "int GetParticleEmitorCount(notnull IEntity ent)",
      "void SetParticleParm(notnull IEntity ent, int emitor, EmitorParam parameter, void value)",
      "void GetParticleParm(notnull IEntity ent, int emitor, EmitorParam parameter, out void value)",
      "void GetParticleParmOriginal(notnull IEntity ent, int emitor, EmitorParam parameter, out void value)",
      "void ResetParticlePosition(notnull IEntity ent)",
      "void RestartParticle(notnull IEntity ent)"
    ]
  },
  "VRDevice": {
    "parent": null,
    "methods": [
      "string GetName()",
      "void RecenterHeadTracking()",
      "void SetScale(float scale)",
      "float GetScale()",
      "void GetEyeFOV(VREye eye, out float leftTan, out float rightTan, out float upTan, out float downTan)",
      "void Set2D(bool enabled)",
      "bool ShowHmdServiceDialog()",
      "bool ShowHmdSetupDialog()",
      "void SetRecenterHeadFlags(PSVrHeadRecenterFlagsEnum flags)",
      "void SetMinOutputColor(int color)",
      "void SetEyeFOV(VREye eye, float leftTan, float rightTan, float upTan, float downTan)",
      "void ResetToDeviceFOV(VREye eye)",
      "void SetOversamplingFactor(float factor)",
      "bool GetHmdTrackingStatus(\tout PSVrBrightnessRiskEnum bRisk, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrTrackingQualityEnum posQuality, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrTrackingQualityEnum orQuality)",
      "bool GetMoveTrackingStatus(\tVRHand hand, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrBrightnessRiskEnum bRisk, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrTrackingQualityEnum posQuality, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrTrackingQualityEnum orQuality)"
    ]
  },
  "VRDevice_PS4": {
    "parent": null,
    "methods": [
      "void Set2D(bool enabled)",
      "bool ShowHmdServiceDialog()",
      "bool ShowHmdSetupDialog()",
      "void SetRecenterHeadFlags(PSVrHeadRecenterFlagsEnum flags)",
      "void SetMinOutputColor(int color)",
      "void SetEyeFOV(VREye eye, float leftTan, float rightTan, float upTan, float downTan)",
      "void ResetToDeviceFOV(VREye eye)",
      "void SetOversamplingFactor(float factor)",
      "bool GetHmdTrackingStatus(\tout PSVrBrightnessRiskEnum bRisk, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrTrackingQualityEnum posQuality, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrTrackingQualityEnum orQuality)",
      "bool GetMoveTrackingStatus(\tVRHand hand, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrBrightnessRiskEnum bRisk, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrTrackingQualityEnum posQuality, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tout PSVrTrackingQualityEnum orQuality)"
    ]
  },
  "Oculus": {
    "parent": null,
    "methods": []
  },
  "Widget": {
    "parent": null,
    "methods": [
      "void Widget()",
      "static string TranslateString(string stringId)",
      "static void SetLV(float lv)",
      "static void SetTextLV(float lv)",
      "static void SetObjectLighting(float lighting)",
      "string GetName()",
      "void SetName(string name)",
      "string GetTypeName()",
      "void Show(bool show, bool immedUpdate = true)",
      "void Enable(bool enable)",
      "int GetFlags()",
      "int SetFlags(int flags, bool immedUpdate = true)",
      "int GetSort()",
      "void SetSort(int sort, bool immedUpdate = true)",
      "int ClearFlags(int flags, bool immedUpdate = true)",
      "bool IsControlClass()",
      "string GetStyleName()",
      "void GetUserData(out Class data)",
      "void SetUserData(Class data)",
      "int GetUserID()",
      "void SetUserID(int id)",
      "bool IsVisible()",
      "bool IsVisibleHierarchy()",
      "void SetPos(float x, float y, bool immedUpdate = true)",
      "void SetSize(float w, float h, bool immedUpdate = true)",
      "void SetScreenPos(float x, float y, bool immedUpdate = true)",
      "void SetScreenSize(float w, float h, bool immedUpdate = true)",
      "void SetColor(int color)",
      "int GetColor()",
      "void SetRotation(float roll, float pitch, float yaw, bool immedUpdate = true)",
      "void SetAlpha(float alpha)",
      "float GetAlpha()",
      "void GetPos(out float x, out float y)",
      "void GetSize(out float width, out float height)",
      "void GetScreenPos(out float x, out float y)",
      "void GetScreenSize(out float width, out float height)",
      "void SetTransform(vector mat[4], bool immedUpdate = true)",
      "void AddChild(Widget child, bool immedUpdate = true)",
      "void RemoveChild(Widget child)",
      "void Update()",
      "void GetScript(out Class data)",
      "void SetHandler(ScriptedWidgetEventHandler eventHandler)",
      "void Unlink()",
      "void ReportMouse(int mousex, int mousey, Widget rootWidget)",
      "void SetTextSpacing(int horiz, int vert)",
      "void SetTextExactSize(int size)",
      "void SetTextOffset(int left, int top)",
      "void SetText(string text, bool immedUpdate = true)",
      "void SetOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetOutlineSize()",
      "int GetOutlineColor()",
      "void SetShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1, float shadowOffsetX = 0, float shadowOffsetY = 0)",
      "int GetShadowSize()",
      "int GetShadowColor()",
      "float GetShadowOpacity()",
      "void GetShadowOffset(out float sx, out float sy)",
      "void SetItalic(bool italic)",
      "bool GetItalic()",
      "void SetBold(bool bold)",
      "bool GetBold()",
      "void GetTextSize(out int sx, out int sy)",
      "void SetTextFormat(string text, void param1 = NULL, void param2 = NULL, void param3 = NULL, void param4 = NULL, void param5 = NULL, void param6 = NULL, void param7 = NULL, void param8 = NULL, void param9 = NULL)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "float SetLineBreakingOverride(int mode)",
      "float GetContentHeight()",
      "float GetContentOffset()",
      "void SetContentOffset(float offset, bool snapToLine = false)",
      "void ElideText(int line, float maxWidth, string str)",
      "int GetNumLines()",
      "void SetLinesVisibility(int lineFrom, int lineTo, bool visible)",
      "float GetLineWidth(int line)",
      "void SetRefresh(int period, int offset)",
      "void SetResolutionScale(float xscale, float ycale)",
      "bool LoadImageFile(int num, string name, bool noCache = false)",
      "void SetImageTexture(int image, RTTextureWidget texture)",
      "void GetImageSize(int image, out int sx, out int sy)",
      "bool SetImage(int num)",
      "int GetImage()",
      "void SetUV(float uv[4][2])",
      "bool LoadMaskTexture(string resource)",
      "float GetMaskProgress()",
      "void SetMaskProgress(float value)",
      "float GetMaskTransitionWidth()",
      "void SetMaskTransitionWidth(float value)",
      "int GetLinesCount()",
      "int GetCarriageLine()",
      "int GetCarriagePos()",
      "void GetText(out string text)",
      "void SetLine(int line, string text)",
      "void GetLine(int line, out string text)",
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "WorkspaceWidget": {
    "parent": null,
    "methods": [
      "void ReportMouse(int mousex, int mousey, Widget rootWidget)",
      "void SetTextSpacing(int horiz, int vert)",
      "void SetTextExactSize(int size)",
      "void SetTextOffset(int left, int top)",
      "void SetText(string text, bool immedUpdate = true)",
      "void SetOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetOutlineSize()",
      "int GetOutlineColor()",
      "void SetShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1, float shadowOffsetX = 0, float shadowOffsetY = 0)",
      "int GetShadowSize()",
      "int GetShadowColor()",
      "float GetShadowOpacity()",
      "void GetShadowOffset(out float sx, out float sy)",
      "void SetItalic(bool italic)",
      "bool GetItalic()",
      "void SetBold(bool bold)",
      "bool GetBold()",
      "void GetTextSize(out int sx, out int sy)",
      "void SetTextFormat(string text, void param1 = NULL, void param2 = NULL, void param3 = NULL, void param4 = NULL, void param5 = NULL, void param6 = NULL, void param7 = NULL, void param8 = NULL, void param9 = NULL)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "float SetLineBreakingOverride(int mode)",
      "float GetContentHeight()",
      "float GetContentOffset()",
      "void SetContentOffset(float offset, bool snapToLine = false)",
      "void ElideText(int line, float maxWidth, string str)",
      "int GetNumLines()",
      "void SetLinesVisibility(int lineFrom, int lineTo, bool visible)",
      "float GetLineWidth(int line)",
      "void SetRefresh(int period, int offset)",
      "void SetResolutionScale(float xscale, float ycale)",
      "bool LoadImageFile(int num, string name, bool noCache = false)",
      "void SetImageTexture(int image, RTTextureWidget texture)",
      "void GetImageSize(int image, out int sx, out int sy)",
      "bool SetImage(int num)",
      "int GetImage()",
      "void SetUV(float uv[4][2])",
      "bool LoadMaskTexture(string resource)",
      "float GetMaskProgress()",
      "void SetMaskProgress(float value)",
      "float GetMaskTransitionWidth()",
      "void SetMaskTransitionWidth(float value)",
      "int GetLinesCount()",
      "int GetCarriageLine()",
      "int GetCarriagePos()",
      "void GetText(out string text)",
      "void SetLine(int line, string text)",
      "void GetLine(int line, out string text)",
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "TextWidget": {
    "parent": "Widget",
    "methods": [
      "void SetTextSpacing(int horiz, int vert)",
      "void SetTextExactSize(int size)",
      "void SetTextOffset(int left, int top)",
      "void SetText(string text, bool immedUpdate = true)",
      "void SetOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetOutlineSize()",
      "int GetOutlineColor()",
      "void SetShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1, float shadowOffsetX = 0, float shadowOffsetY = 0)",
      "int GetShadowSize()",
      "int GetShadowColor()",
      "float GetShadowOpacity()",
      "void GetShadowOffset(out float sx, out float sy)",
      "void SetItalic(bool italic)",
      "bool GetItalic()",
      "void SetBold(bool bold)",
      "bool GetBold()",
      "void GetTextSize(out int sx, out int sy)",
      "void SetTextFormat(string text, void param1 = NULL, void param2 = NULL, void param3 = NULL, void param4 = NULL, void param5 = NULL, void param6 = NULL, void param7 = NULL, void param8 = NULL, void param9 = NULL)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "float SetLineBreakingOverride(int mode)",
      "float GetContentHeight()",
      "float GetContentOffset()",
      "void SetContentOffset(float offset, bool snapToLine = false)",
      "void ElideText(int line, float maxWidth, string str)",
      "int GetNumLines()",
      "void SetLinesVisibility(int lineFrom, int lineTo, bool visible)",
      "float GetLineWidth(int line)",
      "void SetRefresh(int period, int offset)",
      "void SetResolutionScale(float xscale, float ycale)",
      "bool LoadImageFile(int num, string name, bool noCache = false)",
      "void SetImageTexture(int image, RTTextureWidget texture)",
      "void GetImageSize(int image, out int sx, out int sy)",
      "bool SetImage(int num)",
      "int GetImage()",
      "void SetUV(float uv[4][2])",
      "bool LoadMaskTexture(string resource)",
      "float GetMaskProgress()",
      "void SetMaskProgress(float value)",
      "float GetMaskTransitionWidth()",
      "void SetMaskTransitionWidth(float value)",
      "int GetLinesCount()",
      "int GetCarriageLine()",
      "int GetCarriagePos()",
      "void GetText(out string text)",
      "void SetLine(int line, string text)",
      "void GetLine(int line, out string text)",
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "MultilineTextWidget": {
    "parent": "TextWidget",
    "methods": [
      "float SetLineBreakingOverride(int mode)",
      "float GetContentHeight()",
      "float GetContentOffset()",
      "void SetContentOffset(float offset, bool snapToLine = false)",
      "void ElideText(int line, float maxWidth, string str)",
      "int GetNumLines()",
      "void SetLinesVisibility(int lineFrom, int lineTo, bool visible)",
      "float GetLineWidth(int line)",
      "void SetRefresh(int period, int offset)",
      "void SetResolutionScale(float xscale, float ycale)",
      "bool LoadImageFile(int num, string name, bool noCache = false)",
      "void SetImageTexture(int image, RTTextureWidget texture)",
      "void GetImageSize(int image, out int sx, out int sy)",
      "bool SetImage(int num)",
      "int GetImage()",
      "void SetUV(float uv[4][2])",
      "bool LoadMaskTexture(string resource)",
      "float GetMaskProgress()",
      "void SetMaskProgress(float value)",
      "float GetMaskTransitionWidth()",
      "void SetMaskTransitionWidth(float value)",
      "int GetLinesCount()",
      "int GetCarriageLine()",
      "int GetCarriagePos()",
      "void GetText(out string text)",
      "void SetLine(int line, string text)",
      "void GetLine(int line, out string text)",
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "RichTextWidget": {
    "parent": "TextWidget",
    "methods": [
      "float GetContentHeight()",
      "float GetContentOffset()",
      "void SetContentOffset(float offset, bool snapToLine = false)",
      "void ElideText(int line, float maxWidth, string str)",
      "int GetNumLines()",
      "void SetLinesVisibility(int lineFrom, int lineTo, bool visible)",
      "float GetLineWidth(int line)",
      "float SetLineBreakingOverride(int mode)",
      "void SetRefresh(int period, int offset)",
      "void SetResolutionScale(float xscale, float ycale)",
      "bool LoadImageFile(int num, string name, bool noCache = false)",
      "void SetImageTexture(int image, RTTextureWidget texture)",
      "void GetImageSize(int image, out int sx, out int sy)",
      "bool SetImage(int num)",
      "int GetImage()",
      "void SetUV(float uv[4][2])",
      "bool LoadMaskTexture(string resource)",
      "float GetMaskProgress()",
      "void SetMaskProgress(float value)",
      "float GetMaskTransitionWidth()",
      "void SetMaskTransitionWidth(float value)",
      "int GetLinesCount()",
      "int GetCarriageLine()",
      "int GetCarriagePos()",
      "void GetText(out string text)",
      "void SetLine(int line, string text)",
      "void GetLine(int line, out string text)",
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "RenderTargetWidget": {
    "parent": "Widget",
    "methods": [
      "void SetRefresh(int period, int offset)",
      "void SetResolutionScale(float xscale, float ycale)",
      "bool LoadImageFile(int num, string name, bool noCache = false)",
      "void SetImageTexture(int image, RTTextureWidget texture)",
      "void GetImageSize(int image, out int sx, out int sy)",
      "bool SetImage(int num)",
      "int GetImage()",
      "void SetUV(float uv[4][2])",
      "bool LoadMaskTexture(string resource)",
      "float GetMaskProgress()",
      "void SetMaskProgress(float value)",
      "float GetMaskTransitionWidth()",
      "void SetMaskTransitionWidth(float value)",
      "int GetLinesCount()",
      "int GetCarriageLine()",
      "int GetCarriagePos()",
      "void GetText(out string text)",
      "void SetLine(int line, string text)",
      "void GetLine(int line, out string text)",
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "RTTextureWidget": {
    "parent": "Widget",
    "methods": [
      "bool LoadImageFile(int num, string name, bool noCache = false)",
      "void SetImageTexture(int image, RTTextureWidget texture)",
      "void GetImageSize(int image, out int sx, out int sy)",
      "bool SetImage(int num)",
      "int GetImage()",
      "void SetUV(float uv[4][2])",
      "bool LoadMaskTexture(string resource)",
      "float GetMaskProgress()",
      "void SetMaskProgress(float value)",
      "float GetMaskTransitionWidth()",
      "void SetMaskTransitionWidth(float value)",
      "int GetLinesCount()",
      "int GetCarriageLine()",
      "int GetCarriagePos()",
      "void GetText(out string text)",
      "void SetLine(int line, string text)",
      "void GetLine(int line, out string text)",
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "ImageWidget": {
    "parent": "Widget",
    "methods": [
      "bool LoadImageFile(int num, string name, bool noCache = false)",
      "void SetImageTexture(int image, RTTextureWidget texture)",
      "void GetImageSize(int image, out int sx, out int sy)",
      "bool SetImage(int num)",
      "int GetImage()",
      "void SetUV(float uv[4][2])",
      "bool LoadMaskTexture(string resource)",
      "float GetMaskProgress()",
      "void SetMaskProgress(float value)",
      "float GetMaskTransitionWidth()",
      "void SetMaskTransitionWidth(float value)",
      "int GetLinesCount()",
      "int GetCarriageLine()",
      "int GetCarriagePos()",
      "void GetText(out string text)",
      "void SetLine(int line, string text)",
      "void GetLine(int line, out string text)",
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "MultilineEditBoxWidget": {
    "parent": "TextWidget",
    "methods": [
      "int GetLinesCount()",
      "int GetCarriageLine()",
      "int GetCarriagePos()",
      "void GetText(out string text)",
      "void SetLine(int line, string text)",
      "void GetLine(int line, out string text)",
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "UIWidget": {
    "parent": "Widget",
    "methods": [
      "void SetTextColor(int color)",
      "void SetTextOutline(int outlineSize, int argb = 0xFF000000)",
      "int GetTextOutlineSize()",
      "int GetTextOutlineColor()",
      "void SetTextShadow(int shadowSize, int shadowARGB = 0xFF000000, float shadowOpacity = 1.0, float shadowOffsetX = 0.0, float shadowOffsetY = 0.0)",
      "int GetTextShadowSize()",
      "int GetTextShadowColor()",
      "float GetTextShadowOpacity()",
      "float GetTextShadowOffsetX()",
      "float GetTextShadowOffsetY()",
      "void SetTextItalic(bool italic)",
      "bool GetTextItalic()",
      "void SetTextBold(bool bold)",
      "bool GetTextBold()",
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void GetText(out string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "CanvasWidget": {
    "parent": "Widget",
    "methods": [
      "void DrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "void Clear()",
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void GetText(out string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "EditBoxWidget": {
    "parent": "UIWidget",
    "methods": [
      "string GetText()",
      "void SetText(string str)",
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void GetText(out string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "PasswordEditBoxWidget": {
    "parent": "EditBoxWidget",
    "methods": [
      "void SetHideText(bool hide)",
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void GetText(out string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "void SetText(string str)",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "SliderWidget": {
    "parent": "UIWidget",
    "methods": [
      "void SetMinMax(float minimum, float maximum)",
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "float GetStep()",
      "void SetStep(float step)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void GetText(out string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "void SetText(string str)",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "SimpleProgressBarWidget": {
    "parent": "UIWidget",
    "methods": [
      "float GetMin()",
      "float GetMax()",
      "float GetCurrent()",
      "void SetCurrent(float curr)",
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void GetText(out string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "void SetText(string str)",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "ProgressBarWidget": {
    "parent": "SimpleProgressBarWidget",
    "methods": [
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void GetText(out string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "void SetText(string str)",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "ButtonWidget": {
    "parent": "UIWidget",
    "methods": [
      "bool GetState()",
      "bool SetState(bool state)",
      "void SetText(string text)",
      "void GetText(out string text)",
      "void SetTextOffset(float xoffset, float yoffset)",
      "void SetTextHorizontalAlignment(int align)",
      "void SetTextVerticalAlignment(int align)",
      "float GetTextProportion()",
      "void SetTextProportion(float val)",
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "void SetText(string str)",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "XComboBoxWidget": {
    "parent": "UIWidget",
    "methods": [
      "int AddItem(string item)",
      "void ClearAll()",
      "void SetItem(int item, string value)",
      "void RemoveItem(int item)",
      "int GetNumItems()",
      "int SetCurrentItem(int n)",
      "int GetCurrentItem()",
      "void SetText(string str)",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "CheckBoxWidget": {
    "parent": "UIWidget",
    "methods": [
      "void SetText(string str)",
      "bool IsChecked()",
      "void SetChecked(bool checked)",
      "void ClearItems()",
      "int GetNumItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "BaseListboxWidget": {
    "parent": "UIWidget",
    "methods": [
      "void ClearItems()",
      "int GetNumItems()",
      "void SelectRow(int row)",
      "int GetSelectedRow()",
      "void RemoveRow(int row)",
      "void EnsureVisible(int row)",
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "SimpleListboxWidget": {
    "parent": "BaseListboxWidget",
    "methods": [
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "TextListboxWidget": {
    "parent": "SimpleListboxWidget",
    "methods": [
      "int AddItem(string text, Class userData, int column, int row = -1)",
      "void SetItem(int position, string text, Class userData, int column)",
      "bool GetItemText(int row, int column, out string text)",
      "void GetItemData(int row, int column, out Class data)",
      "void SetItemColor(int row, int column, int color )",
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "SpacerBaseWidget": {
    "parent": "UIWidget",
    "methods": [
      "void AddChildAfter(Widget child,Widget after, bool immedUpdate = true)",
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "SpacerWidget": {
    "parent": "SpacerBaseWidget",
    "methods": [
      "void SetContentAlignmentH(WidgetAlignment alignment)",
      "void SetContentAlignmentV(WidgetAlignment alignment)",
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "GridSpacerWidget": {
    "parent": "SpacerWidget",
    "methods": [
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "WrapSpacerWidget": {
    "parent": "SpacerWidget",
    "methods": [
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "ScrollWidget": {
    "parent": "SpacerBaseWidget",
    "methods": [
      "float GetScrollbarWidth()",
      "bool IsScrollbarVisible()",
      "float GetContentWidth()",
      "float GetContentHeight()",
      "float GetHScrollPos()",
      "float GetHScrollPos01()",
      "bool HScrollStep(int steps)",
      "void HScrollToPos(float pos)",
      "void HScrollToPos01(float pos01)",
      "void HScrollToWidget(Widget child)",
      "float GetVScrollPos()",
      "float GetVScrollPos01()",
      "bool VScrollStep(int steps)",
      "void VScrollToPos(float pos)",
      "void VScrollToPos01(float pos01)",
      "void VScrollToWidget(Widget child)",
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "VideoWidget": {
    "parent": "Widget",
    "methods": [
      "bool Load(string name, bool looping = false, int startTime = 0)",
      "void Unload()",
      "bool Play()",
      "bool Pause()",
      "bool Stop()",
      "bool SetTime(int time, bool preload)",
      "int GetTime()",
      "int GetTotalTime()",
      "void SetLooping(bool looping)",
      "bool IsLooping()",
      "bool IsPlaying()",
      "void DisableSubtitles(bool disable)",
      "bool IsSubtitlesDisabled()",
      "void SetCallback(VideoCallback cb, func fn)",
      "int Play(VideoCommand cmd)",
      "bool LoadVideo(string name, int soundScene)",
      "void SetGUIWidget(IEntity ent, int index, RTTextureWidget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "ScriptedWidgetEventHandler": {
    "parent": null,
    "methods": [
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnResize(Widget w, int x, int y)",
      "bool OnChildAdd(Widget w, Widget child)",
      "bool OnChildRemove(Widget w, Widget child)",
      "bool OnUpdate(Widget w)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "void SetCursorWidget(Widget cursor)",
      "void ShowCursorWidget(bool show)",
      "bool LoadWidgetImageSet(string filename)",
      "void LoadWidgetStyles(string filename)",
      "bool SetActiveWindow(Widget w, bool resetFocus)",
      "void SetFocus(Widget w)",
      "void SetModal(Widget w)",
      "void SetWidgetWorld(RenderTargetWidget w, IEntity wrldEntity, int camera)",
      "bool IsCircleToCrossSwapped()",
      "bool ReloadTexture(string path)"
    ]
  },
  "TraceContact": {
    "parent": null,
    "methods": [
      "bool TraceLineToEntity(IEntity ent, vector start, vector end, out TraceContact contact)",
      "float TraceMove(TraceParam param, out IEntity cent, out float plane[4], out int surfparm, func filtercallback)",
      "int P2PVisibilityEx(vector from, vector to,int flags)",
      "int SphereQuery(vector origin, float radius, out IEntity visents[], int ents, int fmask)",
      "bool IsBoxVisible(vector mins, vector maxs, int flags)",
      "int VisEntities(vector origin, vector look, float angle, float radius, out IEntity ents[2], int maxents, int fmask)",
      "int GetResult()",
      "void SetPosition(vector pos)",
      "void Destroy()",
      "void RemoveDecal(hDecal decal)",
      "int CanAddToLandMarkDecal(hDecal lmDecal, IEntity entity, string mat, vector newPoint)",
      "bool AddPointToLandMarkDecal(hDecal lmDecal, vector point, vector normal, float alpha)",
      "void FinalizeLandMarkDecal(hDecal lmDecal, bool addAlpha, float alphaDist)",
      "bool IsLandMarkFinalized(hDecal lmDecal)",
      "void SetGlobalLandMarkParams(float minSegmentLength, float maxSegmentLength, float degAngle)",
      "bool IsOcean()",
      "float GetOceanHeight(float worldX, float worldZ)"
    ]
  },
  "TraceParam": {
    "parent": null,
    "methods": [
      "float TraceMove(TraceParam param, out IEntity cent, out float plane[4], out int surfparm, func filtercallback)",
      "int P2PVisibilityEx(vector from, vector to,int flags)",
      "int SphereQuery(vector origin, float radius, out IEntity visents[], int ents, int fmask)",
      "bool IsBoxVisible(vector mins, vector maxs, int flags)",
      "int VisEntities(vector origin, vector look, float angle, float radius, out IEntity ents[2], int maxents, int fmask)",
      "int GetResult()",
      "void SetPosition(vector pos)",
      "void Destroy()",
      "void RemoveDecal(hDecal decal)",
      "int CanAddToLandMarkDecal(hDecal lmDecal, IEntity entity, string mat, vector newPoint)",
      "bool AddPointToLandMarkDecal(hDecal lmDecal, vector point, vector normal, float alpha)",
      "void FinalizeLandMarkDecal(hDecal lmDecal, bool addAlpha, float alphaDist)",
      "bool IsLandMarkFinalized(hDecal lmDecal)",
      "void SetGlobalLandMarkParams(float minSegmentLength, float maxSegmentLength, float degAngle)",
      "bool IsOcean()",
      "float GetOceanHeight(float worldX, float worldZ)"
    ]
  },
  "TraceSphere": {
    "parent": null,
    "methods": [
      "float TraceMove(TraceParam param, out IEntity cent, out float plane[4], out int surfparm, func filtercallback)",
      "int P2PVisibilityEx(vector from, vector to,int flags)",
      "int SphereQuery(vector origin, float radius, out IEntity visents[], int ents, int fmask)",
      "bool IsBoxVisible(vector mins, vector maxs, int flags)",
      "int VisEntities(vector origin, vector look, float angle, float radius, out IEntity ents[2], int maxents, int fmask)",
      "int GetResult()",
      "void SetPosition(vector pos)",
      "void Destroy()",
      "void RemoveDecal(hDecal decal)",
      "int CanAddToLandMarkDecal(hDecal lmDecal, IEntity entity, string mat, vector newPoint)",
      "bool AddPointToLandMarkDecal(hDecal lmDecal, vector point, vector normal, float alpha)",
      "void FinalizeLandMarkDecal(hDecal lmDecal, bool addAlpha, float alphaDist)",
      "bool IsLandMarkFinalized(hDecal lmDecal)",
      "void SetGlobalLandMarkParams(float minSegmentLength, float maxSegmentLength, float degAngle)",
      "bool IsOcean()",
      "float GetOceanHeight(float worldX, float worldZ)"
    ]
  },
  "TraceBox": {
    "parent": null,
    "methods": [
      "float TraceMove(TraceParam param, out IEntity cent, out float plane[4], out int surfparm, func filtercallback)",
      "int P2PVisibilityEx(vector from, vector to,int flags)",
      "int SphereQuery(vector origin, float radius, out IEntity visents[], int ents, int fmask)",
      "bool IsBoxVisible(vector mins, vector maxs, int flags)",
      "int VisEntities(vector origin, vector look, float angle, float radius, out IEntity ents[2], int maxents, int fmask)",
      "int GetResult()",
      "void SetPosition(vector pos)",
      "void Destroy()",
      "void RemoveDecal(hDecal decal)",
      "int CanAddToLandMarkDecal(hDecal lmDecal, IEntity entity, string mat, vector newPoint)",
      "bool AddPointToLandMarkDecal(hDecal lmDecal, vector point, vector normal, float alpha)",
      "void FinalizeLandMarkDecal(hDecal lmDecal, bool addAlpha, float alphaDist)",
      "bool IsLandMarkFinalized(hDecal lmDecal)",
      "void SetGlobalLandMarkParams(float minSegmentLength, float maxSegmentLength, float degAngle)",
      "bool IsOcean()",
      "float GetOceanHeight(float worldX, float worldZ)"
    ]
  },
  "TraceOBB": {
    "parent": null,
    "methods": [
      "float TraceMove(TraceParam param, out IEntity cent, out float plane[4], out int surfparm, func filtercallback)",
      "int P2PVisibilityEx(vector from, vector to,int flags)",
      "int SphereQuery(vector origin, float radius, out IEntity visents[], int ents, int fmask)",
      "bool IsBoxVisible(vector mins, vector maxs, int flags)",
      "int VisEntities(vector origin, vector look, float angle, float radius, out IEntity ents[2], int maxents, int fmask)",
      "int GetResult()",
      "void SetPosition(vector pos)",
      "void Destroy()",
      "void RemoveDecal(hDecal decal)",
      "int CanAddToLandMarkDecal(hDecal lmDecal, IEntity entity, string mat, vector newPoint)",
      "bool AddPointToLandMarkDecal(hDecal lmDecal, vector point, vector normal, float alpha)",
      "void FinalizeLandMarkDecal(hDecal lmDecal, bool addAlpha, float alphaDist)",
      "bool IsLandMarkFinalized(hDecal lmDecal)",
      "void SetGlobalLandMarkParams(float minSegmentLength, float maxSegmentLength, float degAngle)",
      "bool IsOcean()",
      "float GetOceanHeight(float worldX, float worldZ)"
    ]
  },
  "OcclusionQuery": {
    "parent": null,
    "methods": [
      "int GetResult()",
      "void SetPosition(vector pos)",
      "void Destroy()",
      "void RemoveDecal(hDecal decal)",
      "int CanAddToLandMarkDecal(hDecal lmDecal, IEntity entity, string mat, vector newPoint)",
      "bool AddPointToLandMarkDecal(hDecal lmDecal, vector point, vector normal, float alpha)",
      "void FinalizeLandMarkDecal(hDecal lmDecal, bool addAlpha, float alphaDist)",
      "bool IsLandMarkFinalized(hDecal lmDecal)",
      "void SetGlobalLandMarkParams(float minSegmentLength, float maxSegmentLength, float degAngle)",
      "bool IsOcean()",
      "float GetOceanHeight(float worldX, float worldZ)"
    ]
  },
  "AnimEvent": {
    "parent": null,
    "methods": [
      "void EndSound(HSOUND snd)",
      "int SetSoundVolume(HSOUND sound, float volume)",
      "int SetSoundFrequency(HSOUND sound, int freq)",
      "int GetSoundLength(HSOUND sound)",
      "int GetSoundPosition(HSOUND sound)",
      "void WriteBool(bool value)",
      "void WriteInt(int value)",
      "void WriteFloat(float value)",
      "void WriteString(string value)",
      "void WriteVector(vector value)",
      "void WriteMatrixAsQuaternionVector(vector mat[4])",
      "void WriteIntAsByte(int value)",
      "void WriteIntAsUByte(int value)",
      "void WriteIntAsHalf(int value)",
      "void WriteIntAsUHalf(int value)",
      "void WriteFloatAsByte(float value, float min, float max)",
      "void WriteFloatAsHalf(float value, float min, float max)",
      "bool ReadBool()",
      "int ReadInt()",
      "float ReadFloat()",
      "string ReadString()",
      "void ReadMatrixAsQuaternionVector(vector mat[4])",
      "int ReadIntAsByte()",
      "int ReadIntAsUByte()",
      "int ReadIntAsHalf()",
      "int ReadIntAsUHalf()",
      "float ReadFloatAsByte(float min, float max)",
      "float ReadFloatAsHalf(float min, float max)",
      "void MakeScreenshot(string name)",
      "int GetFPS()",
      "int LoadSkyPresets(string presetsFile)",
      "int InitSky(string presetName)",
      "int SetSkyPreset(string presetName, float stormy, float dayTime)",
      "int LerpSkyPreset(string presetName1, string presetName2, float dayTime, float stormy1, float stormy2, float lerpVal)",
      "int LerpSkyPreset3(string presetName1, string presetName2, string presetName3, float dayTime, float stormy1, float stormy2, float stormy3, float w1, float w2, float w3)",
      "void SetSkyUserPlanets(bool enabled)",
      "bool SetSkyPlanet(int index, float azimuthDeg, float zenithDeg)",
      "bool SetSkyPlanetSize(int index, float angleDeg)",
      "void SetStarsObserverTime(int year, int month, int day, int hour, int minute, float sec, int offsetSec)",
      "void SetStarsObserverPosition(float latitudeDeg, float longitudeDeg)",
      "void SetRealStarAutoUpdate(bool update)",
      "void SetNightLayerRotMatrix(vector mat[3])",
      "void SetStarsRotMatrix(vector mat[3])",
      "bool SetParam(string propertyName, void value)",
      "void ResetParam(string propertyName)",
      "int GetParamIndex(string paramName)",
      "void SetParamByIndex(int paramIndex, void value)",
      "int VectortoRGBA( vector vec, float h)",
      "int ARGB(int a, int r, int g, int b)",
      "int ARGBF(float fa, float fr, float fg, float fb)",
      "int AWHITE(int a)",
      "int LerpARGB(int c1, int c2)",
      "void Init(T init)",
      "void Release()",
      "void Link(T init)",
      "bool IsNull()"
    ]
  },
  "SoundEvent": {
    "parent": null,
    "methods": [
      "void EndSound(HSOUND snd)",
      "int SetSoundVolume(HSOUND sound, float volume)",
      "int SetSoundFrequency(HSOUND sound, int freq)",
      "int GetSoundLength(HSOUND sound)",
      "int GetSoundPosition(HSOUND sound)",
      "void WriteBool(bool value)",
      "void WriteInt(int value)",
      "void WriteFloat(float value)",
      "void WriteString(string value)",
      "void WriteVector(vector value)",
      "void WriteMatrixAsQuaternionVector(vector mat[4])",
      "void WriteIntAsByte(int value)",
      "void WriteIntAsUByte(int value)",
      "void WriteIntAsHalf(int value)",
      "void WriteIntAsUHalf(int value)",
      "void WriteFloatAsByte(float value, float min, float max)",
      "void WriteFloatAsHalf(float value, float min, float max)",
      "bool ReadBool()",
      "int ReadInt()",
      "float ReadFloat()",
      "string ReadString()",
      "void ReadMatrixAsQuaternionVector(vector mat[4])",
      "int ReadIntAsByte()",
      "int ReadIntAsUByte()",
      "int ReadIntAsHalf()",
      "int ReadIntAsUHalf()",
      "float ReadFloatAsByte(float min, float max)",
      "float ReadFloatAsHalf(float min, float max)",
      "void MakeScreenshot(string name)",
      "int GetFPS()",
      "int LoadSkyPresets(string presetsFile)",
      "int InitSky(string presetName)",
      "int SetSkyPreset(string presetName, float stormy, float dayTime)",
      "int LerpSkyPreset(string presetName1, string presetName2, float dayTime, float stormy1, float stormy2, float lerpVal)",
      "int LerpSkyPreset3(string presetName1, string presetName2, string presetName3, float dayTime, float stormy1, float stormy2, float stormy3, float w1, float w2, float w3)",
      "void SetSkyUserPlanets(bool enabled)",
      "bool SetSkyPlanet(int index, float azimuthDeg, float zenithDeg)",
      "bool SetSkyPlanetSize(int index, float angleDeg)",
      "void SetStarsObserverTime(int year, int month, int day, int hour, int minute, float sec, int offsetSec)",
      "void SetStarsObserverPosition(float latitudeDeg, float longitudeDeg)",
      "void SetRealStarAutoUpdate(bool update)",
      "void SetNightLayerRotMatrix(vector mat[3])",
      "void SetStarsRotMatrix(vector mat[3])",
      "bool SetParam(string propertyName, void value)",
      "void ResetParam(string propertyName)",
      "int GetParamIndex(string paramName)",
      "void SetParamByIndex(int paramIndex, void value)",
      "int VectortoRGBA( vector vec, float h)",
      "int ARGB(int a, int r, int g, int b)",
      "int ARGBF(float fa, float fr, float fg, float fb)",
      "int AWHITE(int a)",
      "int LerpARGB(int c1, int c2)",
      "void Init(T init)",
      "void Release()",
      "void Link(T init)",
      "bool IsNull()"
    ]
  },
  "vobject": {
    "parent": null,
    "methods": [
      "void EndSound(HSOUND snd)",
      "int SetSoundVolume(HSOUND sound, float volume)",
      "int SetSoundFrequency(HSOUND sound, int freq)",
      "int GetSoundLength(HSOUND sound)",
      "int GetSoundPosition(HSOUND sound)",
      "void WriteBool(bool value)",
      "void WriteInt(int value)",
      "void WriteFloat(float value)",
      "void WriteString(string value)",
      "void WriteVector(vector value)",
      "void WriteMatrixAsQuaternionVector(vector mat[4])",
      "void WriteIntAsByte(int value)",
      "void WriteIntAsUByte(int value)",
      "void WriteIntAsHalf(int value)",
      "void WriteIntAsUHalf(int value)",
      "void WriteFloatAsByte(float value, float min, float max)",
      "void WriteFloatAsHalf(float value, float min, float max)",
      "bool ReadBool()",
      "int ReadInt()",
      "float ReadFloat()",
      "string ReadString()",
      "void ReadMatrixAsQuaternionVector(vector mat[4])",
      "int ReadIntAsByte()",
      "int ReadIntAsUByte()",
      "int ReadIntAsHalf()",
      "int ReadIntAsUHalf()",
      "float ReadFloatAsByte(float min, float max)",
      "float ReadFloatAsHalf(float min, float max)",
      "void MakeScreenshot(string name)",
      "int GetFPS()",
      "int LoadSkyPresets(string presetsFile)",
      "int InitSky(string presetName)",
      "int SetSkyPreset(string presetName, float stormy, float dayTime)",
      "int LerpSkyPreset(string presetName1, string presetName2, float dayTime, float stormy1, float stormy2, float lerpVal)",
      "int LerpSkyPreset3(string presetName1, string presetName2, string presetName3, float dayTime, float stormy1, float stormy2, float stormy3, float w1, float w2, float w3)",
      "void SetSkyUserPlanets(bool enabled)",
      "bool SetSkyPlanet(int index, float azimuthDeg, float zenithDeg)",
      "bool SetSkyPlanetSize(int index, float angleDeg)",
      "void SetStarsObserverTime(int year, int month, int day, int hour, int minute, float sec, int offsetSec)",
      "void SetStarsObserverPosition(float latitudeDeg, float longitudeDeg)",
      "void SetRealStarAutoUpdate(bool update)",
      "void SetNightLayerRotMatrix(vector mat[3])",
      "void SetStarsRotMatrix(vector mat[3])",
      "bool SetParam(string propertyName, void value)",
      "void ResetParam(string propertyName)",
      "int GetParamIndex(string paramName)",
      "void SetParamByIndex(int paramIndex, void value)",
      "int VectortoRGBA( vector vec, float h)",
      "int ARGB(int a, int r, int g, int b)",
      "int ARGBF(float fa, float fr, float fg, float fb)",
      "int AWHITE(int a)",
      "int LerpARGB(int c1, int c2)",
      "void Init(T init)",
      "void Release()",
      "void Link(T init)",
      "bool IsNull()"
    ]
  },
  "PacketOutputAdapter": {
    "parent": null,
    "methods": [
      "void WriteBool(bool value)",
      "void WriteInt(int value)",
      "void WriteFloat(float value)",
      "void WriteString(string value)",
      "void WriteVector(vector value)",
      "void WriteMatrixAsQuaternionVector(vector mat[4])",
      "void WriteIntAsByte(int value)",
      "void WriteIntAsUByte(int value)",
      "void WriteIntAsHalf(int value)",
      "void WriteIntAsUHalf(int value)",
      "void WriteFloatAsByte(float value, float min, float max)",
      "void WriteFloatAsHalf(float value, float min, float max)",
      "bool ReadBool()",
      "int ReadInt()",
      "float ReadFloat()",
      "string ReadString()",
      "void ReadMatrixAsQuaternionVector(vector mat[4])",
      "int ReadIntAsByte()",
      "int ReadIntAsUByte()",
      "int ReadIntAsHalf()",
      "int ReadIntAsUHalf()",
      "float ReadFloatAsByte(float min, float max)",
      "float ReadFloatAsHalf(float min, float max)",
      "void MakeScreenshot(string name)",
      "int GetFPS()",
      "int LoadSkyPresets(string presetsFile)",
      "int InitSky(string presetName)",
      "int SetSkyPreset(string presetName, float stormy, float dayTime)",
      "int LerpSkyPreset(string presetName1, string presetName2, float dayTime, float stormy1, float stormy2, float lerpVal)",
      "int LerpSkyPreset3(string presetName1, string presetName2, string presetName3, float dayTime, float stormy1, float stormy2, float stormy3, float w1, float w2, float w3)",
      "void SetSkyUserPlanets(bool enabled)",
      "bool SetSkyPlanet(int index, float azimuthDeg, float zenithDeg)",
      "bool SetSkyPlanetSize(int index, float angleDeg)",
      "void SetStarsObserverTime(int year, int month, int day, int hour, int minute, float sec, int offsetSec)",
      "void SetStarsObserverPosition(float latitudeDeg, float longitudeDeg)",
      "void SetRealStarAutoUpdate(bool update)",
      "void SetNightLayerRotMatrix(vector mat[3])",
      "void SetStarsRotMatrix(vector mat[3])",
      "bool SetParam(string propertyName, void value)",
      "void ResetParam(string propertyName)",
      "int GetParamIndex(string paramName)",
      "void SetParamByIndex(int paramIndex, void value)",
      "int VectortoRGBA( vector vec, float h)",
      "int ARGB(int a, int r, int g, int b)",
      "int ARGBF(float fa, float fr, float fg, float fb)",
      "int AWHITE(int a)",
      "int LerpARGB(int c1, int c2)",
      "void Init(T init)",
      "void Release()",
      "void Link(T init)",
      "bool IsNull()"
    ]
  },
  "PacketInputAdapter": {
    "parent": null,
    "methods": [
      "bool ReadBool()",
      "int ReadInt()",
      "float ReadFloat()",
      "string ReadString()",
      "void ReadMatrixAsQuaternionVector(vector mat[4])",
      "int ReadIntAsByte()",
      "int ReadIntAsUByte()",
      "int ReadIntAsHalf()",
      "int ReadIntAsUHalf()",
      "float ReadFloatAsByte(float min, float max)",
      "float ReadFloatAsHalf(float min, float max)",
      "void MakeScreenshot(string name)",
      "int GetFPS()",
      "int LoadSkyPresets(string presetsFile)",
      "int InitSky(string presetName)",
      "int SetSkyPreset(string presetName, float stormy, float dayTime)",
      "int LerpSkyPreset(string presetName1, string presetName2, float dayTime, float stormy1, float stormy2, float lerpVal)",
      "int LerpSkyPreset3(string presetName1, string presetName2, string presetName3, float dayTime, float stormy1, float stormy2, float stormy3, float w1, float w2, float w3)",
      "void SetSkyUserPlanets(bool enabled)",
      "bool SetSkyPlanet(int index, float azimuthDeg, float zenithDeg)",
      "bool SetSkyPlanetSize(int index, float angleDeg)",
      "void SetStarsObserverTime(int year, int month, int day, int hour, int minute, float sec, int offsetSec)",
      "void SetStarsObserverPosition(float latitudeDeg, float longitudeDeg)",
      "void SetRealStarAutoUpdate(bool update)",
      "void SetNightLayerRotMatrix(vector mat[3])",
      "void SetStarsRotMatrix(vector mat[3])",
      "bool SetParam(string propertyName, void value)",
      "void ResetParam(string propertyName)",
      "int GetParamIndex(string paramName)",
      "void SetParamByIndex(int paramIndex, void value)",
      "int VectortoRGBA( vector vec, float h)",
      "int ARGB(int a, int r, int g, int b)",
      "int ARGBF(float fa, float fr, float fg, float fb)",
      "int AWHITE(int a)",
      "int LerpARGB(int c1, int c2)",
      "void Init(T init)",
      "void Release()",
      "void Link(T init)",
      "bool IsNull()"
    ]
  },
  "Material": {
    "parent": null,
    "methods": [
      "bool SetParam(string propertyName, void value)",
      "void ResetParam(string propertyName)",
      "int GetParamIndex(string paramName)",
      "void SetParamByIndex(int paramIndex, void value)",
      "int VectortoRGBA( vector vec, float h)",
      "int ARGB(int a, int r, int g, int b)",
      "int ARGBF(float fa, float fr, float fg, float fb)",
      "int AWHITE(int a)",
      "int LerpARGB(int c1, int c2)",
      "void Init(T init)",
      "void Release()",
      "void Link(T init)",
      "bool IsNull()"
    ]
  },
  "Link": {
    "parent": null,
    "methods": [
      "void Init(T init)",
      "void Release()",
      "void Link(T init)",
      "bool IsNull()"
    ]
  },
  "Serializer": {
    "parent": null,
    "methods": [
      "bool Write(void value_out)",
      "bool Read(void value_in)",
      "bool CanWrite()",
      "bool CanRead()",
      "void Serializer()",
      "void FileSerializer()",
      "bool Open(string path, FileMode mode = FileMode.READ)",
      "bool IsOpen()",
      "void Close()"
    ]
  },
  "FileSerializer": {
    "parent": null,
    "methods": [
      "void FileSerializer()",
      "bool Open(string path, FileMode mode = FileMode.READ)",
      "bool IsOpen()",
      "void Close()"
    ]
  },
  "IEntityComponentSource": {
    "parent": null,
    "methods": [
      "int GetEventMask()",
      "int SetEventMask(IEntity owner, int mask)",
      "int ClearEventMask(IEntity owner, int mask)",
      "void Activate(IEntity owner)",
      "void Deactivate(IEntity owner)",
      "bool IsActive()",
      "void GenericComponent(IEntityComponentSource src, IEntity ent)",
      "bool DependsOn(typename otherClass, TypeID otherTypeID)",
      "void EOnTouch(IEntity owner, int extra)",
      "void EOnInit(IEntity owner, int extra)",
      "void EOnExtra(IEntity owner, int extra)",
      "void EOnNotVisible(IEntity owner, int extra)",
      "void EOnVisible(IEntity owner, int extra)",
      "void EOnFrame(IEntity owner, float timeSlice)",
      "void EOnPostFrame(IEntity owner, int extra)",
      "void EOnAnimEvent(IEntity owner, AnimEvent extra)",
      "void EOnSoundEvent(IEntity owner, SoundEvent extra)",
      "void EOnPostSimulate(IEntity owner, float timeslice)",
      "void EOnSimulate(IEntity owner, float timeslice)",
      "void EOnJointBreak(IEntity owner, int extra)",
      "void EOnPhysicsMove(IEntity owner, int extra)",
      "void EOnContact(IEntity owner, Contact extra)",
      "void EOnActivate(IEntity owner)",
      "void EOnDeactivate(IEntity owner)",
      "void OnComponentInsert(IEntity owner, ScriptComponent other)",
      "void OnComponentRemove(IEntity owner, ScriptComponent other)",
      "void OnDelete(IEntity owner)",
      "void SignalInput()",
      "int GetEventNames(out array<string> events)",
      "int GetSignalNames(out array<string> signals)",
      "int GetSignalIndex(string name)",
      "void SetSignalValueName(string signal, float value)",
      "void SetSignalValue(int index, float value)",
      "void Terminate(SoundHandle handle)",
      "bool IsPlayed(SoundHandle handle)",
      "bool IsHandleValid(SoundHandle handle)",
      "void SetTransform(vector[] transf)",
      "void SetDebug(bool value)"
    ]
  },
  "GenericComponent": {
    "parent": null,
    "methods": [
      "int GetEventMask()",
      "int SetEventMask(IEntity owner, int mask)",
      "int ClearEventMask(IEntity owner, int mask)",
      "void Activate(IEntity owner)",
      "void Deactivate(IEntity owner)",
      "bool IsActive()",
      "void GenericComponent(IEntityComponentSource src, IEntity ent)",
      "bool DependsOn(typename otherClass, TypeID otherTypeID)",
      "void EOnTouch(IEntity owner, int extra)",
      "void EOnInit(IEntity owner, int extra)",
      "void EOnExtra(IEntity owner, int extra)",
      "void EOnNotVisible(IEntity owner, int extra)",
      "void EOnVisible(IEntity owner, int extra)",
      "void EOnFrame(IEntity owner, float timeSlice)",
      "void EOnPostFrame(IEntity owner, int extra)",
      "void EOnAnimEvent(IEntity owner, AnimEvent extra)",
      "void EOnSoundEvent(IEntity owner, SoundEvent extra)",
      "void EOnPostSimulate(IEntity owner, float timeslice)",
      "void EOnSimulate(IEntity owner, float timeslice)",
      "void EOnJointBreak(IEntity owner, int extra)",
      "void EOnPhysicsMove(IEntity owner, int extra)",
      "void EOnContact(IEntity owner, Contact extra)",
      "void EOnActivate(IEntity owner)",
      "void EOnDeactivate(IEntity owner)",
      "void OnComponentInsert(IEntity owner, ScriptComponent other)",
      "void OnComponentRemove(IEntity owner, ScriptComponent other)",
      "void OnDelete(IEntity owner)",
      "void SignalInput()",
      "int GetEventNames(out array<string> events)",
      "int GetSignalNames(out array<string> signals)",
      "int GetSignalIndex(string name)",
      "void SetSignalValueName(string signal, float value)",
      "void SetSignalValue(int index, float value)",
      "void Terminate(SoundHandle handle)",
      "bool IsPlayed(SoundHandle handle)",
      "bool IsHandleValid(SoundHandle handle)",
      "void SetTransform(vector[] transf)",
      "void SetDebug(bool value)"
    ]
  },
  "GenericComponentClass": {
    "parent": null,
    "methods": [
      "bool DependsOn(typename otherClass, TypeID otherTypeID)",
      "void EOnTouch(IEntity owner, int extra)",
      "void EOnInit(IEntity owner, int extra)",
      "void EOnExtra(IEntity owner, int extra)",
      "void EOnNotVisible(IEntity owner, int extra)",
      "void EOnVisible(IEntity owner, int extra)",
      "void EOnFrame(IEntity owner, float timeSlice)",
      "void EOnPostFrame(IEntity owner, int extra)",
      "void EOnAnimEvent(IEntity owner, AnimEvent extra)",
      "void EOnSoundEvent(IEntity owner, SoundEvent extra)",
      "void EOnPostSimulate(IEntity owner, float timeslice)",
      "void EOnSimulate(IEntity owner, float timeslice)",
      "void EOnJointBreak(IEntity owner, int extra)",
      "void EOnPhysicsMove(IEntity owner, int extra)",
      "void EOnContact(IEntity owner, Contact extra)",
      "void EOnActivate(IEntity owner)",
      "void EOnDeactivate(IEntity owner)",
      "void OnComponentInsert(IEntity owner, ScriptComponent other)",
      "void OnComponentRemove(IEntity owner, ScriptComponent other)",
      "void OnDelete(IEntity owner)",
      "void SignalInput()",
      "int GetEventNames(out array<string> events)",
      "int GetSignalNames(out array<string> signals)",
      "int GetSignalIndex(string name)",
      "void SetSignalValueName(string signal, float value)",
      "void SetSignalValue(int index, float value)",
      "void Terminate(SoundHandle handle)",
      "bool IsPlayed(SoundHandle handle)",
      "bool IsHandleValid(SoundHandle handle)",
      "void SetTransform(vector[] transf)",
      "void SetDebug(bool value)"
    ]
  },
  "ScriptComponent": {
    "parent": null,
    "methods": [
      "void EOnTouch(IEntity owner, int extra)",
      "void EOnInit(IEntity owner, int extra)",
      "void EOnExtra(IEntity owner, int extra)",
      "void EOnNotVisible(IEntity owner, int extra)",
      "void EOnVisible(IEntity owner, int extra)",
      "void EOnFrame(IEntity owner, float timeSlice)",
      "void EOnPostFrame(IEntity owner, int extra)",
      "void EOnAnimEvent(IEntity owner, AnimEvent extra)",
      "void EOnSoundEvent(IEntity owner, SoundEvent extra)",
      "void EOnPostSimulate(IEntity owner, float timeslice)",
      "void EOnSimulate(IEntity owner, float timeslice)",
      "void EOnJointBreak(IEntity owner, int extra)",
      "void EOnPhysicsMove(IEntity owner, int extra)",
      "void EOnContact(IEntity owner, Contact extra)",
      "void EOnActivate(IEntity owner)",
      "void EOnDeactivate(IEntity owner)",
      "void OnComponentInsert(IEntity owner, ScriptComponent other)",
      "void OnComponentRemove(IEntity owner, ScriptComponent other)",
      "void OnDelete(IEntity owner)",
      "void SignalInput()",
      "int GetEventNames(out array<string> events)",
      "int GetSignalNames(out array<string> signals)",
      "int GetSignalIndex(string name)",
      "void SetSignalValueName(string signal, float value)",
      "void SetSignalValue(int index, float value)",
      "void Terminate(SoundHandle handle)",
      "bool IsPlayed(SoundHandle handle)",
      "bool IsHandleValid(SoundHandle handle)",
      "void SetTransform(vector[] transf)",
      "void SetDebug(bool value)"
    ]
  },
  "SignalInput": {
    "parent": null,
    "methods": [
      "void SignalInput()",
      "int GetEventNames(out array<string> events)",
      "int GetSignalNames(out array<string> signals)",
      "int GetSignalIndex(string name)",
      "void SetSignalValueName(string signal, float value)",
      "void SetSignalValue(int index, float value)",
      "void Terminate(SoundHandle handle)",
      "bool IsPlayed(SoundHandle handle)",
      "bool IsHandleValid(SoundHandle handle)",
      "void SetTransform(vector[] transf)",
      "void SetDebug(bool value)"
    ]
  },
  "BaseSoundComponent": {
    "parent": null,
    "methods": [
      "int GetEventNames(out array<string> events)",
      "int GetSignalNames(out array<string> signals)",
      "int GetSignalIndex(string name)",
      "void SetSignalValueName(string signal, float value)",
      "void SetSignalValue(int index, float value)",
      "void Terminate(SoundHandle handle)",
      "bool IsPlayed(SoundHandle handle)",
      "bool IsHandleValid(SoundHandle handle)",
      "void SetTransform(vector[] transf)",
      "void SetDebug(bool value)"
    ]
  },
  "GenericEntity": {
    "parent": "IEntity",
    "methods": [
      "void Show(bool show)",
      "void InsertComponent(GenericComponent component)",
      "void RemoveComponent(GenericComponent component)",
      "void DeleteComponent(GenericComponent component)",
      "void _WB_AfterWorldUpdate(float timeSlice)",
      "void SetDiffuseColor(int color)",
      "int GetDiffuseColor()",
      "void SetRadius(float radius)",
      "float GetRadius()",
      "void SetConeAngle(float angle)",
      "float GetConeAngle()",
      "void SetCastShadow(bool enable)",
      "bool IsCastShadow(bool enable)",
      "void Teleport(vector transform[4])"
    ]
  },
  "GenericWorldEntity": {
    "parent": "GenericEntity",
    "methods": [
      "void SetDiffuseColor(int color)",
      "int GetDiffuseColor()",
      "void SetRadius(float radius)",
      "float GetRadius()",
      "void SetConeAngle(float angle)",
      "float GetConeAngle()",
      "void SetCastShadow(bool enable)",
      "bool IsCastShadow(bool enable)",
      "void Teleport(vector transform[4])"
    ]
  },
  "GenericTerrainEntity": {
    "parent": "GenericEntity",
    "methods": [
      "void SetDiffuseColor(int color)",
      "int GetDiffuseColor()",
      "void SetRadius(float radius)",
      "float GetRadius()",
      "void SetConeAngle(float angle)",
      "float GetConeAngle()",
      "void SetCastShadow(bool enable)",
      "bool IsCastShadow(bool enable)",
      "void Teleport(vector transform[4])"
    ]
  },
  "LightEntity": {
    "parent": "GenericEntity",
    "methods": [
      "void SetDiffuseColor(int color)",
      "int GetDiffuseColor()",
      "void SetRadius(float radius)",
      "float GetRadius()",
      "void SetConeAngle(float angle)",
      "float GetConeAngle()",
      "void SetCastShadow(bool enable)",
      "bool IsCastShadow(bool enable)",
      "void Teleport(vector transform[4])"
    ]
  },
  "GenericWorldLightEntity": {
    "parent": "GenericEntity",
    "methods": [
      "void Teleport(vector transform[4])"
    ]
  },
  "GenericWorldFogEntity": {
    "parent": "GenericEntity",
    "methods": [
      "void Teleport(vector transform[4])"
    ]
  },
  "BasicEntity": {
    "parent": "GenericEntity",
    "methods": [
      "void Teleport(vector transform[4])"
    ]
  },
  "WorldEntityClass": {
    "parent": null,
    "methods": [
      "void Teleport(vector transform[4])"
    ]
  },
  "WorldEntity": {
    "parent": "GenericWorldEntity",
    "methods": [
      "void Teleport(vector transform[4])"
    ]
  },
  "ModelEntity": {
    "parent": "BasicEntity",
    "methods": [
      "void Teleport(vector transform[4])"
    ]
  },
  "CharacterEntity": {
    "parent": "BasicEntity",
    "methods": [
      "void Teleport(vector transform[4])"
    ]
  },
  "BasicCamera": {
    "parent": "BasicEntity",
    "methods": []
  },
  "VRHandEntity": {
    "parent": "GenericEntity",
    "methods": []
  },
  "RenderTargetClass": {
    "parent": null,
    "methods": [
      "void RenderTarget(IEntitySource src, IEntity parent)",
      "void Init()",
      "void EOnInit(IEntity other, int extra)"
    ]
  },
  "RenderTarget": {
    "parent": null,
    "methods": [
      "void RenderTarget(IEntitySource src, IEntity parent)",
      "void Init()",
      "void EOnInit(IEntity other, int extra)"
    ]
  },
  "ScriptCameraClass": {
    "parent": null,
    "methods": [
      "void ScriptCamera(IEntitySource src, IEntity parent)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void FreeFly(float timeSlice)",
      "void DebugInfo()"
    ]
  },
  "ScriptCamera": {
    "parent": null,
    "methods": [
      "void ScriptCamera(IEntitySource src, IEntity parent)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void FreeFly(float timeSlice)",
      "void DebugInfo()"
    ]
  },
  "ScriptLightClass": {
    "parent": null,
    "methods": [
      "void ScriptLight(IEntitySource src, IEntity parent)"
    ]
  },
  "ScriptLight": {
    "parent": null,
    "methods": [
      "void ScriptLight(IEntitySource src, IEntity parent)"
    ]
  },
  "ScriptModelClass": {
    "parent": null,
    "methods": [
      "void ScriptModel(IEntitySource src, IEntity parent)"
    ]
  },
  "ScriptModel": {
    "parent": null,
    "methods": [
      "void ScriptModel(IEntitySource src, IEntity parent)"
    ]
  },
  "WorldsMenuClass": {
    "parent": null,
    "methods": [
      "void WorldsMenu(IEntitySource src, IEntity parent)",
      "void EOnPostFrame(IEntity other, int extra)",
      "void LoadWorlds()",
      "void InsertWorldToList(string fileName)"
    ]
  },
  "WorldsMenu": {
    "parent": null,
    "methods": [
      "void WorldsMenu(IEntitySource src, IEntity parent)",
      "void EOnPostFrame(IEntity other, int extra)",
      "void LoadWorlds()",
      "void InsertWorldToList(string fileName)"
    ]
  },
  "Test": {
    "parent": null,
    "methods": [
      "void Test(string suite, int timeoutS = 0, int timeoutMs = 0, int sortOrder = 0)",
      "void Step(EStage stage = EStage.Main)",
      "static bool Run()",
      "static string Report()",
      "static int GetNSuites()",
      "static bool Finished()",
      "static void Begin()",
      "static void End()",
      "void SetResult(TestResultBase res)",
      "int GetNTests()",
      "void SetEnabled(bool val)",
      "bool IsEnabled()",
      "string GetName()",
      "void OnInit()",
      "bool Failure()",
      "string FailureText()",
      "bool NativeFailure()",
      "string NativeFailureText()"
    ]
  },
  "Step": {
    "parent": null,
    "methods": [
      "void Step(EStage stage = EStage.Main)",
      "static bool Run()",
      "static string Report()",
      "static int GetNSuites()",
      "static bool Finished()",
      "static void Begin()",
      "static void End()",
      "void SetResult(TestResultBase res)",
      "int GetNTests()",
      "void SetEnabled(bool val)",
      "bool IsEnabled()",
      "string GetName()",
      "void OnInit()",
      "bool Failure()",
      "string FailureText()",
      "bool NativeFailure()",
      "string NativeFailureText()"
    ]
  },
  "TestHarness": {
    "parent": null,
    "methods": [
      "static bool Run()",
      "static string Report()",
      "static int GetNSuites()",
      "static bool Finished()",
      "static void Begin()",
      "static void End()",
      "void SetResult(TestResultBase res)",
      "int GetNTests()",
      "void SetEnabled(bool val)",
      "bool IsEnabled()",
      "string GetName()",
      "void OnInit()",
      "bool Failure()",
      "string FailureText()",
      "bool NativeFailure()",
      "string NativeFailureText()"
    ]
  },
  "TestSuite": {
    "parent": null,
    "methods": [
      "void SetResult(TestResultBase res)",
      "int GetNTests()",
      "void SetEnabled(bool val)",
      "bool IsEnabled()",
      "string GetName()",
      "void OnInit()",
      "bool Failure()",
      "string FailureText()",
      "bool NativeFailure()",
      "string NativeFailureText()"
    ]
  },
  "TestBase": {
    "parent": null,
    "methods": [
      "void SetResult(TestResultBase res)",
      "void SetEnabled(bool val)",
      "bool IsEnabled()",
      "string GetName()",
      "bool Failure()",
      "string FailureText()",
      "bool NativeFailure()",
      "string NativeFailureText()"
    ]
  },
  "TestResultBase": {
    "parent": null,
    "methods": [
      "bool Failure()",
      "string FailureText()",
      "bool NativeFailure()",
      "string NativeFailureText()"
    ]
  },
  "AIAgent": {
    "parent": null,
    "methods": [
      "void AIAgent()",
      "void SetKeepInIdle(bool enable)"
    ]
  },
  "AIGroup": {
    "parent": null,
    "methods": [
      "void AIGroup()",
      "void AddAgent(notnull AIAgent agent)",
      "void RemoveAgent(notnull AIAgent agent)"
    ]
  },
  "AIGroupBehaviour": {
    "parent": null,
    "methods": [
      "void AIGroupBehaviour()",
      "void BehaviourGroupInfectedPackWaypointParams(vector pos, float radius)",
      "void SetWaypoints(array<ref BehaviourGroupInfectedPackWaypointParams> waypointParams, int waypointDefaultIndex, bool forwardDirection, bool loop)",
      "void SetWaypointsTraverseDirection(bool forwardDirection)",
      "void SetWaypointsLoop(bool loop)",
      "void SetCurrentWaypoint(int waypointIndex)"
    ]
  },
  "BehaviourGroupInfectedPackWaypointParams": {
    "parent": null,
    "methods": [
      "void BehaviourGroupInfectedPackWaypointParams(vector pos, float radius)",
      "void SetWaypoints(array<ref BehaviourGroupInfectedPackWaypointParams> waypointParams, int waypointDefaultIndex, bool forwardDirection, bool loop)",
      "void SetWaypointsTraverseDirection(bool forwardDirection)",
      "void SetWaypointsLoop(bool loop)",
      "void SetCurrentWaypoint(int waypointIndex)"
    ]
  },
  "BehaviourGroupInfectedPack": {
    "parent": null,
    "methods": [
      "void SetWaypoints(array<ref BehaviourGroupInfectedPackWaypointParams> waypointParams, int waypointDefaultIndex, bool forwardDirection, bool loop)",
      "void SetWaypointsTraverseDirection(bool forwardDirection)",
      "void SetWaypointsLoop(bool loop)",
      "void SetCurrentWaypoint(int waypointIndex)"
    ]
  },
  "PGFilter": {
    "parent": null,
    "methods": [
      "int GetIncludeFlags()",
      "int GetExcludeFlags()",
      "int GetExlusiveFlags()",
      "void SetFlags(int includeFlags, int excludeFlags, int exclusiveFlags)",
      "void SetCost(PGAreaType areaType, float cost)",
      "void AIWorld()",
      "void DeleteGroup(notnull AIGroup group)",
      "bool FindPath(vector from, vector to, PGFilter pgFilter, out TVectorArray waypoints)",
      "bool RaycastNavMesh(vector from, vector to, PGFilter pgFilter, out vector hitPos, out vector hitNormal)",
      "bool SampleNavmeshPosition(vector position, float maxDistance, PGFilter pgFilter, out vector sampledPosition)"
    ]
  },
  "AIWorld": {
    "parent": null,
    "methods": [
      "void AIWorld()",
      "void DeleteGroup(notnull AIGroup group)",
      "bool FindPath(vector from, vector to, PGFilter pgFilter, out TVectorArray waypoints)",
      "bool RaycastNavMesh(vector from, vector to, PGFilter pgFilter, out vector hitPos, out vector hitNormal)",
      "bool SampleNavmeshPosition(vector position, float maxDistance, PGFilter pgFilter, out vector sampledPosition)"
    ]
  },
  "AnalyticsManagerClient": {
    "parent": null,
    "methods": [
      "void RegisterEvents()",
      "void UnregisterEvents()",
      "void OnActionEat()",
      "void OnActionDrink()",
      "void OnActionCookedSteak()",
      "void OnActionFinishedShaveSelf()",
      "void OnActionFinishedGutDeer()",
      "void OnActionRestrain()",
      "void OnActionBandageTarget()",
      "void OnItemAttachedAtPlayer(EntityAI item, string slot_name)",
      "void Event_OnPlayerIgnitedFireplace( EFireIgniteType ignite_type )",
      "void Event_OnEntityKilled(EntityAI victim, EntityAI killer, EntityAI source, bool is_headshot)"
    ]
  },
  "AnalyticsManagerServer": {
    "parent": null,
    "methods": [
      "void OnPlayerConnect(Man player)",
      "void OnPlayerDisconnect(Man player)",
      "void OnEntityHit(EntityAI source, Man target)",
      "void OnPlayerToPlayerHit(Man shooter, Man target)",
      "void OnEntityKilled(Object killer, EntityAI target)",
      "void OnPlayerKilled(Man killer, EntityAI target)",
      "void OnInfectedKilled(Man killer, EntityAI target)"
    ]
  },
  "StatsEventMeasuresData": {
    "parent": null,
    "methods": [
      "void StatsEventData(string eventName)",
      "void AddBool(string key, bool value)",
      "void AddInt(string key, int value)",
      "void AddFloat(string key, float value)",
      "void AddString(string key, string value)",
      "void AddVector(string key, vector value)",
      "void SendPlayerDeath(StatsEventDeathData data)",
      "void SendPlayerScoredKill(StatsEventScoredKillData data)",
      "void SendPlayerDisconnected(StatsEventDisconnectedData data)",
      "void SendPlayerMeasures(StatsEventMeasuresData data)",
      "void SendPlayerSpawned(StatsEventSpawnedData data)",
      "void SendEvent(StatsEventData data)",
      "static void PlayerDeath(StatsEventDeathData data)",
      "static void PlayerScoredKill(StatsEventScoredKillData data)",
      "static void PlayerDisconnected(StatsEventDisconnectedData data)",
      "static void PlayerMeasures(StatsEventMeasuresData data)",
      "static void PlayerSpawned(StatsEventSpawnedData data)"
    ]
  },
  "StatsEventDeathData": {
    "parent": null,
    "methods": [
      "void StatsEventData(string eventName)",
      "void AddBool(string key, bool value)",
      "void AddInt(string key, int value)",
      "void AddFloat(string key, float value)",
      "void AddString(string key, string value)",
      "void AddVector(string key, vector value)",
      "void SendPlayerDeath(StatsEventDeathData data)",
      "void SendPlayerScoredKill(StatsEventScoredKillData data)",
      "void SendPlayerDisconnected(StatsEventDisconnectedData data)",
      "void SendPlayerMeasures(StatsEventMeasuresData data)",
      "void SendPlayerSpawned(StatsEventSpawnedData data)",
      "void SendEvent(StatsEventData data)",
      "static void PlayerDeath(StatsEventDeathData data)",
      "static void PlayerScoredKill(StatsEventScoredKillData data)",
      "static void PlayerDisconnected(StatsEventDisconnectedData data)",
      "static void PlayerMeasures(StatsEventMeasuresData data)",
      "static void PlayerSpawned(StatsEventSpawnedData data)"
    ]
  },
  "StatsEventScoredKillData": {
    "parent": null,
    "methods": [
      "void StatsEventData(string eventName)",
      "void AddBool(string key, bool value)",
      "void AddInt(string key, int value)",
      "void AddFloat(string key, float value)",
      "void AddString(string key, string value)",
      "void AddVector(string key, vector value)",
      "void SendPlayerDeath(StatsEventDeathData data)",
      "void SendPlayerScoredKill(StatsEventScoredKillData data)",
      "void SendPlayerDisconnected(StatsEventDisconnectedData data)",
      "void SendPlayerMeasures(StatsEventMeasuresData data)",
      "void SendPlayerSpawned(StatsEventSpawnedData data)",
      "void SendEvent(StatsEventData data)",
      "static void PlayerDeath(StatsEventDeathData data)",
      "static void PlayerScoredKill(StatsEventScoredKillData data)",
      "static void PlayerDisconnected(StatsEventDisconnectedData data)",
      "static void PlayerMeasures(StatsEventMeasuresData data)",
      "static void PlayerSpawned(StatsEventSpawnedData data)"
    ]
  },
  "StatsEventDisconnectedData": {
    "parent": null,
    "methods": [
      "void StatsEventData(string eventName)",
      "void AddBool(string key, bool value)",
      "void AddInt(string key, int value)",
      "void AddFloat(string key, float value)",
      "void AddString(string key, string value)",
      "void AddVector(string key, vector value)",
      "void SendPlayerDeath(StatsEventDeathData data)",
      "void SendPlayerScoredKill(StatsEventScoredKillData data)",
      "void SendPlayerDisconnected(StatsEventDisconnectedData data)",
      "void SendPlayerMeasures(StatsEventMeasuresData data)",
      "void SendPlayerSpawned(StatsEventSpawnedData data)",
      "void SendEvent(StatsEventData data)",
      "static void PlayerDeath(StatsEventDeathData data)",
      "static void PlayerScoredKill(StatsEventScoredKillData data)",
      "static void PlayerDisconnected(StatsEventDisconnectedData data)",
      "static void PlayerMeasures(StatsEventMeasuresData data)",
      "static void PlayerSpawned(StatsEventSpawnedData data)"
    ]
  },
  "StatsEventSpawnedData": {
    "parent": null,
    "methods": [
      "void StatsEventData(string eventName)",
      "void AddBool(string key, bool value)",
      "void AddInt(string key, int value)",
      "void AddFloat(string key, float value)",
      "void AddString(string key, string value)",
      "void AddVector(string key, vector value)",
      "void SendPlayerDeath(StatsEventDeathData data)",
      "void SendPlayerScoredKill(StatsEventScoredKillData data)",
      "void SendPlayerDisconnected(StatsEventDisconnectedData data)",
      "void SendPlayerMeasures(StatsEventMeasuresData data)",
      "void SendPlayerSpawned(StatsEventSpawnedData data)",
      "void SendEvent(StatsEventData data)",
      "static void PlayerDeath(StatsEventDeathData data)",
      "static void PlayerScoredKill(StatsEventScoredKillData data)",
      "static void PlayerDisconnected(StatsEventDisconnectedData data)",
      "static void PlayerMeasures(StatsEventMeasuresData data)",
      "static void PlayerSpawned(StatsEventSpawnedData data)"
    ]
  },
  "StatsEventData": {
    "parent": null,
    "methods": [
      "void StatsEventData(string eventName)",
      "void AddBool(string key, bool value)",
      "void AddInt(string key, int value)",
      "void AddFloat(string key, float value)",
      "void AddString(string key, string value)",
      "void AddVector(string key, vector value)",
      "void SendPlayerDeath(StatsEventDeathData data)",
      "void SendPlayerScoredKill(StatsEventScoredKillData data)",
      "void SendPlayerDisconnected(StatsEventDisconnectedData data)",
      "void SendPlayerMeasures(StatsEventMeasuresData data)",
      "void SendPlayerSpawned(StatsEventSpawnedData data)",
      "void SendEvent(StatsEventData data)",
      "static void PlayerDeath(StatsEventDeathData data)",
      "static void PlayerScoredKill(StatsEventScoredKillData data)",
      "static void PlayerDisconnected(StatsEventDisconnectedData data)",
      "static void PlayerMeasures(StatsEventMeasuresData data)",
      "static void PlayerSpawned(StatsEventSpawnedData data)"
    ]
  },
  "ScriptAnalytics": {
    "parent": null,
    "methods": [
      "void SendPlayerDeath(StatsEventDeathData data)",
      "void SendPlayerScoredKill(StatsEventScoredKillData data)",
      "void SendPlayerDisconnected(StatsEventDisconnectedData data)",
      "void SendPlayerMeasures(StatsEventMeasuresData data)",
      "void SendPlayerSpawned(StatsEventSpawnedData data)",
      "void SendEvent(StatsEventData data)",
      "static void PlayerDeath(StatsEventDeathData data)",
      "static void PlayerScoredKill(StatsEventScoredKillData data)",
      "static void PlayerDisconnected(StatsEventDisconnectedData data)",
      "static void PlayerMeasures(StatsEventMeasuresData data)",
      "static void PlayerSpawned(StatsEventSpawnedData data)"
    ]
  },
  "Analytics": {
    "parent": null,
    "methods": [
      "static void PlayerDeath(StatsEventDeathData data)",
      "static void PlayerScoredKill(StatsEventScoredKillData data)",
      "static void PlayerDisconnected(StatsEventDisconnectedData data)",
      "static void PlayerMeasures(StatsEventMeasuresData data)",
      "static void PlayerSpawned(StatsEventSpawnedData data)"
    ]
  },
  "AnimCommandBase": {
    "parent": null,
    "methods": [
      "void AnimCommandBase()",
      "void OnActivate()",
      "void OnDeactivate()",
      "void PreAnimUpdate(float pDt)",
      "void PrePhysUpdate(float pDt)",
      "void PreAnim_CallCommand(int pCommand, int pParamInt, float pParamFloat)",
      "void PreAnim_SetFloat(int pVar, float pFlt)",
      "void PreAnim_SetInt(int pVar, int pInt)",
      "void PreAnim_SetBool(int pVar, bool pBool)",
      "bool PrePhys_IsEvent(int pEvent)",
      "bool PrePhys_IsTag(int pTag)"
    ]
  },
  "AnimPhysMove": {
    "parent": null,
    "methods": [
      "void SetCorrectionType(int value)",
      "int GetCorrectionType()",
      "void SetPosition(vector value)",
      "void GetPosition(out vector value)",
      "void SetRotation(float value[4])",
      "void GetRotation(out float value[4])",
      "void Setparent(Object value)",
      "void SetLinked(Object value)",
      "bool Hasparent()",
      "bool Isparented()",
      "bool IsLinked()",
      "void SetparentTransform(vector transform[4])",
      "void GetparentTransform(out vector transform[4])",
      "void GetTransform(inout vector transform[4])"
    ]
  },
  "AutotestConfigHandler": {
    "parent": null,
    "methods": [
      "static bool LoadData(string path)"
    ]
  },
  "AutotestConfigJson": {
    "parent": null,
    "methods": []
  },
  "AutoTestFixture": {
    "parent": null,
    "methods": [
      "static bool SaveXMLReport(string data, out string errorMessage)",
      "static void SetWorldName()",
      "static string GetWorldName()",
      "static void LogRPT(string message)"
    ]
  },
  "AutotestRunner": {
    "parent": null,
    "methods": [
      "static bool IsRunning()",
      "static bool IsDone()",
      "static void Start()",
      "static void Update(float deltaTime)",
      "bool Failure()",
      "string FailureText()",
      "void CustomResult(bool success, string text = , string kind = )"
    ]
  },
  "CustomResult": {
    "parent": null,
    "methods": [
      "bool Failure()",
      "string FailureText()",
      "void CustomResult(bool success, string text = , string kind = )"
    ]
  },
  "EconomyLogCategories": {
    "parent": null,
    "methods": [
      "void EconomyLogCategories()",
      "void EconomyMapStrings()",
      "static string Category(string category)",
      "static string Tag(string tag)",
      "void EconomyOutputStrings()",
      "void CEApi()",
      "void ExportSpawnData()",
      "void ExportProxyData( vector vCenter = vector.Zero, float fRadius = 0 )",
      "void ExportClusterData()",
      "void ExportProxyProto()",
      "void MarkCloseProxy( float fRadius, bool bAllSelections )",
      "void RemoveCloseProxy()",
      "void ListCloseProxy( float fRadius )",
      "bool SpawnAnalyze( string sClassName )",
      "void TimeShift( float fShift )",
      "void OverrideLifeTime( float fLifeTime )",
      "void SpawnDE( string sEvName, vector vPos, float fAngle = -1 )",
      "void SpawnDEEx( string sEvName, vector vPos, float fAngle, int uFlags )",
      "void SpawnLoot( string sEvName, vector vPos, float fAngle, int iCount = 1, float fRange = 1 )",
      "void SpawnDynamic( vector vPos, bool bShowCylinders = true, float fDefaultDistance = 0 )",
      "void SpawnVehicles( vector vPos, bool bShowCylinders = false, float fDefaultDistance = 20 )",
      "void SpawnBuilding( vector vPos, bool bShowCylinders = false, float fDefaultDistance = 20 )",
      "void SpawnEntity( string sClassName, vector vPos, float fRange, int iCount )",
      "void SpawnRotation( string sClassName, vector vPos, float fRange, int iCount, int iFlags )",
      "void SpawnPerfTest( string sClassName, int iCount )",
      "void CleanMap()",
      "void EconomyLog( string sLogType )",
      "void EconomyMap( string sMapType )",
      "void EconomyOutput( string sOutputType, float fRange )",
      "void RadiusLifetimeIncrease( vector vCenter, float fRadius, float fValue )",
      "void RadiusLifetimeDecrease( vector vCenter, float fRadius, float fValue )",
      "void RadiusLifetimeReset( vector vCenter, float fRadius )",
      "int GetCEGlobalInt(string varName)",
      "float GetCEGlobalFloat(string varName)",
      "string GetCEGlobalString(string varName)",
      "bool AvoidPlayer(vector vPos, float fDistance)",
      "bool AvoidVehicle(vector vPos, float fDistance, string sDEName = )",
      "int CountPlayersWithinRange(vector vPos, float fRange)",
      "void LootSetSpawnVolumeVisualisation(ESpawnVolumeVis mode)",
      "void LootToggleSpawnSetup(bool mode)",
      "void LootToggleVolumeEditing(bool mode)",
      "void LootRetraceGroupPoints()",
      "void LootExportGroup()",
      "void LootExportAllGroups()",
      "void LootExportMap()",
      "void LootExportClusters()",
      "void LootDepleteLifetime()",
      "void LootSetDamageToOne()",
      "void LootDepleteAndDamage()",
      "void InfectedToggleVisualisation(bool mode)",
      "void InfectedToggleZoneInfo(bool mode)",
      "void InfectedSpawn()",
      "void InfectedResetCleanup()",
      "void AnimalToggleVisualisation(bool mode)",
      "void AnimalSpawn()",
      "void AnimalAmbientSpawn()",
      "void ToggleVehicleAndWreckVisualisation(bool mode)",
      "void ToggleLootVisualisation(bool mode)",
      "void ToggleClusterVisualisation(bool mode)",
      "void ToggleDynamicEventStatus(bool mode)",
      "void ToggleDynamicEventVisualisation(bool mode)",
      "void DynamicEventSpawn()",
      "void DynamicEventExport()",
      "void ToggleOverallStats(bool mode)",
      "void PlatformStatTest()",
      "void LootToggleProxyEditing(bool mode)",
      "void OnUpdate()",
      "void CEItemProfile()",
      "int GetNominal()",
      "int GetMin()",
      "float GetQuantityMin()",
      "float GetQuantityMax()",
      "float GetQuantity()",
      "float GetLifetime()",
      "float GetRestock()",
      "int GetCost()",
      "int GetUsageFlags()",
      "int GetValueFlags()"
    ]
  },
  "EconomyMapStrings": {
    "parent": null,
    "methods": [
      "void EconomyMapStrings()",
      "static string Category(string category)",
      "static string Tag(string tag)",
      "void EconomyOutputStrings()",
      "void CEApi()",
      "void ExportSpawnData()",
      "void ExportProxyData( vector vCenter = vector.Zero, float fRadius = 0 )",
      "void ExportClusterData()",
      "void ExportProxyProto()",
      "void MarkCloseProxy( float fRadius, bool bAllSelections )",
      "void RemoveCloseProxy()",
      "void ListCloseProxy( float fRadius )",
      "bool SpawnAnalyze( string sClassName )",
      "void TimeShift( float fShift )",
      "void OverrideLifeTime( float fLifeTime )",
      "void SpawnDE( string sEvName, vector vPos, float fAngle = -1 )",
      "void SpawnDEEx( string sEvName, vector vPos, float fAngle, int uFlags )",
      "void SpawnLoot( string sEvName, vector vPos, float fAngle, int iCount = 1, float fRange = 1 )",
      "void SpawnDynamic( vector vPos, bool bShowCylinders = true, float fDefaultDistance = 0 )",
      "void SpawnVehicles( vector vPos, bool bShowCylinders = false, float fDefaultDistance = 20 )",
      "void SpawnBuilding( vector vPos, bool bShowCylinders = false, float fDefaultDistance = 20 )",
      "void SpawnEntity( string sClassName, vector vPos, float fRange, int iCount )",
      "void SpawnRotation( string sClassName, vector vPos, float fRange, int iCount, int iFlags )",
      "void SpawnPerfTest( string sClassName, int iCount )",
      "void CleanMap()",
      "void EconomyLog( string sLogType )",
      "void EconomyMap( string sMapType )",
      "void EconomyOutput( string sOutputType, float fRange )",
      "void RadiusLifetimeIncrease( vector vCenter, float fRadius, float fValue )",
      "void RadiusLifetimeDecrease( vector vCenter, float fRadius, float fValue )",
      "void RadiusLifetimeReset( vector vCenter, float fRadius )",
      "int GetCEGlobalInt(string varName)",
      "float GetCEGlobalFloat(string varName)",
      "string GetCEGlobalString(string varName)",
      "bool AvoidPlayer(vector vPos, float fDistance)",
      "bool AvoidVehicle(vector vPos, float fDistance, string sDEName = )",
      "int CountPlayersWithinRange(vector vPos, float fRange)",
      "void LootSetSpawnVolumeVisualisation(ESpawnVolumeVis mode)",
      "void LootToggleSpawnSetup(bool mode)",
      "void LootToggleVolumeEditing(bool mode)",
      "void LootRetraceGroupPoints()",
      "void LootExportGroup()",
      "void LootExportAllGroups()",
      "void LootExportMap()",
      "void LootExportClusters()",
      "void LootDepleteLifetime()",
      "void LootSetDamageToOne()",
      "void LootDepleteAndDamage()",
      "void InfectedToggleVisualisation(bool mode)",
      "void InfectedToggleZoneInfo(bool mode)",
      "void InfectedSpawn()",
      "void InfectedResetCleanup()",
      "void AnimalToggleVisualisation(bool mode)",
      "void AnimalSpawn()",
      "void AnimalAmbientSpawn()",
      "void ToggleVehicleAndWreckVisualisation(bool mode)",
      "void ToggleLootVisualisation(bool mode)",
      "void ToggleClusterVisualisation(bool mode)",
      "void ToggleDynamicEventStatus(bool mode)",
      "void ToggleDynamicEventVisualisation(bool mode)",
      "void DynamicEventSpawn()",
      "void DynamicEventExport()",
      "void ToggleOverallStats(bool mode)",
      "void PlatformStatTest()",
      "void LootToggleProxyEditing(bool mode)",
      "void OnUpdate()",
      "void CEItemProfile()",
      "int GetNominal()",
      "int GetMin()",
      "float GetQuantityMin()",
      "float GetQuantityMax()",
      "float GetQuantity()",
      "float GetLifetime()",
      "float GetRestock()",
      "int GetCost()",
      "int GetUsageFlags()",
      "int GetValueFlags()"
    ]
  },
  "EconomyOutputStrings": {
    "parent": null,
    "methods": [
      "void EconomyOutputStrings()",
      "void CEApi()",
      "void ExportSpawnData()",
      "void ExportProxyData( vector vCenter = vector.Zero, float fRadius = 0 )",
      "void ExportClusterData()",
      "void ExportProxyProto()",
      "void MarkCloseProxy( float fRadius, bool bAllSelections )",
      "void RemoveCloseProxy()",
      "void ListCloseProxy( float fRadius )",
      "bool SpawnAnalyze( string sClassName )",
      "void TimeShift( float fShift )",
      "void OverrideLifeTime( float fLifeTime )",
      "void SpawnDE( string sEvName, vector vPos, float fAngle = -1 )",
      "void SpawnDEEx( string sEvName, vector vPos, float fAngle, int uFlags )",
      "void SpawnLoot( string sEvName, vector vPos, float fAngle, int iCount = 1, float fRange = 1 )",
      "void SpawnDynamic( vector vPos, bool bShowCylinders = true, float fDefaultDistance = 0 )",
      "void SpawnVehicles( vector vPos, bool bShowCylinders = false, float fDefaultDistance = 20 )",
      "void SpawnBuilding( vector vPos, bool bShowCylinders = false, float fDefaultDistance = 20 )",
      "void SpawnEntity( string sClassName, vector vPos, float fRange, int iCount )",
      "void SpawnRotation( string sClassName, vector vPos, float fRange, int iCount, int iFlags )",
      "void SpawnPerfTest( string sClassName, int iCount )",
      "void CleanMap()",
      "void EconomyLog( string sLogType )",
      "void EconomyMap( string sMapType )",
      "void EconomyOutput( string sOutputType, float fRange )",
      "void RadiusLifetimeIncrease( vector vCenter, float fRadius, float fValue )",
      "void RadiusLifetimeDecrease( vector vCenter, float fRadius, float fValue )",
      "void RadiusLifetimeReset( vector vCenter, float fRadius )",
      "int GetCEGlobalInt(string varName)",
      "float GetCEGlobalFloat(string varName)",
      "string GetCEGlobalString(string varName)",
      "bool AvoidPlayer(vector vPos, float fDistance)",
      "bool AvoidVehicle(vector vPos, float fDistance, string sDEName = )",
      "int CountPlayersWithinRange(vector vPos, float fRange)",
      "void LootSetSpawnVolumeVisualisation(ESpawnVolumeVis mode)",
      "void LootToggleSpawnSetup(bool mode)",
      "void LootToggleVolumeEditing(bool mode)",
      "void LootRetraceGroupPoints()",
      "void LootExportGroup()",
      "void LootExportAllGroups()",
      "void LootExportMap()",
      "void LootExportClusters()",
      "void LootDepleteLifetime()",
      "void LootSetDamageToOne()",
      "void LootDepleteAndDamage()",
      "void InfectedToggleVisualisation(bool mode)",
      "void InfectedToggleZoneInfo(bool mode)",
      "void InfectedSpawn()",
      "void InfectedResetCleanup()",
      "void AnimalToggleVisualisation(bool mode)",
      "void AnimalSpawn()",
      "void AnimalAmbientSpawn()",
      "void ToggleVehicleAndWreckVisualisation(bool mode)",
      "void ToggleLootVisualisation(bool mode)",
      "void ToggleClusterVisualisation(bool mode)",
      "void ToggleDynamicEventStatus(bool mode)",
      "void ToggleDynamicEventVisualisation(bool mode)",
      "void DynamicEventSpawn()",
      "void DynamicEventExport()",
      "void ToggleOverallStats(bool mode)",
      "void PlatformStatTest()",
      "void LootToggleProxyEditing(bool mode)",
      "void OnUpdate()",
      "void CEItemProfile()",
      "int GetNominal()",
      "int GetMin()",
      "float GetQuantityMin()",
      "float GetQuantityMax()",
      "float GetQuantity()",
      "float GetLifetime()",
      "float GetRestock()",
      "int GetCost()",
      "int GetUsageFlags()",
      "int GetValueFlags()"
    ]
  },
  "CEApi": {
    "parent": null,
    "methods": [
      "void CEApi()",
      "void ExportSpawnData()",
      "void ExportProxyData( vector vCenter = vector.Zero, float fRadius = 0 )",
      "void ExportClusterData()",
      "void ExportProxyProto()",
      "void MarkCloseProxy( float fRadius, bool bAllSelections )",
      "void RemoveCloseProxy()",
      "void ListCloseProxy( float fRadius )",
      "bool SpawnAnalyze( string sClassName )",
      "void TimeShift( float fShift )",
      "void OverrideLifeTime( float fLifeTime )",
      "void SpawnDE( string sEvName, vector vPos, float fAngle = -1 )",
      "void SpawnDEEx( string sEvName, vector vPos, float fAngle, int uFlags )",
      "void SpawnLoot( string sEvName, vector vPos, float fAngle, int iCount = 1, float fRange = 1 )",
      "void SpawnDynamic( vector vPos, bool bShowCylinders = true, float fDefaultDistance = 0 )",
      "void SpawnVehicles( vector vPos, bool bShowCylinders = false, float fDefaultDistance = 20 )",
      "void SpawnBuilding( vector vPos, bool bShowCylinders = false, float fDefaultDistance = 20 )",
      "void SpawnEntity( string sClassName, vector vPos, float fRange, int iCount )",
      "void SpawnRotation( string sClassName, vector vPos, float fRange, int iCount, int iFlags )",
      "void SpawnPerfTest( string sClassName, int iCount )",
      "void CleanMap()",
      "void EconomyLog( string sLogType )",
      "void EconomyMap( string sMapType )",
      "void EconomyOutput( string sOutputType, float fRange )",
      "void RadiusLifetimeIncrease( vector vCenter, float fRadius, float fValue )",
      "void RadiusLifetimeDecrease( vector vCenter, float fRadius, float fValue )",
      "void RadiusLifetimeReset( vector vCenter, float fRadius )",
      "int GetCEGlobalInt(string varName)",
      "float GetCEGlobalFloat(string varName)",
      "string GetCEGlobalString(string varName)",
      "bool AvoidPlayer(vector vPos, float fDistance)",
      "bool AvoidVehicle(vector vPos, float fDistance, string sDEName = )",
      "int CountPlayersWithinRange(vector vPos, float fRange)",
      "void LootSetSpawnVolumeVisualisation(ESpawnVolumeVis mode)",
      "void LootToggleSpawnSetup(bool mode)",
      "void LootToggleVolumeEditing(bool mode)",
      "void LootRetraceGroupPoints()",
      "void LootExportGroup()",
      "void LootExportAllGroups()",
      "void LootExportMap()",
      "void LootExportClusters()",
      "void LootDepleteLifetime()",
      "void LootSetDamageToOne()",
      "void LootDepleteAndDamage()",
      "void InfectedToggleVisualisation(bool mode)",
      "void InfectedToggleZoneInfo(bool mode)",
      "void InfectedSpawn()",
      "void InfectedResetCleanup()",
      "void AnimalToggleVisualisation(bool mode)",
      "void AnimalSpawn()",
      "void AnimalAmbientSpawn()",
      "void ToggleVehicleAndWreckVisualisation(bool mode)",
      "void ToggleLootVisualisation(bool mode)",
      "void ToggleClusterVisualisation(bool mode)",
      "void ToggleDynamicEventStatus(bool mode)",
      "void ToggleDynamicEventVisualisation(bool mode)",
      "void DynamicEventSpawn()",
      "void DynamicEventExport()",
      "void ToggleOverallStats(bool mode)",
      "void PlatformStatTest()",
      "void LootToggleProxyEditing(bool mode)",
      "void OnUpdate()",
      "void CEItemProfile()",
      "int GetNominal()",
      "int GetMin()",
      "float GetQuantityMin()",
      "float GetQuantityMax()",
      "float GetQuantity()",
      "float GetLifetime()",
      "float GetRestock()",
      "int GetCost()",
      "int GetUsageFlags()",
      "int GetValueFlags()"
    ]
  },
  "CEItemProfile": {
    "parent": null,
    "methods": [
      "void CEItemProfile()",
      "int GetNominal()",
      "int GetMin()",
      "float GetQuantityMin()",
      "float GetQuantityMax()",
      "float GetQuantity()",
      "float GetLifetime()",
      "float GetRestock()",
      "int GetCost()",
      "int GetUsageFlags()",
      "int GetValueFlags()"
    ]
  },
  "ClientData": {
    "parent": null,
    "methods": [
      "static void ResetClientData()",
      "static void AddPlayerBase( Man player )",
      "static void RemovePlayerBase( Man player )",
      "static void SyncEvent_PreprocessPlayerList(SyncPlayerList player_list)",
      "static void SyncEvent_OnRecievedPlayerList( SyncPlayerList player_list )",
      "static void SyncEvent_OnEntityKilled( SyncEntityKillInfo entity_killed_data )",
      "static void SyncEvent_OnPlayerIgnitedFireplace( EFireIgniteType igante_type )"
    ]
  },
  "OnlineServices": {
    "parent": null,
    "methods": [
      "static void Init()",
      "static bool IsInitialized()",
      "static void GetClientServices()",
      "static bool ErrorCaught( EBiosError error )",
      "static void LoadServers( notnull GetServersInput inputValues )",
      "static void GetFavoriteServers(TStringArray favServers)",
      "static void GetCachedFavServerInfo(array<ref CachedServerInfo> favServersInfoCache)",
      "static void SetServerFavorited(string ipAddress, int port, int steamQueryPort, bool is_favorited )",
      "static void GetCurrentServerInfo( string ip, int port )",
      "static void ClearCurrentServerInfo()",
      "static void SetInviteServerInfo( string ip, int port )",
      "static void GetInviteServerInfo( out string ip, out int port )",
      "static void OnLoadServersAsync( GetServersResult result_list, EBiosError error, string response )",
      "static void LoadFriends()",
      "static void ShowUserProfile( string uid )",
      "static void OnUserProfileAsync(EBiosError error)",
      "static void OnFriendsAsync( BiosFriendInfoArray friend_list, EBiosError error )",
      "static void LoadPermissions( array<string> player_list )",
      "static void OnPermissionsAsync( BiosPrivacyUidResultArray result_list, EBiosError error )",
      "static bool IsPlayerMuted( string id )",
      "static bool MutePlayer( string id, bool mute )",
      "static void ShowInviteScreen()",
      "static void LoadMPPrivilege()",
      "static void LoadVoicePrivilege()",
      "static void OnLoadMPPrivilege( EBiosError err )",
      "static void OnLoadVoicePrivilege( EBiosError err )",
      "static void SetSessionHandle( string handle )",
      "static string GetSessionHandle()",
      "static void GetSession()",
      "static void SetBiosUser(BiosUser user)",
      "static bool GetMultiplayState()",
      "static void SetMultiplayState( bool state )",
      "static void EnterGameplaySession()",
      "static void LeaveGameplaySession()",
      "static void SetGameplayActivity()",
      "static void SetPendingInviteList( array<string> invitees )",
      "static void ClearPendingInviteList( array<string> invitees )",
      "static void AutoConnectToEmptyServer()",
      "static void OnAutoConnectToEmptyServer( GetFirstServerWithEmptySlotResult result_list, EBiosError error )",
      "static void GetServerModList( string server_id )",
      "static void OnGetServerModList( GetServerModListResult result_list, EBiosError error )",
      "static bool IsGameTrial( bool sim )",
      "static bool IsGameActive( bool sim )",
      "static bool CheckUpdate()",
      "static void PromptUpdate()"
    ]
  },
  "SyncData": {
    "parent": null,
    "methods": []
  },
  "SyncEntityKillInfo": {
    "parent": null,
    "methods": []
  },
  "SyncPlayer": {
    "parent": null,
    "methods": []
  },
  "SyncPlayerList": {
    "parent": null,
    "methods": [
      "void CreatePlayerList()"
    ]
  },
  "EffectParticle": {
    "parent": null,
    "methods": [
      "void EffectParticle()",
      "void InitEffect()",
      "string GetDebugName()",
      "void ValidateStart()",
      "bool IsParticle()",
      "void SetParticle(Particle p)",
      "void Start()",
      "void Stop()",
      "void AttachTo(Object obj, vector local_pos = , vector local_ori = , bool force_rotation_to_world = false)",
      "void ReAttach()",
      "void AddAsChild(Object obj, vector local_pos, vector local_ori, bool force_rotation_to_world)",
      "void Event_OnPlayStart()",
      "void Event_OnPlayStarted()",
      "void SetParticleID( int id )",
      "int GetParticleID()",
      "void SetCurrentParticleID( int id )",
      "int GetCurrentParticleID()",
      "void SetCurrentparent( Object parent_obj, bool updateCached = true )",
      "void SetCurrentPosition( vector pos, bool updateCached = true )",
      "void SetCurrentLocalPosition( vector pos, bool updateCached = true )",
      "void SetOrientation( vector ori )",
      "void SetCurrentOrientation( vector ori, bool updateCached = true )",
      "void ForceParticleRotationRelativeToWorld(bool state)",
      "bool IsParticleRotationRelativeToWorld()",
      "bool IsParticleCurrentRotationRelativeToWorld()",
      "void CheckLifeSpan()",
      "void SetDecalOwner(Object o)"
    ]
  },
  "EffectSound": {
    "parent": null,
    "methods": [
      "void EffectSound()",
      "void InitEffect()",
      "string GetDebugName()",
      "bool IsSound()",
      "bool SoundPlayEx(out SoundParams params)",
      "bool SoundPlay()",
      "void Start()",
      "void SoundStop()",
      "void Stop()",
      "void SoundReset()",
      "bool IsSoundPlaying()",
      "bool IsPlaying()",
      "bool SoundLoadEx(out SoundParams params)",
      "bool SoundLoad()",
      "bool IsSoundValid()",
      "void ValidateSoundWave()",
      "bool SoundWaveValidation()",
      "void UpdateEvents()",
      "void Event_OnFrameUpdate(float time_delta)",
      "void Event_OnRegistered(int id)",
      "void Event_OnUnregistered()",
      "void Event_OnSoundWaveStarted()",
      "void Event_OnSoundWaveEnded()",
      "void Event_OnSoundFadeInStopped()",
      "void Event_OnSoundFadeOutStarted()",
      "void SetAutodestroy(bool auto_destroy)",
      "bool IsAutodestroy()",
      "void SetSoundAutodestroy(bool auto_destroy)",
      "bool IsSoundAutodestroy()",
      "bool CanDestroy()",
      "void Setparent(Object parent_obj)",
      "void SetCurrentPosition( vector pos, bool updateCached = true )",
      "void SetCurrentLocalPosition( vector pos, bool updateCached = true )",
      "void SetSoundWaveKind(WaveKind wave_kind)",
      "void SetSoundSet(string snd)",
      "string GetSoundSet()",
      "void SetSoundLoop(bool loop)",
      "void SetEnviromentVariables(bool setEnvVariables)",
      "float GetSoundWaveLenght()",
      "float GetSoundWaveLength()",
      "void SetSoundVolume(float volume)",
      "float GetSoundVolume()",
      "void SetSoundMaxVolume(float volume)",
      "float GetSoundWaveTime()",
      "void SetSoundFadeIn(float fade_in)",
      "void SetSoundFadeOut(float fade_out)",
      "void SetDoppler(bool setDoppler)",
      "void SoundError(string err_msg)"
    ]
  },
  "Building": {
    "parent": "EntityAI",
    "methods": [
      "int GetLaddersCount()",
      "int GetDoorIndex(int componentIndex)",
      "int GetDoorCount()",
      "bool IsDoorOpen(int index)",
      "bool IsDoorOpening(int index)",
      "bool IsDoorOpeningAjar(int index)",
      "bool IsDoorClosing(int index)",
      "bool IsDoorOpened(int index)",
      "bool IsDoorOpenedAjar(int index)",
      "bool IsDoorClosed(int index)",
      "bool IsDoorLocked(int index)",
      "void PlayDoorSound(int index)",
      "void OpenDoor(int index)",
      "void CloseDoor(int index)",
      "void LockDoor(int index, bool force = false)",
      "void UnlockDoor(int index, bool animate = true)",
      "float GetDoorSoundDistance(int index)",
      "void OutputDoorLog()",
      "int GetNearestDoorBySoundPos(vector position)",
      "void OnDoorOpenStart(DoorStartParams params)",
      "void OnDoorOpenFinish(DoorFinishParams params)",
      "void OnDoorOpenAjarStart(DoorStartParams params)",
      "void OnDoorOpenAjarFinish(DoorFinishParams params)",
      "void OnDoorCloseStart(DoorStartParams params)",
      "void OnDoorCloseFinish(DoorFinishParams params)",
      "void OnDoorLocked(DoorLockParams params)",
      "void OnDoorUnlocked(DoorLockParams params)",
      "bool CanDoorBeOpened(int doorIndex, bool checkIfLocked = false)",
      "bool CanDoorBeClosed(int doorIndex)",
      "bool CanDoorBeLocked(int doorIndex)",
      "int GetLockCompatibilityType(int doorIdx)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "bool IsBuilding()",
      "bool CanObstruct()",
      "bool IsHealthVisible()",
      "void Building()",
      "bool IsInventoryVisible()",
      "int GetMeleeTargetType()"
    ]
  },
  "Nonlethal_Base": {
    "parent": null,
    "methods": []
  },
  "Bullet_12GaugeRubberSlug": {
    "parent": null,
    "methods": []
  },
  "Camera": {
    "parent": "Entity",
    "methods": [
      "float GetCurrentFOV()",
      "void InterpolateTo(Camera targetCamera, float time, int type)",
      "bool IsInterpolationComplete()",
      "void SetNearPlane(float nearPlane)",
      "float GetNearPlane()",
      "void SetActive(bool active)",
      "void EnableSmooth(bool enable)",
      "void StopInterpolation()",
      "bool IsActive()",
      "void SetFOV(float fov)",
      "void SetFocus(float distance, float blur)",
      "void LookAt(vector targetPos)",
      "void SetFreezed(bool freezed)",
      "bool IsFreezed()"
    ]
  },
  "FreeDebugCamera": {
    "parent": "Camera",
    "methods": [
      "void SetFreezed(bool freezed)",
      "bool IsFreezed()"
    ]
  },
  "DayZAIHitComponent": {
    "parent": null,
    "methods": [
      "static void RegisterHitComponent(array<ref DayZAIHitComponent> pHitComponents, string pName, float pWeight)",
      "static bool SelectMostProbableHitComponent(array<ref DayZAIHitComponent> pHitComponents, out string pHitComponent)",
      "static int SumOfWeights(array<ref DayZAIHitComponent> pHitComponents)"
    ]
  },
  "DayZAIHitComponentHelpers": {
    "parent": null,
    "methods": [
      "static void RegisterHitComponent(array<ref DayZAIHitComponent> pHitComponents, string pName, float pWeight)",
      "static bool SelectMostProbableHitComponent(array<ref DayZAIHitComponent> pHitComponents, out string pHitComponent)",
      "static int SumOfWeights(array<ref DayZAIHitComponent> pHitComponents)"
    ]
  },
  "DayZCreatureAnimInterface": {
    "parent": null,
    "methods": [
      "void DayZCreatureAnimInterface()",
      "void DebugSetShadow(DayZCreature creature)",
      "bool RegisterAnimationEvent(string event_name, string function_name)",
      "void SetAnimationInstanceByName(string animation_instance_name, int instance_uuid, float duration)",
      "int GetCurrentAnimationInstanceUUID()",
      "void UpdateSimulationPrecision(int simLOD)",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "int GetBoneIndexByName(string pBoneName)",
      "bool IsDayZCreature()",
      "bool CanBeSkinned()",
      "bool IsIgnoredByConstruction()",
      "bool IsManagingArrows()",
      "bool DisableVicinityIcon()",
      "void AddArrow(Object arrow, int componentIndex, vector closeBonePosWS, vector closeBoneRotWS)",
      "bool HasFixedActionTargetCursorPosition()",
      "bool ModCommandHandlerBefore(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerInside(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerAfter(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool IsSoundInsideBuilding()",
      "void DebugDisableAIControl()",
      "void DebugRestoreAIControl()",
      "void AddDamageSphere(string bone_name, string ammo_name, float radius, float duration, bool invertTeams)",
      "void InitAIAgent(AIGroup group)",
      "void DestroyAIAgent()",
      "void DayZCreatureAI()",
      "void IncreaseEffectTriggerCount()",
      "void DecreaseEffectTriggerCount()",
      "void AddDamageSphere(AnimDamageParams damage_params)",
      "void EEKilled(Object killer)",
      "void OnSoundEvent(int event_id, string event_user_string)",
      "void OnSoundVoiceEvent(int event_id, string event_user_string)",
      "void OnStepEvent(int event_id, string event_user_string)",
      "void OnDamageEvent(int event_id, string event_user_string)",
      "void RegisterAnimEvents()",
      "void ProcessSoundEvent(AnimSoundEvent sound_event)",
      "void ProcessSoundVoiceEvent(AnimSoundVoiceEvent sound_event)",
      "void ProcessStepEvent(AnimStepEvent step_event)",
      "void ProcessDamageEvent(AnimDamageEvent damage_event)",
      "void AttenuateSoundIfNecessary(SoundObject soundObject)",
      "bool ResistContaminatedEffect()",
      "bool IsDanger()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "void CinematicTakeControl(DayZPlayer player)",
      "bool CinematicCanJump()",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZCreature": {
    "parent": "EntityAI",
    "methods": [
      "void DebugSetShadow(DayZCreature creature)",
      "bool RegisterAnimationEvent(string event_name, string function_name)",
      "void SetAnimationInstanceByName(string animation_instance_name, int instance_uuid, float duration)",
      "int GetCurrentAnimationInstanceUUID()",
      "void UpdateSimulationPrecision(int simLOD)",
      "void StartDeath()",
      "void ResetDeath()",
      "void ResetDeathCooldown()",
      "bool IsDeathProcessed()",
      "bool IsDeathConditionMet()",
      "int GetBoneIndexByName(string pBoneName)",
      "bool IsDayZCreature()",
      "bool CanBeSkinned()",
      "bool IsIgnoredByConstruction()",
      "bool IsManagingArrows()",
      "bool DisableVicinityIcon()",
      "void AddArrow(Object arrow, int componentIndex, vector closeBonePosWS, vector closeBoneRotWS)",
      "bool HasFixedActionTargetCursorPosition()",
      "bool ModCommandHandlerBefore(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerInside(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerAfter(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool IsSoundInsideBuilding()",
      "void DebugDisableAIControl()",
      "void DebugRestoreAIControl()",
      "void AddDamageSphere(string bone_name, string ammo_name, float radius, float duration, bool invertTeams)",
      "void InitAIAgent(AIGroup group)",
      "void DestroyAIAgent()",
      "void DayZCreatureAI()",
      "void IncreaseEffectTriggerCount()",
      "void DecreaseEffectTriggerCount()",
      "void AddDamageSphere(AnimDamageParams damage_params)",
      "void EEKilled(Object killer)",
      "void OnSoundEvent(int event_id, string event_user_string)",
      "void OnSoundVoiceEvent(int event_id, string event_user_string)",
      "void OnStepEvent(int event_id, string event_user_string)",
      "void OnDamageEvent(int event_id, string event_user_string)",
      "void RegisterAnimEvents()",
      "void ProcessSoundEvent(AnimSoundEvent sound_event)",
      "void ProcessSoundVoiceEvent(AnimSoundVoiceEvent sound_event)",
      "void ProcessStepEvent(AnimStepEvent step_event)",
      "void ProcessDamageEvent(AnimDamageEvent damage_event)",
      "void AttenuateSoundIfNecessary(SoundObject soundObject)",
      "bool ResistContaminatedEffect()",
      "bool IsDanger()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "void CinematicTakeControl(DayZPlayer player)",
      "bool CinematicCanJump()",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZCreatureAI": {
    "parent": "DayZCreature",
    "methods": [
      "bool IsSoundInsideBuilding()",
      "void DebugDisableAIControl()",
      "void DebugRestoreAIControl()",
      "void AddDamageSphere(string bone_name, string ammo_name, float radius, float duration, bool invertTeams)",
      "void InitAIAgent(AIGroup group)",
      "void DestroyAIAgent()",
      "void DayZCreatureAI()",
      "void IncreaseEffectTriggerCount()",
      "void DecreaseEffectTriggerCount()",
      "void AddDamageSphere(AnimDamageParams damage_params)",
      "void EEKilled(Object killer)",
      "void OnSoundEvent(int event_id, string event_user_string)",
      "void OnSoundVoiceEvent(int event_id, string event_user_string)",
      "void OnStepEvent(int event_id, string event_user_string)",
      "void OnDamageEvent(int event_id, string event_user_string)",
      "void RegisterAnimEvents()",
      "void ProcessSoundEvent(AnimSoundEvent sound_event)",
      "void ProcessSoundVoiceEvent(AnimSoundVoiceEvent sound_event)",
      "void ProcessStepEvent(AnimStepEvent step_event)",
      "void ProcessDamageEvent(AnimDamageEvent damage_event)",
      "void AttenuateSoundIfNecessary(SoundObject soundObject)",
      "bool ResistContaminatedEffect()",
      "bool IsDanger()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "void CinematicTakeControl(DayZPlayer player)",
      "bool CinematicCanJump()",
      "bool ModCommandHandlerBefore(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalCommandMove": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalCommandAttack": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalCommandJump": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalCommandLookAt": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalCommandBehaviourModifier": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalCommandHit": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalCommandDeath": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalCommandAnimCallback": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalCommandScript": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimal": {
    "parent": "DayZCreatureAI",
    "methods": [
      "void StartCommand_Death(int pType, int pDirection)",
      "void StartCommand_Move()",
      "void StartCommand_Jump()",
      "void StartCommand_Attack()",
      "void StartCommand_Hit(int pType, int pDirection)",
      "void SignalAIAttackStarted()",
      "void SignalAIAttackEnded()",
      "void DayZAnimal()",
      "bool IsHealthVisible()",
      "bool IsAnimal()",
      "bool IsInventoryVisible()",
      "int GetHideIconMask()",
      "void CommandHandler(float dt, int currentCommandID, bool currentCommandFinished)",
      "bool HandleDeath(int currentCommandID, DayZAnimalInputController inputController)",
      "bool HandleDamageHit(int currentCommandID)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void QueueDamageHit(int type, int direction)",
      "bool ComputeDamageHitParams(EntityAI source, string dmgZone, string ammo, out int type, out int direction)",
      "float ComputeHitDirectionAngleDeg(EntityAI source)",
      "int TranslateHitAngleDegToDirectionIndex(float angleDeg)",
      "int FindComponentDirectionOffset(string component)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RegisterHitComponentsForAI()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)"
    ]
  },
  "DayZAnimalInputController": {
    "parent": null,
    "methods": [
      "bool IsDead()",
      "bool IsAttack()",
      "void OverrideBehaviourAction(bool state, int action)",
      "int GetBehaviourAction()",
      "void DayZAnimalInputController()"
    ]
  },
  "DayZAnimalType": {
    "parent": "DayZCreatureAIType",
    "methods": []
  },
  "DayZCreatureAIInputController": {
    "parent": null,
    "methods": [
      "void OverrideMovementSpeed(bool state, float movementSpeed)",
      "float GetMovementSpeed()",
      "void OverrideTurnSpeed(bool state, float turnSpeed)",
      "float GetTurnSpeed()",
      "void OverrideHeading(bool state, float heading)",
      "float GetHeading()",
      "void OverrideJump(bool state, int jumpType, float jumpHeight = 0)",
      "bool IsJump()",
      "int GetJumpType()",
      "float GetJumpHeight()",
      "void OverrideLookAt(bool state, vector direction)",
      "bool IsLookAtEnabled()",
      "void OverrideAlertLevel(bool state, bool alerted, int level, float inLevel)",
      "int GetAlertLevel()",
      "float GetAlertInLevel()",
      "bool IsAlerted()",
      "void OverrideBehaviourSlot(bool state, int slot)",
      "int GetBehaviourSlot()",
      "void DayZCreatureAIInputController()"
    ]
  },
  "DayZCreatureAIType": {
    "parent": null,
    "methods": [
      "void DayZCreatureAIType()",
      "void LoadAnimSoundEvents()",
      "void LoadAnimSoundVoiceEvents()",
      "void LoadAnimStepEvents()",
      "void LoadAnimDamageEvents()",
      "void LoadParams()",
      "string GetName()"
    ]
  },
  "DayZInfectedCommandMove": {
    "parent": "AnimCommandBase",
    "methods": [
      "void SetStanceVariation(int pStanceVariation)",
      "void SetIdleState(int pIdleState)",
      "void StartTurn(float pDirection, int pSpeedType)",
      "bool IsTurning()",
      "bool WasHit()",
      "bool WasLand()",
      "void DayZInfectedCommandScript(DayZInfected pInfected)",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, float pDirection)",
      "void StartCommand_Hit(bool pHeavy, int pType, float pDirection)",
      "void StartCommand_Crawl(int pType)",
      "bool CanAttackToPosition(vector pTargetPosition)",
      "void GetTransformWS(out vector pTm[4])",
      "void DayZInfected()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "void HandleSpecialZoneDamage(string dmgZone, float damage)",
      "int GetHideIconMask()"
    ]
  },
  "DayZInfectedCommandDeath": {
    "parent": "AnimCommandBase",
    "methods": [
      "bool WasHit()",
      "bool WasLand()",
      "void DayZInfectedCommandScript(DayZInfected pInfected)",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, float pDirection)",
      "void StartCommand_Hit(bool pHeavy, int pType, float pDirection)",
      "void StartCommand_Crawl(int pType)",
      "bool CanAttackToPosition(vector pTargetPosition)",
      "void GetTransformWS(out vector pTm[4])",
      "void DayZInfected()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "void HandleSpecialZoneDamage(string dmgZone, float damage)",
      "int GetHideIconMask()"
    ]
  },
  "DayZInfectedCommandHit": {
    "parent": "AnimCommandBase",
    "methods": [
      "bool WasHit()",
      "bool WasLand()",
      "void DayZInfectedCommandScript(DayZInfected pInfected)",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, float pDirection)",
      "void StartCommand_Hit(bool pHeavy, int pType, float pDirection)",
      "void StartCommand_Crawl(int pType)",
      "bool CanAttackToPosition(vector pTargetPosition)",
      "void GetTransformWS(out vector pTm[4])",
      "void DayZInfected()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "void HandleSpecialZoneDamage(string dmgZone, float damage)",
      "int GetHideIconMask()"
    ]
  },
  "DayZInfectedCommandAttack": {
    "parent": "AnimCommandBase",
    "methods": [
      "bool WasHit()",
      "bool WasLand()",
      "void DayZInfectedCommandScript(DayZInfected pInfected)",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, float pDirection)",
      "void StartCommand_Hit(bool pHeavy, int pType, float pDirection)",
      "void StartCommand_Crawl(int pType)",
      "bool CanAttackToPosition(vector pTargetPosition)",
      "void GetTransformWS(out vector pTm[4])",
      "void DayZInfected()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "void HandleSpecialZoneDamage(string dmgZone, float damage)",
      "int GetHideIconMask()"
    ]
  },
  "DayZInfectedCommandVault": {
    "parent": "AnimCommandBase",
    "methods": [
      "bool WasLand()",
      "void DayZInfectedCommandScript(DayZInfected pInfected)",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, float pDirection)",
      "void StartCommand_Hit(bool pHeavy, int pType, float pDirection)",
      "void StartCommand_Crawl(int pType)",
      "bool CanAttackToPosition(vector pTargetPosition)",
      "void GetTransformWS(out vector pTm[4])",
      "void DayZInfected()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "void HandleSpecialZoneDamage(string dmgZone, float damage)",
      "int GetHideIconMask()"
    ]
  },
  "DayZInfectedCommandCrawl": {
    "parent": "AnimCommandBase",
    "methods": [
      "void DayZInfectedCommandScript(DayZInfected pInfected)",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, float pDirection)",
      "void StartCommand_Hit(bool pHeavy, int pType, float pDirection)",
      "void StartCommand_Crawl(int pType)",
      "bool CanAttackToPosition(vector pTargetPosition)",
      "void GetTransformWS(out vector pTm[4])",
      "void DayZInfected()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "void HandleSpecialZoneDamage(string dmgZone, float damage)",
      "int GetHideIconMask()"
    ]
  },
  "DayZInfectedCommandScript": {
    "parent": "AnimCommandBase",
    "methods": [
      "void DayZInfectedCommandScript(DayZInfected pInfected)",
      "void SetFlagFinished(bool pFinished)",
      "bool PrePhys_GetTranslation(out vector pOutTransl)",
      "bool PrePhys_GetRotation(out float pOutRot[4])",
      "void PrePhys_SetTranslation(vector pInTransl)",
      "void PrePhys_SetRotation(float pInRot[4])",
      "bool PostPhysUpdate(float pDt)",
      "void PostPhys_GetPosition(out vector pOutTransl)",
      "void PostPhys_GetRotation(out float pOutRot[4])",
      "void PostPhys_SetPosition(vector pInTransl)",
      "void PostPhys_SetRotation(float pInRot[4])",
      "void PostPhys_LockRotation()",
      "void StartCommand_Death(int pType, float pDirection)",
      "void StartCommand_Hit(bool pHeavy, int pType, float pDirection)",
      "void StartCommand_Crawl(int pType)",
      "bool CanAttackToPosition(vector pTargetPosition)",
      "void GetTransformWS(out vector pTm[4])",
      "void DayZInfected()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "void HandleSpecialZoneDamage(string dmgZone, float damage)",
      "int GetHideIconMask()"
    ]
  },
  "DayZInfected": {
    "parent": "DayZCreatureAI",
    "methods": [
      "void StartCommand_Death(int pType, float pDirection)",
      "void StartCommand_Hit(bool pHeavy, int pType, float pDirection)",
      "void StartCommand_Crawl(int pType)",
      "bool CanAttackToPosition(vector pTargetPosition)",
      "void GetTransformWS(out vector pTm[4])",
      "void DayZInfected()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "void HandleSpecialZoneDamage(string dmgZone, float damage)",
      "int GetHideIconMask()"
    ]
  },
  "DayZInfectedInputController": {
    "parent": null,
    "methods": [
      "bool IsVault()",
      "float GetVaultHeight()",
      "int GetMindState()",
      "void DayZInfectedInputController()"
    ]
  },
  "DayZInfectedAttackType": {
    "parent": null,
    "methods": [
      "void RegisterHitComponentsForAI()",
      "void RegisterAttacks()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void RegisterAttack(DayZInfectedAttackGroupType pAttackGroupType, float pDistance, int pPitch, int pType, float pSubtype, string pAmmoType, int pIsHeavy, float pCooldown, float pProbability)",
      "float ComputeAttackUtility(DayZInfectedAttackType pAttackType, float pTargetDistance, int pPitch, float pProbability)"
    ]
  },
  "DayZInfectedType": {
    "parent": "DayZCreatureAIType",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "void RegisterAttacks()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "void RegisterAttack(DayZInfectedAttackGroupType pAttackGroupType, float pDistance, int pPitch, int pType, float pSubtype, string pAmmoType, int pIsHeavy, float pCooldown, float pProbability)",
      "float ComputeAttackUtility(DayZInfectedAttackType pAttackType, float pTargetDistance, int pPitch, float pProbability)"
    ]
  },
  "Entity": {
    "parent": "ObjectTyped",
    "methods": [
      "void DisableSimulation(bool disable)",
      "bool GetIsSimulationDisabled()",
      "int GetSimulationTimeStamp()",
      "float GetAnimationPhase(string animation)",
      "void SetAnimationPhase(string animation, float phase)",
      "void SetAnimationPhaseNow(string animation, float phase)",
      "void ResetAnimationPhase(string animation, float phase)",
      "void OnAnimationPhaseStarted(string animSource, float phase)",
      "int GetBoneIndex( string proxySelectionName )",
      "void SetInvisible(bool invisible)",
      "void OnInvisibleSet(bool invisible)",
      "void MoveInTime(vector targetTransform[4], float deltaT)",
      "void OnCreatePhysics()",
      "bool OnNetworkTransformUpdate(out vector pos, out vector ypr)"
    ]
  },
  "DebugSpawnParams": {
    "parent": null,
    "methods": [
      "void EntityAI()",
      "void InitItemVariables()",
      "void DeferredInit()",
      "bool IsInitialized()",
      "int GetHideIconMask()",
      "bool DeleteComponent(int comp_type)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "bool HasComponent(int comp_type)",
      "void MaxLifetimeRefreshCalc()",
      "bool IsRefresherSignalingViable()",
      "void SetDebugItem()",
      "void InitDamageZoneMapping()",
      "void InitDamageZoneDisplayNameMapping()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "float ConvertNonlethalDamage(float damage)",
      "bool CanDisplayWeight()",
      "void Log(string msg, string fnc_name = )",
      "void LogWarning(string msg, string fnc_name = )",
      "void LogError(string msg, string fnc_name = )",
      "bool IsSkinned()",
      "void SetAsSkinned()",
      "bool CanBeSkinnedWith(EntityAI tool)",
      "float GetSkinningBloodInfectionChance(eAgents type)",
      "void CacheSkinningBloodInfectionChance(eAgents type)",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy(EntityAI igniter = NULL)",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "bool IsIgnited()",
      "bool DisassembleOnLastDetach()",
      "bool IsBasebuildingKit()",
      "bool IsCookware()",
      "bool PlacementCanBeRotated()",
      "void OnIgnitedTarget( EntityAI target_item)",
      "void OnIgnitedThis( EntityAI fire_source)",
      "void OnIgnitedTargetFailed( EntityAI target_item)",
      "void OnIgnitedThisFailed( EntityAI fire_source)",
      "bool IsTargetIgnitionSuccessful(EntityAI item_target)",
      "bool IsThisIgnitionSuccessful(EntityAI item_source = NULL)",
      "void OnPlacementStarted(Man player)",
      "void OnHologramBeingPlaced(Man player)",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "void OnPlacementCancelled(Man player)",
      "bool CanBePlaced(Man player, vector position)",
      "string CanBePlacedFailMessage( Man player, vector position )",
      "bool DoPlacingHeightCheck()",
      "float HeightCheckOverride()",
      "float HeightStartCheckOverride()",
      "bool IsEmpty()",
      "bool IsSplitable()",
      "bool CanBeSplit()",
      "bool HasAnyCargo()",
      "bool IsRoofAbove()",
      "void SetRoofAbove(bool state)",
      "void CheckForRoofLimited(float timeTresholdMS = 3000)",
      "int GetAgents()",
      "void RemoveAgent(int agent_id)",
      "void RemoveAllAgents()",
      "void RemoveAllAgentsExcept(int agent_to_keep)",
      "void InsertAgent(int agent, float count = 1)",
      "bool IsEntityAI()",
      "bool IsInventoryVisible()",
      "bool IsPlayer()",
      "bool IsAnimal()",
      "bool IsZombie()",
      "bool IsZombieMilitary()",
      "bool IsIgnoredByConstruction()",
      "bool CanBeTargetedByAI(EntityAI ai)",
      "bool CanBeBackstabbed()",
      "void Delete()",
      "void DeleteOnClient()",
      "void DeleteSafe()",
      "void DeleteSave()",
      "bool IsSetForDeletion()",
      "bool CanBeActionTarget()",
      "void SetPrepareToDelete()",
      "bool IsPreparedToDelete()",
      "void CheckForDestroy()",
      "bool IsPrepareToDelete()",
      "bool TryDelete()",
      "void OnBeforeTryDelete()",
      "int GetHierarchyLevel(int lvl = 0)",
      "void OnInventoryInit()",
      "void EEInit()",
      "void EEDelete(EntityAI parent)",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void OnChildItemRemoved(InventoryItem item)",
      "void OnChildItemReceived(InventoryItem item)",
      "void OnItemAttachmentSlotChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void EEInventoryIn(Man newparentMan, EntityAI diz, EntityAI newparent)",
      "void EEInventoryOut(Man oldparentMan, EntityAI diz, EntityAI newparent)",
      "void EEAmmoChanged()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void OnDamageDestroyed(int oldLevel)",
      "void AttemptDestructionBehaviour(int oldLevel, int newLevel, string zone)",
      "void SetTakeable(bool pState)",
      "void EEKilled(Object killer)",
      "bool ReplaceOnDeath()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "void DeathUpdate()",
      "void OnAttachmentRuined(EntityAI attachment)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void EEHitByRemote(int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void SwitchItemSelectionTexture(EntityAI item, string slot_name)",
      "void SwitchItemSelectionTextureEx(EItemManipulationContext context, Param par = null)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void EECargoIn(EntityAI item)",
      "void EECargoOut(EntityAI item)",
      "void EECargoMove(EntityAI item)",
      "void OnMovedInsideCargo(EntityAI container)",
      "void OnRemovedFromCargo(EntityAI container)",
      "void OnMovedWithinCargo(EntityAI container)",
      "void EEOnAfterLoad()",
      "void EEOnCECreate()",
      "void AfterStoreLoad()",
      "void OnBinLoadItemsDropped()",
      "void HideAllSelections()",
      "void ShowAllSelections()",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanLoadAttachment(EntityAI attachment)",
      "bool CanPutAsAttachment(EntityAI parent)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanDetachAttachment(EntityAI parent)",
      "bool CanBeFSwaped()",
      "bool CanCombineAttachment(notnull EntityAI e, int slot, bool stack_max_limit = false)",
      "bool CanBeCombined(EntityAI other_item, bool reservation_check = true, bool stack_max_limit = false )",
      "void CombineItemsEx(EntityAI entity2, bool use_stack_max = false )",
      "void SplitIntoStackMaxEx(EntityAI destination_entity, int slot_id)",
      "void CombineItemsClient(EntityAI entity2, bool use_stack_max = false )",
      "void SplitIntoStackMaxClient(EntityAI destination_entity, int slot_id)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanLoadItemIntoCargo(EntityAI item)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanSwapItemInCargo(EntityAI child_entity, EntityAI new_entity)",
      "bool CanReleaseCargo(EntityAI cargo)",
      "bool CanRemoveFromCargo(EntityAI parent)",
      "bool CanReceiveItemIntoHands(EntityAI item_to_hands)",
      "bool AreChildrenAccessible()",
      "bool IsBeingPlaced()",
      "bool IsHologram()",
      "bool CanSaveItemInHands(EntityAI item_in_hands)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanReleaseFromHands(EntityAI handheld)",
      "bool CanRemoveFromHands(EntityAI parent)",
      "bool CanDisplayAttachmentSlot( string slot_name )",
      "bool CanDisplayAttachmentSlot( int slot_id )",
      "bool CanDisplayAnyAttachmentSlot()",
      "bool CanDisplayAttachmentCategory( string category_name )",
      "bool CanDisplayCargo()",
      "bool CanAssignToQuickbar()",
      "bool CanAssignAttachmentsToQuickbar()",
      "bool IgnoreOutOfReachCondition()",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void OnCargoChanged()",
      "bool IsTakeable()",
      "void CreateAndInitInventory()",
      "void DestroyInventory()",
      "int GetSlotsCountCorrect()",
      "bool IsSlotReserved(int slotID)",
      "bool IsLockedInSlot()",
      "bool PredictiveTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool LocalTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool ServerTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToCargo(notnull EntityAI item)",
      "bool LocalTakeEntityToCargo(notnull EntityAI item)",
      "bool ServerTakeEntityToCargo(notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeEntityToCargoEx(notnull EntityAI item, int idx, int row, int col)",
      "bool LocalTakeEntityToCargoEx(notnull EntityAI item, int idx, int row, int col)",
      "bool PredictiveTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool LocalTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool ServerTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool PredictiveTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool LocalTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool ServerTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool PredictiveTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool LocalTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool ServerTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool PredictiveTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool LocalTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool ServerTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PredictiveTakeEntityAsAttachment(notnull EntityAI item)",
      "bool LocalTakeEntityAsAttachment(notnull EntityAI item)",
      "bool ServerTakeEntityAsAttachment(notnull EntityAI item)",
      "bool PredictiveDropEntity(notnull EntityAI item)",
      "bool LocalDropEntity(notnull EntityAI item)",
      "bool ServerDropEntity(notnull EntityAI item)",
      "bool CanDropEntity(notnull EntityAI item)",
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "void SetWet(float value, bool allow_client = false)",
      "void AddWet(float value)",
      "void SetWetMax()",
      "float GetWet()",
      "float GetWetMax()",
      "float GetWetMin()",
      "float GetWetInit()",
      "bool HasWetness()",
      "void OnWetChanged(float newVal, float oldVal)",
      "void OnWetLevelChanged(EWetnessLevel newLevel, EWetnessLevel oldLevel)",
      "bool HasQuantity()",
      "bool SetQuantity(float value, bool destroy_config = true, bool destroy_forced = false, bool allow_client = false, bool clamp_to_stack_max = true)",
      "float GetQuantity()",
      "float GetQuantityNormalized()",
      "int GetQuantityMax()",
      "int GetQuantityMin()",
      "void SetQuantityToMinimum()",
      "int GetTargetQuantityMax(int attSlotID = -1)",
      "int GetQuickBarBonus()",
      "bool UseConfigInitTemperature()",
      "void InitTemperature()",
      "void SetTemperatureDirect(float value, bool allow_client = false)",
      "void SetTemperature(float value, bool allow_client = false)",
      "void AddTemperature(float value)",
      "void SetTemperatureEx(TemperatureData data)",
      "void RefreshTemperatureAccess(TemperatureData data)",
      "void InterpolateTempData(TemperatureDataInterpolated data)",
      "void SetTemperatureMax()",
      "float GetTemperature()",
      "float GetTemperatureInit()",
      "float GetTemperatureMin()",
      "float GetTemperatureMax()",
      "bool GetCookingTargetTemperature(out float temperature)",
      "float GetHeatPermeabilityCoef()",
      "float GetTemperatureFreezeThreshold()",
      "float GetTemperatureThawThreshold()",
      "float GetTemperatureFreezeTime()",
      "float GetTemperatureThawTime()",
      "float GetFreezeThawProgress()",
      "bool IsFreezeThawProgressFinished()",
      "void SetFreezeThawProgress(float val)",
      "bool CanFreeze()",
      "bool GetIsFrozen()",
      "void SetFrozen(bool frozen)",
      "void HandleFreezingProgression(float deltaHeat, TemperatureData data)",
      "void OnFreezeStateChangeClient()",
      "void OnFreezeStateChangeServer()",
      "bool CanItemOverheat()",
      "float GetItemOverheatThreshold()",
      "float GetItemOverheatTime()",
      "bool IsItemOverheated()",
      "float GetItemOverheatProgress()",
      "void SetItemOverheatProgress(float val, float deltaTime = 0)",
      "void OnItemOverheatStart()",
      "void OnItemOverheat(float deltaTime)",
      "void OnItemOverheatEnd()",
      "void HandleItemOverheating(float deltaHeat, TemperatureData data)",
      "void SetLiquidType(int value, bool allow_client = false)",
      "int GetLiquidType()",
      "void SetColor(int r, int g, int b, int a)",
      "void GetColor(out int r,out int g,out int b,out int a)",
      "void SetStoreLoad(bool value)",
      "bool IsStoreLoad()",
      "void SetStoreLoadedQuantity(float value)",
      "float GetStoreLoadedQuantity()",
      "void SetCleanness(int value, bool allow_client = false)",
      "int GetCleanness()",
      "bool IsServerCheck(bool allow_client)",
      "int GetHiddenSelectionIndex( string selection )",
      "void PlaceOnSurfaceRotated(out vector trans[4], vector pos, float dx = 0, float dz = 0, float fAngle = 0, bool align = false)",
      "void RegisterNetSyncVariableBool(string variableName)",
      "void RegisterNetSyncVariableBoolSignal(string variableName)",
      "void RegisterNetSyncVariableInt(string variableName, int minValue = 0, int maxValue = 0)",
      "void RegisterNetSyncVariableFloat(string variableName, float minValue = 0, float maxValue = 0, int precision = 1)",
      "void RegisterNetSyncVariableObject(string variableName)",
      "void UpdateNetSyncVariableInt(string variableName, float minValue = 0, float maxValue = 0)",
      "void UpdateNetSyncVariableFloat(string variableName, float minValue = 0, float maxValue = 0, int precision = 1)",
      "void SwitchLight(bool isOn)",
      "void SetSimpleHiddenSelectionState(int index, bool state)",
      "bool IsSimpleHiddenSelectionVisible(int index)",
      "void SetObjectTexture(int index, string texture_name)",
      "string GetObjectTexture(int index)",
      "void SetObjectMaterial(int index, string mat_name)",
      "string GetObjectMaterial(int index)",
      "bool IsPilotLight()",
      "void SetPilotLight(bool isOn)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void SetSynchDirty()",
      "void OnVariablesSynchronized()",
      "bool IsVariableSet(int variable)",
      "void SetVariableMask(int variable)",
      "void RemoveItemVariable(int variable)",
      "void TransferVariablesFloat(array<float> float_vars)",
      "void SaveVariables(ParamsWriteContext ctx)",
      "bool LoadVariables(ParamsReadContext ctx, int version = -1)",
      "void WriteVarsToCTX(ParamsWriteContext ctx)",
      "bool ReadVarsFromCTX(ParamsReadContext ctx, int version = -1)",
      "void SerializeNumericalVars(array<float> floats_out)",
      "void DeSerializeNumericalVars(array<float> floats)",
      "void SetAITargetCallbacks(AbstractAITargetCallbacks callbacks)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "string GetDebugText()",
      "void GetDebugButtonNames(out string button1, out string button2, out string button3, out string button4)",
      "void OnDebugButtonPressClient(int button_index)",
      "void OnDebugButtonPressServer(int button_index)",
      "void DebugBBoxSetColor(int color)",
      "void DebugBBoxDelete()",
      "void DebugDirectionSetColor(int color)",
      "void DebugDirectionDelete()",
      "void HideSelection( string selection_name )",
      "void ShowSelection( string selection_name )",
      "void GetPersistentID( out int b1, out int b2, out int b3, out int b4 )",
      "void SetLifetime( float fLifeTime )",
      "float GetLifetime()",
      "void IncreaseLifetime()",
      "void SetLifetimeMax( float fLifeTime )",
      "float GetLifetimeMax()",
      "void IncreaseLifetimeUp()",
      "bool HasEnergyManager()",
      "void OnWorkStart()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStop()",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void OnIsPlugged(EntityAI source_device)",
      "void OnIsUnplugged( EntityAI last_energy_source )",
      "void OnOwnSocketTaken( EntityAI device )",
      "void OnOwnSocketReleased( EntityAI device )",
      "void OnInitEnergy()",
      "void OnEnergyConsumed()",
      "void OnEnergyAdded()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void FixEntity()",
      "float GetWetWeightModifier()",
      "float GetConfigWeightModified()",
      "string GetConfigWeightModifiedDebugText()",
      "int GetWeight()",
      "void ClearWeightDirty()",
      "void SetWeightDirty()",
      "float GetInventoryAndCargoWeight(bool forceRecalc = false)",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "float GetWeightEx(bool forceRecalc = false)",
      "void UpdateWeight(WeightUpdateType updateType = WeightUpdateType.FULL, float weightAdjustment = 0)",
      "float GetSingleInventoryItemWeightEx()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void SetViewIndex( int index )",
      "int GetViewIndex()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "int GetMeleeTargetType()",
      "string GetAttachmentSoundType()",
      "bool IsHeavyBehaviour()",
      "bool IsOneHandedBehaviour()",
      "bool IsTwoHandedBehaviour()",
      "string ChangeIntoOnAttach(string slot)",
      "string ChangeIntoOnDetach()",
      "bool CanHaveTemperature()",
      "bool IsSelfAdjustingTemperature()",
      "void OnCEUpdate()",
      "void ProcessVariables()",
      "void OnDebugSpawnEx(DebugSpawnParams params)",
      "void OnDebugSpawn()",
      "float GetLiquidThroughputCoef()",
      "string GetInvulnerabilityTypeString()",
      "void ProcessInvulnerabilityCheck(string servercfg_param)",
      "void SetBayonetAttached(bool pState, int slot_idx = -1)",
      "bool HasBayonetAttached()",
      "int GetBayonetAttachmentIdx()",
      "void SetButtstockAttached(bool pState, int slot_idx = -1)",
      "bool HasButtstockAttached()",
      "int GetButtstockAttachmentIdx()",
      "void SetInvisibleRecursive(bool invisible, EntityAI parent = null, array<int> attachments = null)",
      "void SoundHardTreeFallingPlay()",
      "void SoundSoftTreeFallingPlay()",
      "void SoundHardBushFallingPlay()",
      "void SoundSoftBushFallingPlay()",
      "void RegisterTransportHit(Transport transport)",
      "bool GetInventoryHandAnimation(notnull InventoryLocation loc, out int value)",
      "bool TranslateSlotFromSelection(string selection_name, out int slot_id)",
      "bool IsUniversalTemperatureSource()",
      "void SetUniversalTemperatureSource(UTemperatureSource uts)",
      "void PairRemote(notnull EntityAI trigger)",
      "void UnpairRemote()",
      "void SetPersistentPairID(int id)",
      "bool HasTurnableValveBehavior()",
      "bool IsValveTurnable(int pValveIndex)",
      "int GetTurnableValveIndex(int pComponentIndex)",
      "void ExecuteActionsConnectedToValve(int pValveIndex)",
      "void InitAttachmentExclusionValues()",
      "void InitInherentSlotExclusionMap()",
      "void InitLegacyConfigExclusionValues()",
      "bool InitLegacyExclusionCheck()",
      "void InitLegacySlotExclusionValuesImplicit()",
      "void InitLegacySlotExclusionValuesDerived()",
      "void InitGlobalExclusionValues()",
      "void AddSingleExclusionValueGlobal(EAttExclusions value)",
      "void ClearSingleExclusionValueGlobal(EAttExclusions value)",
      "void SetAttachmentExclusionMaskGlobal(set<int> values)",
      "void SetAttachmentExclusionMaskSlot(int slotId, set<int> values)",
      "void PropagateExclusionValueRecursive(set<int> values, int slotId)",
      "void ClearExclusionValueRecursive(set<int> values, int slotId)",
      "bool HasInternalExclusionConflicts(int targetSlot)",
      "bool IsExclusionFlagPresent(set<int> values)",
      "bool IsExclusionFlagPresentRecursive(set<int> values, int targetSlot)",
      "bool CheckExclusionAccessCondition(int occupiedSlot, int targetSlot, set<int> value, inout set<int> adjustedValue)",
      "void AdjustExclusionAccessCondition(int occupiedSlot, int testedSlot, set<int> value, inout set<int> adjustedValue)",
      "bool CheckExclusionAccessPropagation(int occupiedSlot, int targetSlot, set<int> value, inout set<int> adjustedValue)",
      "void AdjustExclusionAccessPropagation(int occupiedSlot, int testedSlot, set<int> value, inout set<int> adjustedValue)",
      "bool CheckAttachmentReceiveExclusion(EntityAI attachment, int slotId)",
      "bool IsManagingArrows()",
      "void SetFromProjectile(ProjectileStoppedInfo info)",
      "void ClearInventory()",
      "void SetDebugDeveloper_item(Object entity)"
    ]
  },
  "TSelectableActionInfoArrayEx": {
    "parent": "array",
    "methods": [
      "void EntityAI()",
      "void InitItemVariables()",
      "void DeferredInit()",
      "bool IsInitialized()",
      "int GetHideIconMask()",
      "bool DeleteComponent(int comp_type)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "bool HasComponent(int comp_type)",
      "void MaxLifetimeRefreshCalc()",
      "bool IsRefresherSignalingViable()",
      "void SetDebugItem()",
      "void InitDamageZoneMapping()",
      "void InitDamageZoneDisplayNameMapping()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "float ConvertNonlethalDamage(float damage)",
      "bool CanDisplayWeight()",
      "void Log(string msg, string fnc_name = )",
      "void LogWarning(string msg, string fnc_name = )",
      "void LogError(string msg, string fnc_name = )",
      "bool IsSkinned()",
      "void SetAsSkinned()",
      "bool CanBeSkinnedWith(EntityAI tool)",
      "float GetSkinningBloodInfectionChance(eAgents type)",
      "void CacheSkinningBloodInfectionChance(eAgents type)",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy(EntityAI igniter = NULL)",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "bool IsIgnited()",
      "bool DisassembleOnLastDetach()",
      "bool IsBasebuildingKit()",
      "bool IsCookware()",
      "bool PlacementCanBeRotated()",
      "void OnIgnitedTarget( EntityAI target_item)",
      "void OnIgnitedThis( EntityAI fire_source)",
      "void OnIgnitedTargetFailed( EntityAI target_item)",
      "void OnIgnitedThisFailed( EntityAI fire_source)",
      "bool IsTargetIgnitionSuccessful(EntityAI item_target)",
      "bool IsThisIgnitionSuccessful(EntityAI item_source = NULL)",
      "void OnPlacementStarted(Man player)",
      "void OnHologramBeingPlaced(Man player)",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "void OnPlacementCancelled(Man player)",
      "bool CanBePlaced(Man player, vector position)",
      "string CanBePlacedFailMessage( Man player, vector position )",
      "bool DoPlacingHeightCheck()",
      "float HeightCheckOverride()",
      "float HeightStartCheckOverride()",
      "bool IsEmpty()",
      "bool IsSplitable()",
      "bool CanBeSplit()",
      "bool HasAnyCargo()",
      "bool IsRoofAbove()",
      "void SetRoofAbove(bool state)",
      "void CheckForRoofLimited(float timeTresholdMS = 3000)",
      "int GetAgents()",
      "void RemoveAgent(int agent_id)",
      "void RemoveAllAgents()",
      "void RemoveAllAgentsExcept(int agent_to_keep)",
      "void InsertAgent(int agent, float count = 1)",
      "bool IsEntityAI()",
      "bool IsInventoryVisible()",
      "bool IsPlayer()",
      "bool IsAnimal()",
      "bool IsZombie()",
      "bool IsZombieMilitary()",
      "bool IsIgnoredByConstruction()",
      "bool CanBeTargetedByAI(EntityAI ai)",
      "bool CanBeBackstabbed()",
      "void Delete()",
      "void DeleteOnClient()",
      "void DeleteSafe()",
      "void DeleteSave()",
      "bool IsSetForDeletion()",
      "bool CanBeActionTarget()",
      "void SetPrepareToDelete()",
      "bool IsPreparedToDelete()",
      "void CheckForDestroy()",
      "bool IsPrepareToDelete()",
      "bool TryDelete()",
      "void OnBeforeTryDelete()",
      "int GetHierarchyLevel(int lvl = 0)",
      "void OnInventoryInit()",
      "void EEInit()",
      "void EEDelete(EntityAI parent)",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void OnChildItemRemoved(InventoryItem item)",
      "void OnChildItemReceived(InventoryItem item)",
      "void OnItemAttachmentSlotChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void EEInventoryIn(Man newparentMan, EntityAI diz, EntityAI newparent)",
      "void EEInventoryOut(Man oldparentMan, EntityAI diz, EntityAI newparent)",
      "void EEAmmoChanged()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void OnDamageDestroyed(int oldLevel)",
      "void AttemptDestructionBehaviour(int oldLevel, int newLevel, string zone)",
      "void SetTakeable(bool pState)",
      "void EEKilled(Object killer)",
      "bool ReplaceOnDeath()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "void DeathUpdate()",
      "void OnAttachmentRuined(EntityAI attachment)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void EEHitByRemote(int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void SwitchItemSelectionTexture(EntityAI item, string slot_name)",
      "void SwitchItemSelectionTextureEx(EItemManipulationContext context, Param par = null)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void EECargoIn(EntityAI item)",
      "void EECargoOut(EntityAI item)",
      "void EECargoMove(EntityAI item)",
      "void OnMovedInsideCargo(EntityAI container)",
      "void OnRemovedFromCargo(EntityAI container)",
      "void OnMovedWithinCargo(EntityAI container)",
      "void EEOnAfterLoad()",
      "void EEOnCECreate()",
      "void AfterStoreLoad()",
      "void OnBinLoadItemsDropped()",
      "void HideAllSelections()",
      "void ShowAllSelections()",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanLoadAttachment(EntityAI attachment)",
      "bool CanPutAsAttachment(EntityAI parent)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanDetachAttachment(EntityAI parent)",
      "bool CanBeFSwaped()",
      "bool CanCombineAttachment(notnull EntityAI e, int slot, bool stack_max_limit = false)",
      "bool CanBeCombined(EntityAI other_item, bool reservation_check = true, bool stack_max_limit = false )",
      "void CombineItemsEx(EntityAI entity2, bool use_stack_max = false )",
      "void SplitIntoStackMaxEx(EntityAI destination_entity, int slot_id)",
      "void CombineItemsClient(EntityAI entity2, bool use_stack_max = false )",
      "void SplitIntoStackMaxClient(EntityAI destination_entity, int slot_id)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanLoadItemIntoCargo(EntityAI item)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanSwapItemInCargo(EntityAI child_entity, EntityAI new_entity)",
      "bool CanReleaseCargo(EntityAI cargo)",
      "bool CanRemoveFromCargo(EntityAI parent)",
      "bool CanReceiveItemIntoHands(EntityAI item_to_hands)",
      "bool AreChildrenAccessible()",
      "bool IsBeingPlaced()",
      "bool IsHologram()",
      "bool CanSaveItemInHands(EntityAI item_in_hands)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanReleaseFromHands(EntityAI handheld)",
      "bool CanRemoveFromHands(EntityAI parent)",
      "bool CanDisplayAttachmentSlot( string slot_name )",
      "bool CanDisplayAttachmentSlot( int slot_id )",
      "bool CanDisplayAnyAttachmentSlot()",
      "bool CanDisplayAttachmentCategory( string category_name )",
      "bool CanDisplayCargo()",
      "bool CanAssignToQuickbar()",
      "bool CanAssignAttachmentsToQuickbar()",
      "bool IgnoreOutOfReachCondition()",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void OnCargoChanged()",
      "bool IsTakeable()",
      "void CreateAndInitInventory()",
      "void DestroyInventory()",
      "int GetSlotsCountCorrect()",
      "bool IsSlotReserved(int slotID)",
      "bool IsLockedInSlot()",
      "bool PredictiveTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool LocalTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool ServerTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToCargo(notnull EntityAI item)",
      "bool LocalTakeEntityToCargo(notnull EntityAI item)",
      "bool ServerTakeEntityToCargo(notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeEntityToCargoEx(notnull EntityAI item, int idx, int row, int col)",
      "bool LocalTakeEntityToCargoEx(notnull EntityAI item, int idx, int row, int col)",
      "bool PredictiveTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool LocalTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool ServerTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool PredictiveTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool LocalTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool ServerTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool PredictiveTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool LocalTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool ServerTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool PredictiveTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool LocalTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool ServerTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PredictiveTakeEntityAsAttachment(notnull EntityAI item)",
      "bool LocalTakeEntityAsAttachment(notnull EntityAI item)",
      "bool ServerTakeEntityAsAttachment(notnull EntityAI item)",
      "bool PredictiveDropEntity(notnull EntityAI item)",
      "bool LocalDropEntity(notnull EntityAI item)",
      "bool ServerDropEntity(notnull EntityAI item)",
      "bool CanDropEntity(notnull EntityAI item)",
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "void SetWet(float value, bool allow_client = false)",
      "void AddWet(float value)",
      "void SetWetMax()",
      "float GetWet()",
      "float GetWetMax()",
      "float GetWetMin()",
      "float GetWetInit()",
      "bool HasWetness()",
      "void OnWetChanged(float newVal, float oldVal)",
      "void OnWetLevelChanged(EWetnessLevel newLevel, EWetnessLevel oldLevel)",
      "bool HasQuantity()",
      "bool SetQuantity(float value, bool destroy_config = true, bool destroy_forced = false, bool allow_client = false, bool clamp_to_stack_max = true)",
      "float GetQuantity()",
      "float GetQuantityNormalized()",
      "int GetQuantityMax()",
      "int GetQuantityMin()",
      "void SetQuantityToMinimum()",
      "int GetTargetQuantityMax(int attSlotID = -1)",
      "int GetQuickBarBonus()",
      "bool UseConfigInitTemperature()",
      "void InitTemperature()",
      "void SetTemperatureDirect(float value, bool allow_client = false)",
      "void SetTemperature(float value, bool allow_client = false)",
      "void AddTemperature(float value)",
      "void SetTemperatureEx(TemperatureData data)",
      "void RefreshTemperatureAccess(TemperatureData data)",
      "void InterpolateTempData(TemperatureDataInterpolated data)",
      "void SetTemperatureMax()",
      "float GetTemperature()",
      "float GetTemperatureInit()",
      "float GetTemperatureMin()",
      "float GetTemperatureMax()",
      "bool GetCookingTargetTemperature(out float temperature)",
      "float GetHeatPermeabilityCoef()",
      "float GetTemperatureFreezeThreshold()",
      "float GetTemperatureThawThreshold()",
      "float GetTemperatureFreezeTime()",
      "float GetTemperatureThawTime()",
      "float GetFreezeThawProgress()",
      "bool IsFreezeThawProgressFinished()",
      "void SetFreezeThawProgress(float val)",
      "bool CanFreeze()",
      "bool GetIsFrozen()",
      "void SetFrozen(bool frozen)",
      "void HandleFreezingProgression(float deltaHeat, TemperatureData data)",
      "void OnFreezeStateChangeClient()",
      "void OnFreezeStateChangeServer()",
      "bool CanItemOverheat()",
      "float GetItemOverheatThreshold()",
      "float GetItemOverheatTime()",
      "bool IsItemOverheated()",
      "float GetItemOverheatProgress()",
      "void SetItemOverheatProgress(float val, float deltaTime = 0)",
      "void OnItemOverheatStart()",
      "void OnItemOverheat(float deltaTime)",
      "void OnItemOverheatEnd()",
      "void HandleItemOverheating(float deltaHeat, TemperatureData data)",
      "void SetLiquidType(int value, bool allow_client = false)",
      "int GetLiquidType()",
      "void SetColor(int r, int g, int b, int a)",
      "void GetColor(out int r,out int g,out int b,out int a)",
      "void SetStoreLoad(bool value)",
      "bool IsStoreLoad()",
      "void SetStoreLoadedQuantity(float value)",
      "float GetStoreLoadedQuantity()",
      "void SetCleanness(int value, bool allow_client = false)",
      "int GetCleanness()",
      "bool IsServerCheck(bool allow_client)",
      "int GetHiddenSelectionIndex( string selection )",
      "void PlaceOnSurfaceRotated(out vector trans[4], vector pos, float dx = 0, float dz = 0, float fAngle = 0, bool align = false)",
      "void RegisterNetSyncVariableBool(string variableName)",
      "void RegisterNetSyncVariableBoolSignal(string variableName)",
      "void RegisterNetSyncVariableInt(string variableName, int minValue = 0, int maxValue = 0)",
      "void RegisterNetSyncVariableFloat(string variableName, float minValue = 0, float maxValue = 0, int precision = 1)",
      "void RegisterNetSyncVariableObject(string variableName)",
      "void UpdateNetSyncVariableInt(string variableName, float minValue = 0, float maxValue = 0)",
      "void UpdateNetSyncVariableFloat(string variableName, float minValue = 0, float maxValue = 0, int precision = 1)",
      "void SwitchLight(bool isOn)",
      "void SetSimpleHiddenSelectionState(int index, bool state)",
      "bool IsSimpleHiddenSelectionVisible(int index)",
      "void SetObjectTexture(int index, string texture_name)",
      "string GetObjectTexture(int index)",
      "void SetObjectMaterial(int index, string mat_name)",
      "string GetObjectMaterial(int index)",
      "bool IsPilotLight()",
      "void SetPilotLight(bool isOn)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void SetSynchDirty()",
      "void OnVariablesSynchronized()",
      "bool IsVariableSet(int variable)",
      "void SetVariableMask(int variable)",
      "void RemoveItemVariable(int variable)",
      "void TransferVariablesFloat(array<float> float_vars)",
      "void SaveVariables(ParamsWriteContext ctx)",
      "bool LoadVariables(ParamsReadContext ctx, int version = -1)",
      "void WriteVarsToCTX(ParamsWriteContext ctx)",
      "bool ReadVarsFromCTX(ParamsReadContext ctx, int version = -1)",
      "void SerializeNumericalVars(array<float> floats_out)",
      "void DeSerializeNumericalVars(array<float> floats)",
      "void SetAITargetCallbacks(AbstractAITargetCallbacks callbacks)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "string GetDebugText()",
      "void GetDebugButtonNames(out string button1, out string button2, out string button3, out string button4)",
      "void OnDebugButtonPressClient(int button_index)",
      "void OnDebugButtonPressServer(int button_index)",
      "void DebugBBoxSetColor(int color)",
      "void DebugBBoxDelete()",
      "void DebugDirectionSetColor(int color)",
      "void DebugDirectionDelete()",
      "void HideSelection( string selection_name )",
      "void ShowSelection( string selection_name )",
      "void GetPersistentID( out int b1, out int b2, out int b3, out int b4 )",
      "void SetLifetime( float fLifeTime )",
      "float GetLifetime()",
      "void IncreaseLifetime()",
      "void SetLifetimeMax( float fLifeTime )",
      "float GetLifetimeMax()",
      "void IncreaseLifetimeUp()",
      "bool HasEnergyManager()",
      "void OnWorkStart()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStop()",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void OnIsPlugged(EntityAI source_device)",
      "void OnIsUnplugged( EntityAI last_energy_source )",
      "void OnOwnSocketTaken( EntityAI device )",
      "void OnOwnSocketReleased( EntityAI device )",
      "void OnInitEnergy()",
      "void OnEnergyConsumed()",
      "void OnEnergyAdded()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void FixEntity()",
      "float GetWetWeightModifier()",
      "float GetConfigWeightModified()",
      "string GetConfigWeightModifiedDebugText()",
      "int GetWeight()",
      "void ClearWeightDirty()",
      "void SetWeightDirty()",
      "float GetInventoryAndCargoWeight(bool forceRecalc = false)",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "float GetWeightEx(bool forceRecalc = false)",
      "void UpdateWeight(WeightUpdateType updateType = WeightUpdateType.FULL, float weightAdjustment = 0)",
      "float GetSingleInventoryItemWeightEx()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void SetViewIndex( int index )",
      "int GetViewIndex()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "int GetMeleeTargetType()",
      "string GetAttachmentSoundType()",
      "bool IsHeavyBehaviour()",
      "bool IsOneHandedBehaviour()",
      "bool IsTwoHandedBehaviour()",
      "string ChangeIntoOnAttach(string slot)",
      "string ChangeIntoOnDetach()",
      "bool CanHaveTemperature()",
      "bool IsSelfAdjustingTemperature()",
      "void OnCEUpdate()",
      "void ProcessVariables()",
      "void OnDebugSpawnEx(DebugSpawnParams params)",
      "void OnDebugSpawn()",
      "float GetLiquidThroughputCoef()",
      "string GetInvulnerabilityTypeString()",
      "void ProcessInvulnerabilityCheck(string servercfg_param)",
      "void SetBayonetAttached(bool pState, int slot_idx = -1)",
      "bool HasBayonetAttached()",
      "int GetBayonetAttachmentIdx()",
      "void SetButtstockAttached(bool pState, int slot_idx = -1)",
      "bool HasButtstockAttached()",
      "int GetButtstockAttachmentIdx()",
      "void SetInvisibleRecursive(bool invisible, EntityAI parent = null, array<int> attachments = null)",
      "void SoundHardTreeFallingPlay()",
      "void SoundSoftTreeFallingPlay()",
      "void SoundHardBushFallingPlay()",
      "void SoundSoftBushFallingPlay()",
      "void RegisterTransportHit(Transport transport)",
      "bool GetInventoryHandAnimation(notnull InventoryLocation loc, out int value)",
      "bool TranslateSlotFromSelection(string selection_name, out int slot_id)",
      "bool IsUniversalTemperatureSource()",
      "void SetUniversalTemperatureSource(UTemperatureSource uts)",
      "void PairRemote(notnull EntityAI trigger)",
      "void UnpairRemote()",
      "void SetPersistentPairID(int id)",
      "bool HasTurnableValveBehavior()",
      "bool IsValveTurnable(int pValveIndex)",
      "int GetTurnableValveIndex(int pComponentIndex)",
      "void ExecuteActionsConnectedToValve(int pValveIndex)",
      "void InitAttachmentExclusionValues()",
      "void InitInherentSlotExclusionMap()",
      "void InitLegacyConfigExclusionValues()",
      "bool InitLegacyExclusionCheck()",
      "void InitLegacySlotExclusionValuesImplicit()",
      "void InitLegacySlotExclusionValuesDerived()",
      "void InitGlobalExclusionValues()",
      "void AddSingleExclusionValueGlobal(EAttExclusions value)",
      "void ClearSingleExclusionValueGlobal(EAttExclusions value)",
      "void SetAttachmentExclusionMaskGlobal(set<int> values)",
      "void SetAttachmentExclusionMaskSlot(int slotId, set<int> values)",
      "void PropagateExclusionValueRecursive(set<int> values, int slotId)",
      "void ClearExclusionValueRecursive(set<int> values, int slotId)",
      "bool HasInternalExclusionConflicts(int targetSlot)",
      "bool IsExclusionFlagPresent(set<int> values)",
      "bool IsExclusionFlagPresentRecursive(set<int> values, int targetSlot)",
      "bool CheckExclusionAccessCondition(int occupiedSlot, int targetSlot, set<int> value, inout set<int> adjustedValue)",
      "void AdjustExclusionAccessCondition(int occupiedSlot, int testedSlot, set<int> value, inout set<int> adjustedValue)",
      "bool CheckExclusionAccessPropagation(int occupiedSlot, int targetSlot, set<int> value, inout set<int> adjustedValue)",
      "void AdjustExclusionAccessPropagation(int occupiedSlot, int testedSlot, set<int> value, inout set<int> adjustedValue)",
      "bool CheckAttachmentReceiveExclusion(EntityAI attachment, int slotId)",
      "bool IsManagingArrows()",
      "void SetFromProjectile(ProjectileStoppedInfo info)",
      "void ClearInventory()",
      "void SetDebugDeveloper_item(Object entity)"
    ]
  },
  "EntityAI": {
    "parent": "Entity",
    "methods": [
      "void EntityAI()",
      "void InitItemVariables()",
      "void DeferredInit()",
      "bool IsInitialized()",
      "int GetHideIconMask()",
      "bool DeleteComponent(int comp_type)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "bool HasComponent(int comp_type)",
      "void MaxLifetimeRefreshCalc()",
      "bool IsRefresherSignalingViable()",
      "void SetDebugItem()",
      "void InitDamageZoneMapping()",
      "void InitDamageZoneDisplayNameMapping()",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "float ConvertNonlethalDamage(float damage)",
      "bool CanDisplayWeight()",
      "void Log(string msg, string fnc_name = )",
      "void LogWarning(string msg, string fnc_name = )",
      "void LogError(string msg, string fnc_name = )",
      "bool IsSkinned()",
      "void SetAsSkinned()",
      "bool CanBeSkinnedWith(EntityAI tool)",
      "float GetSkinningBloodInfectionChance(eAgents type)",
      "void CacheSkinningBloodInfectionChance(eAgents type)",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy(EntityAI igniter = NULL)",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "bool IsIgnited()",
      "bool DisassembleOnLastDetach()",
      "bool IsBasebuildingKit()",
      "bool IsCookware()",
      "bool PlacementCanBeRotated()",
      "void OnIgnitedTarget( EntityAI target_item)",
      "void OnIgnitedThis( EntityAI fire_source)",
      "void OnIgnitedTargetFailed( EntityAI target_item)",
      "void OnIgnitedThisFailed( EntityAI fire_source)",
      "bool IsTargetIgnitionSuccessful(EntityAI item_target)",
      "bool IsThisIgnitionSuccessful(EntityAI item_source = NULL)",
      "void OnPlacementStarted(Man player)",
      "void OnHologramBeingPlaced(Man player)",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "void OnPlacementCancelled(Man player)",
      "bool CanBePlaced(Man player, vector position)",
      "string CanBePlacedFailMessage( Man player, vector position )",
      "bool DoPlacingHeightCheck()",
      "float HeightCheckOverride()",
      "float HeightStartCheckOverride()",
      "bool IsEmpty()",
      "bool IsSplitable()",
      "bool CanBeSplit()",
      "bool HasAnyCargo()",
      "bool IsRoofAbove()",
      "void SetRoofAbove(bool state)",
      "void CheckForRoofLimited(float timeTresholdMS = 3000)",
      "int GetAgents()",
      "void RemoveAgent(int agent_id)",
      "void RemoveAllAgents()",
      "void RemoveAllAgentsExcept(int agent_to_keep)",
      "void InsertAgent(int agent, float count = 1)",
      "bool IsEntityAI()",
      "bool IsInventoryVisible()",
      "bool IsPlayer()",
      "bool IsAnimal()",
      "bool IsZombie()",
      "bool IsZombieMilitary()",
      "bool IsIgnoredByConstruction()",
      "bool CanBeTargetedByAI(EntityAI ai)",
      "bool CanBeBackstabbed()",
      "void Delete()",
      "void DeleteOnClient()",
      "void DeleteSafe()",
      "void DeleteSave()",
      "bool IsSetForDeletion()",
      "bool CanBeActionTarget()",
      "void SetPrepareToDelete()",
      "bool IsPreparedToDelete()",
      "void CheckForDestroy()",
      "bool IsPrepareToDelete()",
      "bool TryDelete()",
      "void OnBeforeTryDelete()",
      "int GetHierarchyLevel(int lvl = 0)",
      "void OnInventoryInit()",
      "void EEInit()",
      "void EEDelete(EntityAI parent)",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void OnChildItemRemoved(InventoryItem item)",
      "void OnChildItemReceived(InventoryItem item)",
      "void OnItemAttachmentSlotChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void EEInventoryIn(Man newparentMan, EntityAI diz, EntityAI newparent)",
      "void EEInventoryOut(Man oldparentMan, EntityAI diz, EntityAI newparent)",
      "void EEAmmoChanged()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void OnDamageDestroyed(int oldLevel)",
      "void AttemptDestructionBehaviour(int oldLevel, int newLevel, string zone)",
      "void SetTakeable(bool pState)",
      "void EEKilled(Object killer)",
      "bool ReplaceOnDeath()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "void DeathUpdate()",
      "void OnAttachmentRuined(EntityAI attachment)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void EEHitByRemote(int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void SwitchItemSelectionTexture(EntityAI item, string slot_name)",
      "void SwitchItemSelectionTextureEx(EItemManipulationContext context, Param par = null)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void EECargoIn(EntityAI item)",
      "void EECargoOut(EntityAI item)",
      "void EECargoMove(EntityAI item)",
      "void OnMovedInsideCargo(EntityAI container)",
      "void OnRemovedFromCargo(EntityAI container)",
      "void OnMovedWithinCargo(EntityAI container)",
      "void EEOnAfterLoad()",
      "void EEOnCECreate()",
      "void AfterStoreLoad()",
      "void OnBinLoadItemsDropped()",
      "void HideAllSelections()",
      "void ShowAllSelections()",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanLoadAttachment(EntityAI attachment)",
      "bool CanPutAsAttachment(EntityAI parent)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanDetachAttachment(EntityAI parent)",
      "bool CanBeFSwaped()",
      "bool CanCombineAttachment(notnull EntityAI e, int slot, bool stack_max_limit = false)",
      "bool CanBeCombined(EntityAI other_item, bool reservation_check = true, bool stack_max_limit = false )",
      "void CombineItemsEx(EntityAI entity2, bool use_stack_max = false )",
      "void SplitIntoStackMaxEx(EntityAI destination_entity, int slot_id)",
      "void CombineItemsClient(EntityAI entity2, bool use_stack_max = false )",
      "void SplitIntoStackMaxClient(EntityAI destination_entity, int slot_id)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanLoadItemIntoCargo(EntityAI item)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanSwapItemInCargo(EntityAI child_entity, EntityAI new_entity)",
      "bool CanReleaseCargo(EntityAI cargo)",
      "bool CanRemoveFromCargo(EntityAI parent)",
      "bool CanReceiveItemIntoHands(EntityAI item_to_hands)",
      "bool AreChildrenAccessible()",
      "bool IsBeingPlaced()",
      "bool IsHologram()",
      "bool CanSaveItemInHands(EntityAI item_in_hands)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanReleaseFromHands(EntityAI handheld)",
      "bool CanRemoveFromHands(EntityAI parent)",
      "bool CanDisplayAttachmentSlot( string slot_name )",
      "bool CanDisplayAttachmentSlot( int slot_id )",
      "bool CanDisplayAnyAttachmentSlot()",
      "bool CanDisplayAttachmentCategory( string category_name )",
      "bool CanDisplayCargo()",
      "bool CanAssignToQuickbar()",
      "bool CanAssignAttachmentsToQuickbar()",
      "bool IgnoreOutOfReachCondition()",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void OnCargoChanged()",
      "bool IsTakeable()",
      "void CreateAndInitInventory()",
      "void DestroyInventory()",
      "int GetSlotsCountCorrect()",
      "bool IsSlotReserved(int slotID)",
      "bool IsLockedInSlot()",
      "bool PredictiveTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool LocalTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool ServerTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToCargo(notnull EntityAI item)",
      "bool LocalTakeEntityToCargo(notnull EntityAI item)",
      "bool ServerTakeEntityToCargo(notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeEntityToCargoEx(notnull EntityAI item, int idx, int row, int col)",
      "bool LocalTakeEntityToCargoEx(notnull EntityAI item, int idx, int row, int col)",
      "bool PredictiveTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool LocalTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool ServerTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool PredictiveTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool LocalTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool ServerTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool PredictiveTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool LocalTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool ServerTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool PredictiveTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool LocalTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool ServerTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PredictiveTakeEntityAsAttachment(notnull EntityAI item)",
      "bool LocalTakeEntityAsAttachment(notnull EntityAI item)",
      "bool ServerTakeEntityAsAttachment(notnull EntityAI item)",
      "bool PredictiveDropEntity(notnull EntityAI item)",
      "bool LocalDropEntity(notnull EntityAI item)",
      "bool ServerDropEntity(notnull EntityAI item)",
      "bool CanDropEntity(notnull EntityAI item)",
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "void SetWet(float value, bool allow_client = false)",
      "void AddWet(float value)",
      "void SetWetMax()",
      "float GetWet()",
      "float GetWetMax()",
      "float GetWetMin()",
      "float GetWetInit()",
      "bool HasWetness()",
      "void OnWetChanged(float newVal, float oldVal)",
      "void OnWetLevelChanged(EWetnessLevel newLevel, EWetnessLevel oldLevel)",
      "bool HasQuantity()",
      "bool SetQuantity(float value, bool destroy_config = true, bool destroy_forced = false, bool allow_client = false, bool clamp_to_stack_max = true)",
      "float GetQuantity()",
      "float GetQuantityNormalized()",
      "int GetQuantityMax()",
      "int GetQuantityMin()",
      "void SetQuantityToMinimum()",
      "int GetTargetQuantityMax(int attSlotID = -1)",
      "int GetQuickBarBonus()",
      "bool UseConfigInitTemperature()",
      "void InitTemperature()",
      "void SetTemperatureDirect(float value, bool allow_client = false)",
      "void SetTemperature(float value, bool allow_client = false)",
      "void AddTemperature(float value)",
      "void SetTemperatureEx(TemperatureData data)",
      "void RefreshTemperatureAccess(TemperatureData data)",
      "void InterpolateTempData(TemperatureDataInterpolated data)",
      "void SetTemperatureMax()",
      "float GetTemperature()",
      "float GetTemperatureInit()",
      "float GetTemperatureMin()",
      "float GetTemperatureMax()",
      "bool GetCookingTargetTemperature(out float temperature)",
      "float GetHeatPermeabilityCoef()",
      "float GetTemperatureFreezeThreshold()",
      "float GetTemperatureThawThreshold()",
      "float GetTemperatureFreezeTime()",
      "float GetTemperatureThawTime()",
      "float GetFreezeThawProgress()",
      "bool IsFreezeThawProgressFinished()",
      "void SetFreezeThawProgress(float val)",
      "bool CanFreeze()",
      "bool GetIsFrozen()",
      "void SetFrozen(bool frozen)",
      "void HandleFreezingProgression(float deltaHeat, TemperatureData data)",
      "void OnFreezeStateChangeClient()",
      "void OnFreezeStateChangeServer()",
      "bool CanItemOverheat()",
      "float GetItemOverheatThreshold()",
      "float GetItemOverheatTime()",
      "bool IsItemOverheated()",
      "float GetItemOverheatProgress()",
      "void SetItemOverheatProgress(float val, float deltaTime = 0)",
      "void OnItemOverheatStart()",
      "void OnItemOverheat(float deltaTime)",
      "void OnItemOverheatEnd()",
      "void HandleItemOverheating(float deltaHeat, TemperatureData data)",
      "void SetLiquidType(int value, bool allow_client = false)",
      "int GetLiquidType()",
      "void SetColor(int r, int g, int b, int a)",
      "void GetColor(out int r,out int g,out int b,out int a)",
      "void SetStoreLoad(bool value)",
      "bool IsStoreLoad()",
      "void SetStoreLoadedQuantity(float value)",
      "float GetStoreLoadedQuantity()",
      "void SetCleanness(int value, bool allow_client = false)",
      "int GetCleanness()",
      "bool IsServerCheck(bool allow_client)",
      "int GetHiddenSelectionIndex( string selection )",
      "void PlaceOnSurfaceRotated(out vector trans[4], vector pos, float dx = 0, float dz = 0, float fAngle = 0, bool align = false)",
      "void RegisterNetSyncVariableBool(string variableName)",
      "void RegisterNetSyncVariableBoolSignal(string variableName)",
      "void RegisterNetSyncVariableInt(string variableName, int minValue = 0, int maxValue = 0)",
      "void RegisterNetSyncVariableFloat(string variableName, float minValue = 0, float maxValue = 0, int precision = 1)",
      "void RegisterNetSyncVariableObject(string variableName)",
      "void UpdateNetSyncVariableInt(string variableName, float minValue = 0, float maxValue = 0)",
      "void UpdateNetSyncVariableFloat(string variableName, float minValue = 0, float maxValue = 0, int precision = 1)",
      "void SwitchLight(bool isOn)",
      "void SetSimpleHiddenSelectionState(int index, bool state)",
      "bool IsSimpleHiddenSelectionVisible(int index)",
      "void SetObjectTexture(int index, string texture_name)",
      "string GetObjectTexture(int index)",
      "void SetObjectMaterial(int index, string mat_name)",
      "string GetObjectMaterial(int index)",
      "bool IsPilotLight()",
      "void SetPilotLight(bool isOn)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void SetSynchDirty()",
      "void OnVariablesSynchronized()",
      "bool IsVariableSet(int variable)",
      "void SetVariableMask(int variable)",
      "void RemoveItemVariable(int variable)",
      "void TransferVariablesFloat(array<float> float_vars)",
      "void SaveVariables(ParamsWriteContext ctx)",
      "bool LoadVariables(ParamsReadContext ctx, int version = -1)",
      "void WriteVarsToCTX(ParamsWriteContext ctx)",
      "bool ReadVarsFromCTX(ParamsReadContext ctx, int version = -1)",
      "void SerializeNumericalVars(array<float> floats_out)",
      "void DeSerializeNumericalVars(array<float> floats)",
      "void SetAITargetCallbacks(AbstractAITargetCallbacks callbacks)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "string GetDebugText()",
      "void GetDebugButtonNames(out string button1, out string button2, out string button3, out string button4)",
      "void OnDebugButtonPressClient(int button_index)",
      "void OnDebugButtonPressServer(int button_index)",
      "void DebugBBoxSetColor(int color)",
      "void DebugBBoxDelete()",
      "void DebugDirectionSetColor(int color)",
      "void DebugDirectionDelete()",
      "void HideSelection( string selection_name )",
      "void ShowSelection( string selection_name )",
      "void GetPersistentID( out int b1, out int b2, out int b3, out int b4 )",
      "void SetLifetime( float fLifeTime )",
      "float GetLifetime()",
      "void IncreaseLifetime()",
      "void SetLifetimeMax( float fLifeTime )",
      "float GetLifetimeMax()",
      "void IncreaseLifetimeUp()",
      "bool HasEnergyManager()",
      "void OnWorkStart()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStop()",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void OnIsPlugged(EntityAI source_device)",
      "void OnIsUnplugged( EntityAI last_energy_source )",
      "void OnOwnSocketTaken( EntityAI device )",
      "void OnOwnSocketReleased( EntityAI device )",
      "void OnInitEnergy()",
      "void OnEnergyConsumed()",
      "void OnEnergyAdded()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void FixEntity()",
      "float GetWetWeightModifier()",
      "float GetConfigWeightModified()",
      "string GetConfigWeightModifiedDebugText()",
      "int GetWeight()",
      "void ClearWeightDirty()",
      "void SetWeightDirty()",
      "float GetInventoryAndCargoWeight(bool forceRecalc = false)",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "float GetWeightEx(bool forceRecalc = false)",
      "void UpdateWeight(WeightUpdateType updateType = WeightUpdateType.FULL, float weightAdjustment = 0)",
      "float GetSingleInventoryItemWeightEx()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void SetViewIndex( int index )",
      "int GetViewIndex()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "string GetDefaultHitPositionComponent()",
      "int GetMeleeTargetType()",
      "string GetAttachmentSoundType()",
      "bool IsHeavyBehaviour()",
      "bool IsOneHandedBehaviour()",
      "bool IsTwoHandedBehaviour()",
      "string ChangeIntoOnAttach(string slot)",
      "string ChangeIntoOnDetach()",
      "bool CanHaveTemperature()",
      "bool IsSelfAdjustingTemperature()",
      "void OnCEUpdate()",
      "void ProcessVariables()",
      "void OnDebugSpawnEx(DebugSpawnParams params)",
      "void OnDebugSpawn()",
      "float GetLiquidThroughputCoef()",
      "string GetInvulnerabilityTypeString()",
      "void ProcessInvulnerabilityCheck(string servercfg_param)",
      "void SetBayonetAttached(bool pState, int slot_idx = -1)",
      "bool HasBayonetAttached()",
      "int GetBayonetAttachmentIdx()",
      "void SetButtstockAttached(bool pState, int slot_idx = -1)",
      "bool HasButtstockAttached()",
      "int GetButtstockAttachmentIdx()",
      "void SetInvisibleRecursive(bool invisible, EntityAI parent = null, array<int> attachments = null)",
      "void SoundHardTreeFallingPlay()",
      "void SoundSoftTreeFallingPlay()",
      "void SoundHardBushFallingPlay()",
      "void SoundSoftBushFallingPlay()",
      "void RegisterTransportHit(Transport transport)",
      "bool GetInventoryHandAnimation(notnull InventoryLocation loc, out int value)",
      "bool TranslateSlotFromSelection(string selection_name, out int slot_id)",
      "bool IsUniversalTemperatureSource()",
      "void SetUniversalTemperatureSource(UTemperatureSource uts)",
      "void PairRemote(notnull EntityAI trigger)",
      "void UnpairRemote()",
      "void SetPersistentPairID(int id)",
      "bool HasTurnableValveBehavior()",
      "bool IsValveTurnable(int pValveIndex)",
      "int GetTurnableValveIndex(int pComponentIndex)",
      "void ExecuteActionsConnectedToValve(int pValveIndex)",
      "void InitAttachmentExclusionValues()",
      "void InitInherentSlotExclusionMap()",
      "void InitLegacyConfigExclusionValues()",
      "bool InitLegacyExclusionCheck()",
      "void InitLegacySlotExclusionValuesImplicit()",
      "void InitLegacySlotExclusionValuesDerived()",
      "void InitGlobalExclusionValues()",
      "void AddSingleExclusionValueGlobal(EAttExclusions value)",
      "void ClearSingleExclusionValueGlobal(EAttExclusions value)",
      "void SetAttachmentExclusionMaskGlobal(set<int> values)",
      "void SetAttachmentExclusionMaskSlot(int slotId, set<int> values)",
      "void PropagateExclusionValueRecursive(set<int> values, int slotId)",
      "void ClearExclusionValueRecursive(set<int> values, int slotId)",
      "bool HasInternalExclusionConflicts(int targetSlot)",
      "bool IsExclusionFlagPresent(set<int> values)",
      "bool IsExclusionFlagPresentRecursive(set<int> values, int targetSlot)",
      "bool CheckExclusionAccessCondition(int occupiedSlot, int targetSlot, set<int> value, inout set<int> adjustedValue)",
      "void AdjustExclusionAccessCondition(int occupiedSlot, int testedSlot, set<int> value, inout set<int> adjustedValue)",
      "bool CheckExclusionAccessPropagation(int occupiedSlot, int targetSlot, set<int> value, inout set<int> adjustedValue)",
      "void AdjustExclusionAccessPropagation(int occupiedSlot, int testedSlot, set<int> value, inout set<int> adjustedValue)",
      "bool CheckAttachmentReceiveExclusion(EntityAI attachment, int slotId)",
      "bool IsManagingArrows()",
      "void SetFromProjectile(ProjectileStoppedInfo info)",
      "void ClearInventory()",
      "void SetDebugDeveloper_item(Object entity)"
    ]
  },
  "EntityLightSource": {
    "parent": "Entity",
    "methods": [
      "void SetLightType(int pType)",
      "int GetLightType()",
      "void SetEnabled(bool pState)",
      "bool IsEnabled()",
      "void SetCastShadow(bool pState)",
      "bool GetCastShadow()",
      "bool EnableSpecular(bool pState)",
      "bool EnableLinear(bool pState)",
      "void SetPulseCoef(float pState)",
      "void SetVisibleDuringDaylight(bool pState)",
      "bool IsVisibleDuringDaylight()",
      "void SetRadius(float pValue)",
      "float GetRadius()",
      "void EnableHeatHaze(bool pState)",
      "void SetHeatHazeRadius(float pValue)",
      "float GetHeatHazeRadius()",
      "void SetHeatHazePower(float pValue)",
      "float GetHeatHazePower()",
      "void SetDiffuseColor(float pRed, float pGreen, float pBlue)",
      "void SetDiffuseColorV(vector pColorVector)",
      "void SetDiffuseAlpha(float pAlpha)",
      "float GetDiffuseAlpha()",
      "void SetAmbientColor(float pRed, float pGreen, float pBlue)",
      "void SetAmbientColorV(vector pColorVector)",
      "void SetAmbientAlpha(float pAlpha)",
      "float GetAmbientAlpha()",
      "void SetBrightness(float pValue)",
      "float GetBrightness()",
      "void SetFlareVisible(bool pState)",
      "bool IsFlareVisible()",
      "void SetFlareRelPosition(vector pPosition)",
      "void SetSpotLightAngle(float pValue)",
      "float GetSpotLightAngle()"
    ]
  },
  "InventoryItem": {
    "parent": "EntityAI",
    "methods": [
      "void SwitchOn(bool onOff)",
      "bool IsOn()",
      "void EnableCollisionsWithCharacter(bool state)",
      "bool HasCollisionsWithCharacter()",
      "void ThrowPhysically(DayZPlayer player, vector force, bool collideWithCharacters = true)",
      "void ForceFarBubble(bool state)",
      "void InventoryItem()",
      "void OnRightClick()",
      "bool OnUseFromInventory(Man owner)",
      "string GetTooltip()",
      "bool IsInventoryItem()",
      "int GetMeleeMode()",
      "int GetMeleeHeavyMode()",
      "int GetMeleeSprintMode()",
      "bool IsMeleeWeapon()",
      "bool IsMeleeFinisher()",
      "void PlayImpactSound(float weight, float velocity, int surfaceHash)",
      "void InitImpactSoundData()",
      "void PlaySoundByAnimEvent(EAnimSoundEventID id)",
      "string GetImpactSurfaceType(IEntity other, Contact impact)",
      "string GetImpactSurfaceTypeEx(IEntity other, Contact impact, out int liquid)",
      "string GetRuinedMeleeAmmoType()",
      "float ProcessImpactSound(IEntity other, Contact extra, float weight, out int surfaceHash)",
      "float ProcessImpactSoundEx(IEntity other, Contact extra, float weight, out int surfaceHash, out int liquidType)",
      "static void DrawImpacts()"
    ]
  },
  "Man": {
    "parent": "EntityAI",
    "methods": [
      "string GetCurrentWeaponMode()",
      "void SetSpeechRestricted(bool state)",
      "bool IsSpeechRestricted()",
      "void SetFaceTexture(string texture_name)",
      "void SetFaceMaterial(string material_name)",
      "bool IsSoundInsideBuilding()",
      "bool IsCameraInsideVehicle()",
      "string GetMasterAttenuation()",
      "void SetMasterAttenuation(string masterAttenuation)",
      "void Man()",
      "bool IsMan()",
      "bool IsHealthVisible()",
      "bool HasFixedActionTargetCursorPosition()",
      "bool IsUnconscious()",
      "bool IsUnconsciousStateOnly()",
      "int GetPlayerState()",
      "void AddItemToDelete(EntityAI item)",
      "void EEItemIntoHands(EntityAI item)",
      "void EEItemOutOfHands(EntityAI item)",
      "bool JunctureDropEntity(notnull EntityAI item)",
      "bool PredictiveDropEntity(notnull EntityAI item)",
      "bool LocalDropEntity(notnull EntityAI item)",
      "bool ServerDropEntity(notnull EntityAI item)",
      "bool DropEntityImpl(InventoryMode mode, notnull EntityAI owner, notnull EntityAI item)",
      "bool CanDropEntity(notnull EntityAI item)",
      "void OnItemInHandsChanged()",
      "bool NeedInventoryJunctureFromServer(notnull EntityAI item, EntityAI currparent, EntityAI newparent)",
      "void JunctureTakeEntityToHands(notnull EntityAI item)",
      "void PredictiveTakeEntityToHands(EntityAI item)",
      "void LocalTakeEntityToHands(EntityAI item)",
      "void ServerTakeEntityToHands(EntityAI item)",
      "void TakeEntityToHandsImpl(InventoryMode mode, EntityAI item)",
      "void LocalDestroyEntityInHands()",
      "void PredictiveMoveItemFromHandsToInventory()",
      "bool ReplaceItemWithNewImpl(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool LocalReplaceItemWithNew(ReplaceItemWithNewLambdaBase lambda)",
      "bool ServerReplaceItemWithNew(ReplaceItemWithNewLambdaBase lambda)",
      "bool ReplaceItemElsewhereWithNewInHandsImpl(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool LocalReplaceItemElsewhereWithNewInHands(ReplaceItemWithNewLambdaBase lambda)",
      "bool ServerReplaceItemElsewhereWithNewInHands(ReplaceItemWithNewLambdaBase lambda)",
      "bool ReplaceItemInHandsWithNewImpl(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool LocalReplaceItemInHandsWithNew(ReplaceItemWithNewLambdaBase lambda)",
      "bool ServerReplaceItemInHandsWithNew(ReplaceItemWithNewLambdaBase lambda)",
      "bool ReplaceItemInHandsWithNewElsewhereImpl(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool LocalReplaceItemInHandsWithNewElsewhere(ReplaceItemWithNewLambdaBase lambda)",
      "bool ServerReplaceItemInHandsWithNewElsewhere(ReplaceItemWithNewLambdaBase lambda)",
      "bool JunctureTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool LocalTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool ServerTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool TakeEntityToInventoryImpl(InventoryMode mode, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool JunctureTakeEntityToCargo(notnull EntityAI item)",
      "bool PredictiveTakeEntityToCargo(notnull EntityAI item)",
      "bool LocalTakeEntityToCargo(notnull EntityAI item)",
      "bool ServerTakeEntityToCargo(notnull EntityAI item)",
      "bool TakeEntityToCargoImpl(InventoryMode mode, notnull EntityAI item)",
      "bool JunctureTakeEntityAsAttachment(notnull EntityAI item)",
      "bool PredictiveTakeEntityAsAttachment(notnull EntityAI item)",
      "bool LocalTakeEntityAsAttachment(notnull EntityAI item)",
      "bool ServerTakeEntityAsAttachment(notnull EntityAI item)",
      "bool TakeEntityAsAttachmentImpl(InventoryMode mode, notnull EntityAI item)",
      "bool JunctureTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool PredictiveTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool LocalTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool ServerTakeEntityAsAttachmentEx(notnull EntityAI item, int slot)",
      "bool TakeEntityAsAttachmentExImpl(InventoryMode mode, notnull EntityAI item, int slot)",
      "bool JunctureSwapEntities(notnull EntityAI item1, notnull EntityAI item2)",
      "bool PredictiveSwapEntities(notnull EntityAI item1, notnull EntityAI item2)",
      "bool LocalSwapEntities(notnull EntityAI item1, notnull EntityAI item2)",
      "bool ServerSwapEntities(notnull EntityAI item1, notnull EntityAI item2)",
      "bool SwapEntitiesImpl(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool JunctureForceSwapEntities(notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "bool PredictiveForceSwapEntities(notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "bool LocalForceSwapEntities(notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "bool ServerForceSwapEntities(notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "bool ForceSwapEntitiesImpl(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "bool JunctureTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeOrSwapAttachment( notnull EntityAI item )",
      "bool LocalTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool TakeEntityToTargetInventoryImpl(InventoryMode mode, notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool JunctureTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool PredictiveTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool LocalTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool ServerTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool TakeEntityToTargetCargoExImpl(InventoryMode mode, notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool JunctureTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool TakeEntityToTargetCargoImpl(InventoryMode mode, notnull EntityAI target, notnull EntityAI item)",
      "bool JunctureTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool PredictiveTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool LocalTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool ServerTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool TakeEntityToTargetAttachmentExImpl(InventoryMode mode, notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool JunctureTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool LocalTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool ServerTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool TakeEntityToTargetAttachmentImpl(InventoryMode mode, notnull EntityAI target, notnull EntityAI item)",
      "bool JunctureTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PredictiveTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool LocalTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool ServerTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool TakeToDstImpl(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "void JunctureDeleteItem(EntityAI item)",
      "bool CanBeSkinned()",
      "bool DisableVicinityIcon()",
      "void UpdateInventoryMenu()",
      "bool StatRegister( string name )",
      "float StatGet( string name )",
      "void StatGetCounter( string name, out string value )",
      "void StatGetAsTime( string name, out string value )",
      "void StatUpdate( string name, float value )",
      "void StatUpdateByTime( string name )",
      "void StatUpdateByPosition( string name )",
      "void StatUpdateByGivenPos( string name, vector pos )",
      "void StatInvokeUpdate()",
      "void StatSyncToClient()",
      "bool IsInventorySoftLocked()",
      "void SetInventorySoftLock(bool status)",
      "bool IsInTransport()",
      "void StopDeathDarkeningEffect()",
      "bool PhysicalPredictiveDropItem(EntityAI entity, bool heavy_item_only = true)",
      "void SetProcessUIWarning(bool state)",
      "void OnGameplayDataHandlerSync()",
      "bool CanPlaceItem(EntityAI item)"
    ]
  },
  "ObjectSnapCallback": {
    "parent": null,
    "methods": [
      "void OnSetup()",
      "void OnDebug(vector p0, vector p1, bool hasHit, bool found)",
      "bool OnFirstContact(Object other)",
      "bool OnQuery(Object other)",
      "bool OnCollide(Object other)",
      "void Object()",
      "bool CanBeSkinned()",
      "void Delete()",
      "void AddProxyPhysics(string proxySelectionName)",
      "void RemoveProxyPhysics(string proxySelectionName)",
      "void OnEnterTrigger(ScriptedEntity trigger)",
      "void OnLeaveTrigger(ScriptedEntity trigger)",
      "bool GetLODS(notnull out array<LOD> lods)",
      "string GetLODName(LOD lod)",
      "void Explode(int damageType, string ammoType = )",
      "void SynchExplosion()",
      "void OnExplodeClient()",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "string GetActionComponentName(int componentIndex, string geometry = )",
      "int GetActionComponentNameList(int componentIndex, TStringArray nameList, string geometry = )",
      "bool IsActionComponentPartOfSelection(int componentIndex, string selectionName, string geometry = )",
      "void GetActionComponentsForSelectionName(int level, string selectionName, TIntArray componentIndices)",
      "void GetActionComponentMinMax(int level, int componentIndex, out vector min, out vector max)",
      "bool ToDelete()",
      "bool IsPendingDeletion()",
      "int GetGeometryLevel()",
      "int GetFireGeometryLevel()",
      "int GetViewGeometryLevel()",
      "int GetMemoryLevel()",
      "bool ToBonePivot(out int pivot, int level, int bone)",
      "bool FromBonePivot(int pivot, out int level, out int bone)",
      "int GetBonePivot(int level, int component)",
      "void GetBonePivotsForAnimationSource(int level, string animationSource, out TIntArray pivots)",
      "void GetBoneRotationLS(int pivot, out float quaternion[4])",
      "void GetBoneRotationMS(int pivot, out float quaternion[4])",
      "void GetBoneRotationWS(int pivot, out float quaternion[4])",
      "void GetBoneTransformLS(int pivot, out vector transform[4])",
      "void GetBoneTransformMS(int pivot, out vector transform[4])",
      "void GetBoneTransformWS(int pivot, out vector transform[4])",
      "void GetTightlyPackedCorners(ETransformationAxis axis, out vector corners[4])",
      "void DebugDrawTightlyPackedCorners(ETransformationAxis axis, int color)",
      "void SetPosition(vector vPos)",
      "void PlaceOnSurface()",
      "void SetOrientation(vector vOrientation)",
      "void SetDirection(vector vPos)",
      "bool CanAffectPathgraph()",
      "void SetAffectPathgraph(bool fromConfig, bool affect)",
      "float ClippingInfo(out vector minMax[2])",
      "bool GetCollisionBox(out vector minMax[2])",
      "float GetCollisionRadius()",
      "float GetDamage()",
      "void GetSelectionList(out TStringArray selectionList)",
      "float GetSurfaceNoise()",
      "string GetSurfaceType()",
      "bool HasSelection( string selection )",
      "bool HasAnimation( string anim_name )",
      "int GetMemoryPointIndex(string memoryPointName)",
      "bool MemoryPointExists(string memoryPoint)",
      "void CreateDynamicPhysics(int interactionLayers)",
      "void EnableDynamicCCD(bool state)",
      "void SetDynamicPhysicsLifeTime(float lifeTime)",
      "void OnTreeCutDown(EntityAI cutting_entity)",
      "string GetType()",
      "string GetDisplayName()",
      "bool DisplayNameRuinAttach()",
      "string GetModelName()",
      "string GetShapeName()",
      "int Release()",
      "bool IsKindOf(string type)",
      "bool IsAlive()",
      "bool IsMan()",
      "bool IsDayZCreature()",
      "bool IsEntityAI()",
      "bool IsStaticTransmitter()",
      "bool IsTransmitter()",
      "bool IsItemBase()",
      "bool IsContainer()",
      "bool IsMagazine()",
      "bool IsAmmoPile()",
      "bool IsInventoryItem()",
      "bool IsClothing()",
      "bool IsFireplace()",
      "bool IsTree()",
      "bool IsRock()",
      "bool IsWoodBase()",
      "bool IsBush()",
      "bool IsCuttable()",
      "bool IsPeltBase()",
      "bool IsWeapon()",
      "bool IsMeleeWeapon()",
      "bool IsBuilding()",
      "int GetLiquidSourceType()",
      "bool IsWell()",
      "bool ShootsExplosiveAmmo()",
      "bool IsFuelStation()",
      "bool IsTransport()",
      "bool IsElectricAppliance()",
      "bool CanUseConstruction()",
      "bool CanUseConstructionBuild()",
      "bool CanUseHandConstruction()",
      "bool IsBeingBackstabbed()",
      "void SetBeingBackstabbed(int backstabType)",
      "bool IsFood()",
      "bool IsFruit()",
      "bool IsMeat()",
      "bool IsCorpse()",
      "bool IsMushroom()",
      "bool IsHealthVisible()",
      "bool ShowZonesHealth()",
      "bool IsParticle()",
      "bool IsItemTent()",
      "bool IsScriptedLight()",
      "bool IsHologram()",
      "bool HasProxyParts()",
      "bool CanObstruct()",
      "bool CanProxyObstruct()",
      "bool CanProxyObstructSelf()",
      "bool CanBeIgnoredByDroppedItem()",
      "bool CanBeAutoDeleted()",
      "bool DisableVicinityIcon()",
      "void GetNetworkID( out int lowBits, out int highBits )",
      "string GetNetworkIDString()",
      "string GetDebugName()",
      "static string GetDebugName(Object o)",
      "string GetDebugNameNative()",
      "void RPC(int rpc_type, array<ref Param> params, bool guaranteed, PlayerIdentity recipient = NULL)",
      "void RPCSingleParam(int rpc_type, Param param, bool guaranteed, PlayerIdentity recipient = NULL)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "string ConfigGetString(string entryName)",
      "string ConfigGetStringRaw(string entryName)",
      "int ConfigGetInt(string entryName)",
      "bool ConfigGetBool(string entryName)",
      "float ConfigGetFloat(string entryName)",
      "void ConfigGetTextArray(string entryName, out TStringArray values)",
      "void ConfigGetTextArrayRaw(string entryName, out TStringArray values)",
      "void ConfigGetFloatArray(string entryName, out TFloatArray values)",
      "void ConfigGetIntArray(string entryName, out TIntArray values)",
      "bool ConfigIsExisting(string entryName)",
      "bool KindOf( string tag )",
      "bool IsAnyInherited( array<typename> typenames )",
      "bool IsPlainObject()",
      "bool IsScenery()",
      "bool HasDamageSystem()",
      "bool IsDamageDestroyed()",
      "void SetDestructTime(float time)",
      "float GetHealth(string zoneName, string healthType)",
      "float GetHealth01(string zoneName, string healthType)",
      "float GetMaxHealth(string zoneName, string healthType)",
      "void SetHealth(string zoneName, string healthType, float value)",
      "void SetFullHealth()",
      "void AddHealth(string zoneName, string healthType, float value)",
      "void DecreaseHealth(string zoneName, string healthType, float value)",
      "bool GetAdditionalHealthTypes(string zoneName, TStringArray outHealthTypes)",
      "void DecreaseHealth(string zoneName, string healthType, float value, bool auto_delete)",
      "float GetHealth()",
      "float GetHealth01()",
      "float GetMaxHealth()",
      "void SetHealth(float health)",
      "void SetGlobalHealth(float health)",
      "void SetHealthLevel(int healthLevel, string zone = )",
      "void AddHealthLevel(int healthLevelDelta, string zone = )",
      "void SetHealth01(string zoneName, string healthType, float coef)",
      "void SetHealthMax(string zoneName = , string healthType = )",
      "void AddHealth( float add_health)",
      "void DecreaseHealth(float dec_health, bool auto_delete = true)",
      "void DecreaseHealthCoef(float dec_health_coef, bool auto_delete = true)",
      "void ProcessDirectDamage(int damageType, EntityAI source, string componentName, string ammoName, vector modelPos, float damageCoef = 1.0, int flags = 0)",
      "bool EEOnDamageCalculated(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void GetDamageZones(out TStringArray dmgZones)",
      "string GetDamageZoneNameByComponentIndex(int componentIndex)",
      "int GetHealthLevel(string zone = )",
      "int GetNumberOfHealthLevels(string zone = )",
      "float GetHealthLevelValue(int healthLevel, string zone = )",
      "bool GetAllowDamage()",
      "void SetAllowDamage(bool val)",
      "bool GetCanBeDestroyed()",
      "void SetCanBeDestroyed(bool val)",
      "bool IsRuined()",
      "void OnSimulationEnabled()",
      "void OnSimulationDisabled()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "bool PlaySoundSet( out EffectSound sound, string sound_set, float fade_in, float fade_out, bool loop = false )",
      "bool PlaySoundSetLoop( out EffectSound sound, string sound_set, float fade_in, float fade_out )",
      "bool PlaySoundSetAtMemoryPointLoopedSafe(out EffectSound sound, string soundSet, string memoryPoint,float play_fade_in = 0, float stop_fade_out = 0)",
      "bool PlaySoundSetAtMemoryPointLooped(out EffectSound sound, string soundSet, string memoryPoint, float play_fade_in = 0, float stop_fade_out = 0)",
      "bool PlaySoundSetAtMemoryPoint(out EffectSound sound, string soundSet, string memoryPoint, bool looped = false, float play_fade_in = 0, float stop_fade_out = 0)",
      "bool StopSoundSet( out EffectSound sound )",
      "void PostAreaDamageActions()",
      "void PreAreaDamageActions()",
      "void SpawnDamageDealtEffect()",
      "void OnReceivedHit(ImpactEffectsData hitData)",
      "void OnPlayerRecievedHit()",
      "bool HasNetworkID()",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "bool CanBeRepairedToPristine()",
      "void SetDebugItem()",
      "void AddArrow(Object arrow, int componentIndex, vector closeBonePosWS, vector closeBoneRotWS)",
      "bool CanBeActionTarget()",
      "bool HasFixedActionTargetCursorPosition()",
      "void OnSpawnByObjectSpawner(ITEM_SpawnerObject item)"
    ]
  },
  "Object": {
    "parent": "IEntity",
    "methods": [
      "void Object()",
      "bool CanBeSkinned()",
      "void Delete()",
      "void AddProxyPhysics(string proxySelectionName)",
      "void RemoveProxyPhysics(string proxySelectionName)",
      "void OnEnterTrigger(ScriptedEntity trigger)",
      "void OnLeaveTrigger(ScriptedEntity trigger)",
      "bool GetLODS(notnull out array<LOD> lods)",
      "string GetLODName(LOD lod)",
      "void Explode(int damageType, string ammoType = )",
      "void SynchExplosion()",
      "void OnExplodeClient()",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "string GetActionComponentName(int componentIndex, string geometry = )",
      "int GetActionComponentNameList(int componentIndex, TStringArray nameList, string geometry = )",
      "bool IsActionComponentPartOfSelection(int componentIndex, string selectionName, string geometry = )",
      "void GetActionComponentsForSelectionName(int level, string selectionName, TIntArray componentIndices)",
      "void GetActionComponentMinMax(int level, int componentIndex, out vector min, out vector max)",
      "bool ToDelete()",
      "bool IsPendingDeletion()",
      "int GetGeometryLevel()",
      "int GetFireGeometryLevel()",
      "int GetViewGeometryLevel()",
      "int GetMemoryLevel()",
      "bool ToBonePivot(out int pivot, int level, int bone)",
      "bool FromBonePivot(int pivot, out int level, out int bone)",
      "int GetBonePivot(int level, int component)",
      "void GetBonePivotsForAnimationSource(int level, string animationSource, out TIntArray pivots)",
      "void GetBoneRotationLS(int pivot, out float quaternion[4])",
      "void GetBoneRotationMS(int pivot, out float quaternion[4])",
      "void GetBoneRotationWS(int pivot, out float quaternion[4])",
      "void GetBoneTransformLS(int pivot, out vector transform[4])",
      "void GetBoneTransformMS(int pivot, out vector transform[4])",
      "void GetBoneTransformWS(int pivot, out vector transform[4])",
      "void GetTightlyPackedCorners(ETransformationAxis axis, out vector corners[4])",
      "void DebugDrawTightlyPackedCorners(ETransformationAxis axis, int color)",
      "void SetPosition(vector vPos)",
      "void PlaceOnSurface()",
      "void SetOrientation(vector vOrientation)",
      "void SetDirection(vector vPos)",
      "bool CanAffectPathgraph()",
      "void SetAffectPathgraph(bool fromConfig, bool affect)",
      "float ClippingInfo(out vector minMax[2])",
      "bool GetCollisionBox(out vector minMax[2])",
      "float GetCollisionRadius()",
      "float GetDamage()",
      "void GetSelectionList(out TStringArray selectionList)",
      "float GetSurfaceNoise()",
      "string GetSurfaceType()",
      "bool HasSelection( string selection )",
      "bool HasAnimation( string anim_name )",
      "int GetMemoryPointIndex(string memoryPointName)",
      "bool MemoryPointExists(string memoryPoint)",
      "void CreateDynamicPhysics(int interactionLayers)",
      "void EnableDynamicCCD(bool state)",
      "void SetDynamicPhysicsLifeTime(float lifeTime)",
      "void OnTreeCutDown(EntityAI cutting_entity)",
      "string GetType()",
      "string GetDisplayName()",
      "bool DisplayNameRuinAttach()",
      "string GetModelName()",
      "string GetShapeName()",
      "int Release()",
      "bool IsKindOf(string type)",
      "bool IsAlive()",
      "bool IsMan()",
      "bool IsDayZCreature()",
      "bool IsEntityAI()",
      "bool IsStaticTransmitter()",
      "bool IsTransmitter()",
      "bool IsItemBase()",
      "bool IsContainer()",
      "bool IsMagazine()",
      "bool IsAmmoPile()",
      "bool IsInventoryItem()",
      "bool IsClothing()",
      "bool IsFireplace()",
      "bool IsTree()",
      "bool IsRock()",
      "bool IsWoodBase()",
      "bool IsBush()",
      "bool IsCuttable()",
      "bool IsPeltBase()",
      "bool IsWeapon()",
      "bool IsMeleeWeapon()",
      "bool IsBuilding()",
      "int GetLiquidSourceType()",
      "bool IsWell()",
      "bool ShootsExplosiveAmmo()",
      "bool IsFuelStation()",
      "bool IsTransport()",
      "bool IsElectricAppliance()",
      "bool CanUseConstruction()",
      "bool CanUseConstructionBuild()",
      "bool CanUseHandConstruction()",
      "bool IsBeingBackstabbed()",
      "void SetBeingBackstabbed(int backstabType)",
      "bool IsFood()",
      "bool IsFruit()",
      "bool IsMeat()",
      "bool IsCorpse()",
      "bool IsMushroom()",
      "bool IsHealthVisible()",
      "bool ShowZonesHealth()",
      "bool IsParticle()",
      "bool IsItemTent()",
      "bool IsScriptedLight()",
      "bool IsHologram()",
      "bool HasProxyParts()",
      "bool CanObstruct()",
      "bool CanProxyObstruct()",
      "bool CanProxyObstructSelf()",
      "bool CanBeIgnoredByDroppedItem()",
      "bool CanBeAutoDeleted()",
      "bool DisableVicinityIcon()",
      "void GetNetworkID( out int lowBits, out int highBits )",
      "string GetNetworkIDString()",
      "string GetDebugName()",
      "static string GetDebugName(Object o)",
      "string GetDebugNameNative()",
      "void RPC(int rpc_type, array<ref Param> params, bool guaranteed, PlayerIdentity recipient = NULL)",
      "void RPCSingleParam(int rpc_type, Param param, bool guaranteed, PlayerIdentity recipient = NULL)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "string ConfigGetString(string entryName)",
      "string ConfigGetStringRaw(string entryName)",
      "int ConfigGetInt(string entryName)",
      "bool ConfigGetBool(string entryName)",
      "float ConfigGetFloat(string entryName)",
      "void ConfigGetTextArray(string entryName, out TStringArray values)",
      "void ConfigGetTextArrayRaw(string entryName, out TStringArray values)",
      "void ConfigGetFloatArray(string entryName, out TFloatArray values)",
      "void ConfigGetIntArray(string entryName, out TIntArray values)",
      "bool ConfigIsExisting(string entryName)",
      "bool KindOf( string tag )",
      "bool IsAnyInherited( array<typename> typenames )",
      "bool IsPlainObject()",
      "bool IsScenery()",
      "bool HasDamageSystem()",
      "bool IsDamageDestroyed()",
      "void SetDestructTime(float time)",
      "float GetHealth(string zoneName, string healthType)",
      "float GetHealth01(string zoneName, string healthType)",
      "float GetMaxHealth(string zoneName, string healthType)",
      "void SetHealth(string zoneName, string healthType, float value)",
      "void SetFullHealth()",
      "void AddHealth(string zoneName, string healthType, float value)",
      "void DecreaseHealth(string zoneName, string healthType, float value)",
      "bool GetAdditionalHealthTypes(string zoneName, TStringArray outHealthTypes)",
      "void DecreaseHealth(string zoneName, string healthType, float value, bool auto_delete)",
      "float GetHealth()",
      "float GetHealth01()",
      "float GetMaxHealth()",
      "void SetHealth(float health)",
      "void SetGlobalHealth(float health)",
      "void SetHealthLevel(int healthLevel, string zone = )",
      "void AddHealthLevel(int healthLevelDelta, string zone = )",
      "void SetHealth01(string zoneName, string healthType, float coef)",
      "void SetHealthMax(string zoneName = , string healthType = )",
      "void AddHealth( float add_health)",
      "void DecreaseHealth(float dec_health, bool auto_delete = true)",
      "void DecreaseHealthCoef(float dec_health_coef, bool auto_delete = true)",
      "void ProcessDirectDamage(int damageType, EntityAI source, string componentName, string ammoName, vector modelPos, float damageCoef = 1.0, int flags = 0)",
      "bool EEOnDamageCalculated(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void GetDamageZones(out TStringArray dmgZones)",
      "string GetDamageZoneNameByComponentIndex(int componentIndex)",
      "int GetHealthLevel(string zone = )",
      "int GetNumberOfHealthLevels(string zone = )",
      "float GetHealthLevelValue(int healthLevel, string zone = )",
      "bool GetAllowDamage()",
      "void SetAllowDamage(bool val)",
      "bool GetCanBeDestroyed()",
      "void SetCanBeDestroyed(bool val)",
      "bool IsRuined()",
      "void OnSimulationEnabled()",
      "void OnSimulationDisabled()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "bool PlaySoundSet( out EffectSound sound, string sound_set, float fade_in, float fade_out, bool loop = false )",
      "bool PlaySoundSetLoop( out EffectSound sound, string sound_set, float fade_in, float fade_out )",
      "bool PlaySoundSetAtMemoryPointLoopedSafe(out EffectSound sound, string soundSet, string memoryPoint,float play_fade_in = 0, float stop_fade_out = 0)",
      "bool PlaySoundSetAtMemoryPointLooped(out EffectSound sound, string soundSet, string memoryPoint, float play_fade_in = 0, float stop_fade_out = 0)",
      "bool PlaySoundSetAtMemoryPoint(out EffectSound sound, string soundSet, string memoryPoint, bool looped = false, float play_fade_in = 0, float stop_fade_out = 0)",
      "bool StopSoundSet( out EffectSound sound )",
      "void PostAreaDamageActions()",
      "void PreAreaDamageActions()",
      "void SpawnDamageDealtEffect()",
      "void OnReceivedHit(ImpactEffectsData hitData)",
      "void OnPlayerRecievedHit()",
      "bool HasNetworkID()",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "bool CanBeRepairedToPristine()",
      "void SetDebugItem()",
      "void AddArrow(Object arrow, int componentIndex, vector closeBonePosWS, vector closeBoneRotWS)",
      "bool CanBeActionTarget()",
      "bool HasFixedActionTargetCursorPosition()",
      "void OnSpawnByObjectSpawner(ITEM_SpawnerObject item)"
    ]
  },
  "ObjectTyped": {
    "parent": "Object",
    "methods": []
  },
  "PawnMove": {
    "parent": null,
    "methods": [
      "void PawnMove()",
      "void SetMoveId(int value)",
      "int GetMoveId()",
      "void SetSimulationTimestamp(int value)",
      "int GetSimulationTimestamp()",
      "void SetTimeSlice(float value)",
      "float GetTimeSlice()",
      "void Write(PawnMoveWriter ctx, PawnMove prev)",
      "void Read(PawnMoveReader ctx, PawnMove prev)",
      "int EstimateMaximumSize()",
      "void GetTransform(inout vector transform[4])",
      "bool IsOwner()",
      "bool IsAuthority()",
      "bool IsAuthorityOwner()",
      "bool IsProxy()",
      "void ForceCorrection()",
      "void OnPossess()",
      "void OnUnPossess()",
      "void ObtainMove( PawnMove pMove)",
      "void ConsumeMove(PawnMove pMove)",
      "bool ReplayMove(PawnMove pMove)",
      "void SimulateMove(PawnMove pMove)",
      "void ObtainState( PawnOwnerState pState)",
      "void RewindState(PawnOwnerState pState,  PawnMove pMove, inout NetworkRewindType pRewindType)",
      "void ReplayAdditiveMove( PawnMove pMove,  PawnMove pDeltaMove)",
      "void ApplyAdditiveMove(PawnMove pDeltaMove)"
    ]
  },
  "Pawn": {
    "parent": null,
    "methods": [
      "bool IsOwner()",
      "bool IsAuthority()",
      "bool IsAuthorityOwner()",
      "bool IsProxy()",
      "void ForceCorrection()",
      "void OnPossess()",
      "void OnUnPossess()",
      "void ObtainMove( PawnMove pMove)",
      "void ConsumeMove(PawnMove pMove)",
      "bool ReplayMove(PawnMove pMove)",
      "void SimulateMove(PawnMove pMove)",
      "void ObtainState( PawnOwnerState pState)",
      "void RewindState(PawnOwnerState pState,  PawnMove pMove, inout NetworkRewindType pRewindType)",
      "void ReplayAdditiveMove( PawnMove pMove,  PawnMove pDeltaMove)",
      "void ApplyAdditiveMove(PawnMove pDeltaMove)"
    ]
  },
  "ScriptedEntity": {
    "parent": "EntityAI",
    "methods": [
      "void SetClippingInfo(vector mins, vector maxs, float radius)",
      "void SetCollisionBox(vector mins, vector maxs)",
      "void SetCollisionSphere(float radius)",
      "void SetCollisionCylinder(float radius, float height)",
      "void SetTriggerShape(TriggerShape shape)",
      "bool IsInventoryVisible()"
    ]
  },
  "SoundOnVehicle": {
    "parent": "Entity",
    "methods": [
      "float GetSoundLength()"
    ]
  },
  "SoundWaveOnVehicle": {
    "parent": "Entity",
    "methods": []
  },
  "AmmoTypesAPI": {
    "parent": null,
    "methods": [
      "void AmmoTypesAPI()",
      "bool Exists(string ammoType)",
      "bool GetAmmoType(string magazineType, out string ammoType)",
      "static bool MagazineTypeToAmmoType(string magazineType, out string ammoType)",
      "static void Init()",
      "static void AddExplosionParticleEffect(string ammoName, string surfaceName, int particleID)",
      "static int GetExplosionParticleID(string ammoName, string surfaceName)",
      "static void Cleanup()"
    ]
  },
  "RaycastRVParams": {
    "parent": null,
    "methods": [
      "void RaycastRVParams( vector vBeg, vector vEnd, Object pIgnore = null, float fRadius = 0.0 )",
      "bool OnContact(IEntity other, Contact contact)",
      "void DayZPhysics()",
      "static bool RaycastRV(vector begPos, vector endPos, out vector contactPos, out vector contactDir, out int contactComponent,  set<Object> results = NULL, Object with = NULL, Object ignore = NULL,  bool sorted = false,  bool ground_only = false,  int iType = ObjIntersectView, float radius = 0.0, CollisionFlags flags = CollisionFlags.NEARESTCONTACT)",
      "static bool GetHitSurface(Object other, vector begPos, vector endPos, string surface)",
      "static bool GetHitSurfaceAndLiquid(Object other, vector begPos, vector endPos, string surface, out int liquidType)",
      "static bool RaycastRVProxy( notnull RaycastRVParams in, out notnull array< ref RaycastRVResult> results, array< Object > excluded = null )",
      "static bool RayCastBullet(vector begPos, vector endPos, PhxInteractionLayers layerMask, Object ignoreObj, out Object hitObject, out vector hitPosition, out vector hitNormal, out float hitFraction)",
      "static bool SphereCastBullet(vector begPos, vector endPos, float radius, PhxInteractionLayers layerMask, Object ignoreObj, out Object hitObject, out vector hitPosition, out vector hitNormal, out float hitFraction)",
      "static bool GeometryOverlapBullet(vector transform[4], dGeom geometry, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool EntityOverlapBullet(vector transform[4], IEntity entity, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool EntityOverlapSingleBullet(vector transform[4], IEntity entity, IEntity other, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool SphereOverlapBullet(vector position, float radius, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool CylinderOverlapBullet(vector transform[4], vector extents, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool CapsuleOverlapBullet(vector transform[4], float radius, float height, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool BoxOverlapBullet(vector transform[4], vector extents, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)"
    ]
  },
  "RaycastRVResult": {
    "parent": null,
    "methods": [
      "bool OnContact(IEntity other, Contact contact)",
      "void DayZPhysics()",
      "static bool RaycastRV(vector begPos, vector endPos, out vector contactPos, out vector contactDir, out int contactComponent,  set<Object> results = NULL, Object with = NULL, Object ignore = NULL,  bool sorted = false,  bool ground_only = false,  int iType = ObjIntersectView, float radius = 0.0, CollisionFlags flags = CollisionFlags.NEARESTCONTACT)",
      "static bool GetHitSurface(Object other, vector begPos, vector endPos, string surface)",
      "static bool GetHitSurfaceAndLiquid(Object other, vector begPos, vector endPos, string surface, out int liquidType)",
      "static bool RaycastRVProxy( notnull RaycastRVParams in, out notnull array< ref RaycastRVResult> results, array< Object > excluded = null )",
      "static bool RayCastBullet(vector begPos, vector endPos, PhxInteractionLayers layerMask, Object ignoreObj, out Object hitObject, out vector hitPosition, out vector hitNormal, out float hitFraction)",
      "static bool SphereCastBullet(vector begPos, vector endPos, float radius, PhxInteractionLayers layerMask, Object ignoreObj, out Object hitObject, out vector hitPosition, out vector hitNormal, out float hitFraction)",
      "static bool GeometryOverlapBullet(vector transform[4], dGeom geometry, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool EntityOverlapBullet(vector transform[4], IEntity entity, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool EntityOverlapSingleBullet(vector transform[4], IEntity entity, IEntity other, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool SphereOverlapBullet(vector position, float radius, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool CylinderOverlapBullet(vector transform[4], vector extents, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool CapsuleOverlapBullet(vector transform[4], float radius, float height, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool BoxOverlapBullet(vector transform[4], vector extents, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)"
    ]
  },
  "CollisionOverlapCallback": {
    "parent": null,
    "methods": [
      "bool OnContact(IEntity other, Contact contact)",
      "void DayZPhysics()",
      "static bool RaycastRV(vector begPos, vector endPos, out vector contactPos, out vector contactDir, out int contactComponent,  set<Object> results = NULL, Object with = NULL, Object ignore = NULL,  bool sorted = false,  bool ground_only = false,  int iType = ObjIntersectView, float radius = 0.0, CollisionFlags flags = CollisionFlags.NEARESTCONTACT)",
      "static bool GetHitSurface(Object other, vector begPos, vector endPos, string surface)",
      "static bool GetHitSurfaceAndLiquid(Object other, vector begPos, vector endPos, string surface, out int liquidType)",
      "static bool RaycastRVProxy( notnull RaycastRVParams in, out notnull array< ref RaycastRVResult> results, array< Object > excluded = null )",
      "static bool RayCastBullet(vector begPos, vector endPos, PhxInteractionLayers layerMask, Object ignoreObj, out Object hitObject, out vector hitPosition, out vector hitNormal, out float hitFraction)",
      "static bool SphereCastBullet(vector begPos, vector endPos, float radius, PhxInteractionLayers layerMask, Object ignoreObj, out Object hitObject, out vector hitPosition, out vector hitNormal, out float hitFraction)",
      "static bool GeometryOverlapBullet(vector transform[4], dGeom geometry, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool EntityOverlapBullet(vector transform[4], IEntity entity, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool EntityOverlapSingleBullet(vector transform[4], IEntity entity, IEntity other, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool SphereOverlapBullet(vector position, float radius, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool CylinderOverlapBullet(vector transform[4], vector extents, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool CapsuleOverlapBullet(vector transform[4], float radius, float height, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool BoxOverlapBullet(vector transform[4], vector extents, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)"
    ]
  },
  "DayZPhysics": {
    "parent": null,
    "methods": [
      "void DayZPhysics()",
      "static bool RaycastRV(vector begPos, vector endPos, out vector contactPos, out vector contactDir, out int contactComponent,  set<Object> results = NULL, Object with = NULL, Object ignore = NULL,  bool sorted = false,  bool ground_only = false,  int iType = ObjIntersectView, float radius = 0.0, CollisionFlags flags = CollisionFlags.NEARESTCONTACT)",
      "static bool GetHitSurface(Object other, vector begPos, vector endPos, string surface)",
      "static bool GetHitSurfaceAndLiquid(Object other, vector begPos, vector endPos, string surface, out int liquidType)",
      "static bool RaycastRVProxy( notnull RaycastRVParams in, out notnull array< ref RaycastRVResult> results, array< Object > excluded = null )",
      "static bool RayCastBullet(vector begPos, vector endPos, PhxInteractionLayers layerMask, Object ignoreObj, out Object hitObject, out vector hitPosition, out vector hitNormal, out float hitFraction)",
      "static bool SphereCastBullet(vector begPos, vector endPos, float radius, PhxInteractionLayers layerMask, Object ignoreObj, out Object hitObject, out vector hitPosition, out vector hitNormal, out float hitFraction)",
      "static bool GeometryOverlapBullet(vector transform[4], dGeom geometry, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool EntityOverlapBullet(vector transform[4], IEntity entity, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool EntityOverlapSingleBullet(vector transform[4], IEntity entity, IEntity other, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool SphereOverlapBullet(vector position, float radius, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool CylinderOverlapBullet(vector transform[4], vector extents, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool CapsuleOverlapBullet(vector transform[4], float radius, float height, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)",
      "static bool BoxOverlapBullet(vector transform[4], vector extents, PhxInteractionLayers layerMask, notnull CollisionOverlapCallback callback)"
    ]
  },
  "CGame": {
    "parent": null,
    "methods": [
      "void EnableEMPlugs(bool enable)",
      "void CGame()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnProcessLifetimeChanged(int plmtype)",
      "void OnLicenseChanged()",
      "void OnAfterCreate()",
      "void OnActivateMessage()",
      "void OnDeactivateMessage()",
      "bool OnInitialize()",
      "void OnDeviceReset()",
      "void OnUpdate(bool doSim, float timeslice)",
      "void OnPostUpdate(bool doSim, float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnRPC(PlayerIdentity sender, Object target, int rpc_type, ParamsReadContext ctx)",
      "void RequestExit( int code )",
      "void RequestRestart(int code)",
      "bool IsAppActive()",
      "bool GetHostAddress( out string address, out int port )",
      "string GetHostName()",
      "int Connect( UIScriptedMenu parent , string IpAddress, int port, string password )",
      "int ConnectLastSession( UIScriptedMenu parent , int selectedCharacter = -1 )",
      "void DisconnectSession()",
      "void DisconnectSessionForce()",
      "void GetProfileStringList(string name, out TStringArray values)",
      "bool GetProfileString(string name, out string value)",
      "void SetProfileStringList(string name, TStringArray values)",
      "void SetProfileString(string name, string value)",
      "void SaveProfile()",
      "void GetPlayerName(out string name)",
      "void GetPlayerNameShort(int maxLength, out string name)",
      "void SetPlayerName(string name)",
      "void SelectPlayer(PlayerIdentity identity, Object player)",
      "void GetPlayerNetworkIDByIdentityID( int playerIdentityID, out int networkIdLowBits, out int networkIdHightBits )",
      "bool RegisterNetworkStaticObject(Object object)",
      "bool IsNetworkInputBufferFull()",
      "void SelectSpectator(PlayerIdentity identity, string spectatorObjType, vector position)",
      "void UpdateSpectatorPosition(vector position)",
      "void SendLogoutTime(Object player, int time)",
      "void DisconnectPlayer(PlayerIdentity identity, string uid = )",
      "void AddToReconnectCache(PlayerIdentity identity)",
      "void RemoveFromReconnectCache(string uid)",
      "void ClearReconnectCache()",
      "void StorageVersion( int iVersion )",
      "int LoadVersion()",
      "int SaveVersion()",
      "float GetDayTime()",
      "bool ConfigGetText(string path, out string value)",
      "bool ConfigGetTextRaw(string path, out string value)",
      "string ConfigGetTextOut(string path)",
      "bool FormatRawConfigStringKeys(inout string value)",
      "string GetModelName(string class_name)",
      "float ConfigGetFloat(string path)",
      "int ConfigGetInt(string path)",
      "int ConfigGetType(string path)",
      "void ConfigGetTextArray(string path, out TStringArray values)",
      "void ConfigGetTextArrayRaw(string path, out TStringArray values)",
      "void ConfigGetFloatArray(string path, out TFloatArray values)",
      "void ConfigGetIntArray(string path, out TIntArray values)",
      "bool ConfigGetChildName(string path, int index, out string name)",
      "bool ConfigGetBaseName(string path, out string base_name)",
      "int ConfigGetChildrenCount(string path)",
      "bool ConfigIsExisting(string path)",
      "void ConfigGetFullPath(string path, out TStringArray full_path)",
      "void ConfigGetObjectFullPath(Object obj, out TStringArray full_path)",
      "void GetModInfos(notnull out array<ref ModInfo> modArray)",
      "bool GetModToBeReported()",
      "string ConfigPathToString(TStringArray array_path)",
      "bool CommandlineGetParam(string name, out string value)",
      "void CopyToClipboard(string text)",
      "void CopyFromClipboard(out string text)",
      "void BeginOptionsVideo()",
      "void EndOptionsVideo()",
      "void AdminLog(string text)",
      "bool PreloadObject( string type, float distance )",
      "void ObjectDelete( Object obj )",
      "void ObjectDeleteOnClient( Object obj )",
      "void RemoteObjectDelete( Object obj )",
      "void RemoteObjectTreeDelete( Object obj )",
      "void RemoteObjectCreate( Object obj )",
      "void RemoteObjectTreeCreate( Object obj )",
      "int ObjectRelease( Object obj )",
      "void ObjectGetType( Object obj, out string type )",
      "void ObjectGetDisplayName( Object obj, out string name )",
      "bool IsObjectAccesible(EntityAI item, Man player)",
      "void ReloadShape(Object obj)",
      "bool AddInventoryJuncture(Man player, notnull EntityAI item, InventoryLocation dst, bool test_dst_occupancy, int timeout_ms)",
      "bool AddInventoryJunctureEx(Man player, notnull EntityAI item, InventoryLocation dst, bool test_dst_occupancy, int timeout_ms)",
      "bool HasInventoryJunctureItem(notnull EntityAI item)",
      "bool HasInventoryJunctureDestination(Man player, notnull InventoryLocation dst)",
      "bool AddActionJuncture(Man player, notnull EntityAI item, int timeout_ms)",
      "bool ExtendActionJuncture(Man player, notnull EntityAI item, int timeout_ms)",
      "bool ClearJuncture(Man player, notnull EntityAI item)",
      "bool ClearJunctureEx(Man player, notnull EntityAI item)",
      "bool ExecuteEnforceScript(string expression, string mainFnName)",
      "void DumpInstances(bool csvFormatting)",
      "bool ScriptTest()",
      "void GetDiagModeNames(out TStringArray diag_names)",
      "void SetDiagModeEnable(int diag_mode, bool enabled)",
      "bool GetDiagModeEnable(int diag_mode)",
      "void GetDiagDrawModeNames(out TStringArray diag_names)",
      "void SetDiagDrawMode(int diag_draw_mode)",
      "int GetDiagDrawMode()",
      "bool IsPhysicsExtrapolationEnabled()",
      "float GetFps()",
      "float GetLastFPS()",
      "float GetAvgFPS(int nFrames = 64)",
      "float GetMinFPS(int nFrames = 64)",
      "float GetMaxFPS(int nFrames = 64)",
      "void GetFPSStats(out float min, out float max, out float avg, int nFrames = 64)",
      "float GetTickTime()",
      "void GetInventoryItemSize(InventoryItem item, out int width, out int height)",
      "void GetObjectsAtPosition(vector pos, float radius, out array<Object> objects, out array<CargoBase> proxyCargos)",
      "void GetObjectsAtPosition3D(vector pos, float radius, out array<Object> objects, out array<CargoBase> proxyCargos)",
      "void GetWorldName( out string world_name )",
      "string GetWorldName()",
      "bool VerifyWorldOwnership( string sWorldName )",
      "bool GoBuyWorldDLC( string sWorldName )",
      "void FormatString( string format, string params[], out string output)",
      "void GetVersion( out string version )",
      "void GetPlayers( out array<Man> players )",
      "void StoreLoginData(ParamsWriteContext ctx)",
      "void RPC(Object target, int rpcType, notnull array<ref Param> params, bool guaranteed,PlayerIdentity recipient = null)",
      "void RPCSingleParam(Object target, int rpc_type, Param param, bool guaranteed, PlayerIdentity recipient = null)",
      "void RPCSelf(Object target, int rpcType, notnull array<ref Param> params)",
      "void RPCSelfSingleParam(Object target, int rpcType, Param param)",
      "void ProfilerStart(string name)",
      "void ProfilerStop(string name)",
      "void Chat(string text, string colorClass)",
      "void ChatMP(Man recipient, string text, string colorClass)",
      "void ChatPlayer(string text)",
      "void MutePlayer(string muteUID, string playerUID, bool mute)",
      "void MuteAllPlayers(string listenerId, bool mute)",
      "void EnableVoN(Object player, bool enable)",
      "void SetVoiceEffect(Object player, int effect, bool enable)",
      "void SetVoiceLevel(int level)",
      "int GetVoiceLevel(Object player = null)",
      "void EnableMicCapture(bool enable)",
      "bool IsMicCapturing()",
      "bool IsInPartyChat()",
      "void SetMission(Mission mission)",
      "void StartRandomCutscene(string world)",
      "void PlayMission(string path)",
      "void CreateMission(string path)",
      "void RestartMission()",
      "void AbortMission()",
      "void RespawnPlayer()",
      "bool CanRespawnPlayer()",
      "void SetLoginTimerFinished()",
      "void SetMainMenuWorld(string world)",
      "string GetMainMenuWorld()",
      "void LogoutRequestTime()",
      "void LogoutRequestCancel()",
      "bool IsMultiplayer()",
      "bool IsClient()",
      "bool IsServer()",
      "bool IsDedicatedServer()",
      "int ServerConfigGetInt(string name)",
      "bool IsDebug()",
      "static bool IsDigitalCopy()",
      "void SetDebugMonitorEnabled(int value)",
      "bool IsDebugMonitor()",
      "void GetPlayerIndentities( out array<PlayerIdentity> identities )",
      "bool GetSurface(SurfaceDetectionParameters params, SurfaceDetectionResult result)",
      "float SurfaceY(float x, float z)",
      "float SurfaceRoadY(float x, float z, RoadSurfaceDetection rsd = RoadSurfaceDetection.LEGACY)",
      "float SurfaceRoadY3D(float x, float y, float z, RoadSurfaceDetection rsd)",
      "float SurfaceGetType(float x, float z, out string type)",
      "float SurfaceGetType3D(float x, float y, float z, out string type)",
      "void SurfaceUnderObject(notnull Object object, out string type, out int liquidType)",
      "void SurfaceUnderObjectEx(notnull Object object, out string type, out string impact, out int liquidType)",
      "void SurfaceUnderObjectByBone(notnull Object object, int boneType, out string type, out int liquidType)",
      "float SurfaceGetNoiseMultiplier(Object directHit, vector pos, int componentIndex)",
      "float SurfaceGetSeaLevelMin()",
      "float SurfaceGetSeaLevelMax()",
      "float SurfaceGetSeaLevel()",
      "bool SurfaceIsSea(float x, float z)",
      "bool SurfaceIsPond(float x, float z)",
      "float GetWaterDepth(vector posWS)",
      "void UpdatePathgraphRegion(vector regionMin, vector regionMax)",
      "float GetHighestSurfaceYDifference( array<vector> positions)",
      "bool IsSurfaceDigable(string surface)",
      "bool GetSurfaceDigPile(string surface, out string result)",
      "bool IsSurfaceFertile(string surface)",
      "int CorrectLiquidType(int liquidType)",
      "void SurfaceUnderObjectCorrectedLiquid(notnull Object object, out string type, out int liquidType)",
      "void SurfaceUnderObjectExCorrectedLiquid(notnull Object object, out string type, out string impact, out int liquidType)",
      "void SurfaceUnderObjectByBoneCorrectedLiquid(notnull Object object, int boneType, out string type, out int liquidType)",
      "void UpdatePathgraphRegionByObject(Object object)",
      "bool IsBoxColliding(vector center, vector orientation, vector edgeLength, array<Object> excludeObjects, array<Object> collidedObjects = NULL)",
      "bool IsBoxCollidingGeometry(vector center, vector orientation, vector edgeLength, int iPrimaryType, int iSecondaryType, array<Object> excludeObjects, array<Object> collidedObjects = NULL)",
      "bool IsBoxCollidingGeometryProxy(notnull BoxCollidingParams params, array<Object> excludeObjects, array<ref BoxCollidingResult> collidedObjects = NULL)",
      "void SetEVUser(float value)",
      "void OverrideDOF(bool enable, float focusDistance, float focusLength, float focusLengthNear, float blur, float focusDepthOffset)",
      "void AddPPMask(float ndcX, float ndcY, float ndcRadius, float ndcBlur)",
      "void ResetPPMask()",
      "void OverrideInventoryLights(vector diffuse, vector ambient, vector ground, vector dir)",
      "void NightVissionLightParams(float lightIntensityMul, float noiseIntensity)",
      "void OpenURL(string url)",
      "void InitDamageEffects(Object effect)",
      "bool IsKindOf(string cfg_class_name, string cfg_parent_name)",
      "bool ObjectIsKindOf(Object object, string cfg_parent_name)",
      "int ConfigFindClassIndex(string config_path, string searched_member)",
      "int GetTime()",
      "string CreateDefaultPlayer()",
      "string CreateRandomPlayer()",
      "bool IsInventoryOpen()",
      "bool IsMissionMainMenu()"
    ]
  },
  "PBOAPI": {
    "parent": null,
    "methods": [
      "string GetPBOVersion(string openName)"
    ]
  },
  "UUIDApi": {
    "parent": null,
    "methods": [
      "void Generate(inout int id[4])",
      "string FormatString(int id[4])"
    ]
  },
  "World": {
    "parent": null,
    "methods": [
      "void CheckSoundObstruction(EntityAI source,  bool inSource, out float obstruction, out float occlusion)",
      "void GetPlayerList(out array<Man> players)",
      "void SetTimeMultiplier(float timeMultiplier)",
      "void GetDate(out int year, out int month, out int day, out int hour, out int minute)",
      "void SetDate(int year, int month, int day, int hour, int minute)",
      "float GetLatitude()",
      "float GetLongitude()",
      "float GetMoonIntensity()",
      "float GetSunOrMoon()",
      "bool IsNight()",
      "float GetEyeAccom()",
      "void SetEyeAccom(float eyeAccom)",
      "void StartFpsBenchmark(int sectorsCount, float preloadDistance, float fpsLimitRed, float fpsLimitGreen, float fpsLimitBlue, float minX, float minY, float maxX, float maxY)",
      "void StartFpsBenchmarkWithMask(float preloadDistance, float fpsLimitRed, float fpsLimitGreen, float fpsLimitBlue)",
      "void StartFpsBenchmarkViews(string xmlFileName, float preloadDistance)",
      "void SetBuldozerWaterEnabled(bool enable)",
      "void SetPreferredViewDistance(float distance)",
      "void SetViewDistance(float distance)",
      "void SetObjectViewDistance(float distance)",
      "void SetExplicitVolumeFactor_EnvSounds2D(float factor, float fadeTime)",
      "void AddEnvShootingSource(vector position, float shootingValDecrease)",
      "int GetWorldSize()",
      "void GetGridCoords(vector pos, float gridSize, out int gridX, out int gridZ)",
      "void LoadNewLightingCfg(string path)",
      "void LoadUserLightingCfg(string path, string name)",
      "void SetUserLightingLerp(float val)",
      "void UpdatePathgraphDoorByAnimationSourceName(notnull Object object, string animSourceName)",
      "void MarkObjectForPathgraphUpdate(Object object)",
      "void ProcessMarkedObjectsForPathgraphUpdate()",
      "void SetCameraPostProcessEffect(int cam, int ppEffect, string effectName, string materialName)",
      "void SetAperture(float invDiameter)",
      "bool Is3rdPersonDisabled()",
      "bool IsCrosshairDisabled()",
      "bool IsMouseAndKeyboardEnabledOnServer()",
      "int GetPingWarningThreshold()",
      "int GetPingCriticalThreshold()",
      "float GetServerFpsWarningThreshold()",
      "float GetServerFpsCriticalThreshold()",
      "void DisableTransmitVoN(bool disable)",
      "bool DisableReceiveVoN(bool disable)",
      "bool IsDisabledTransmitingVoN()",
      "bool IsDisabledReceivingVoN()",
      "void SetVoiceOn(bool listening, bool toggled = false)",
      "void FlattenGrassSphere(float x, float z, float radius, float centerLerp01, float timeDown01, float maxHeight01)",
      "void FlattenGrassEllipse(float x, float z, float sideX, float sideZ, float offset, float angleRAD, float centerLerp01, float timeDown01, float maxHeight01)",
      "void FlattenGrassBox(float x, float z, float side, float angleRAD, float centerLerp01, float timeDown01, float maxHeight01)",
      "void FlattenGrassRect(float x, float z, float sideX, float sideZ, float offset, float angleRAD, float centerLerp01, float timeDown01, float maxHeight01)"
    ]
  },
  "EmbededButtonScript": {
    "parent": null,
    "methods": [
      "void OnWidgetScriptInit(Widget w)"
    ]
  },
  "InventoryGridController": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void OnItemEnter(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemLeave(InventoryGrid grid, Widget w)",
      "void OnItemDrag(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemDraggingOver(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemDrop(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemDropReceived(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemClick(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemLeftClick(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemRightClick(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemDoubleClick(InventoryGrid grid, Widget w, int row, int col)",
      "int GetItemColor(ScriptedWidgetEventHandler grid, InventoryItem item)",
      "int GetQuickbarItemColor(InventoryGrid grid, InventoryItem item)",
      "string GetItemQuantityText( InventoryItem item )",
      "int HasItemQuantity( InventoryItem item )",
      "float GetItemQuantity( InventoryItem item )",
      "int GetItemQuantityMax( InventoryItem item )",
      "int GetItemCount( InventoryItem item )",
      "bool CanAddItemInHandToInventory()",
      "void InventoryGrid()",
      "void OnWidgetScriptInit(Widget w)",
      "bool OnUpdate(Widget w)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "int GetCol( Widget w )",
      "int GetColFromBg( Widget w )",
      "int GetGridSize()",
      "void SetGridSize( int size )",
      "bool IsValidPos( int index )",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "void SetItemColor(InventoryItem item, int color)",
      "void SetController(InventoryGridController controller)",
      "void GenerateQuickBarBackgroundTiles(int count)",
      "void UpdateQuickbarItems( TItemsMap items )",
      "void UpdateItems(TItemsMap items, bool show_quantity, bool show_temperature )",
      "void UpdateQuantityItems()",
      "void UpdateTemperatureItems()",
      "void RefreshQuickbarItemVariables(InventoryItem item, vector data)",
      "void RefreshItemVariables(InventoryItem item, vector data, bool show_quantity, bool show_temperature )",
      "void AddItem(InventoryItem item, vector data, vector rotation)",
      "void SetItem(InventoryItem item, vector data, vector rotation)",
      "void ResetItemWidget(Widget item_w, int width, int height)",
      "void ResetItem(InventoryItem item)",
      "bool HasItem(InventoryItem item)",
      "void RemoveItem(InventoryItem item)"
    ]
  },
  "InventoryGrid": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void InventoryGrid()",
      "void OnWidgetScriptInit(Widget w)",
      "bool CanAddItemInHandToInventory()",
      "bool OnUpdate(Widget w)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "int GetCol( Widget w )",
      "int GetColFromBg( Widget w )",
      "int GetGridSize()",
      "void SetGridSize( int size )",
      "bool IsValidPos( int index )",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "void SetItemColor(InventoryItem item, int color)",
      "void SetController(InventoryGridController controller)",
      "void GenerateQuickBarBackgroundTiles(int count)",
      "void UpdateQuickbarItems( TItemsMap items )",
      "void UpdateItems(TItemsMap items, bool show_quantity, bool show_temperature )",
      "void UpdateQuantityItems()",
      "void UpdateTemperatureItems()",
      "void RefreshQuickbarItemVariables(InventoryItem item, vector data)",
      "void RefreshItemVariables(InventoryItem item, vector data, bool show_quantity, bool show_temperature )",
      "void AddItem(InventoryItem item, vector data, vector rotation)",
      "void SetItem(InventoryItem item, vector data, vector rotation)",
      "void ResetItemWidget(Widget item_w, int width, int height)",
      "void ResetItem(InventoryItem item)",
      "bool HasItem(InventoryItem item)",
      "void RemoveItem(InventoryItem item)"
    ]
  },
  "Tabber": {
    "parent": null,
    "methods": [
      "void OnWidgetScriptInit(Widget w)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SelectTab(int index)"
    ]
  },
  "WidgetLayoutName": {
    "parent": null,
    "methods": []
  },
  "Hive": {
    "parent": null,
    "methods": [
      "void Hive()",
      "void InitOnline( string ceSetup, string host =  )",
      "void InitOffline()",
      "void InitSandbox()",
      "bool IsIdleMode()",
      "void SetShardID( string shard )",
      "void SetEnviroment( string env )",
      "void CharacterSave( Man player )",
      "void CharacterKill( Man player )",
      "void CharacterExit( Man player )",
      "void CallUpdater( string content )",
      "bool CharacterIsLoginPositionChanged( Man player )",
      "void DestroyHive()"
    ]
  },
  "BackendApi": {
    "parent": null,
    "methods": [
      "void BackendApi()",
      "bool Initiate()",
      "bool Shutdown()",
      "bool IsDisconnected()",
      "bool IsRuntime()",
      "bool IsBusy()",
      "string GetErrorCode( int code )",
      "void OnCannotInitiate( int code )",
      "void OnCannotShutdown( int code )",
      "void OnSuccess( string step )",
      "void OnFail( string step )",
      "void Request( int request, BackendCallback cb, JsonApiStruct dataObject )",
      "void PlayerRequest( int request, BackendCallback cb, JsonApiStruct dataObject, int iPlayerId )",
      "void FeedbackMessage( BackendCallback cb, JsonApiStruct dataObject, string message )",
      "void SetCredentialsItem( EBackendCredentials item, string str )",
      "string GetCredentialsItem( EBackendCredentials item )",
      "void VerifyCredentials()"
    ]
  },
  "JsonApiHandle": {
    "parent": null,
    "methods": [
      "void JsonApiHandle()",
      "int Size()",
      "string AsString()",
      "void Invalidate()",
      "void JsonApi()",
      "void SetBuffers( int iBufferCount )",
      "int BufferCount()",
      "int BufferMax()",
      "void DebugList()",
      "void DestroyJsonApi()"
    ]
  },
  "JsonApi": {
    "parent": null,
    "methods": [
      "void JsonApi()",
      "void SetBuffers( int iBufferCount )",
      "int BufferCount()",
      "int BufferMax()",
      "void DebugList()",
      "void DestroyJsonApi()"
    ]
  },
  "JsonApiStruct": {
    "parent": null,
    "methods": [
      "void JsonApiStruct()",
      "void OnExpand()",
      "void OnPack()",
      "void OnBufferReady()",
      "void OnSuccess( int errorCode )",
      "void OnError( int errorCode )",
      "void OnObject( string name )",
      "void OnInteger( string name, int value )",
      "void OnFloat( string name, float value )",
      "void OnBoolean( string name, bool value )",
      "void OnString( string name, string value )",
      "void OnVector( string name, vector value )",
      "void OnStartArray( string name )",
      "void OnEndArray( int itemCount )",
      "void OnItemObject( int index, string name )",
      "void OnItemInteger( int index, int value )",
      "void OnItemFloat( int index, float value )",
      "void OnItemBoolean( int index, bool value )",
      "void OnItemString( int index, string value )",
      "void OnItemVector( int index, vector value )",
      "void RegV( string name )",
      "void Push( JsonApiStruct obj )",
      "void StartObject( string name )",
      "void EndObject()",
      "void StoreObject( string name, JsonApiStruct obj )",
      "void StoreFloat( string name, float value )",
      "void StoreInteger( string name, int value )",
      "void StoreBoolean( string name, bool value )",
      "void StoreString( string name, string value )",
      "void StoreVector( string name, vector value )",
      "void StartArray( string name )",
      "void EndArray()",
      "void ItemObject( JsonApiStruct obj )",
      "void ItemFloat( float value )",
      "void ItemInteger( int value )",
      "void ItemBoolean( bool value )",
      "void ItemString( string value )",
      "void ItemVector( vector value )",
      "void SetDone()",
      "void SetFail()",
      "void Pack()",
      "void InstantPack()",
      "void ExpandFromRAW( string data )",
      "string AsString()",
      "bool PackToFile( string FileName )",
      "bool SaveToFile( string FileName )",
      "bool LoadFromFile( string FileName )"
    ]
  },
  "RestCallback": {
    "parent": null,
    "methods": [
      "void OnError( int errorCode )",
      "void OnTimeout()",
      "void OnSuccess( string data, int dataSize )",
      "void OnFileCreated( string fileName, int dataSize )",
      "void RestContext()",
      "int GET( RestCallback cb, string request )",
      "string GET_now( string request )",
      "int FILE( RestCallback cb, string request, string filename )",
      "int FILE_now( string request, string filename )",
      "int POST( RestCallback cb, string request, string data )",
      "string POST_now( string request, string data )",
      "void reset()",
      "void SetHeader( string value )",
      "void RestApi()",
      "int GetContextCount()",
      "void EnableDebug( bool bEnable )",
      "void DebugList()",
      "void SetOption( int option, int value )",
      "void DestroyRestApi()"
    ]
  },
  "RestContext": {
    "parent": null,
    "methods": [
      "void RestContext()",
      "int GET( RestCallback cb, string request )",
      "string GET_now( string request )",
      "int FILE( RestCallback cb, string request, string filename )",
      "int FILE_now( string request, string filename )",
      "int POST( RestCallback cb, string request, string data )",
      "string POST_now( string request, string data )",
      "void reset()",
      "void SetHeader( string value )",
      "void RestApi()",
      "int GetContextCount()",
      "void EnableDebug( bool bEnable )",
      "void DebugList()",
      "void SetOption( int option, int value )",
      "void DestroyRestApi()"
    ]
  },
  "RestApi": {
    "parent": null,
    "methods": [
      "void RestApi()",
      "int GetContextCount()",
      "void EnableDebug( bool bEnable )",
      "void DebugList()",
      "void SetOption( int option, int value )",
      "void DestroyRestApi()"
    ]
  },
  "UAIDWrapper": {
    "parent": null,
    "methods": [
      "void UAIDWrapper()",
      "int ID()",
      "int NameHash()",
      "int BindingCount()",
      "int Binding( int iIndex )",
      "void ClearBinding()",
      "void BindCombo( string sButtonName )",
      "void BindComboByHash( int iHash )",
      "void AddAlternative()",
      "void ClearAlternative( int iIndex )",
      "void SelectAlternative( int iIndex )",
      "int AlternativeCount()",
      "int AlternativeIndex()",
      "void ClearDeviceBind( int iDeviceFlags )",
      "int BindKeyCount()",
      "int GetBindKey( int iIndex )",
      "int GetBindDevice( int iIndex )",
      "bool CheckBindDevice( int iIndex, int iDeviceFlags )",
      "float LocalValue()",
      "bool LocalPress()",
      "bool LocalRelease()",
      "bool LocalHold()",
      "bool LocalHoldBegin()",
      "bool LocalDoubleClick()",
      "bool LocalClick()",
      "bool IsCombo()",
      "bool IsLimited()",
      "bool IsLimitConditionActive()",
      "bool IsPressLimit()",
      "bool IsReleaseLimit()",
      "bool IsHoldLimit()",
      "bool IsHoldBeginLimit()",
      "bool IsClickLimit()",
      "bool IsDoubleClickLimit()",
      "bool HasSorting( int iIndex )",
      "void Supress()",
      "bool IsLocked()",
      "void Lock()",
      "void Unlock()",
      "int ConflictCount()",
      "void ForceEnable( bool bEnable )",
      "void ForceDisable( bool bEnable )",
      "void Backlit_Override( int eType, int iColor )",
      "bool Backlit_Enabled()",
      "void UAInput()",
      "void UAInterface()",
      "float SyncedValue_ID(int action, bool check_focus = true)",
      "float SyncedValue(string action, bool check_focus = true)",
      "bool SyncedPress_ID(int action, bool check_focus = true)",
      "bool SyncedPress(string action, bool check_focus = true)",
      "bool SyncedRelease_ID(int action, bool check_focus = true)",
      "bool SyncedRelease(string action, bool check_focus = true)",
      "bool SyncedHold_ID(int action, bool check_focus = true)",
      "bool SyncedHold(string action, bool check_focus = true)",
      "bool SyncedDbl_ID(int action, bool check_focus = true)",
      "bool SyncedDbl(string action, bool check_focus = true)",
      "bool SyncedClick_ID(int action, bool check_focus = true)",
      "bool SyncedClick(string action, bool check_focus = true)",
      "void UAInputAPI()",
      "void ListCurrentProfile()",
      "void ListCurrentPreset()",
      "void ListAvailableButtons()",
      "void ListActiveGroup()",
      "void GetActiveInputs( out TIntArray items )",
      "string GetButtonName( int iHash )",
      "string GetButtonIcon( int iHash )",
      "int ModificatorCount()",
      "string GetModificatorName( int index )",
      "int DeterminePressedButton()",
      "int DeterminedCount()",
      "int GetDetermined( int iIndex )",
      "void DeRegisterInput( string sInputName )",
      "void RegisterGroup( string sGroupName, string sLoc )",
      "void DeRegisterGroup( string sGroupName )",
      "void UpdateControls()",
      "void ActivateGroup( string sGroupName )",
      "void ActivateExclude( string sExcludeName )",
      "void ActivateContext( string sContextName )",
      "void ActivateModificator( string sModName )",
      "void DeactivateModificator( string sModName )",
      "void DeactivateContext()",
      "bool PresetCreateNew()",
      "bool PresetDelete( int index )",
      "int PresetCurrent()",
      "void PresetSelect( int index )",
      "void PresetReset()",
      "int PresetCount()",
      "string PresetName( int index )",
      "int SortingCount()",
      "string SortingName( int index )",
      "string SortingLocalization( int index )",
      "void Export()",
      "void Revert()",
      "void SaveInputPresetMiscData()",
      "void SupressNextFrame( bool bForce)",
      "void Backlit_None()",
      "void Backlit_Background( int eType, int iColor1, int iColor2 )",
      "void Backlit_Animation( string strName, float fLifeTime, int iColor1, int iColor2 )",
      "void Backlit_KeyByHash( int uHash, int eLayer, int eType, int iColor )",
      "void Backlit_KeyByName( string strName, int eLayer, int eType, int iColor )",
      "void Backlit_Remove( int eLayer )",
      "void Backlit_ForceUpdate()",
      "void Backlit_EmptyQueue()"
    ]
  },
  "UAInput": {
    "parent": null,
    "methods": [
      "int ID()",
      "int NameHash()",
      "int BindingCount()",
      "int Binding( int iIndex )",
      "void ClearBinding()",
      "void BindCombo( string sButtonName )",
      "void BindComboByHash( int iHash )",
      "void AddAlternative()",
      "void ClearAlternative( int iIndex )",
      "void SelectAlternative( int iIndex )",
      "int AlternativeCount()",
      "int AlternativeIndex()",
      "void ClearDeviceBind( int iDeviceFlags )",
      "int BindKeyCount()",
      "int GetBindKey( int iIndex )",
      "int GetBindDevice( int iIndex )",
      "bool CheckBindDevice( int iIndex, int iDeviceFlags )",
      "float LocalValue()",
      "bool LocalPress()",
      "bool LocalRelease()",
      "bool LocalHold()",
      "bool LocalHoldBegin()",
      "bool LocalDoubleClick()",
      "bool LocalClick()",
      "bool IsCombo()",
      "bool IsLimited()",
      "bool IsLimitConditionActive()",
      "bool IsPressLimit()",
      "bool IsReleaseLimit()",
      "bool IsHoldLimit()",
      "bool IsHoldBeginLimit()",
      "bool IsClickLimit()",
      "bool IsDoubleClickLimit()",
      "bool HasSorting( int iIndex )",
      "void Supress()",
      "bool IsLocked()",
      "void Lock()",
      "void Unlock()",
      "int ConflictCount()",
      "void ForceEnable( bool bEnable )",
      "void ForceDisable( bool bEnable )",
      "void Backlit_Override( int eType, int iColor )",
      "bool Backlit_Enabled()",
      "void UAInput()",
      "void UAInterface()",
      "float SyncedValue_ID(int action, bool check_focus = true)",
      "float SyncedValue(string action, bool check_focus = true)",
      "bool SyncedPress_ID(int action, bool check_focus = true)",
      "bool SyncedPress(string action, bool check_focus = true)",
      "bool SyncedRelease_ID(int action, bool check_focus = true)",
      "bool SyncedRelease(string action, bool check_focus = true)",
      "bool SyncedHold_ID(int action, bool check_focus = true)",
      "bool SyncedHold(string action, bool check_focus = true)",
      "bool SyncedDbl_ID(int action, bool check_focus = true)",
      "bool SyncedDbl(string action, bool check_focus = true)",
      "bool SyncedClick_ID(int action, bool check_focus = true)",
      "bool SyncedClick(string action, bool check_focus = true)",
      "void UAInputAPI()",
      "void ListCurrentProfile()",
      "void ListCurrentPreset()",
      "void ListAvailableButtons()",
      "void ListActiveGroup()",
      "void GetActiveInputs( out TIntArray items )",
      "string GetButtonName( int iHash )",
      "string GetButtonIcon( int iHash )",
      "int ModificatorCount()",
      "string GetModificatorName( int index )",
      "int DeterminePressedButton()",
      "int DeterminedCount()",
      "int GetDetermined( int iIndex )",
      "void DeRegisterInput( string sInputName )",
      "void RegisterGroup( string sGroupName, string sLoc )",
      "void DeRegisterGroup( string sGroupName )",
      "void UpdateControls()",
      "void ActivateGroup( string sGroupName )",
      "void ActivateExclude( string sExcludeName )",
      "void ActivateContext( string sContextName )",
      "void ActivateModificator( string sModName )",
      "void DeactivateModificator( string sModName )",
      "void DeactivateContext()",
      "bool PresetCreateNew()",
      "bool PresetDelete( int index )",
      "int PresetCurrent()",
      "void PresetSelect( int index )",
      "void PresetReset()",
      "int PresetCount()",
      "string PresetName( int index )",
      "int SortingCount()",
      "string SortingName( int index )",
      "string SortingLocalization( int index )",
      "void Export()",
      "void Revert()",
      "void SaveInputPresetMiscData()",
      "void SupressNextFrame( bool bForce)",
      "void Backlit_None()",
      "void Backlit_Background( int eType, int iColor1, int iColor2 )",
      "void Backlit_Animation( string strName, float fLifeTime, int iColor1, int iColor2 )",
      "void Backlit_KeyByHash( int uHash, int eLayer, int eType, int iColor )",
      "void Backlit_KeyByName( string strName, int eLayer, int eType, int iColor )",
      "void Backlit_Remove( int eLayer )",
      "void Backlit_ForceUpdate()",
      "void Backlit_EmptyQueue()"
    ]
  },
  "UAInterface": {
    "parent": null,
    "methods": [
      "void UAInterface()",
      "float SyncedValue_ID(int action, bool check_focus = true)",
      "float SyncedValue(string action, bool check_focus = true)",
      "bool SyncedPress_ID(int action, bool check_focus = true)",
      "bool SyncedPress(string action, bool check_focus = true)",
      "bool SyncedRelease_ID(int action, bool check_focus = true)",
      "bool SyncedRelease(string action, bool check_focus = true)",
      "bool SyncedHold_ID(int action, bool check_focus = true)",
      "bool SyncedHold(string action, bool check_focus = true)",
      "bool SyncedDbl_ID(int action, bool check_focus = true)",
      "bool SyncedDbl(string action, bool check_focus = true)",
      "bool SyncedClick_ID(int action, bool check_focus = true)",
      "bool SyncedClick(string action, bool check_focus = true)",
      "void UAInputAPI()",
      "void ListCurrentProfile()",
      "void ListCurrentPreset()",
      "void ListAvailableButtons()",
      "void ListActiveGroup()",
      "void GetActiveInputs( out TIntArray items )",
      "string GetButtonName( int iHash )",
      "string GetButtonIcon( int iHash )",
      "int ModificatorCount()",
      "string GetModificatorName( int index )",
      "int DeterminePressedButton()",
      "int DeterminedCount()",
      "int GetDetermined( int iIndex )",
      "void DeRegisterInput( string sInputName )",
      "void RegisterGroup( string sGroupName, string sLoc )",
      "void DeRegisterGroup( string sGroupName )",
      "void UpdateControls()",
      "void ActivateGroup( string sGroupName )",
      "void ActivateExclude( string sExcludeName )",
      "void ActivateContext( string sContextName )",
      "void ActivateModificator( string sModName )",
      "void DeactivateModificator( string sModName )",
      "void DeactivateContext()",
      "bool PresetCreateNew()",
      "bool PresetDelete( int index )",
      "int PresetCurrent()",
      "void PresetSelect( int index )",
      "void PresetReset()",
      "int PresetCount()",
      "string PresetName( int index )",
      "int SortingCount()",
      "string SortingName( int index )",
      "string SortingLocalization( int index )",
      "void Export()",
      "void Revert()",
      "void SaveInputPresetMiscData()",
      "void SupressNextFrame( bool bForce)",
      "void Backlit_None()",
      "void Backlit_Background( int eType, int iColor1, int iColor2 )",
      "void Backlit_Animation( string strName, float fLifeTime, int iColor1, int iColor2 )",
      "bool Backlit_Enabled()",
      "void Backlit_KeyByHash( int uHash, int eLayer, int eType, int iColor )",
      "void Backlit_KeyByName( string strName, int eLayer, int eType, int iColor )",
      "void Backlit_Remove( int eLayer )",
      "void Backlit_ForceUpdate()",
      "void Backlit_EmptyQueue()"
    ]
  },
  "UAInputAPI": {
    "parent": null,
    "methods": [
      "void UAInputAPI()",
      "void ListCurrentProfile()",
      "void ListCurrentPreset()",
      "void ListAvailableButtons()",
      "void ListActiveGroup()",
      "void GetActiveInputs( out TIntArray items )",
      "string GetButtonName( int iHash )",
      "string GetButtonIcon( int iHash )",
      "int ModificatorCount()",
      "string GetModificatorName( int index )",
      "int DeterminePressedButton()",
      "int DeterminedCount()",
      "int GetDetermined( int iIndex )",
      "void DeRegisterInput( string sInputName )",
      "void RegisterGroup( string sGroupName, string sLoc )",
      "void DeRegisterGroup( string sGroupName )",
      "void UpdateControls()",
      "void ActivateGroup( string sGroupName )",
      "void ActivateExclude( string sExcludeName )",
      "void ActivateContext( string sContextName )",
      "void ActivateModificator( string sModName )",
      "void DeactivateModificator( string sModName )",
      "void DeactivateContext()",
      "bool PresetCreateNew()",
      "bool PresetDelete( int index )",
      "int PresetCurrent()",
      "void PresetSelect( int index )",
      "void PresetReset()",
      "int PresetCount()",
      "string PresetName( int index )",
      "int SortingCount()",
      "string SortingName( int index )",
      "string SortingLocalization( int index )",
      "void Export()",
      "void Revert()",
      "void SaveInputPresetMiscData()",
      "void SupressNextFrame( bool bForce)",
      "void Backlit_None()",
      "void Backlit_Background( int eType, int iColor1, int iColor2 )",
      "void Backlit_Animation( string strName, float fLifeTime, int iColor1, int iColor2 )",
      "bool Backlit_Enabled()",
      "void Backlit_KeyByHash( int uHash, int eLayer, int eType, int iColor )",
      "void Backlit_KeyByName( string strName, int eLayer, int eType, int iColor )",
      "void Backlit_Remove( int eLayer )",
      "void Backlit_ForceUpdate()",
      "void Backlit_EmptyQueue()"
    ]
  },
  "Particle": {
    "parent": null,
    "methods": [
      "void Particle()",
      "void ParticleInit()",
      "void PlayParticle(int particle_id = -1)",
      "bool PlayParticleEx(int particle_id = -1, int flags = 0)",
      "void Play(int particle_id = -1)",
      "bool StopParticle(int flags = 0)",
      "void Stop()",
      "void SetSource(int particle_id)",
      "int GetParticleID()",
      "bool HasActiveParticle()",
      "int GetParticleCount()",
      "bool IsRepeat()",
      "float GetMaxLifetime()",
      "void UpdateState()",
      "void CreateParticleEffect()",
      "void DestroyParticleEffect()",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void OnCheckAutoDelete()",
      "void OnToDelete()",
      "void AddAsChild(Object parent, vector local_pos = , vector local_ori = , bool force_rotation_to_world = false)",
      "void SetParticleParam(int parameter_id, float value )",
      "void SetParameter(int emitter, int parameter, float value)",
      "void GetParameter(int emitter, int parameter, out float value)",
      "float GetParameterEx(int emitter, int parameter)",
      "float GetParameterOriginal(int emitter, int parameter)",
      "void ScaleParticleParamFromOriginal(int parameter_id, float coef )",
      "void ScaleParticleParam(int parameter_id, float coef )",
      "void IncrementParticleParamFromOriginal(int parameter_id, float value )",
      "void IncrementParticleParam(int parameter_id, float value )",
      "bool IsWiggling()",
      "void SetWiggle(float random_angle, float random_interval)",
      "void StopWiggle()",
      "void RandomizeOrientation()",
      "float RandWiggleFloat()"
    ]
  },
  "ParticleEvents": {
    "parent": null,
    "methods": [
      "void ParticleBase()",
      "bool IsParticle()",
      "void PlayParticle(int particle_id = -1)",
      "bool PlayParticleEx(int particle_id = -1, int flags = 0)",
      "bool StopParticle(int flags = 0)",
      "bool ResetParticle()",
      "bool RestartParticle()",
      "bool IsParticlePlaying()",
      "void OnParticleStart()",
      "void OnParticleStop()",
      "void OnParticleReset()",
      "void OnParticleEnd()",
      "void OnParticleparented(IEntity parent)",
      "void OnParticleUnparented(IEntity parent)"
    ]
  },
  "ParticleBase": {
    "parent": null,
    "methods": [
      "void ParticleBase()",
      "bool IsParticle()",
      "void PlayParticle(int particle_id = -1)",
      "bool PlayParticleEx(int particle_id = -1, int flags = 0)",
      "bool StopParticle(int flags = 0)",
      "bool ResetParticle()",
      "bool RestartParticle()",
      "bool IsParticlePlaying()",
      "void OnParticleStart()",
      "void OnParticleStop()",
      "void OnParticleReset()",
      "void OnParticleEnd()",
      "void OnParticleparented(IEntity parent)",
      "void OnParticleUnparented(IEntity parent)"
    ]
  },
  "ParticleList": {
    "parent": null,
    "methods": [
      "static int RegisterParticle(string file_name)",
      "static int RegisterParticleByFullPath(string fullPath)",
      "static int RegisterParticle(string root_path, string file_name)",
      "static int GetRegisteredParticlesCount()",
      "static bool IsValidId(int id)",
      "static string GetParticlePath(int particle_id)",
      "static string GetParticleFullPath(int particle_id)",
      "static int GetParticleID(string particle_file)",
      "static int GetParticleIDByName(string name)",
      "static string GetPathToParticles()",
      "static void PreloadParticles()"
    ]
  },
  "PPEConstants": {
    "parent": null,
    "methods": []
  },
  "PPEManagerStatic": {
    "parent": null,
    "methods": [
      "static void CreateManagerStatic()",
      "static void DestroyManagerStatic()",
      "void PPEManager()",
      "void Cleanup()",
      "void Init()",
      "void InitPPEManagerClassMap()",
      "void RegisterPPEClass(PPEClassBase material_class)",
      "void SendMaterialValueData(PPERequestParamDataBase data)",
      "void SetMaterialParamUpdating(int material_id, int parameter_id, int order)",
      "void RemoveMaterialUpdating(int material_id, int order = 0)",
      "void ClearMaterialUpdating()",
      "void SetRequestActive(PPERequesterBase request, bool active)",
      "void SetRequestUpdating(PPERequesterBase request, bool active)",
      "bool GetExistingRequester(typename req, out PPERequesterBase ret)",
      "bool IsAnyRequesterRunning(array<typename> requesters)",
      "void RemoveActiveRequestFromMaterials(PPERequesterBase req)",
      "void RequestsCleanup()",
      "void InsertUpdatedMaterial(int mat_id)",
      "void ProcessRequesterUpdates(float timeslice)",
      "void ProcessMaterialUpdates(float timeslice)",
      "void ProcessApplyValueChanges()",
      "void Update(float timeslice)",
      "void ChangePPEMaterial(PostProcessPrioritiesCamera priority, PostProcessEffectType type, string path, bool scriptside_only)",
      "void StopAllEffects(int mask = 0)",
      "void DbgPrnt(string text)"
    ]
  },
  "PPEManager": {
    "parent": "Managed",
    "methods": [
      "void PPEManager()",
      "void Cleanup()",
      "void Init()",
      "void InitPPEManagerClassMap()",
      "void RegisterPPEClass(PPEClassBase material_class)",
      "void SendMaterialValueData(PPERequestParamDataBase data)",
      "void SetMaterialParamUpdating(int material_id, int parameter_id, int order)",
      "void RemoveMaterialUpdating(int material_id, int order = 0)",
      "void ClearMaterialUpdating()",
      "void SetRequestActive(PPERequesterBase request, bool active)",
      "void SetRequestUpdating(PPERequesterBase request, bool active)",
      "bool GetExistingRequester(typename req, out PPERequesterBase ret)",
      "bool IsAnyRequesterRunning(array<typename> requesters)",
      "void RemoveActiveRequestFromMaterials(PPERequesterBase req)",
      "void RequestsCleanup()",
      "void InsertUpdatedMaterial(int mat_id)",
      "void ProcessRequesterUpdates(float timeslice)",
      "void ProcessMaterialUpdates(float timeslice)",
      "void ProcessApplyValueChanges()",
      "void Update(float timeslice)",
      "void ChangePPEMaterial(PostProcessPrioritiesCamera priority, PostProcessEffectType type, string path, bool scriptside_only)",
      "void StopAllEffects(int mask = 0)",
      "void DbgPrnt(string text)"
    ]
  },
  "PPERequestParamDataBase": {
    "parent": null,
    "methods": [
      "void PPERequestParamDataBase(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET)",
      "void InitValues()",
      "void SetUpdatingDataValues(bool state)",
      "bool GetUpdatingDataValues()",
      "void SetDataActive(bool state)",
      "bool IsDataActive()",
      "void SetSettingDefaultValues(bool state)",
      "bool IsSettingDefaultValues()",
      "int GetRequesterIDX()",
      "int GetMaterialID()",
      "int GetParameterID()",
      "int GetVarType()",
      "void SetInteractionMask(int mask)",
      "int GetInteractionMask()",
      "void SetPriorityLayer(int priority)",
      "int GetPriorityLayer()",
      "void PPERequestParamDataBool(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void PPERequestParamDataInt(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void PPERequestParamDataFloat(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void PPERequestParamDataColor(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )"
    ]
  },
  "PPERequestParamDataBool": {
    "parent": "PPERequestParamDataBase",
    "methods": [
      "void PPERequestParamDataBool(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void PPERequestParamDataInt(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void PPERequestParamDataFloat(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void InitValues()",
      "void PPERequestParamDataColor(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )"
    ]
  },
  "PPERequestParamDataInt": {
    "parent": "PPERequestParamDataBase",
    "methods": [
      "void PPERequestParamDataInt(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void PPERequestParamDataFloat(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void InitValues()",
      "void PPERequestParamDataColor(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )"
    ]
  },
  "PPERequestParamDataFloat": {
    "parent": "PPERequestParamDataBase",
    "methods": [
      "void PPERequestParamDataFloat(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void InitValues()",
      "void PPERequestParamDataColor(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )"
    ]
  },
  "PPERequestParamDataColor": {
    "parent": "PPERequestParamDataBase",
    "methods": [
      "void PPERequestParamDataColor(int requester_idx, int mat_id, int param_id, int data_type = 0, int priority = 0, int mask = PPOperators.SET, bool relative = false )",
      "void InitValues()"
    ]
  },
  "PPERequestParamDataVector": {
    "parent": "PPERequestParamDataBase",
    "methods": []
  },
  "PPERequesterBank": {
    "parent": "Managed",
    "methods": [
      "static void Init()",
      "static void Cleanup()",
      "static int GetRequesterID(typename type)",
      "static int RegisterRequester(typename type)",
      "static bool VerifyRequester(PPERequesterBase req)",
      "void PPERequesterRegistrations()",
      "void RegisterAdditionalRequesters()"
    ]
  },
  "PPERequesterRegistrations": {
    "parent": "Managed",
    "methods": [
      "void PPERequesterRegistrations()",
      "void RegisterAdditionalRequesters()"
    ]
  },
  "Achievements": {
    "parent": null,
    "methods": [
      "void Achievements()",
      "static void OnActionEat()",
      "static void OnActionDrink()",
      "static void OnEquippedFullGear()",
      "static void OnCookedSteak()",
      "static void OnActionIgniteMatchbox()",
      "static void OnActionIgniteRoadflare()",
      "static void OnActionIgniteDrill()",
      "static void OnActionShave()",
      "static void OnActionGutDeer()",
      "static void OnActionMedsSurvivor()",
      "static void OnActionHandcuff()",
      "static void OnPlayerKilled(EntityAI victim, EntityAI killer, EntityAI source, bool is_headshot)",
      "static void CheckError(EAchievementError error)"
    ]
  },
  "BiosClientServices": {
    "parent": null,
    "methods": [
      "void BiosClientServices()"
    ]
  },
  "ServerBrowserHelperFunctions": {
    "parent": null,
    "methods": [
      "void ServerBrowserHelperFunctions()",
      "static void AddMapInfo(string mapName, string mapDisplayName)",
      "static string GetInternalMapName(string mapName)",
      "static string GetMapDisplayName(string mapName)",
      "static string GetServerMapImagePath(string mapName)",
      "string GetIpPort()",
      "string GetIP()",
      "bool IsSelected()",
      "string GetValueStr(ESortType sort_type)",
      "int GetValueInt(ESortType sort_type)",
      "int CompareTo(GetServersResultRow other, ESortType sortType)",
      "void SetOfficial( bool Official )",
      "void SetGameVersion( string GameVersion )",
      "void SetRegionId( int RegionId )",
      "void SetAntiCheatFilter( bool anti_cheat )",
      "void SetNameFilter( string name )",
      "void SetGameTypeFilter( string game_type )",
      "void SetModeIdFilter( int mode_id )",
      "void SetGameVersionFilter( string game_version )",
      "void SetOfficialFilter( bool official )",
      "void SetJoinableFilter( bool joinable )",
      "void SetMapNameToRun( string mapNameToRun )",
      "void SetIsModdedFilter( bool is_modded )",
      "void SetMinPlayersFilter( int min_players )",
      "void SetMaxPlayersFilter( int max_players )",
      "void SetIsPasswordProtectedFilter( bool password_protected )",
      "void SetRegionIdFilter( int region )",
      "void SetPriorityFilter( int priority )",
      "void SetFreeSlotsMin( int freeSlotsMin )",
      "void SetFreeSlotsMax( int freeSlotsMax )",
      "void SetHostIp( string hostIp )",
      "void SetHostPort( int hostPort )",
      "void SetMouseAndKeyboardEnabled(bool enabledMouseAndKeyboard)",
      "void SetFavorited( bool show )",
      "void SetFriendsPlaying( bool show )",
      "void SetPreviouslyPlayed( bool show )",
      "void SetProperVersionMatch( bool show )",
      "void SetFullServer( bool show )",
      "void SetThirdPerson( bool show )",
      "void SetPublic( bool show )",
      "void SetAcceleratedTime( bool show )",
      "void SetAllowedFilePatching( bool show )",
      "void SetLAN()",
      "void SetPingFilter( int pingMaxValue )",
      "void SetBattleyeProtection(bool show)",
      "void SetPassworded(bool show)",
      "void AddShow( bool show )",
      "void AddFavourite(string ip, int port)",
      "void SetWhitelistEnabled(bool whitelistEnabled)",
      "void SetIsDLC(bool isDLC)",
      "void AddServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void RemoveServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void GetFavoriteServers(TStringArray favServers)",
      "void GetCachedFavoriteServerInfo(array<ref CachedServerInfo> favServersInfoCache)",
      "void OnDoneAsync(GetServersResult result_list, EBiosError error, string response)",
      "void OnGetFirstServerWithEmptySlot(GetFirstServerWithEmptySlotResult result_list, EBiosError error)",
      "void OnServerModList(GetServerModListResult result_list, EBiosError error)"
    ]
  },
  "GetServerModListResult": {
    "parent": null,
    "methods": [
      "string GetIpPort()",
      "string GetIP()",
      "bool IsSelected()",
      "string GetValueStr(ESortType sort_type)",
      "int GetValueInt(ESortType sort_type)",
      "int CompareTo(GetServersResultRow other, ESortType sortType)",
      "void SetOfficial( bool Official )",
      "void SetGameVersion( string GameVersion )",
      "void SetRegionId( int RegionId )",
      "void SetAntiCheatFilter( bool anti_cheat )",
      "void SetNameFilter( string name )",
      "void SetGameTypeFilter( string game_type )",
      "void SetModeIdFilter( int mode_id )",
      "void SetGameVersionFilter( string game_version )",
      "void SetOfficialFilter( bool official )",
      "void SetJoinableFilter( bool joinable )",
      "void SetMapNameToRun( string mapNameToRun )",
      "void SetIsModdedFilter( bool is_modded )",
      "void SetMinPlayersFilter( int min_players )",
      "void SetMaxPlayersFilter( int max_players )",
      "void SetIsPasswordProtectedFilter( bool password_protected )",
      "void SetRegionIdFilter( int region )",
      "void SetPriorityFilter( int priority )",
      "void SetFreeSlotsMin( int freeSlotsMin )",
      "void SetFreeSlotsMax( int freeSlotsMax )",
      "void SetHostIp( string hostIp )",
      "void SetHostPort( int hostPort )",
      "void SetMouseAndKeyboardEnabled(bool enabledMouseAndKeyboard)",
      "void SetFavorited( bool show )",
      "void SetFriendsPlaying( bool show )",
      "void SetPreviouslyPlayed( bool show )",
      "void SetProperVersionMatch( bool show )",
      "void SetFullServer( bool show )",
      "void SetThirdPerson( bool show )",
      "void SetPublic( bool show )",
      "void SetAcceleratedTime( bool show )",
      "void SetAllowedFilePatching( bool show )",
      "void SetLAN()",
      "void SetPingFilter( int pingMaxValue )",
      "void SetBattleyeProtection(bool show)",
      "void SetPassworded(bool show)",
      "void AddShow( bool show )",
      "void AddFavourite(string ip, int port)",
      "void SetWhitelistEnabled(bool whitelistEnabled)",
      "void SetIsDLC(bool isDLC)",
      "void AddServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void RemoveServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void GetFavoriteServers(TStringArray favServers)",
      "void GetCachedFavoriteServerInfo(array<ref CachedServerInfo> favServersInfoCache)",
      "void OnDoneAsync(GetServersResult result_list, EBiosError error, string response)",
      "void OnGetFirstServerWithEmptySlot(GetFirstServerWithEmptySlotResult result_list, EBiosError error)",
      "void OnServerModList(GetServerModListResult result_list, EBiosError error)"
    ]
  },
  "GetServersResultRow": {
    "parent": null,
    "methods": [
      "string GetIpPort()",
      "string GetIP()",
      "bool IsSelected()",
      "string GetValueStr(ESortType sort_type)",
      "int GetValueInt(ESortType sort_type)",
      "int CompareTo(GetServersResultRow other, ESortType sortType)",
      "void SetOfficial( bool Official )",
      "void SetGameVersion( string GameVersion )",
      "void SetRegionId( int RegionId )",
      "void SetAntiCheatFilter( bool anti_cheat )",
      "void SetNameFilter( string name )",
      "void SetGameTypeFilter( string game_type )",
      "void SetModeIdFilter( int mode_id )",
      "void SetGameVersionFilter( string game_version )",
      "void SetOfficialFilter( bool official )",
      "void SetJoinableFilter( bool joinable )",
      "void SetMapNameToRun( string mapNameToRun )",
      "void SetIsModdedFilter( bool is_modded )",
      "void SetMinPlayersFilter( int min_players )",
      "void SetMaxPlayersFilter( int max_players )",
      "void SetIsPasswordProtectedFilter( bool password_protected )",
      "void SetRegionIdFilter( int region )",
      "void SetPriorityFilter( int priority )",
      "void SetFreeSlotsMin( int freeSlotsMin )",
      "void SetFreeSlotsMax( int freeSlotsMax )",
      "void SetHostIp( string hostIp )",
      "void SetHostPort( int hostPort )",
      "void SetMouseAndKeyboardEnabled(bool enabledMouseAndKeyboard)",
      "void SetFavorited( bool show )",
      "void SetFriendsPlaying( bool show )",
      "void SetPreviouslyPlayed( bool show )",
      "void SetProperVersionMatch( bool show )",
      "void SetFullServer( bool show )",
      "void SetThirdPerson( bool show )",
      "void SetPublic( bool show )",
      "void SetAcceleratedTime( bool show )",
      "void SetAllowedFilePatching( bool show )",
      "void SetLAN()",
      "void SetPingFilter( int pingMaxValue )",
      "void SetBattleyeProtection(bool show)",
      "void SetPassworded(bool show)",
      "void AddShow( bool show )",
      "void AddFavourite(string ip, int port)",
      "void SetWhitelistEnabled(bool whitelistEnabled)",
      "void SetIsDLC(bool isDLC)",
      "void AddServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void RemoveServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void GetFavoriteServers(TStringArray favServers)",
      "void GetCachedFavoriteServerInfo(array<ref CachedServerInfo> favServersInfoCache)",
      "void OnDoneAsync(GetServersResult result_list, EBiosError error, string response)",
      "void OnGetFirstServerWithEmptySlot(GetFirstServerWithEmptySlotResult result_list, EBiosError error)",
      "void OnServerModList(GetServerModListResult result_list, EBiosError error)"
    ]
  },
  "GetFirstServerWithEmptySlotResult": {
    "parent": null,
    "methods": [
      "void SetOfficial( bool Official )",
      "void SetGameVersion( string GameVersion )",
      "void SetRegionId( int RegionId )",
      "void SetAntiCheatFilter( bool anti_cheat )",
      "void SetNameFilter( string name )",
      "void SetGameTypeFilter( string game_type )",
      "void SetModeIdFilter( int mode_id )",
      "void SetGameVersionFilter( string game_version )",
      "void SetOfficialFilter( bool official )",
      "void SetJoinableFilter( bool joinable )",
      "void SetMapNameToRun( string mapNameToRun )",
      "void SetIsModdedFilter( bool is_modded )",
      "void SetMinPlayersFilter( int min_players )",
      "void SetMaxPlayersFilter( int max_players )",
      "void SetIsPasswordProtectedFilter( bool password_protected )",
      "void SetRegionIdFilter( int region )",
      "void SetPriorityFilter( int priority )",
      "void SetFreeSlotsMin( int freeSlotsMin )",
      "void SetFreeSlotsMax( int freeSlotsMax )",
      "void SetHostIp( string hostIp )",
      "void SetHostPort( int hostPort )",
      "void SetMouseAndKeyboardEnabled(bool enabledMouseAndKeyboard)",
      "void SetFavorited( bool show )",
      "void SetFriendsPlaying( bool show )",
      "void SetPreviouslyPlayed( bool show )",
      "void SetProperVersionMatch( bool show )",
      "void SetFullServer( bool show )",
      "void SetThirdPerson( bool show )",
      "void SetPublic( bool show )",
      "void SetAcceleratedTime( bool show )",
      "void SetAllowedFilePatching( bool show )",
      "void SetLAN()",
      "void SetPingFilter( int pingMaxValue )",
      "void SetBattleyeProtection(bool show)",
      "void SetPassworded(bool show)",
      "void AddShow( bool show )",
      "void AddFavourite(string ip, int port)",
      "void SetWhitelistEnabled(bool whitelistEnabled)",
      "void SetIsDLC(bool isDLC)",
      "void AddServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void RemoveServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void GetFavoriteServers(TStringArray favServers)",
      "void GetCachedFavoriteServerInfo(array<ref CachedServerInfo> favServersInfoCache)",
      "void OnDoneAsync(GetServersResult result_list, EBiosError error, string response)",
      "void OnGetFirstServerWithEmptySlot(GetFirstServerWithEmptySlotResult result_list, EBiosError error)",
      "void OnServerModList(GetServerModListResult result_list, EBiosError error)"
    ]
  },
  "GetFirstServerWithEmptySlotInput": {
    "parent": null,
    "methods": [
      "void SetOfficial( bool Official )",
      "void SetGameVersion( string GameVersion )",
      "void SetRegionId( int RegionId )",
      "void SetAntiCheatFilter( bool anti_cheat )",
      "void SetNameFilter( string name )",
      "void SetGameTypeFilter( string game_type )",
      "void SetModeIdFilter( int mode_id )",
      "void SetGameVersionFilter( string game_version )",
      "void SetOfficialFilter( bool official )",
      "void SetJoinableFilter( bool joinable )",
      "void SetMapNameToRun( string mapNameToRun )",
      "void SetIsModdedFilter( bool is_modded )",
      "void SetMinPlayersFilter( int min_players )",
      "void SetMaxPlayersFilter( int max_players )",
      "void SetIsPasswordProtectedFilter( bool password_protected )",
      "void SetRegionIdFilter( int region )",
      "void SetPriorityFilter( int priority )",
      "void SetFreeSlotsMin( int freeSlotsMin )",
      "void SetFreeSlotsMax( int freeSlotsMax )",
      "void SetHostIp( string hostIp )",
      "void SetHostPort( int hostPort )",
      "void SetMouseAndKeyboardEnabled(bool enabledMouseAndKeyboard)",
      "void SetFavorited( bool show )",
      "void SetFriendsPlaying( bool show )",
      "void SetPreviouslyPlayed( bool show )",
      "void SetProperVersionMatch( bool show )",
      "void SetFullServer( bool show )",
      "void SetThirdPerson( bool show )",
      "void SetPublic( bool show )",
      "void SetAcceleratedTime( bool show )",
      "void SetAllowedFilePatching( bool show )",
      "void SetLAN()",
      "void SetPingFilter( int pingMaxValue )",
      "void SetBattleyeProtection(bool show)",
      "void SetPassworded(bool show)",
      "void AddShow( bool show )",
      "void AddFavourite(string ip, int port)",
      "void SetWhitelistEnabled(bool whitelistEnabled)",
      "void SetIsDLC(bool isDLC)",
      "void AddServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void RemoveServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void GetFavoriteServers(TStringArray favServers)",
      "void GetCachedFavoriteServerInfo(array<ref CachedServerInfo> favServersInfoCache)",
      "void OnDoneAsync(GetServersResult result_list, EBiosError error, string response)",
      "void OnGetFirstServerWithEmptySlot(GetFirstServerWithEmptySlotResult result_list, EBiosError error)",
      "void OnServerModList(GetServerModListResult result_list, EBiosError error)"
    ]
  },
  "GetServersResult": {
    "parent": null,
    "methods": [
      "void SetAntiCheatFilter( bool anti_cheat )",
      "void SetNameFilter( string name )",
      "void SetGameTypeFilter( string game_type )",
      "void SetModeIdFilter( int mode_id )",
      "void SetGameVersionFilter( string game_version )",
      "void SetOfficialFilter( bool official )",
      "void SetJoinableFilter( bool joinable )",
      "void SetMapNameToRun( string mapNameToRun )",
      "void SetIsModdedFilter( bool is_modded )",
      "void SetMinPlayersFilter( int min_players )",
      "void SetMaxPlayersFilter( int max_players )",
      "void SetIsPasswordProtectedFilter( bool password_protected )",
      "void SetRegionIdFilter( int region )",
      "void SetPriorityFilter( int priority )",
      "void SetFreeSlotsMin( int freeSlotsMin )",
      "void SetFreeSlotsMax( int freeSlotsMax )",
      "void SetHostIp( string hostIp )",
      "void SetHostPort( int hostPort )",
      "void SetMouseAndKeyboardEnabled(bool enabledMouseAndKeyboard)",
      "void SetFavorited( bool show )",
      "void SetFriendsPlaying( bool show )",
      "void SetPreviouslyPlayed( bool show )",
      "void SetProperVersionMatch( bool show )",
      "void SetFullServer( bool show )",
      "void SetThirdPerson( bool show )",
      "void SetPublic( bool show )",
      "void SetAcceleratedTime( bool show )",
      "void SetAllowedFilePatching( bool show )",
      "void SetLAN()",
      "void SetPingFilter( int pingMaxValue )",
      "void SetBattleyeProtection(bool show)",
      "void SetPassworded(bool show)",
      "void AddShow( bool show )",
      "void AddFavourite(string ip, int port)",
      "void SetWhitelistEnabled(bool whitelistEnabled)",
      "void SetIsDLC(bool isDLC)",
      "void AddServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void RemoveServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void GetFavoriteServers(TStringArray favServers)",
      "void GetCachedFavoriteServerInfo(array<ref CachedServerInfo> favServersInfoCache)",
      "void OnDoneAsync(GetServersResult result_list, EBiosError error, string response)",
      "void OnGetFirstServerWithEmptySlot(GetFirstServerWithEmptySlotResult result_list, EBiosError error)",
      "void OnServerModList(GetServerModListResult result_list, EBiosError error)"
    ]
  },
  "GetServersInput": {
    "parent": null,
    "methods": [
      "void SetAntiCheatFilter( bool anti_cheat )",
      "void SetNameFilter( string name )",
      "void SetGameTypeFilter( string game_type )",
      "void SetModeIdFilter( int mode_id )",
      "void SetGameVersionFilter( string game_version )",
      "void SetOfficialFilter( bool official )",
      "void SetJoinableFilter( bool joinable )",
      "void SetMapNameToRun( string mapNameToRun )",
      "void SetIsModdedFilter( bool is_modded )",
      "void SetMinPlayersFilter( int min_players )",
      "void SetMaxPlayersFilter( int max_players )",
      "void SetIsPasswordProtectedFilter( bool password_protected )",
      "void SetRegionIdFilter( int region )",
      "void SetPriorityFilter( int priority )",
      "void SetFreeSlotsMin( int freeSlotsMin )",
      "void SetFreeSlotsMax( int freeSlotsMax )",
      "void SetHostIp( string hostIp )",
      "void SetHostPort( int hostPort )",
      "void SetMouseAndKeyboardEnabled(bool enabledMouseAndKeyboard)",
      "void SetFavorited( bool show )",
      "void SetFriendsPlaying( bool show )",
      "void SetPreviouslyPlayed( bool show )",
      "void SetProperVersionMatch( bool show )",
      "void SetFullServer( bool show )",
      "void SetThirdPerson( bool show )",
      "void SetPublic( bool show )",
      "void SetAcceleratedTime( bool show )",
      "void SetAllowedFilePatching( bool show )",
      "void SetLAN()",
      "void SetPingFilter( int pingMaxValue )",
      "void SetBattleyeProtection(bool show)",
      "void SetPassworded(bool show)",
      "void AddShow( bool show )",
      "void AddFavourite(string ip, int port)",
      "void SetWhitelistEnabled(bool whitelistEnabled)",
      "void SetIsDLC(bool isDLC)",
      "void AddServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void RemoveServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void GetFavoriteServers(TStringArray favServers)",
      "void GetCachedFavoriteServerInfo(array<ref CachedServerInfo> favServersInfoCache)",
      "void OnDoneAsync(GetServersResult result_list, EBiosError error, string response)",
      "void OnGetFirstServerWithEmptySlot(GetFirstServerWithEmptySlotResult result_list, EBiosError error)",
      "void OnServerModList(GetServerModListResult result_list, EBiosError error)"
    ]
  },
  "BiosLobbyService": {
    "parent": null,
    "methods": [
      "void AddServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void RemoveServerFavorite(string ipAddress, int port, int steamQueryPort)",
      "void GetFavoriteServers(TStringArray favServers)",
      "void GetCachedFavoriteServerInfo(array<ref CachedServerInfo> favServersInfoCache)",
      "void OnDoneAsync(GetServersResult result_list, EBiosError error, string response)",
      "void OnGetFirstServerWithEmptySlot(GetFirstServerWithEmptySlotResult result_list, EBiosError error)",
      "void OnServerModList(GetServerModListResult result_list, EBiosError error)"
    ]
  },
  "BiosCheckUpdateResult": {
    "parent": null,
    "methods": [
      "void OnCheckUpdate(BiosCheckUpdateResult checkUpdateResult, EBiosError error)",
      "void OnPromptUpdate(EBiosError error)",
      "void OnShowStore(EBiosError error)"
    ]
  },
  "BiosPackageService": {
    "parent": null,
    "methods": [
      "void OnCheckUpdate(BiosCheckUpdateResult checkUpdateResult, EBiosError error)",
      "void OnPromptUpdate(EBiosError error)",
      "void OnShowStore(EBiosError error)"
    ]
  },
  "BiosPrivacyPermissionResult": {
    "parent": null,
    "methods": [
      "static bool Compare( BiosPrivacyPermissionResult a, BiosPrivacyPermissionResult b )",
      "void OnPermissions(BiosPrivacyUidResultArray result_list, EBiosError error)",
      "void OnPrivilege(EBiosPrivacyPrivilege privilege, EBiosError error)"
    ]
  },
  "BiosPrivacyUidResult": {
    "parent": null,
    "methods": [
      "void OnPermissions(BiosPrivacyUidResultArray result_list, EBiosError error)",
      "void OnPrivilege(EBiosPrivacyPrivilege privilege, EBiosError error)"
    ]
  },
  "BiosPrivacyService": {
    "parent": null,
    "methods": [
      "void OnPermissions(BiosPrivacyUidResultArray result_list, EBiosError error)",
      "void OnPrivilege(EBiosPrivacyPrivilege privilege, EBiosError error)"
    ]
  },
  "BiosSessionService": {
    "parent": null,
    "methods": [
      "void OnSessionPlayerListUpdate(array<string> newPlayers)",
      "void TryGetSession( string join_handle =  )",
      "void SetMultiplayState(bool is_active)",
      "void OnSetActivity(EBiosError error)",
      "void OnClearActivity(EBiosError error)",
      "void OnGetGameplaySession(string session_address, int session_port)",
      "void OnGetSessionError(EBiosError error)",
      "void OnEnterGameplaySession(string session_address, int session_port, EBiosError error)",
      "void OnLeaveGameplaySession(EBiosError error)",
      "void OnShowInviteToGameplaySession(EBiosError error)",
      "void OnInviteToGameplaySession(EBiosError error)",
      "void GetSessionPlayerListEx(TStringArray outPlayerList)"
    ]
  },
  "BiosFriendInfo": {
    "parent": null,
    "methods": [
      "static bool Compare( BiosFriendInfo a, BiosFriendInfo b )",
      "void OnUserProfileAsync(EBiosError error)",
      "void OnFriendsAsync(BiosFriendInfoArray friend_list, EBiosError error)"
    ]
  },
  "BiosSocialService": {
    "parent": null,
    "methods": [
      "void OnUserProfileAsync(EBiosError error)",
      "void OnFriendsAsync(BiosFriendInfoArray friend_list, EBiosError error)"
    ]
  },
  "BiosUser": {
    "parent": null,
    "methods": [
      "string GetName()",
      "string GetUid()",
      "bool IsOnline()",
      "bool SelectUser(BiosUser user)",
      "bool SelectUserEx(BiosUser user)",
      "void OnUserDatabaseId(string dbID, EBiosError error)",
      "void OnUserLoggedOn(EBiosError error)",
      "void OnUserPicked(BiosUser user, EBiosError error)",
      "void OnLoggedOn(BiosUser user)",
      "void OnLoggedOff(BiosUser user)",
      "void OnSignedIn(BiosUser user)",
      "void OnSignedOut(BiosUser user)",
      "void OnJoin(EBiosJoinType type, BiosUser joiner, string handle, string joinee, EBiosError error)",
      "void OnPartyHost(BiosUser host, array<string> invitee_list, EBiosError error)",
      "void OnGameNameChanged(BiosUser user)"
    ]
  },
  "BiosUserManager": {
    "parent": null,
    "methods": [
      "bool SelectUser(BiosUser user)",
      "bool SelectUserEx(BiosUser user)",
      "void OnUserDatabaseId(string dbID, EBiosError error)",
      "void OnUserLoggedOn(EBiosError error)",
      "void OnUserPicked(BiosUser user, EBiosError error)",
      "void OnLoggedOn(BiosUser user)",
      "void OnLoggedOff(BiosUser user)",
      "void OnSignedIn(BiosUser user)",
      "void OnSignedOut(BiosUser user)",
      "void OnJoin(EBiosJoinType type, BiosUser joiner, string handle, string joinee, EBiosError error)",
      "void OnPartyHost(BiosUser host, array<string> invitee_list, EBiosError error)",
      "void OnGameNameChanged(BiosUser user)"
    ]
  },
  "ContentDLC": {
    "parent": null,
    "methods": [
      "int GetEntitlements(out TIntArray dlcIdList)",
      "bool IsDLCInstalled(EDLCId dlcId)",
      "bool OwnsAllDLC()",
      "void OnChange(EDLCId dlcId)"
    ]
  },
  "TrialService": {
    "parent": null,
    "methods": [
      "bool IsGameTrial(bool bIsSimulator)",
      "bool IsGameActive(bool bIsSimulator)"
    ]
  },
  "Easing": {
    "parent": null,
    "methods": [
      "static float EaseInSine( float t )",
      "static float EaseOutSine( float t )",
      "static float EaseInOutSine( float t )",
      "static float EaseInQuad( float t )",
      "static float EaseOutQuad( float t )",
      "static float EaseInOutQuad( float t )",
      "static float EaseInCubic( float t )",
      "static float EaseOutCubic( float t )",
      "static float EaseInOutCubic( float t )",
      "static float EaseInQuart( float t )",
      "static float EaseOutQuart( float t )",
      "static float EaseInOutQuart( float t )",
      "static float EaseInQuint( float t )",
      "static float EaseOutQuint( float t )",
      "static float EaseInOutQuint( float t )",
      "static float EaseInExpo( float t )",
      "static float EaseOutExpo( float t )",
      "static float EaseInOutExpo( float t )",
      "static float EaseInCirc( float t )",
      "static float EaseOutCirc( float t )",
      "static float EaseInOutCirc( float t )",
      "static float EaseInBack( float t, float magnitude = 1.70158 )",
      "static float EaseOutBack( float t, float magnitude = 1.70158 )",
      "static float EaseInOutBack( float t, float magnitude = 1.70158 )",
      "static float EaseInElastic( float t, float magnitude = 0.7 )",
      "static float EaseOutElastic( float t, float magnitude = 0.7 )",
      "static float EaseInOutElastic( float t, float magnitude = 0.65 )",
      "static float EaseOutBounce( float t )",
      "static float EaseInBounce( float t )",
      "static float EaseInOutBounce( float t )"
    ]
  },
  "FeatureTimeAccel": {
    "parent": null,
    "methods": [
      "static bool Init()",
      "static void Bind(DiagMenuIDs id, ETimeAccelCategories catBit)",
      "static int GetCategoryByDiagID(DiagMenuIDs id)",
      "static int GetDiagIDByCategory(ETimeAccelCategories category)",
      "static bool GetFeatureTimeAccelEnabled(ETimeAccelCategories categoryBit)",
      "static float GetFeatureTimeAccelValue()",
      "static void CopyTimeAccelClipboard(bool enable, int timeAccelBig, float timeAccelSmall, int bitMask)",
      "static int GetTimeAccelBitmask()",
      "static void WriteCategoryBit(out int bitmask, int diagMenuID)",
      "static bool AreTimeAccelParamsSame(TimeAccelParam p1, TimeAccelParam p2)",
      "static void SendTimeAccel(Man player, TimeAccelParam param)"
    ]
  },
  "FSMTransition": {
    "parent": null,
    "methods": [
      "void FSMTransition(FSMStateBase src, FSMEventBase e, FSMStateBase dst, FSMActionBase a = NULL, FSMGuardBase g = NULL)",
      "void FSMBase()",
      "void SetInitialState(FSMStateBase initial_state)",
      "void Start(FSMEventBase initial_event = NULL)",
      "bool IsRunning()",
      "void Terminate(FSMEventBase terminal_event = NULL)",
      "void Update(float dt)",
      "void AddTransition(FSMTransition<FSMStateBase, FSMEventBase, FSMActionBase, FSMGuardBase> t)"
    ]
  },
  "FSMBase": {
    "parent": null,
    "methods": [
      "void FSMBase()",
      "void SetInitialState(FSMStateBase initial_state)",
      "void Start(FSMEventBase initial_event = NULL)",
      "bool IsRunning()",
      "void Terminate(FSMEventBase terminal_event = NULL)",
      "void Update(float dt)",
      "void AddTransition(FSMTransition<FSMStateBase, FSMEventBase, FSMActionBase, FSMGuardBase> t)"
    ]
  },
  "HFSMBase": {
    "parent": null,
    "methods": [
      "void HFSMBase(FSMStateBase ownerState = NULL)",
      "void SetCurrentState(FSMStateBase state)",
      "bool GetHierarchyPath(FSMStateBase state, out array<FSMStateBase> path)",
      "void SetInitialState(FSMStateBase initial_state)",
      "void AddTransition(FSMTransition<FSMStateBase, FSMEventBase, FSMActionBase, FSMGuardBase> t)",
      "void Start(FSMEventBase initial_event = NULL, bool useExistingState = false)",
      "bool IsRunning()",
      "void Terminate(FSMEventBase terminal_event = NULL)",
      "void Abort(FSMEventBase abort_event = NULL)",
      "void Update(float dt)",
      "int FindFirstUnguardedTransition(FSMEventBase e)",
      "int FindFirstCompletionTransition()"
    ]
  },
  "OFSMBase": {
    "parent": null,
    "methods": [
      "void OFSMBase()",
      "void SetInitialStates(array<ref FSMStateBase> initial_states)",
      "void Start(array<ref FSMEventBase> initial_events = null)",
      "bool IsRunning()",
      "void Terminate(array<ref FSMEventBase> terminal_events = null)",
      "void Update(float dt)",
      "void AddTransition(FSMTransition<FSMStateBase, FSMEventBase, FSMActionBase, FSMGuardBase> t)"
    ]
  },
  "TFResult": {
    "parent": null,
    "methods": [
      "void TFResult(TFR result)",
      "void TFCaller(Class instance, string test, TFResult result)",
      "string GetTest()",
      "string GetTestEx()",
      "void TFModule()",
      "int Count()",
      "int Failed()",
      "int Success()",
      "int Pending()",
      "void AddTest(Class instance, string test, bool repeat)",
      "bool Run(bool fatal, float dt)",
      "bool RunTest(TFCaller caller, float dt)",
      "string Result()",
      "void PrintResult(string prefix = , TestFramework caller = null, string function = )",
      "void TestFramework()",
      "void EOnInit(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void AddInitTest(string test)",
      "void AddFrameTest(string test)",
      "bool Assert(bool condition)"
    ]
  },
  "TFCaller": {
    "parent": null,
    "methods": [
      "void TFCaller(Class instance, string test, TFResult result)",
      "string GetTest()",
      "string GetTestEx()",
      "void TFModule()",
      "int Count()",
      "int Failed()",
      "int Success()",
      "int Pending()",
      "void AddTest(Class instance, string test, bool repeat)",
      "bool Run(bool fatal, float dt)",
      "bool RunTest(TFCaller caller, float dt)",
      "string Result()",
      "void PrintResult(string prefix = , TestFramework caller = null, string function = )",
      "void TestFramework()",
      "void EOnInit(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void AddInitTest(string test)",
      "void AddFrameTest(string test)",
      "bool Assert(bool condition)"
    ]
  },
  "TFModule": {
    "parent": null,
    "methods": [
      "void TFModule()",
      "int Count()",
      "int Failed()",
      "int Success()",
      "int Pending()",
      "void AddTest(Class instance, string test, bool repeat)",
      "bool Run(bool fatal, float dt)",
      "bool RunTest(TFCaller caller, float dt)",
      "string Result()",
      "void PrintResult(string prefix = , TestFramework caller = null, string function = )",
      "void TestFramework()",
      "void EOnInit(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void AddInitTest(string test)",
      "void AddFrameTest(string test)",
      "bool Assert(bool condition)"
    ]
  },
  "TestFramework": {
    "parent": null,
    "methods": [
      "void TestFramework()",
      "void EOnInit(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void AddInitTest(string test)",
      "void AddFrameTest(string test)",
      "bool Assert(bool condition)"
    ]
  },
  "BitArray": {
    "parent": null,
    "methods": [
      "static int IDToIndex(int id)",
      "static int IDToMask(int id)",
      "static int GetBitCount( array<int> bit_array )",
      "static int IDToNumOfItems(int id)",
      "static bool IsMaskContainID(array<int> bit_array, int id)",
      "static bool AddIDToMask(array<int> bit_array, int id)"
    ]
  },
  "CameraToolsMenuServer": {
    "parent": null,
    "methods": [
      "void OnRPC(int rpc_type, ParamsReadContext ctx)",
      "void DelayedDestroy()",
      "void DestroyNow()",
      "void OnRPC(ParamsReadContext ctx)"
    ]
  },
  "CameraToolsMenuClient": {
    "parent": null,
    "methods": [
      "void DelayedDestroy()",
      "void DestroyNow()",
      "void OnRPC(ParamsReadContext ctx)"
    ]
  },
  "Component": {
    "parent": null,
    "methods": [
      "void Event_OnFrame(IEntity other, float timeSlice)",
      "void DebugBBoxSetColor(int color)",
      "void DebugBBoxDelete()",
      "void DebugDirectionSetColor(int color)",
      "void DebugDirectionDelete()",
      "static void Init()",
      "static string GetNameByType(int comp_type)",
      "static bool IsTypeExist(int comp_type)",
      "static void LogErrorBadCompType(int comp_type, string fnc_name)",
      "static void LogWarningAlredyExist(int comp_type, string fnc_name)",
      "void SetparentEntityAI(EntityAI e)",
      "void Event_OnAwake()",
      "void Event_OnInit()",
      "void LogThis(string msg, string fnc_name = )",
      "void LogThisWarning(string msg, string fnc_name = )",
      "void LogThisError(string msg, string fnc_name = )",
      "string GetCompName()",
      "int GetCompType()",
      "void Event_OnItemAttached(EntityAI item, string slot_name)",
      "void Event_OnItemDetached(EntityAI item, string slot_name)"
    ]
  },
  "ComponentsBank": {
    "parent": null,
    "methods": [
      "void ComponentsBank(EntityAI entity_parent)",
      "bool DeleteComponent(int comp_type)",
      "bool IsComponentAlreadyExist(int comp_type)"
    ]
  },
  "Debug": {
    "parent": null,
    "methods": [
      "static string GetDebugName(Managed entity)",
      "static void InitCanvas()",
      "static void ClearCanvas()",
      "static void CanvasDrawLine(float x1, float y1, float x2, float y2, float width, int color)",
      "static void CanvasDrawPoint(float x1, float y1, int color)",
      "static void Init()",
      "static void DestroyAllShapes()",
      "static void RemoveShape(out Shape shape)",
      "static void Log(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void ActionLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void SymptomLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void InventoryMoveLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void InventoryReservationLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void InventoryHFSMLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void QuickbarLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void BaseBuildingLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void BleedingChancesLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void TriggerLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void ParticleLog(string message = LOG_DEFAULT, Managed caller = null, string function = , Managed entity = null)",
      "static void TFLog(string message = LOG_DEFAULT, TestFramework caller = null, string function = )",
      "static void WeightLog(string message = LOG_DEFAULT, Managed caller = null, string function = , Managed entity = null)",
      "static void MeleeLog(Entity entity, string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT)",
      "static void WeatherLog(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void LogInfo(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void LogWarning(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void LogError(string message = LOG_DEFAULT, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void LogArrayInt(array<int> arr = NULL, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void LogArrayString(array<string> arr = NULL, string plugin = LOG_DEFAULT, string author = LOG_DEFAULT, string label = LOG_DEFAULT, string entity = LOG_DEFAULT)",
      "static void ReceivedLogMessageFromServer(string message)",
      "static void ClearScriptLogs()",
      "static void CleanupDrawShapes(array<Shape> shapes)",
      "static void GetBaseConfigClasses( out TStringArray base_classes )",
      "static void GetFiltredConfigClasses( string search_string, out TStringArray filtered_classes, bool only_public = true )",
      "static string LogMessage(string level, string plugin, string entity, string author, string label, string message)",
      "static void SaveLog(string log_message)",
      "static void ClearLogs()",
      "static string GetFileName()",
      "static string GetDate()",
      "static bool IsLogsEnable()",
      "static void SetLogsEnabled(bool enable)",
      "static bool IsActionLogEnable()",
      "static void ActionLogEnable(bool enable)",
      "static bool IsInventoryMoveLogEnable()",
      "static void InventoryMoveLogEnable(bool enable)",
      "static bool IsInventoryReservationLogEnable()",
      "static void InventoryReservationLogEnable(bool enable)",
      "static bool IsInventoryHFSMLogEnable()",
      "static void InventoryHFSMLogEnable(bool enable)",
      "static bool IsSyncLogEnable()",
      "static void SyncLogEnable(bool enable)",
      "static bool IsQuickbarLogEnable()",
      "static void QuickbarLogEnable(bool enable)",
      "static bool IsBaseBuildingLogEnable()",
      "static void BaseBuildingLogEnable(bool enable)",
      "static bool IsSymptomLogEnable()",
      "static void SymptomLogEnable(bool enable)",
      "static bool IsWeaponLogEnable()",
      "static void WeaponLogEnable(bool enable)",
      "static bool IsWeatherLogEnabled()",
      "static bool IsBleedingChancesLogEnable()",
      "static void BleedingChancesLogEnable(bool enable)",
      "static void ClearWeightDebug()",
      "static void PrintAll(EntityAI entity)",
      "static void SetVerbosityFlags(WeightDebugType type)",
      "void WeightDebugData(EntityAI entity)",
      "void SetWeight(float weight)",
      "void SetCalcDetails(string details)",
      "void AddCalcDetails(string details)",
      "void Output()"
    ]
  },
  "LogManager": {
    "parent": null,
    "methods": [
      "static void Init()",
      "static bool IsLogsEnable()",
      "static void SetLogsEnabled(bool enable)",
      "static bool IsActionLogEnable()",
      "static void ActionLogEnable(bool enable)",
      "static bool IsInventoryMoveLogEnable()",
      "static void InventoryMoveLogEnable(bool enable)",
      "static bool IsInventoryReservationLogEnable()",
      "static void InventoryReservationLogEnable(bool enable)",
      "static bool IsInventoryHFSMLogEnable()",
      "static void InventoryHFSMLogEnable(bool enable)",
      "static bool IsSyncLogEnable()",
      "static void SyncLogEnable(bool enable)",
      "static bool IsQuickbarLogEnable()",
      "static void QuickbarLogEnable(bool enable)",
      "static bool IsBaseBuildingLogEnable()",
      "static void BaseBuildingLogEnable(bool enable)",
      "static bool IsSymptomLogEnable()",
      "static void SymptomLogEnable(bool enable)",
      "static bool IsWeaponLogEnable()",
      "static void WeaponLogEnable(bool enable)",
      "static bool IsWeatherLogEnabled()",
      "static bool IsBleedingChancesLogEnable()",
      "static void BleedingChancesLogEnable(bool enable)",
      "static void ClearWeightDebug()",
      "static void PrintAll(EntityAI entity)",
      "static void SetVerbosityFlags(WeightDebugType type)",
      "void WeightDebugData(EntityAI entity)",
      "void SetWeight(float weight)",
      "void SetCalcDetails(string details)",
      "void AddCalcDetails(string details)",
      "void Output()"
    ]
  },
  "WeightDebug": {
    "parent": null,
    "methods": [
      "static void ClearWeightDebug()",
      "static void PrintAll(EntityAI entity)",
      "static void SetVerbosityFlags(WeightDebugType type)",
      "void WeightDebugData(EntityAI entity)",
      "void SetWeight(float weight)",
      "void SetCalcDetails(string details)",
      "void AddCalcDetails(string details)",
      "void Output()"
    ]
  },
  "WeightDebugData": {
    "parent": null,
    "methods": [
      "void WeightDebugData(EntityAI entity)",
      "void SetWeight(float weight)",
      "void SetCalcDetails(string details)",
      "void AddCalcDetails(string details)",
      "void Output()"
    ]
  },
  "DebugPrint": {
    "parent": null,
    "methods": [
      "static void OnInit()",
      "static void Log(string msg)",
      "static void LogAndTrace(string msg)",
      "static void LogWarning(string msg)",
      "static void LogWarningAndTrace(string msg)",
      "static void LogError(string msg)",
      "static void LogErrorAndTrace(string msg)",
      "static string AdjustDebugLog(string msg)",
      "static void EnableTracingLogs(bool enable)",
      "bool IsDebugLog(string msg)",
      "string TrimDebugLog(string msg)",
      "bool IsStackTrace(string msg)",
      "string TrimStackTrace(string msg)",
      "void LogMessage(string msg, int msg_type, bool trace=false)"
    ]
  },
  "Dispatcher": {
    "parent": null,
    "methods": [
      "void SetDispatcher(Dispatcher dispatcher)"
    ]
  },
  "Input": {
    "parent": null,
    "methods": [
      "void ChangeGameFocus(int add, int input_device = -1)",
      "void ResetGameFocus(int input_device = -1)",
      "bool HasGameFocus(int input_device = -1)",
      "int GetActionGroupsCount()",
      "int GetActionGroupSize(int group_index)",
      "int GetActionGroupName(int group_index, out string name)",
      "int GetActionDesc(int action_index, out string desc)",
      "float LocalValue_ID(int action, bool check_focus = true)",
      "float LocalValue(string action, bool check_focus = true)",
      "bool LocalPress_ID(int action, bool check_focus = true)",
      "bool LocalPress(string action, bool check_focus = true)",
      "bool LocalRelease_ID(int action, bool check_focus = true)",
      "bool LocalRelease(string action, bool check_focus = true)",
      "bool LocalHold_ID(int action, bool check_focus = true)",
      "bool LocalHold(string action, bool check_focus = true)",
      "bool LocalDbl_ID(int action, bool check_focus = true)",
      "bool LocalDbl(string action, bool check_focus = true)",
      "void DisableKey(int key)",
      "void EnableMouseAndKeyboard(bool enable)",
      "bool IsEnabledMouseAndKeyboard()",
      "bool IsEnabledMouseAndKeyboardEvenOnServer()",
      "bool IsMouseConnected()",
      "bool IsKeyboardConnected()",
      "int GetCurrentProfile()",
      "void GetCurrentProfileActionKeys(int action_index, out TIntArray keys)",
      "int GetProfileName(int profile_index, out string name)",
      "int GetProfilesCount()",
      "int SetProfile(int index)",
      "int GetDevicesCount()",
      "int GetDeviceName(int device_index, out string name)",
      "int IsDeviceXInput(int device_index)",
      "int IsDeviceEnabled(int device_index)",
      "void SetDeviceEnabled(int device_index, bool enabled)",
      "bool GetGamepadThumbDirection(GamepadButton thumbButton, out float angle, out float value)",
      "void ResetActiveGamepad()",
      "void SelectActiveGamepad(int gamepad)",
      "void GetGamepadList(out array<int> gamepads)",
      "void GetGamepadUser(int gamepad, out BiosUser user)",
      "void IdentifyGamepad(GamepadButton button)",
      "bool IsActiveGamepadSelected()",
      "bool IsAnyInputDeviceActive()",
      "bool AreAllAllowedInputDevicesActive(out array<int> unavailableDeviceList = null)",
      "void FillUnavailableDeviceArray(int device, inout array<int> filler)",
      "void UpdateConnectedInputDeviceList()",
      "void OnGamepadConnected(int gamepad)",
      "void OnGamepadDisconnected(int gamepad)",
      "void OnGamepadIdentification(int gamepad)",
      "int GetUserGamepad( BiosUser user )",
      "bool IsInactiveGamepadOrUserSelected( int gamepad = -1 )",
      "void OnMouseConnected()",
      "void OnMouseDisconnected()",
      "void OnKeyboardConnected()",
      "void OnKeyboardDisconnected()",
      "void OnLastInputDeviceChanged(EInputDeviceType inputDevice)"
    ]
  },
  "InputUtils": {
    "parent": null,
    "methods": [
      "static string GetButtonNameFromInput(string pInputName, int pInputDeviceType)",
      "static void GetImagesetAndIconFromInputAction(notnull UAInput pInput, int pInputDeviceType, out array<string> pImageSet, out array<string> pIconName)",
      "static void GetImagesetAndIconFromInputAction(string pInputAction, int pInputDeviceType, out array<string> pImageSet, out array<string> pIconName)",
      "static string GetRichtextButtonIconFromInputAction(notnull UAInput pInput, string pLocalizedDescription, int pInputDeviceType = EUAINPUT_DEVICE_CONTROLLER, float pScale = ICON_SCALE_NORMAL, bool pVertical = false)",
      "static string GetRichtextButtonIconFromInputAction(string pInputAction, string pLocalizedDescription, int pInputDeviceType = EUAINPUT_DEVICE_CONTROLLER, float pScale = ICON_SCALE_NORMAL, bool pVertical = false)",
      "static void UpdateConsolePresetID()",
      "static int GetConsolePresetID()",
      "static bool InitInputMetadata()"
    ]
  },
  "JsonFileLoader": {
    "parent": null,
    "methods": [
      "static bool LoadFile(string filename, out T data, out string errorMessage)",
      "static bool SaveFile(string filename, T data, out string errorMessage)",
      "static bool LoadData(string string_data, out T data, out string errorMessage)",
      "static bool MakeData(T inputData, out string outputData, out string errorMessage, bool prettyPrint = true)",
      "static void JsonLoadFile(string filename, out T data)",
      "static void JsonSaveFile(string filename, T data)",
      "static void JsonLoadData(string string_data, out T data)",
      "static string JsonMakeData(T data)"
    ]
  },
  "JsonObject": {
    "parent": null,
    "methods": [
      "void JsonObject()",
      "void Clear()",
      "void AddString(string name, string value)",
      "void AddInt(string name, int value)",
      "void AddFloat(string name, float value)",
      "void AddBool(string name, bool value)",
      "void AddVector2(string name, float x, float y)",
      "string GetJson()"
    ]
  },
  "KeysToUIElements": {
    "parent": null,
    "methods": [
      "void RegisterKeyToUIElement(int key_code, string name, bool is_image_set )",
      "static void Init()"
    ]
  },
  "LogTemplates": {
    "parent": null,
    "methods": [
      "void RegisterLogTamplate(LogTemplateID template_id, string author, string plugin, string label)",
      "static void Init()",
      "void Log(string message, LogTemplateID template_id = 0)",
      "void LogInfo(string message, LogTemplateID template_id = 0)",
      "void LogWarning(string message, LogTemplateID template_id = 0)",
      "void LogError(string message, LogTemplateID template_id = 0)",
      "void SQFPrint(string sqf_msg)",
      "void SQFLog(string sqf_msg)"
    ]
  },
  "SimpleCircularBuffer": {
    "parent": null,
    "methods": [
      "void SimpleCircularBuffer(int pSize, T pDefaultValue = 0)",
      "void Add(T newSample)"
    ]
  },
  "SimpleMovingAverage": {
    "parent": null,
    "methods": [
      "void SimpleMovingAverage(int pSize, T pDefaultValue = 0)"
    ]
  },
  "FullTimeData": {
    "parent": null,
    "methods": [
      "string FormatedAsTimestamp()",
      "string FormatedWithZero()",
      "string FormatedNonZero()",
      "static void ConvertSecondsToFullTime(int timeInSeconds, out FullTimeData fullTime)"
    ]
  },
  "TimeConversions": {
    "parent": null,
    "methods": [
      "static void ConvertSecondsToFullTime(int timeInSeconds, out FullTimeData fullTime)"
    ]
  },
  "CallQueueContext": {
    "parent": null,
    "methods": [
      "void CallQueueContext(Class target, string fn, Param params)",
      "void Call()",
      "void CallParams(Param params)",
      "void Invalidate()",
      "bool IsValid()",
      "void CallQueue()",
      "void Tick()",
      "void Call(Class obj, string fn_name, Param params = NULL)",
      "void RemoveCalls(Class obj)",
      "void DragQueue()",
      "void Pause()",
      "void Continue()",
      "void Stop()",
      "bool IsRunning()",
      "void Tick(float timeslice)",
      "void OnTimerQueueDestoryed()",
      "float GetTime()",
      "float GetDuration()",
      "float GetRemaining()",
      "float GetRunTime()",
      "void OnInit(int category)",
      "void OnStart(float duration, bool loop)",
      "void OnUpdate()",
      "void OnTimer()",
      "void SetRunning(bool running)",
      "void TimerQueue()",
      "void WidgetFadeTimer()",
      "void FadeIn(Widget w, float time, bool continue_ = false)",
      "void FadeOut(Widget w, float time, bool continue_ = false)",
      "void Timer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float duration, Managed obj, string fn_name, Param params = NULL, bool loop = false)",
      "void AnimationTimer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float targetVal, Managed obj, string updateFunc, string finishedFunc, float startingVal = 0, bool loop = false, float speed = 1.0, Param params = null, int category = CALL_CATEGORY_SYSTEM)",
      "float GetValue()",
      "void Animate(float val, float speed = 1.0)",
      "void AnimateLoop(float speed = 1.0)",
      "float GetTargetValue()",
      "void SetValue(float val)",
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "CallQueue": {
    "parent": "array",
    "methods": [
      "void CallQueue()",
      "void Tick()",
      "void Call(Class obj, string fn_name, Param params = NULL)",
      "void RemoveCalls(Class obj)",
      "void DragQueue()",
      "void Pause()",
      "void Continue()",
      "void Stop()",
      "bool IsRunning()",
      "void Tick(float timeslice)",
      "void OnTimerQueueDestoryed()",
      "float GetTime()",
      "float GetDuration()",
      "float GetRemaining()",
      "float GetRunTime()",
      "void OnInit(int category)",
      "void OnStart(float duration, bool loop)",
      "void OnUpdate()",
      "void OnTimer()",
      "void SetRunning(bool running)",
      "void TimerQueue()",
      "void WidgetFadeTimer()",
      "void FadeIn(Widget w, float time, bool continue_ = false)",
      "void FadeOut(Widget w, float time, bool continue_ = false)",
      "void Timer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float duration, Managed obj, string fn_name, Param params = NULL, bool loop = false)",
      "void AnimationTimer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float targetVal, Managed obj, string updateFunc, string finishedFunc, float startingVal = 0, bool loop = false, float speed = 1.0, Param params = null, int category = CALL_CATEGORY_SYSTEM)",
      "float GetValue()",
      "void Animate(float val, float speed = 1.0)",
      "void AnimateLoop(float speed = 1.0)",
      "float GetTargetValue()",
      "void SetValue(float val)",
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "DragQueue": {
    "parent": "CallQueue",
    "methods": [
      "void DragQueue()",
      "void Tick()",
      "void Pause()",
      "void Continue()",
      "void Stop()",
      "bool IsRunning()",
      "void Tick(float timeslice)",
      "void OnTimerQueueDestoryed()",
      "float GetTime()",
      "float GetDuration()",
      "float GetRemaining()",
      "float GetRunTime()",
      "void OnInit(int category)",
      "void OnStart(float duration, bool loop)",
      "void OnUpdate()",
      "void OnTimer()",
      "void SetRunning(bool running)",
      "void TimerQueue()",
      "void WidgetFadeTimer()",
      "void FadeIn(Widget w, float time, bool continue_ = false)",
      "void FadeOut(Widget w, float time, bool continue_ = false)",
      "void Timer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float duration, Managed obj, string fn_name, Param params = NULL, bool loop = false)",
      "void AnimationTimer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float targetVal, Managed obj, string updateFunc, string finishedFunc, float startingVal = 0, bool loop = false, float speed = 1.0, Param params = null, int category = CALL_CATEGORY_SYSTEM)",
      "float GetValue()",
      "void Animate(float val, float speed = 1.0)",
      "void AnimateLoop(float speed = 1.0)",
      "float GetTargetValue()",
      "void SetValue(float val)",
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "TimerBase": {
    "parent": null,
    "methods": [
      "void Pause()",
      "void Continue()",
      "void Stop()",
      "bool IsRunning()",
      "void Tick(float timeslice)",
      "void OnTimerQueueDestoryed()",
      "float GetTime()",
      "float GetDuration()",
      "float GetRemaining()",
      "float GetRunTime()",
      "void OnInit(int category)",
      "void OnStart(float duration, bool loop)",
      "void OnUpdate()",
      "void OnTimer()",
      "void SetRunning(bool running)",
      "void TimerQueue()",
      "void WidgetFadeTimer()",
      "void FadeIn(Widget w, float time, bool continue_ = false)",
      "void FadeOut(Widget w, float time, bool continue_ = false)",
      "void Timer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float duration, Managed obj, string fn_name, Param params = NULL, bool loop = false)",
      "void AnimationTimer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float targetVal, Managed obj, string updateFunc, string finishedFunc, float startingVal = 0, bool loop = false, float speed = 1.0, Param params = null, int category = CALL_CATEGORY_SYSTEM)",
      "float GetValue()",
      "void Animate(float val, float speed = 1.0)",
      "void AnimateLoop(float speed = 1.0)",
      "float GetTargetValue()",
      "void SetValue(float val)",
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "TimerQueue": {
    "parent": "array",
    "methods": [
      "void TimerQueue()",
      "void Tick(float timeslice)",
      "void WidgetFadeTimer()",
      "void FadeIn(Widget w, float time, bool continue_ = false)",
      "void FadeOut(Widget w, float time, bool continue_ = false)",
      "void OnTimer()",
      "void OnUpdate()",
      "void Timer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float duration, Managed obj, string fn_name, Param params = NULL, bool loop = false)",
      "void Stop()",
      "void AnimationTimer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float targetVal, Managed obj, string updateFunc, string finishedFunc, float startingVal = 0, bool loop = false, float speed = 1.0, Param params = null, int category = CALL_CATEGORY_SYSTEM)",
      "float GetValue()",
      "bool IsRunning()",
      "void Animate(float val, float speed = 1.0)",
      "void AnimateLoop(float speed = 1.0)",
      "float GetTargetValue()",
      "void SetValue(float val)",
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "WidgetFadeTimer": {
    "parent": "TimerBase",
    "methods": [
      "void WidgetFadeTimer()",
      "void FadeIn(Widget w, float time, bool continue_ = false)",
      "void FadeOut(Widget w, float time, bool continue_ = false)",
      "void OnTimer()",
      "void OnUpdate()",
      "void Timer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float duration, Managed obj, string fn_name, Param params = NULL, bool loop = false)",
      "void Stop()",
      "void AnimationTimer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float targetVal, Managed obj, string updateFunc, string finishedFunc, float startingVal = 0, bool loop = false, float speed = 1.0, Param params = null, int category = CALL_CATEGORY_SYSTEM)",
      "float GetValue()",
      "bool IsRunning()",
      "void Tick(float timeslice)",
      "void Animate(float val, float speed = 1.0)",
      "void AnimateLoop(float speed = 1.0)",
      "float GetTargetValue()",
      "void SetValue(float val)",
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "Timer": {
    "parent": "TimerBase",
    "methods": [
      "void Timer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float duration, Managed obj, string fn_name, Param params = NULL, bool loop = false)",
      "void OnTimer()",
      "void Stop()",
      "void AnimationTimer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float targetVal, Managed obj, string updateFunc, string finishedFunc, float startingVal = 0, bool loop = false, float speed = 1.0, Param params = null, int category = CALL_CATEGORY_SYSTEM)",
      "float GetValue()",
      "bool IsRunning()",
      "void Tick(float timeslice)",
      "void Animate(float val, float speed = 1.0)",
      "void AnimateLoop(float speed = 1.0)",
      "float GetTargetValue()",
      "void SetValue(float val)",
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "AnimationTimer": {
    "parent": null,
    "methods": [
      "void AnimationTimer(int category = CALL_CATEGORY_SYSTEM)",
      "void Run(float targetVal, Managed obj, string updateFunc, string finishedFunc, float startingVal = 0, bool loop = false, float speed = 1.0, Param params = null, int category = CALL_CATEGORY_SYSTEM)",
      "float GetValue()",
      "bool IsRunning()",
      "void Tick(float timeslice)",
      "void Animate(float val, float speed = 1.0)",
      "void AnimateLoop(float speed = 1.0)",
      "float GetTargetValue()",
      "void SetValue(float val)",
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "AnimatorTimer": {
    "parent": null,
    "methods": [
      "void Animate(float val, float speed = 1.0)",
      "void AnimateLoop(float speed = 1.0)",
      "float GetValue()",
      "float GetTargetValue()",
      "void SetValue(float val)",
      "bool IsRunning()",
      "void Tick(float timeslice)",
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "multiMap": {
    "parent": null,
    "methods": [
      "bool HasKey(K key)",
      "void Insert(K key, V value)",
      "void RemoveByIndex(int index)",
      "void Remove(K key)",
      "int Count()",
      "void Clear()",
      "int GetTemperatureColor(int temperature)",
      "bool GetProfileValueBool(string name, bool def = false)",
      "void SetProfileValueBool(string name, bool value)",
      "int GetNumberOfSetBits(int i)"
    ]
  },
  "UIManager": {
    "parent": null,
    "methods": [
      "void EnterServerBrowser(UIMenuPanel parentMenu)",
      "void HideScriptedMenu(UIScriptedMenu menu)",
      "bool IsDialogVisible()",
      "bool IsDialogHiding()",
      "bool IsModalVisible()",
      "void CloseSpecificDialog(int id)",
      "void CloseDialog()",
      "void HideDialog()",
      "void ShowDialog(string caption, string text, int id, int butts , int def, int type , UIScriptedMenu handler)",
      "bool ShowCursor(bool visible)",
      "bool IsCursorVisible()",
      "bool IsDialogQueued()",
      "bool ShowQueuedDialog()",
      "int GetLoginQueuePosition()",
      "bool ScreenFadeVisible()",
      "void ScreenFadeIn(float duration, string text, int backgroundColor, int textColor)",
      "void ScreenFadeOut(float duration)",
      "bool IsScaledMode()",
      "void SetScaledMode(bool enabled)",
      "bool Back()",
      "bool CloseAll()",
      "bool CloseAllSubmenus()",
      "bool CloseMenu(int id)",
      "bool HideMenu(int id)",
      "bool IsMenuOpen(int id)",
      "void OpenWindow( int id )",
      "void CloseWindow( int id )",
      "void DeleteWindow( UIScriptedWindow window )",
      "bool IsWindowOpened( int id )",
      "void ShowUICursor( bool visible )",
      "string GetRandomLoadingBackground()"
    ]
  },
  "UIMenuPanel": {
    "parent": null,
    "methods": [
      "void SetSubMenu(UIMenuPanel submenu)",
      "void SetparentMenu(UIMenuPanel parent)",
      "bool CanClose()",
      "bool CanCloseOnEscape()",
      "void DestroySubmenu()",
      "bool IsAnyMenuVisible()",
      "bool IsVisible()",
      "bool IsCreatedHidden()",
      "void OnVisibilityChanged(bool isVisible)",
      "void Close()",
      "bool UseMouse()",
      "bool UseKeyboard()",
      "bool UseGamepad()",
      "int GetID()",
      "void Refresh()",
      "void LockControls()",
      "void UnlockControls()",
      "void UIScriptedMenu()",
      "void SetID(int id)",
      "void SetWidgetAnimAlpha( Widget widget )",
      "void Cleanup()",
      "void OnShow()",
      "void OnHide()",
      "void Update(float timeslice)",
      "void SetFadingPanels(Widget panel0, Widget panel1, Widget panel2, Widget panel3, Widget panel4)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int  column,\tint  oldRow, int  oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "bool OnXboxEvent(int xboxEvent)",
      "void OnRPC(ParamsReadContext ctx)",
      "void OnRPCEx(int rpc_type, ParamsReadContext ctx)",
      "void InitNoteWrite(EntityAI paper, EntityAI pen, string text = )",
      "void InitNoteRead(string text = )",
      "void InitMapItem(EntityAI item)",
      "void LoadMapMarkers()",
      "bool IsHandlingPlayerDeathEvent()",
      "void OnPlayerDeath()"
    ]
  },
  "UIScriptedMenu": {
    "parent": "UIMenuPanel",
    "methods": [
      "void LockControls()",
      "void UnlockControls()",
      "void UIScriptedMenu()",
      "void SetID(int id)",
      "int GetID()",
      "void SetWidgetAnimAlpha( Widget widget )",
      "void Cleanup()",
      "void OnShow()",
      "void OnHide()",
      "void Update(float timeslice)",
      "void SetFadingPanels(Widget panel0, Widget panel1, Widget panel2, Widget panel3, Widget panel4)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int  column,\tint  oldRow, int  oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)",
      "bool OnXboxEvent(int xboxEvent)",
      "void OnRPC(ParamsReadContext ctx)",
      "void OnRPCEx(int rpc_type, ParamsReadContext ctx)",
      "void InitNoteWrite(EntityAI paper, EntityAI pen, string text = )",
      "void InitNoteRead(string text = )",
      "void InitMapItem(EntityAI item)",
      "void LoadMapMarkers()",
      "bool IsHandlingPlayerDeathEvent()",
      "void OnPlayerDeath()"
    ]
  },
  "UIScriptedWindow": {
    "parent": null,
    "methods": [
      "static void AddToActiveWindows( int id, UIScriptedWindow window )",
      "static void RemoveFromActiveWindows( int id )",
      "void UIScriptedWindow(int id)",
      "void ShowWindow()",
      "void HideWindow()",
      "void CloseWindow()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int  column,\tint  oldRow, int  oldColumn)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnController(Widget w, int control, int value)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnKeyUp(Widget w, int x, int y, int key)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDragging(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived(Widget w, int x, int y, Widget reciever)",
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)"
    ]
  },
  "ItemVariableFlags": {
    "parent": null,
    "methods": [
      "static void Init()"
    ]
  },
  "CachedObjectsParams": {
    "parent": null,
    "methods": [
      "static void Init()"
    ]
  },
  "CachedObjectsArrays": {
    "parent": null,
    "methods": [
      "static void Init()"
    ]
  },
  "Vector2": {
    "parent": null,
    "methods": [
      "void Vector2(float value_x, float value_y)"
    ]
  },
  "BoatOwnerState": {
    "parent": null,
    "methods": [
      "float GetThrottle()",
      "void SetThrottle(float value)",
      "float GetSteering()",
      "void SetSteering(float value)",
      "int GetGearCount()",
      "int GetNeutralGear()",
      "int GetGear()",
      "int GetCurrentGear()",
      "int GetClutch()",
      "void ShiftUp()",
      "void ShiftTo(int gear)",
      "void ShiftDown()",
      "bool HasEngine()",
      "float EngineGetRPMMin()",
      "float EngineGetRPMIdle()",
      "float EngineGetRPMMax()",
      "float EngineGetRPMRedline()",
      "float EngineGetRPM()",
      "bool EngineIsOn()",
      "void EngineStart()",
      "void EngineStop()",
      "float PropellerGetAngularVelocity()",
      "float GetFluidCapacity(BoatFluid fluid)",
      "float GetFluidFraction(BoatFluid fluid)",
      "void Leak(BoatFluid fluid, float amount)",
      "void LeakAll(BoatFluid fluid)",
      "void Fill(BoatFluid fluid, float amount)",
      "void OnInput(float dt)",
      "bool OnBeforeEngineStart()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void OnGearChanged(int newGear, int oldGear)",
      "void OnFluidChanged(BoatFluid fluid, float newValue, float oldValue)",
      "float OnSound(BoatSoundCtrl ctrl, float oldValue)"
    ]
  },
  "BoatMove": {
    "parent": null,
    "methods": [
      "float GetThrottle()",
      "void SetThrottle(float value)",
      "float GetSteering()",
      "void SetSteering(float value)",
      "int GetGearCount()",
      "int GetNeutralGear()",
      "int GetGear()",
      "int GetCurrentGear()",
      "int GetClutch()",
      "void ShiftUp()",
      "void ShiftTo(int gear)",
      "void ShiftDown()",
      "bool HasEngine()",
      "float EngineGetRPMMin()",
      "float EngineGetRPMIdle()",
      "float EngineGetRPMMax()",
      "float EngineGetRPMRedline()",
      "float EngineGetRPM()",
      "bool EngineIsOn()",
      "void EngineStart()",
      "void EngineStop()",
      "float PropellerGetAngularVelocity()",
      "float GetFluidCapacity(BoatFluid fluid)",
      "float GetFluidFraction(BoatFluid fluid)",
      "void Leak(BoatFluid fluid, float amount)",
      "void LeakAll(BoatFluid fluid)",
      "void Fill(BoatFluid fluid, float amount)",
      "void OnInput(float dt)",
      "bool OnBeforeEngineStart()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void OnGearChanged(int newGear, int oldGear)",
      "void OnFluidChanged(BoatFluid fluid, float newValue, float oldValue)",
      "float OnSound(BoatSoundCtrl ctrl, float oldValue)"
    ]
  },
  "Boat": {
    "parent": "Transport",
    "methods": [
      "float GetThrottle()",
      "void SetThrottle(float value)",
      "float GetSteering()",
      "void SetSteering(float value)",
      "int GetGearCount()",
      "int GetNeutralGear()",
      "int GetGear()",
      "int GetCurrentGear()",
      "int GetClutch()",
      "void ShiftUp()",
      "void ShiftTo(int gear)",
      "void ShiftDown()",
      "bool HasEngine()",
      "float EngineGetRPMMin()",
      "float EngineGetRPMIdle()",
      "float EngineGetRPMMax()",
      "float EngineGetRPMRedline()",
      "float EngineGetRPM()",
      "bool EngineIsOn()",
      "void EngineStart()",
      "void EngineStop()",
      "float PropellerGetAngularVelocity()",
      "float GetFluidCapacity(BoatFluid fluid)",
      "float GetFluidFraction(BoatFluid fluid)",
      "void Leak(BoatFluid fluid, float amount)",
      "void LeakAll(BoatFluid fluid)",
      "void Fill(BoatFluid fluid, float amount)",
      "void OnInput(float dt)",
      "bool OnBeforeEngineStart()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void OnGearChanged(int newGear, int oldGear)",
      "void OnFluidChanged(BoatFluid fluid, float newValue, float oldValue)",
      "float OnSound(BoatSoundCtrl ctrl, float oldValue)"
    ]
  },
  "Car": {
    "parent": "Transport",
    "methods": [
      "float GetSpeedometer()",
      "float GetSpeedometerAbsolute()",
      "bool IsAreaAtDoorFree( int currentSeat, float maxAllowedObjHeight = 0.5, float horizontalExtents = 0.5, float playerHeight = 1.7 )",
      "bool DetectFlippedUsingWheels(VehicleFlippedContext ctx, bool disallowSide)",
      "float GetSteering()",
      "void SetSteering( float in, bool analog = false )",
      "float GetThrustTurbo()",
      "float GetThrustGentle()",
      "float GetThrust()",
      "void SetThrust( float in, float gentle = 0, float turbo = 0 )",
      "float GetBrake()",
      "void SetBrake( float in, float panic = 0, bool gentle = false )",
      "float GetHandbrake()",
      "void SetHandbrake( float in )",
      "void SetBrakesActivateWithoutDriver( bool activate = true )",
      "float GetClutch()",
      "void SetClutchState( bool in )",
      "int GetGear()",
      "void ShiftUp()",
      "void ShiftTo( CarGear gear )",
      "void ShiftDown()",
      "float GetFluidCapacity( CarFluid fluid )",
      "float GetFluidFraction( CarFluid fluid )",
      "void Leak( CarFluid fluid, float amount )",
      "void LeakAll( CarFluid fluid )",
      "void Fill( CarFluid fluid, float amount )",
      "void OnFluidChanged( CarFluid fluid, float newValue, float oldValue )",
      "float EngineGetRPMMin()",
      "float EngineGetRPMIdle()",
      "float EngineGetRPMMax()",
      "float EngineGetRPMRedline()",
      "float EngineGetRPM()",
      "bool EngineIsOn()",
      "void EngineStart()",
      "bool OnBeforeEngineStart()",
      "void OnEngineStart()",
      "void EngineStop()",
      "void OnEngineStop()",
      "void SetEnginePos(vector pos)",
      "int GetGearsCount()",
      "void OnGearChanged( int newGear, int oldGear )",
      "bool WheelIsAnyLocked()",
      "float WheelGetAngularVelocity( int wheelIdx )",
      "bool WheelHasContact( int wheelIdx )",
      "bool WheelIsLocked( int wheelIdx )",
      "int WheelCount()",
      "int WheelCountPresent()",
      "void OnContact( string zoneName, vector localPos, IEntity other, Contact data )",
      "float OnSound( CarSoundCtrl ctrl, float oldValue )",
      "void OnInput( float dt )",
      "void OnUpdate( float dt )",
      "void ForcePosition( vector pos )",
      "void ForceDirection( vector dir )",
      "void CarController()",
      "void SetBrake( float in, float panic = 0 )"
    ]
  },
  "CarController": {
    "parent": null,
    "methods": [
      "void CarController()",
      "float GetSteering()",
      "void SetSteering( float in, bool analog = false )",
      "float GetThrustTurbo()",
      "float GetThrustGentle()",
      "float GetThrust()",
      "void SetThrust( float in, float gentle = 0, float turbo = 0 )",
      "float GetBrake()",
      "void SetBrake( float in, float panic = 0 )",
      "int GetGear()",
      "void ShiftUp()",
      "void ShiftTo( CarGear gear )",
      "void ShiftDown()"
    ]
  },
  "Helicopter": {
    "parent": "Transport",
    "methods": [
      "bool IsEngineOn()",
      "void EngineStart()",
      "void EngineStop()",
      "bool IsAutohoverOn()",
      "void AutohoverOn()",
      "void AutohoverOff()"
    ]
  },
  "HelicopterAuto": {
    "parent": "Helicopter",
    "methods": [
      "bool IsEngineOn()",
      "void EngineStart()",
      "void EngineStop()",
      "bool IsAutohoverOn()",
      "void AutohoverOn()",
      "void AutohoverOff()"
    ]
  },
  "TransportMove": {
    "parent": null,
    "methods": [
      "void SetWorldTransform(vector transform[4])",
      "void GetWorldTransform(out vector transform[4])",
      "void SetLinearVelocity(vector value)",
      "void GetLinearVelocity(out vector value)",
      "void SetAngularVelocity(vector value)",
      "void GetAngularVelocity(out vector value)",
      "void GetTransform(inout vector transform[4])",
      "void Transport()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "int GetMeleeTargetType()",
      "void Synchronize()",
      "int CrewSize()",
      "int CrewPositionIndex( int componentIdx )",
      "int CrewMemberIndex( Human player )",
      "void CrewEntry( int posIdx, out vector pos, out vector dir )",
      "void CrewEntryWS( int posIdx, out vector pos, out vector dir )",
      "void CrewTransform( int posIdx, out vector mat[4] )",
      "void CrewTransformWS( int posIdx, out vector mat[4] )",
      "void CrewGetIn( Human player, int posIdx )",
      "void CrewDeath( int posIdx )",
      "bool IsTransport()",
      "bool IsIgnoredByConstruction()",
      "bool IsHealthVisible()",
      "bool ShowZonesHealth()",
      "int GetHideIconMask()",
      "float GetMomentum()",
      "bool IsVitalSparkPlug()",
      "string GetVehicleType()",
      "string GetActionCompNameFuel()",
      "float GetActionDistanceFuel()",
      "bool DetectFlippedUsingSurface(VehicleFlippedContext ctx, float angleTolerance)",
      "bool DetectFlipped(VehicleFlippedContext ctx)",
      "bool IsFlipped()",
      "bool IsActionFlipped(Man player)",
      "bool IsAnyCrewPresent()",
      "float GetTransportCameraDistance()",
      "void MarkCrewMemberUnconscious(int crewMemberIndex)",
      "void MarkCrewMemberDead(int crewMemberIndex)",
      "void HandleByCrewMemberState(ECrewMemberState state)",
      "int GetAnimInstance()",
      "int GetSeatAnimationType( int posIdx )",
      "int Get3rdPersonCameraType()",
      "bool CrewCanGetThrough( int posIdx )",
      "bool CanReachSeatFromSeat( int currentSeat, int nextSeat )",
      "bool CanReachSeatFromDoors( string pSeatSelection, vector pFromPos, float pDistance = 1.0 )",
      "bool CanReachDoorsFromSeat( string pDoorsSelection, int pCurrentSeat )",
      "int GetSeatIndexFromDoor( string pDoorSelection )",
      "bool IsIgnoredObject( Object o )",
      "void SetEngineZoneReceivedHit(bool pState)",
      "bool HasEngineZoneReceivedHit()",
      "bool IsAreaAtDoorFree( int currentSeat, float maxAllowedObjHeight, inout vector extents, out vector transform[4] )",
      "bool IsAreaAtDoorFree( int currentSeat, float maxAllowedObjHeight = 0.5, float horizontalExtents = 0.5, float playerHeight = 1.7 )",
      "void SetData(vector localPos, IEntity other, float impulse)",
      "void VehicleFlippedContext()",
      "void Reset(bool isDebug = false)",
      "void AddShape(Shape shape)",
      "bool IsDebug()"
    ]
  },
  "Transport": {
    "parent": "Pawn",
    "methods": [
      "void Transport()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "int GetMeleeTargetType()",
      "void Synchronize()",
      "int CrewSize()",
      "int CrewPositionIndex( int componentIdx )",
      "int CrewMemberIndex( Human player )",
      "void CrewEntry( int posIdx, out vector pos, out vector dir )",
      "void CrewEntryWS( int posIdx, out vector pos, out vector dir )",
      "void CrewTransform( int posIdx, out vector mat[4] )",
      "void CrewTransformWS( int posIdx, out vector mat[4] )",
      "void CrewGetIn( Human player, int posIdx )",
      "void CrewDeath( int posIdx )",
      "bool IsTransport()",
      "bool IsIgnoredByConstruction()",
      "bool IsHealthVisible()",
      "bool ShowZonesHealth()",
      "int GetHideIconMask()",
      "float GetMomentum()",
      "bool IsVitalSparkPlug()",
      "string GetVehicleType()",
      "string GetActionCompNameFuel()",
      "float GetActionDistanceFuel()",
      "bool DetectFlippedUsingSurface(VehicleFlippedContext ctx, float angleTolerance)",
      "bool DetectFlipped(VehicleFlippedContext ctx)",
      "bool IsFlipped()",
      "bool IsActionFlipped(Man player)",
      "bool IsAnyCrewPresent()",
      "float GetTransportCameraDistance()",
      "void MarkCrewMemberUnconscious(int crewMemberIndex)",
      "void MarkCrewMemberDead(int crewMemberIndex)",
      "void HandleByCrewMemberState(ECrewMemberState state)",
      "int GetAnimInstance()",
      "int GetSeatAnimationType( int posIdx )",
      "int Get3rdPersonCameraType()",
      "bool CrewCanGetThrough( int posIdx )",
      "bool CanReachSeatFromSeat( int currentSeat, int nextSeat )",
      "bool CanReachSeatFromDoors( string pSeatSelection, vector pFromPos, float pDistance = 1.0 )",
      "bool CanReachDoorsFromSeat( string pDoorsSelection, int pCurrentSeat )",
      "int GetSeatIndexFromDoor( string pDoorSelection )",
      "bool IsIgnoredObject( Object o )",
      "void SetEngineZoneReceivedHit(bool pState)",
      "bool HasEngineZoneReceivedHit()",
      "bool IsAreaAtDoorFree( int currentSeat, float maxAllowedObjHeight, inout vector extents, out vector transform[4] )",
      "bool IsAreaAtDoorFree( int currentSeat, float maxAllowedObjHeight = 0.5, float horizontalExtents = 0.5, float playerHeight = 1.7 )",
      "void SetData(vector localPos, IEntity other, float impulse)",
      "void VehicleFlippedContext()",
      "void Reset(bool isDebug = false)",
      "void AddShape(Shape shape)",
      "bool IsDebug()"
    ]
  },
  "VehicleContactData": {
    "parent": null,
    "methods": [
      "void SetData(vector localPos, IEntity other, float impulse)",
      "void VehicleFlippedContext()",
      "void Reset(bool isDebug = false)",
      "void AddShape(Shape shape)",
      "bool IsDebug()"
    ]
  },
  "VehicleFlippedContext": {
    "parent": null,
    "methods": [
      "void VehicleFlippedContext()",
      "void Reset(bool isDebug = false)",
      "void AddShape(Shape shape)",
      "bool IsDebug()"
    ]
  },
  "BloodyHands": {
    "parent": null,
    "methods": [
      "void BloodyHands( string normal_material, string bloody_material )",
      "string GetMaterial( int material_type )",
      "void SetMaterial( int material_type, string material )"
    ]
  },
  "CameraShake": {
    "parent": null,
    "methods": [
      "void CameraShake( float strength_factor, float radius, float smoothness, float radius_decay_speed )",
      "void Update(float delta_time, out float x_axis, out float y_axis)"
    ]
  },
  "ConsumeConditionData": {
    "parent": null,
    "methods": [
      "void ConsumeConditionData(EntityAI consumer, ItemBase item)"
    ]
  },
  "ContextMenu": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ContextMenu()",
      "void Init(Widget layoutRoot, bool builtIn = false)",
      "void Show(int x, int y)",
      "void SetSize(float x, float y)",
      "void ShowBackdrop(bool show)",
      "void Hide()",
      "bool IsVisible()",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "void Add(string label, Class obj, string fn_name, Param params)",
      "void AddEx(string label, int labelColor, Class obj, string funcName, Param params)",
      "void Remove(int index)",
      "int Count()",
      "void Clear()",
      "void BuildContextMenu(notnull EntityAI entity, notnull Widget rootWidget, Class target)",
      "static void DisplayContextMenu(int x, int y, notnull EntityAI entity, notnull Widget rootWidget, Class target)"
    ]
  },
  "CorpseData": {
    "parent": null,
    "methods": [
      "void CorpseData(notnull PlayerBase player,int time_of_death)",
      "void UpdateCorpseState(bool force_check = false)",
      "bool CanProgressDecay()"
    ]
  },
  "CraftingManager": {
    "parent": null,
    "methods": [
      "void CraftingManager(PlayerBase player, PluginRecipesManager recipesManager)",
      "void SetRecipeID(int recipeID)",
      "int GetRecipeID()",
      "bool IsInventoryCraft()",
      "bool IsWorldCraft()",
      "int GetRecipesCount()",
      "void SetNextRecipe()",
      "void OnUpdate( Object item, Object target, int component_index )",
      "bool SetInventoryCraft(int recipeID, ItemBase item1, ItemBase item2)",
      "void ResetInventoryCraft()",
      "bool IsEnableDebugCrafting()",
      "int GetRecipeID( int action_index )"
    ]
  },
  "DebugMonitorValues": {
    "parent": null,
    "methods": [
      "void DebugMonitorValues(PlayerBase player)",
      "void Init()",
      "void OnScheduledTick(float deltatime)",
      "void CheckValues()",
      "float GetBlood()",
      "float GetHealth()",
      "string GetLastDamage()",
      "void SetLastDamage(string value)",
      "void CheckHealth()",
      "void CheckBlood()",
      "void CheckLastDamage()",
      "void SendValue(int value_type, Param param)",
      "void ReceiveValue(int value_type, Param param)",
      "void OnRPCFloat(ParamsReadContext ctx)",
      "void OnRPCString(ParamsReadContext ctx)"
    ]
  },
  "EmoteConstructor": {
    "parent": null,
    "methods": [
      "bool ConstructEmotes(PlayerBase player, out map<int, ref EmoteBase> emoteMap)",
      "void RegisterEmotes(TTypenameArray emotes)"
    ]
  },
  "EmoteCB": {
    "parent": null,
    "methods": [
      "bool CancelCondition()",
      "bool IsEmoteCallback()",
      "void OnAnimationEvent(int pEventID)",
      "bool IsGestureCallback()",
      "void EmoteLauncher(int emoteID, bool interrupts_same)",
      "void SetForced(int mode)",
      "int GetForced()",
      "int GetID()",
      "void EmoteManager(PlayerBase player)",
      "void ConstructData()",
      "void SetGesture(int id)",
      "int GetGesture()",
      "int DetermineGestureIndex()",
      "bool DetermineEmoteData(EmoteBase emote, out int callback_ID, out int stancemask, out bool is_fullbody)",
      "void Update(float deltaT)",
      "void OnEmoteEnd()",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void OnCallbackEnd()",
      "void AfterStoreLoad()",
      "bool PlayEmote(int id)",
      "void CreateEmoteCallback(typename callbacktype, int id, int mask, bool fullbody)",
      "void HideItemInHands()",
      "void ShowItemInHands()",
      "void RequestCommitSuicide()",
      "void CommitSuicide()",
      "void KillPlayer()",
      "void LogSuicide()",
      "void CreateEmoteCBFromMenu(int id, bool interrupts_same = false)",
      "void InterruptCallbackCommand()",
      "void EndCallbackCommand()",
      "void SendEmoteRequestSync(int id)",
      "bool IsControllsLocked()",
      "bool CanPlayEmote(int id)",
      "bool CanPlayEmoteClientCheck(int id)",
      "void PlaySurrenderInOut(bool state)",
      "void SetEmoteLockState(bool state)",
      "void CheckEmoteLockedState()",
      "void EndSurrenderRequest(SurrenderData data = null)",
      "void ServerRequestEmoteCancel()",
      "bool InterruptGestureCheck()",
      "bool InterruptWaterCheck()",
      "bool IsEmotePlaying()",
      "void CreateBleedingEffect(int Callback_ID)",
      "void PickEmote(int gestureslot)",
      "void End()",
      "void ChainedDropAndKillPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void Execute(HumanInventoryWithFSM fsm_to_notify = null)"
    ]
  },
  "EmoteLauncher": {
    "parent": null,
    "methods": [
      "void EmoteLauncher(int emoteID, bool interrupts_same)",
      "void SetForced(int mode)",
      "int GetForced()",
      "int GetID()",
      "void EmoteManager(PlayerBase player)",
      "void ConstructData()",
      "void SetGesture(int id)",
      "int GetGesture()",
      "int DetermineGestureIndex()",
      "bool DetermineEmoteData(EmoteBase emote, out int callback_ID, out int stancemask, out bool is_fullbody)",
      "void Update(float deltaT)",
      "void OnEmoteEnd()",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void OnCallbackEnd()",
      "void AfterStoreLoad()",
      "bool PlayEmote(int id)",
      "void CreateEmoteCallback(typename callbacktype, int id, int mask, bool fullbody)",
      "void HideItemInHands()",
      "void ShowItemInHands()",
      "void RequestCommitSuicide()",
      "void CommitSuicide()",
      "void KillPlayer()",
      "void LogSuicide()",
      "void CreateEmoteCBFromMenu(int id, bool interrupts_same = false)",
      "void InterruptCallbackCommand()",
      "void EndCallbackCommand()",
      "void SendEmoteRequestSync(int id)",
      "bool IsControllsLocked()",
      "bool CanPlayEmote(int id)",
      "bool CanPlayEmoteClientCheck(int id)",
      "void PlaySurrenderInOut(bool state)",
      "void SetEmoteLockState(bool state)",
      "void CheckEmoteLockedState()",
      "void EndSurrenderRequest(SurrenderData data = null)",
      "void ServerRequestEmoteCancel()",
      "bool InterruptGestureCheck()",
      "bool InterruptWaterCheck()",
      "bool IsEmotePlaying()",
      "void CreateBleedingEffect(int Callback_ID)",
      "void PickEmote(int gestureslot)",
      "void End()",
      "void ChainedDropAndKillPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void Execute(HumanInventoryWithFSM fsm_to_notify = null)"
    ]
  },
  "EmoteManager": {
    "parent": null,
    "methods": [
      "void EmoteManager(PlayerBase player)",
      "void ConstructData()",
      "void SetGesture(int id)",
      "int GetGesture()",
      "int DetermineGestureIndex()",
      "bool DetermineEmoteData(EmoteBase emote, out int callback_ID, out int stancemask, out bool is_fullbody)",
      "void Update(float deltaT)",
      "void OnEmoteEnd()",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void OnCallbackEnd()",
      "void AfterStoreLoad()",
      "bool PlayEmote(int id)",
      "void CreateEmoteCallback(typename callbacktype, int id, int mask, bool fullbody)",
      "void HideItemInHands()",
      "void ShowItemInHands()",
      "void RequestCommitSuicide()",
      "void CommitSuicide()",
      "void KillPlayer()",
      "void LogSuicide()",
      "void CreateEmoteCBFromMenu(int id, bool interrupts_same = false)",
      "void InterruptCallbackCommand()",
      "void EndCallbackCommand()",
      "void SendEmoteRequestSync(int id)",
      "bool IsControllsLocked()",
      "bool CanPlayEmote(int id)",
      "bool CanPlayEmoteClientCheck(int id)",
      "void PlaySurrenderInOut(bool state)",
      "void SetEmoteLockState(bool state)",
      "void CheckEmoteLockedState()",
      "void EndSurrenderRequest(SurrenderData data = null)",
      "void ServerRequestEmoteCancel()",
      "bool InterruptGestureCheck()",
      "bool InterruptWaterCheck()",
      "bool IsEmotePlaying()",
      "void CreateBleedingEffect(int Callback_ID)",
      "void PickEmote(int gestureslot)",
      "void End()",
      "void ChainedDropAndKillPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void Execute(HumanInventoryWithFSM fsm_to_notify = null)"
    ]
  },
  "SurrenderData": {
    "parent": null,
    "methods": [
      "void End()",
      "void ChainedDropAndKillPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void Execute(HumanInventoryWithFSM fsm_to_notify = null)"
    ]
  },
  "ChainedDropAndKillPlayerLambda": {
    "parent": null,
    "methods": [
      "void ChainedDropAndKillPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void Execute(HumanInventoryWithFSM fsm_to_notify = null)"
    ]
  },
  "Explosion": {
    "parent": null,
    "methods": [
      "void SpawnEffect( vector position, Effect eff, vector pos, vector ori)",
      "void ExplosionTest()",
      "void ExplodeNow()"
    ]
  },
  "ExplosionTest": {
    "parent": null,
    "methods": [
      "void ExplosionTest()",
      "void ExplodeNow()"
    ]
  },
  "HeatComfortAnimHandler": {
    "parent": null,
    "methods": [
      "void HeatComfortAnimHandler(PlayerBase player)",
      "void Update(float delta_time, HumanMovementState hms)",
      "float GetEventTime(float hc_value ,float threshold_low, float threshold_high, float low_min, float high_min, float low_max, float high_max)",
      "void Process(float delta_time)"
    ]
  },
  "Hologram": {
    "parent": null,
    "methods": [
      "void Hologram(PlayerBase player, vector pos, ItemBase item)",
      "void SetAnimations()",
      "void UpdateSelections()",
      "string ProjectionBasedOnparent()",
      "string GetProjectionName(ItemBase item)",
      "static bool DoesHaveProjection(ItemBase item)",
      "void UpdateHologram(float timeslice)",
      "void CreateTrigger()",
      "void RefreshTrigger()",
      "void DebugText(string header, bool mustBeTrue = false, bool condition = true, string info = )",
      "void DebugConfigValues()",
      "void EvaluateCollision(ItemBase action_item = null)",
      "bool IsClippingRoof()",
      "bool IsCollidingAngle()",
      "void DrawDebugCollisionBox( vector min_max[2], int color )",
      "void DestroyDebugCollisionBox()",
      "bool IsCollidingBBox(ItemBase action_item = null)",
      "bool IsBaseViable()",
      "bool IsCollidingGPlot()",
      "bool IsCollidingZeroPos()",
      "bool IsBehindObstacle()",
      "bool IsBaseStatic( Object objectToCheck )",
      "bool IsObjectStatic( Object obj )",
      "bool IsBaseIntact( Object under_left_close, Object under_right_close, Object under_left_far, Object under_right_far )",
      "void DrawArrow(vector from, vector to, bool condition)",
      "void DrawSphere(vector pos, bool condition)",
      "void DrawBaseSpheres(array<bool> conditions)",
      "void DrawDebugArrow(float start, float dist, int color = 0xFF1FFFFF)",
      "bool IsBaseFlat( vector contact_pos_left_close, vector contact_pos_right_close, vector contact_pos_left_far, vector contact_pos_right_far )",
      "bool IsPlacementPermitted()",
      "bool HeightPlacementCheck()",
      "bool IsUnderwater()",
      "bool IsInTerrain()",
      "void CheckPowerSource()",
      "void GetProjectionCollisionBox( out vector min_max[2] )",
      "bool IsSurfaceWater( vector position )",
      "bool IsSurfaceSea( vector position )",
      "bool SetHologramPosition(vector startPosition, float minProjectionDistance, float maxProjectionDistance, inout vector contactPosition)",
      "bool IsFenceOrWatchtowerKit()",
      "bool IsProjectionTrap()",
      "float GetProjectionDiameter()",
      "float GetProjectionRadius()",
      "void SetUpdatePosition( bool state )",
      "bool GetUpdatePosition()",
      "void SetProjectionEntity( EntityAI projection )",
      "void SetIsFloating( bool is_floating )",
      "void SetIsColliding( bool is_colliding )",
      "void SetIsHidden( bool is_hidden )",
      "void SetIsCollidingPlayer( bool is_colliding )",
      "void SetIsCollidingGPlot( bool is_colliding_gplot )",
      "bool IsFloating()",
      "bool IsColliding()",
      "bool IsHidden()",
      "bool IsCollidingPlayer()",
      "void SetProjectionPosition(vector position)",
      "void SetProjectionOrientation(vector orientation)",
      "void AddProjectionRotation( float addition )",
      "void SubtractProjectionRotation( float subtraction )",
      "int GetHiddenSelection( string selection )",
      "void SetSelectionToRefresh( string selection )",
      "void SetSelectionToRefresh(array<string> selection)",
      "void RefreshVisual()",
      "string CorrectMaterialPathName()",
      "bool IsRestrictedFromAdvancedPlacing()",
      "void OnEnter( Object obj )",
      "void OnLeave( Object obj )",
      "void UpdateInsiders(int timeout)",
      "void SetparentObject( Hologram projection )",
      "void SetparentOwner( PlayerBase player )"
    ]
  },
  "ProjectionTrigger": {
    "parent": "Trigger",
    "methods": [
      "void OnEnter( Object obj )",
      "void OnLeave( Object obj )",
      "void UpdateInsiders(int timeout)",
      "void SetparentObject( Hologram projection )",
      "void SetparentOwner( PlayerBase player )"
    ]
  },
  "InjuryHandlerThresholds": {
    "parent": null,
    "methods": [
      "void InjuryAnimationHandler(PlayerBase player)",
      "bool IsInjuryAnimEnabled()",
      "float GetInjuryAnimValue()",
      "void Update(float deltaT)",
      "void CheckValue(bool forceUpdate = false)",
      "void Synchronize(eInjuryHandlerLevels level)",
      "void SendValue(eInjuryHandlerLevels level)",
      "void SetInjuryCommandParams(bool enable, eInjuryHandlerLevels level)",
      "float GetInjuryValue(eInjuryHandlerLevels level)"
    ]
  },
  "InjuryAnimValues": {
    "parent": null,
    "methods": [
      "void InjuryAnimationHandler(PlayerBase player)",
      "bool IsInjuryAnimEnabled()",
      "float GetInjuryAnimValue()",
      "void Update(float deltaT)",
      "void CheckValue(bool forceUpdate = false)",
      "void Synchronize(eInjuryHandlerLevels level)",
      "void SendValue(eInjuryHandlerLevels level)",
      "void SetInjuryCommandParams(bool enable, eInjuryHandlerLevels level)",
      "float GetInjuryValue(eInjuryHandlerLevels level)"
    ]
  },
  "InjuryAnimationHandler": {
    "parent": null,
    "methods": [
      "void InjuryAnimationHandler(PlayerBase player)",
      "bool IsInjuryAnimEnabled()",
      "float GetInjuryAnimValue()",
      "void Update(float deltaT)",
      "void CheckValue(bool forceUpdate = false)",
      "void Synchronize(eInjuryHandlerLevels level)",
      "void SendValue(eInjuryHandlerLevels level)",
      "void SetInjuryCommandParams(bool enable, eInjuryHandlerLevels level)",
      "float GetInjuryValue(eInjuryHandlerLevels level)"
    ]
  },
  "IntroSceneCharacter": {
    "parent": "Managed",
    "methods": [
      "void IntroSceneCharacter()",
      "bool IsDefaultCharacter()",
      "void SetToDefaultCharacter()",
      "void SetCharacterID(int char_id)",
      "int GetCharacterID()",
      "void SetCharacterGender(ECharGender gender)",
      "bool IsCharacterFemale()",
      "int GetNextCharacterID()",
      "int GetPrevCharacterID()",
      "void CreateNewCharacterRandom()",
      "void CreateNewCharacterById( int character_id )",
      "void CreateNewCharacterByName( string character_name, bool randomize_equip = true )",
      "void CreateDefaultCharacter()",
      "void GetLastPlayedServer(int characterID, out string address, out string name, out int port)",
      "void GetLastPlayedServerEx(int characterID, out string address, out string name, out int port, out int steamQueryPort)",
      "void CreateNewCharacter()",
      "void LoadCharacterData(vector char_pos, vector char_rot, bool default_char = false)",
      "void CharacterUnload()",
      "void CharacterLoad( int character_id, vector char_pos, vector char_rot )",
      "void SetupPlayerName( bool new_name )",
      "void SetAttachment(string type, int slot)",
      "string GetCharacterNameById(int char_id )",
      "string GetCharacterName()",
      "void SaveCharName( string name )",
      "void SaveDefaultCharacter()"
    ]
  },
  "InventoryActionHandler": {
    "parent": null,
    "methods": [
      "void InventoryActionHandler(PlayerBase player)",
      "void SetAction(ActionBase action, ItemBase target_item, ItemBase main_item )",
      "void SetAction(ActionBase action, ActionTarget target, ItemBase main_item )",
      "bool IsActiveAction()",
      "void OnUpdate()",
      "void DeactiveAction()"
    ]
  },
  "KeyBinding": {
    "parent": null,
    "methods": [
      "void KeyBinding( int ui_id, int key1, int key2, string call_target, string call_function, string info_bind, string info_description )",
      "int GetUIMenuID()",
      "int GetKey1()",
      "int GetKey2()",
      "string GetCallbackTarget()",
      "string GetCallbackFunction()",
      "string GetInfoBind()",
      "string GetInfoDescription()"
    ]
  },
  "KuruShake": {
    "parent": null,
    "methods": [
      "void KuruShake(PlayerBase player, float amount)",
      "void Update(float delta_time, out float pos_x, out float pos_y )"
    ]
  },
  "LifespanLevel": {
    "parent": null,
    "methods": [
      "void LifespanLevel( int level, float threshold, string texture_name, string material_name )",
      "int GetLevel()",
      "float GetThreshold()",
      "string GetTextureName()",
      "string GetMaterialName()"
    ]
  },
  "MeleeTargetData": {
    "parent": null,
    "methods": [
      "void MeleeTargetData(Object o, vector p, int c)",
      "void MeleeTargetSettings(vector coneOrigin, float coneLength, float coneHalfAngle, float coneMinHeight, float coneMaxHeight, vector rayStart, vector dir, float maxDist, EntityAI pToIgnore, array<typename> targetableObjects)",
      "bool FindMostSuitableComponentEx(Object obj, BoxCollidingResult bResult, MeleeTargetSettings settings, out float sum, out ComponentResult result, array<string> blacklistedDamageZones)",
      "bool FindMostSuitableComponent(Object obj, BoxCollidingResult bResult, MeleeTargetSettings settings, out float sum, out ComponentResult result)",
      "bool EvaluateComponentEx(Object obj, ComponentInfo cInfo, MeleeTargetSettings settings, out ComponentResult result, array<string> blacklistedDamageZones)",
      "bool EvaluateComponent(Object obj, ComponentInfo cInfo, MeleeTargetSettings settings, out ComponentResult result)",
      "bool IsMeleeTargetObstructed(vector rayStart, vector rayEnd)"
    ]
  },
  "MeleeTargetSettings": {
    "parent": null,
    "methods": [
      "void MeleeTargetSettings(vector coneOrigin, float coneLength, float coneHalfAngle, float coneMinHeight, float coneMaxHeight, vector rayStart, vector dir, float maxDist, EntityAI pToIgnore, array<typename> targetableObjects)",
      "bool FindMostSuitableComponentEx(Object obj, BoxCollidingResult bResult, MeleeTargetSettings settings, out float sum, out ComponentResult result, array<string> blacklistedDamageZones)",
      "bool FindMostSuitableComponent(Object obj, BoxCollidingResult bResult, MeleeTargetSettings settings, out float sum, out ComponentResult result)",
      "bool EvaluateComponentEx(Object obj, ComponentInfo cInfo, MeleeTargetSettings settings, out ComponentResult result, array<string> blacklistedDamageZones)",
      "bool EvaluateComponent(Object obj, ComponentInfo cInfo, MeleeTargetSettings settings, out ComponentResult result)",
      "bool IsMeleeTargetObstructed(vector rayStart, vector rayEnd)"
    ]
  },
  "ComponentResult": {
    "parent": null,
    "methods": [
      "bool FindMostSuitableComponentEx(Object obj, BoxCollidingResult bResult, MeleeTargetSettings settings, out float sum, out ComponentResult result, array<string> blacklistedDamageZones)",
      "bool FindMostSuitableComponent(Object obj, BoxCollidingResult bResult, MeleeTargetSettings settings, out float sum, out ComponentResult result)",
      "bool EvaluateComponentEx(Object obj, ComponentInfo cInfo, MeleeTargetSettings settings, out ComponentResult result, array<string> blacklistedDamageZones)",
      "bool EvaluateComponent(Object obj, ComponentInfo cInfo, MeleeTargetSettings settings, out ComponentResult result)",
      "bool IsMeleeTargetObstructed(vector rayStart, vector rayEnd)"
    ]
  },
  "MeleeTargeting": {
    "parent": null,
    "methods": [
      "bool FindMostSuitableComponentEx(Object obj, BoxCollidingResult bResult, MeleeTargetSettings settings, out float sum, out ComponentResult result, array<string> blacklistedDamageZones)",
      "bool FindMostSuitableComponent(Object obj, BoxCollidingResult bResult, MeleeTargetSettings settings, out float sum, out ComponentResult result)",
      "bool EvaluateComponentEx(Object obj, ComponentInfo cInfo, MeleeTargetSettings settings, out ComponentResult result, array<string> blacklistedDamageZones)",
      "bool EvaluateComponent(Object obj, ComponentInfo cInfo, MeleeTargetSettings settings, out ComponentResult result)",
      "bool IsMeleeTargetObstructed(vector rayStart, vector rayEnd)"
    ]
  },
  "MessageReceiverBase": {
    "parent": null,
    "methods": [
      "void OnReceive(int channel)",
      "void OnReceiveInt(int channel, int value)",
      "void OnReceiveFloat(int channel, float value)",
      "void OnReceiveString(int channel, string value)",
      "void OnReceiveParam(int channel, Param params)",
      "void MessageReceiverBase()",
      "void Subscribe(int channel)",
      "void Unsubscribe(int channel)",
      "void UnsubscribeAll()",
      "void Broadcast(int channel)",
      "void BroadcastInt(int channel, int value)",
      "void BroadcastFloat(int channel, float value)",
      "void BroadcastString(int channel, string value)",
      "void BroadcastParam(int channel,Param params)",
      "void Log(string message)"
    ]
  },
  "MissionBaseWorld": {
    "parent": "Mission",
    "methods": []
  },
  "MouseBinding": {
    "parent": null,
    "methods": [
      "void MouseBinding( int ui_id, int mouse_button, int mouse_event, string call_target, string call_function, string info_bind, string info_description )",
      "int GetUIMenuID()",
      "int GetButtonID()",
      "int GetMouseEvent()",
      "string GetCallbackTarget()",
      "string GetCallbackFunction()",
      "string GetInfoBind()",
      "string GetInfoDescription()"
    ]
  },
  "MouseButtonInfo": {
    "parent": null,
    "methods": [
      "void MouseButtonInfo(int button)",
      "int GetButtonID()",
      "int GetTimeLastPress()",
      "int GetTimeLastRelease()",
      "void Press()",
      "void Release()",
      "bool IsButtonDown()"
    ]
  },
  "NutritionalProfile": {
    "parent": null,
    "methods": [
      "void NutritionalProfile(float energy = 0.0, float water_content = 0.0, float nutritional_index = 0.0, float fullness_index = 0.0, float toxicity = 0.0, int agents = 0.0, float digestibility = 0.0)",
      "void MarkAsLiquid(int liquid_type, string classname)",
      "int GetAgents()",
      "int GetLiquidType()",
      "string GetLiquidClassname()",
      "bool IsLiquid()",
      "float GetEnergy()",
      "float GetWaterContent()",
      "float GetNutritionalIndex()",
      "float GetFullnessIndex()",
      "float GetToxicity()",
      "float GetDigestibility()"
    ]
  },
  "ObjectTemperatureState": {
    "parent": null,
    "methods": []
  },
  "ActionTargetLighSource": {
    "parent": null,
    "methods": [
      "void PlayerLightManager(PlayerBase player)",
      "void AddLightSource(Object object)",
      "void RemoveLightSource(Object object)",
      "void UpdateLightSourceList()",
      "void SetSelectedLightSourceIdx(int value)",
      "int GetSelectedLightSourceIdx()",
      "void SelectLightSourceTarget(ActionTarget target)"
    ]
  },
  "PlayerLightManager": {
    "parent": null,
    "methods": [
      "void PlayerLightManager(PlayerBase player)",
      "void AddLightSource(Object object)",
      "void RemoveLightSource(Object object)",
      "void UpdateLightSourceList()",
      "void SetSelectedLightSourceIdx(int value)",
      "int GetSelectedLightSourceIdx()",
      "void SelectLightSourceTarget(ActionTarget target)"
    ]
  },
  "StomachItem": {
    "parent": null,
    "methods": [
      "void StomachItem(string class_name, float amount, NutritionalProfile profile,int foodstage, int agents, float temperature)",
      "string GetClassName()",
      "int GetFoodStage()",
      "void SetFoodStage(int food_stage)",
      "float GetAmount()",
      "void AddAmount(float amount)",
      "void AddAgents(int agents)",
      "float GetTemperature()",
      "void AddTemperature(float temperature, float fraction)",
      "bool ProcessDigestion(float digestion_points, out float water, out float energy, out float toxicity, out float volume, out int agents, out float consumed_amount)",
      "float GetNutritions(float digestion_points, NutritionalProfile profile, out float water, out float energy, out float toxicity)",
      "void PlayerStomach(PlayerBase player)",
      "float GetStomachVolume()",
      "float GetStomachTemperature()",
      "void ClearContents()",
      "void ReduceContents(float percent)",
      "void SetAgentTransferFilter(int filter_agents)",
      "int GetAgentTransferFilter()",
      "static void RegisterItem(string classname, int id)",
      "static string GetClassnameFromID(int id)",
      "static int GetIDFromClassname(string name)",
      "static bool InitData()",
      "int GetStorageVersion()",
      "bool IsDigesting()",
      "int GetDigestingType()",
      "void UpdateStomachTemperature()",
      "void Update(float delta_time)",
      "void ProcessNutrients(float delta_time)",
      "void DigestAgents(int agents, float quantity)",
      "float GetVolumeContainingAgent(eAgents agent)",
      "float GetVolumeContainingAgent01(eAgents agent)",
      "void PrintUpdate()",
      "void AddToStomach(string class_name, float amount, int food_stage = 0, int agents = 0, float temperature = 0)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "int GetDebugObject(array<ref Param> object_out)"
    ]
  },
  "PlayerStomach": {
    "parent": null,
    "methods": [
      "void PlayerStomach(PlayerBase player)",
      "float GetStomachVolume()",
      "float GetStomachTemperature()",
      "void ClearContents()",
      "void ReduceContents(float percent)",
      "void SetAgentTransferFilter(int filter_agents)",
      "int GetAgentTransferFilter()",
      "static void RegisterItem(string classname, int id)",
      "static string GetClassnameFromID(int id)",
      "static int GetIDFromClassname(string name)",
      "static bool InitData()",
      "int GetStorageVersion()",
      "bool IsDigesting()",
      "int GetDigestingType()",
      "void UpdateStomachTemperature()",
      "void Update(float delta_time)",
      "void ProcessNutrients(float delta_time)",
      "void DigestAgents(int agents, float quantity)",
      "float GetVolumeContainingAgent(eAgents agent)",
      "float GetVolumeContainingAgent01(eAgents agent)",
      "void PrintUpdate()",
      "void AddToStomach(string class_name, float amount, int food_stage = 0, int agents = 0, float temperature = 0)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "int GetDebugObject(array<ref Param> object_out)"
    ]
  },
  "PropertyModifiers": {
    "parent": null,
    "methods": [
      "void PropertyModifiers(ItemBase owner)",
      "float GetBarrelLength()",
      "float CalculateBarrelLength(ItemBase owner)",
      "void UpdateModifiers()"
    ]
  },
  "QuickBarItem": {
    "parent": null,
    "methods": [
      "void QuickBarItem()",
      "void QuickBarBase(PlayerBase player)",
      "void SetSize(int newSize)",
      "int GetNonEmptyCount()",
      "int GetSize()",
      "int FindEntityIndex(EntityAI entity)",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void UpdateShotcutVisibility(int index)",
      "void SetShotcutEnable(int index, bool value)",
      "bool CanAddAsShortcut(EntityAI entity)",
      "void SetEntityShortcut(EntityAI entity, int index, bool force = false)",
      "void OnSetEntityNoSync(EntityAI entity, int index, bool force = false )",
      "void OnSetEntityRPC(ParamsReadContext ctx)",
      "void OnSetEntityRequest(ParamsReadContext ctx)",
      "void _SetEntityShortcut(EntityAI entity, int index, bool force = false)",
      "void updateSlotsCount()",
      "void _RemoveEntity(int index)",
      "void _SetEntity( EntityAI entity, int index, bool force = false)",
      "void CancelContinuousUse(int index)"
    ]
  },
  "QuickBarBase": {
    "parent": null,
    "methods": [
      "void QuickBarBase(PlayerBase player)",
      "void SetSize(int newSize)",
      "int GetNonEmptyCount()",
      "int GetSize()",
      "int FindEntityIndex(EntityAI entity)",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void UpdateShotcutVisibility(int index)",
      "void SetShotcutEnable(int index, bool value)",
      "bool CanAddAsShortcut(EntityAI entity)",
      "void SetEntityShortcut(EntityAI entity, int index, bool force = false)",
      "void OnSetEntityNoSync(EntityAI entity, int index, bool force = false )",
      "void OnSetEntityRPC(ParamsReadContext ctx)",
      "void OnSetEntityRequest(ParamsReadContext ctx)",
      "void _SetEntityShortcut(EntityAI entity, int index, bool force = false)",
      "void updateSlotsCount()",
      "void _RemoveEntity(int index)",
      "void _SetEntity( EntityAI entity, int index, bool force = false)",
      "void CancelContinuousUse(int index)"
    ]
  },
  "RainProcurementComponentBase": {
    "parent": null,
    "methods": [
      "void RainProcurementComponentBase(ItemBase procuringItem)",
      "void StartRainProcurement()",
      "void StopRainProcurement()",
      "void OnUpdate(float deltaTime, float amount)",
      "void Reset()",
      "void ProcureLiquid(float amountBase, int liquidType = LIQUID_CLEANWATER)",
      "void UpdateIsUnderRoof()",
      "float GetBaseLiquidAmount()",
      "bool IsActive()",
      "void SetActive(bool run)"
    ]
  },
  "RainProcurementComponentBarrel": {
    "parent": null,
    "methods": []
  },
  "RainProcurementHandler": {
    "parent": null,
    "methods": [
      "void RainProcurementHandler(MissionBaseWorld mission)",
      "void QueueStart(RainProcurementComponentBase component)",
      "void QueueStop(RainProcurementComponentBase component)",
      "void Update(float timeslice)",
      "bool ProcessBatch()",
      "void Cleanup()",
      "void Reset()",
      "void HandleChangedComponents()",
      "void CheckUpdating()",
      "float GetLiquidAmountCoef()",
      "float DetermineAmountCoef()"
    ]
  },
  "RainProcurementManager": {
    "parent": null,
    "methods": [
      "void RainProcurementManager( ItemBase procuring_item )",
      "void InitRainProcurement()",
      "void RainProcurementCheck()",
      "bool IsRunning()",
      "void StopRainProcurement()"
    ]
  },
  "RandomGeneratorSyncManager": {
    "parent": null,
    "methods": [
      "void RandomGeneratorSyncManager(DayZPlayer player)",
      "void Update()",
      "float GetRandom01(RandomGeneratorSyncUsage usage_index)",
      "float GetRandomInRange(RandomGeneratorSyncUsage usage_index, float min, float max)"
    ]
  },
  "ShockHandler": {
    "parent": null,
    "methods": [
      "void ShockHandler(PlayerBase player)",
      "void Update(float deltaT)",
      "float GetCurrentShock()",
      "float GetShock()",
      "void SetShock( float dealtShock )",
      "void DealShock()",
      "void CheckValue(bool forceUpdate)",
      "void Synchronize()",
      "float SetMultiplier(float mult)",
      "float NormalizeShockVal( float shock )",
      "float LerpVignette( float x, float y, float deltaT )",
      "void ShockHitEffect( float compareBase )"
    ]
  },
  "SoftSkillsManager": {
    "parent": null,
    "methods": [
      "void SoftSkillsManager( PlayerBase player )",
      "void InitSpecialty( float specialty_level )",
      "float AddLinearPrecise( float specialty_weight )",
      "float AddLinearRough( float specialty_weight )",
      "float AddExponentialPrecise( float specialty_weight )",
      "float AddExponentialRough( float specialty_weight )",
      "void AddSpecialty( float specialty_weight )",
      "float AddSpecialtyBonus( float base_value, float specialty_weight, bool is_cacomponent = false, float limit_efficiency = 2 )",
      "float SubtractSpecialtyBonus( float base_value, float specialty_weight, bool is_cacomponent = false, float limit_efficiency = 2 )",
      "float AdjustCraftingTime( float base_time, float specialty_weight, float limit_efficiency = 2 )",
      "void SetSpecialtyLevel( float specialty_level )",
      "float GetSpecialtyLevel()",
      "void SynchSpecialtyLevel()",
      "void SetSoftSkillsState( bool state )",
      "bool GetSoftSkillsState()",
      "void SetLinearState( bool model )",
      "bool IsLinear()",
      "void GetPreciseRoughLevels()",
      "void StartCoolDownTimer( float cooldown_value )",
      "bool IsCoolDown()",
      "void SetCoolDown( bool cool_down )",
      "void CreateDebugWindow( bool create )",
      "void SynchDebugStats()",
      "void SetIsDebug( bool is_debug )",
      "bool IsDebug()",
      "void SetCoolDownValue( float cooldown_value )",
      "float GetCoolDownValue()",
      "float GetLastUAValue()",
      "void SetLastUAValue( float last_ua_value )",
      "void SetBonusBefore( bool is_cacomponent, float base_value)",
      "void SetBonusAfter( bool is_cacomponent, float adjusted_value )",
      "float GetComponentBonusBefore()",
      "void SetComponentBonusBefore( float component_bonus_before )",
      "float GetComponentBonusAfter()",
      "void SetComponentBonusAfter( float component_bonus_after )",
      "float GetGeneralBonusBefore()",
      "void SetGeneralBonusBefore( float general_bonus_before )",
      "float GetGeneralBonusAfter()",
      "void SetGeneralBonusAfter( float general_bonus_after )",
      "void StartSynchTimer()",
      "void StopSynchTimer()",
      "void ResetDebugWindow()",
      "void SoftSkillManagerDebug( SoftSkillsManager softskill_manager )",
      "void OnUpdate()"
    ]
  },
  "SoftSkillManagerDebug": {
    "parent": null,
    "methods": [
      "void SoftSkillManagerDebug( SoftSkillsManager softskill_manager )",
      "void OnUpdate()"
    ]
  },
  "SqfDebugWatcher": {
    "parent": null,
    "methods": [
      "void SqfDebugWatcher( int id, string sqf_command )",
      "int GetId()",
      "void SetId( int id )",
      "string GetSqfCommand()",
      "void SetSqfCommand( string sqf_command )",
      "bool IsRunning()",
      "void Run()",
      "void Stop()",
      "void Execute()"
    ]
  },
  "StaminaConsumer": {
    "parent": null,
    "methods": [
      "void StaminaConsumer(float threshold, float threshold2, bool state)",
      "bool GetState()",
      "void SetState(bool state)",
      "float GetActivationThreshold()",
      "void SetActivationThreshold(float threshold)",
      "float GetDrainThreshold()",
      "void SetDrainThreshold(float threshold)",
      "void StaminaConsumers()",
      "void RegisterConsumer(EStaminaConsumers consumer, float threshold, float depletion_threshold = -1)",
      "bool HasEnoughStaminaFor(EStaminaConsumers consumer, float curStamina, bool isDepleted, float cap)",
      "bool HasEnoughStaminaToStart(EStaminaConsumers consumer, float curStamina, bool isDepleted, float cap)",
      "void StaminaModifier(int type, float min, float max, float cooldown, float startTime = 0, float duration = 0)",
      "int GetType()",
      "float GetMinValue()",
      "void SetMinValue(float val)",
      "float GetMaxValue()",
      "void SetMaxValue(float val)",
      "float GetCooldown()",
      "void SetCooldown(float val)",
      "float GetStartTime()",
      "void SetStartTime(float val)",
      "float GetStartTimeAdjustment()",
      "float GetDuration()",
      "float GetDurationAdjusted()",
      "bool IsInUse()",
      "void SetInUse(bool val)",
      "float GetRunTime()",
      "void AddRunTime(float val)",
      "void SetRunTimeTick(float val)",
      "void ResetRunTime()",
      "float GetBaseValue()",
      "float GetExponent()",
      "float GetMultiplier()",
      "void SetData(SMDataExponential data)",
      "void StaminaModifiers()",
      "void RegisterFixed(EStaminaModifiers modifier, float value, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterRandomized(EStaminaModifiers modifier, float minValue, float maxValue, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterLinear(EStaminaModifiers modifier, float startValue, float endValue, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponential(EStaminaModifiers modifier, float startValue, float exponent, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponentialEx(EStaminaModifiers modifier, SMDataExponential data)",
      "void StaminaHandler(PlayerBase player)",
      "void Init()",
      "void ActivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void DeactivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void RecalculateDepletionMultiplier()",
      "void ActivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void DeactivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void RecalculateRecoveryMultiplier()",
      "void Update(float deltaT, int pCurrentCommandID)",
      "void OnRPC(float stamina, float stamina_cap, bool cooldown)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void StaminaProcessor_Move(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Ladder(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Swimming(HumanMovementState pHumanMovementState)",
      "void SyncStamina(float stamina, float stamina_cap, bool cooldown)",
      "void SyncAdditionalStaminaInfo(Param par)",
      "void ReadAdditionalStaminaInfo(ParamsReadContext pCtx)",
      "void RegisterStaminaConsumers()",
      "void RegisterStaminaModifiers()",
      "float CalcStaminaGainBonus()",
      "void ApplyExhaustion()",
      "void CheckStaminaState()",
      "void SetCooldown(float time, int modifier = -1)",
      "void ResetCooldown(int modifier = -1)",
      "bool HasEnoughStaminaFor(EStaminaConsumers consumer)",
      "bool HasEnoughStaminaToStart(EStaminaConsumers consumer)",
      "void SetStamina(float stamina_value)",
      "float GetStamina()",
      "float GetStaminaNormalized()",
      "float GetSyncedStamina()",
      "float GetSyncedStaminaNormalized()",
      "float GetStaminaCap()",
      "float GetStaminaMax()",
      "void SetDepletionMultiplier(float val)",
      "void SetRecoveryMultiplier(float val)",
      "float GetDepletionMultiplier()",
      "float GetRecoveryMultiplier()",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "void SetStaminaDisabled(bool value)"
    ]
  },
  "StaminaConsumers": {
    "parent": null,
    "methods": [
      "void StaminaConsumers()",
      "void RegisterConsumer(EStaminaConsumers consumer, float threshold, float depletion_threshold = -1)",
      "bool HasEnoughStaminaFor(EStaminaConsumers consumer, float curStamina, bool isDepleted, float cap)",
      "bool HasEnoughStaminaToStart(EStaminaConsumers consumer, float curStamina, bool isDepleted, float cap)",
      "void StaminaModifier(int type, float min, float max, float cooldown, float startTime = 0, float duration = 0)",
      "int GetType()",
      "float GetMinValue()",
      "void SetMinValue(float val)",
      "float GetMaxValue()",
      "void SetMaxValue(float val)",
      "float GetCooldown()",
      "void SetCooldown(float val)",
      "float GetStartTime()",
      "void SetStartTime(float val)",
      "float GetStartTimeAdjustment()",
      "float GetDuration()",
      "float GetDurationAdjusted()",
      "bool IsInUse()",
      "void SetInUse(bool val)",
      "float GetRunTime()",
      "void AddRunTime(float val)",
      "void SetRunTimeTick(float val)",
      "void ResetRunTime()",
      "float GetBaseValue()",
      "float GetExponent()",
      "float GetMultiplier()",
      "void SetData(SMDataExponential data)",
      "void StaminaModifiers()",
      "void RegisterFixed(EStaminaModifiers modifier, float value, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterRandomized(EStaminaModifiers modifier, float minValue, float maxValue, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterLinear(EStaminaModifiers modifier, float startValue, float endValue, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponential(EStaminaModifiers modifier, float startValue, float exponent, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponentialEx(EStaminaModifiers modifier, SMDataExponential data)",
      "void StaminaHandler(PlayerBase player)",
      "void Init()",
      "void ActivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void DeactivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void RecalculateDepletionMultiplier()",
      "void ActivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void DeactivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void RecalculateRecoveryMultiplier()",
      "void Update(float deltaT, int pCurrentCommandID)",
      "void OnRPC(float stamina, float stamina_cap, bool cooldown)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void StaminaProcessor_Move(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Ladder(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Swimming(HumanMovementState pHumanMovementState)",
      "void SyncStamina(float stamina, float stamina_cap, bool cooldown)",
      "void SyncAdditionalStaminaInfo(Param par)",
      "void ReadAdditionalStaminaInfo(ParamsReadContext pCtx)",
      "void RegisterStaminaConsumers()",
      "void RegisterStaminaModifiers()",
      "float CalcStaminaGainBonus()",
      "void ApplyExhaustion()",
      "void CheckStaminaState()",
      "void SetCooldown(float time, int modifier = -1)",
      "void ResetCooldown(int modifier = -1)",
      "bool HasEnoughStaminaFor(EStaminaConsumers consumer)",
      "bool HasEnoughStaminaToStart(EStaminaConsumers consumer)",
      "void SetStamina(float stamina_value)",
      "float GetStamina()",
      "float GetStaminaNormalized()",
      "float GetSyncedStamina()",
      "float GetSyncedStaminaNormalized()",
      "float GetStaminaCap()",
      "float GetStaminaMax()",
      "void SetDepletionMultiplier(float val)",
      "void SetRecoveryMultiplier(float val)",
      "float GetDepletionMultiplier()",
      "float GetRecoveryMultiplier()",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "void SetStaminaDisabled(bool value)"
    ]
  },
  "StaminaModifier": {
    "parent": null,
    "methods": [
      "void StaminaModifier(int type, float min, float max, float cooldown, float startTime = 0, float duration = 0)",
      "int GetType()",
      "float GetMinValue()",
      "void SetMinValue(float val)",
      "float GetMaxValue()",
      "void SetMaxValue(float val)",
      "float GetCooldown()",
      "void SetCooldown(float val)",
      "float GetStartTime()",
      "void SetStartTime(float val)",
      "float GetStartTimeAdjustment()",
      "float GetDuration()",
      "float GetDurationAdjusted()",
      "bool IsInUse()",
      "void SetInUse(bool val)",
      "float GetRunTime()",
      "void AddRunTime(float val)",
      "void SetRunTimeTick(float val)",
      "void ResetRunTime()",
      "float GetBaseValue()",
      "float GetExponent()",
      "float GetMultiplier()",
      "void SetData(SMDataExponential data)",
      "void StaminaModifiers()",
      "void RegisterFixed(EStaminaModifiers modifier, float value, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterRandomized(EStaminaModifiers modifier, float minValue, float maxValue, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterLinear(EStaminaModifiers modifier, float startValue, float endValue, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponential(EStaminaModifiers modifier, float startValue, float exponent, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponentialEx(EStaminaModifiers modifier, SMDataExponential data)",
      "void StaminaHandler(PlayerBase player)",
      "void Init()",
      "void ActivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void DeactivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void RecalculateDepletionMultiplier()",
      "void ActivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void DeactivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void RecalculateRecoveryMultiplier()",
      "void Update(float deltaT, int pCurrentCommandID)",
      "void OnRPC(float stamina, float stamina_cap, bool cooldown)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void StaminaProcessor_Move(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Ladder(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Swimming(HumanMovementState pHumanMovementState)",
      "void SyncStamina(float stamina, float stamina_cap, bool cooldown)",
      "void SyncAdditionalStaminaInfo(Param par)",
      "void ReadAdditionalStaminaInfo(ParamsReadContext pCtx)",
      "void RegisterStaminaConsumers()",
      "void RegisterStaminaModifiers()",
      "float CalcStaminaGainBonus()",
      "void ApplyExhaustion()",
      "void CheckStaminaState()",
      "void SetCooldown(float time, int modifier = -1)",
      "void ResetCooldown(int modifier = -1)",
      "bool HasEnoughStaminaFor(EStaminaConsumers consumer)",
      "bool HasEnoughStaminaToStart(EStaminaConsumers consumer)",
      "void SetStamina(float stamina_value)",
      "float GetStamina()",
      "float GetStaminaNormalized()",
      "float GetSyncedStamina()",
      "float GetSyncedStaminaNormalized()",
      "float GetStaminaCap()",
      "float GetStaminaMax()",
      "void SetDepletionMultiplier(float val)",
      "void SetRecoveryMultiplier(float val)",
      "float GetDepletionMultiplier()",
      "float GetRecoveryMultiplier()",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "void SetStaminaDisabled(bool value)"
    ]
  },
  "StaminaModifierExponential": {
    "parent": null,
    "methods": [
      "float GetBaseValue()",
      "float GetExponent()",
      "float GetMultiplier()",
      "float GetCooldown()",
      "float GetStartTimeAdjustment()",
      "float GetDuration()",
      "float GetDurationAdjusted()",
      "void SetData(SMDataExponential data)",
      "void StaminaModifiers()",
      "void RegisterFixed(EStaminaModifiers modifier, float value, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterRandomized(EStaminaModifiers modifier, float minValue, float maxValue, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterLinear(EStaminaModifiers modifier, float startValue, float endValue, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponential(EStaminaModifiers modifier, float startValue, float exponent, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponentialEx(EStaminaModifiers modifier, SMDataExponential data)",
      "void StaminaHandler(PlayerBase player)",
      "void Init()",
      "void ActivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void DeactivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void RecalculateDepletionMultiplier()",
      "void ActivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void DeactivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void RecalculateRecoveryMultiplier()",
      "void Update(float deltaT, int pCurrentCommandID)",
      "void OnRPC(float stamina, float stamina_cap, bool cooldown)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void StaminaProcessor_Move(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Ladder(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Swimming(HumanMovementState pHumanMovementState)",
      "void SyncStamina(float stamina, float stamina_cap, bool cooldown)",
      "void SyncAdditionalStaminaInfo(Param par)",
      "void ReadAdditionalStaminaInfo(ParamsReadContext pCtx)",
      "void RegisterStaminaConsumers()",
      "void RegisterStaminaModifiers()",
      "float CalcStaminaGainBonus()",
      "void ApplyExhaustion()",
      "void CheckStaminaState()",
      "void SetCooldown(float time, int modifier = -1)",
      "void ResetCooldown(int modifier = -1)",
      "bool HasEnoughStaminaFor(EStaminaConsumers consumer)",
      "bool HasEnoughStaminaToStart(EStaminaConsumers consumer)",
      "void SetStamina(float stamina_value)",
      "float GetStamina()",
      "float GetStaminaNormalized()",
      "float GetSyncedStamina()",
      "float GetSyncedStaminaNormalized()",
      "float GetStaminaCap()",
      "float GetStaminaMax()",
      "void SetDepletionMultiplier(float val)",
      "void SetRecoveryMultiplier(float val)",
      "float GetDepletionMultiplier()",
      "float GetRecoveryMultiplier()",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "void SetStaminaDisabled(bool value)"
    ]
  },
  "StaminaModifiers": {
    "parent": null,
    "methods": [
      "void StaminaModifiers()",
      "void RegisterFixed(EStaminaModifiers modifier, float value, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterRandomized(EStaminaModifiers modifier, float minValue, float maxValue, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterLinear(EStaminaModifiers modifier, float startValue, float endValue, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponential(EStaminaModifiers modifier, float startValue, float exponent, float startTime, float duration, float cooldown = GameConstants.STAMINA_REGEN_COOLDOWN_DEPLETION)",
      "void RegisterExponentialEx(EStaminaModifiers modifier, SMDataExponential data)",
      "void StaminaHandler(PlayerBase player)",
      "void Init()",
      "void ActivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void DeactivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void RecalculateDepletionMultiplier()",
      "void ActivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void DeactivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void RecalculateRecoveryMultiplier()",
      "void Update(float deltaT, int pCurrentCommandID)",
      "void OnRPC(float stamina, float stamina_cap, bool cooldown)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void StaminaProcessor_Move(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Ladder(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Swimming(HumanMovementState pHumanMovementState)",
      "void SyncStamina(float stamina, float stamina_cap, bool cooldown)",
      "void SyncAdditionalStaminaInfo(Param par)",
      "void ReadAdditionalStaminaInfo(ParamsReadContext pCtx)",
      "void RegisterStaminaConsumers()",
      "void RegisterStaminaModifiers()",
      "float CalcStaminaGainBonus()",
      "void ApplyExhaustion()",
      "void CheckStaminaState()",
      "void SetCooldown(float time, int modifier = -1)",
      "void ResetCooldown(int modifier = -1)",
      "bool HasEnoughStaminaFor(EStaminaConsumers consumer)",
      "bool HasEnoughStaminaToStart(EStaminaConsumers consumer)",
      "void SetStamina(float stamina_value)",
      "float GetStamina()",
      "float GetStaminaNormalized()",
      "float GetSyncedStamina()",
      "float GetSyncedStaminaNormalized()",
      "float GetStaminaCap()",
      "float GetStaminaMax()",
      "void SetDepletionMultiplier(float val)",
      "void SetRecoveryMultiplier(float val)",
      "float GetDepletionMultiplier()",
      "float GetRecoveryMultiplier()",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "void SetStaminaDisabled(bool value)"
    ]
  },
  "StaminaHandler": {
    "parent": null,
    "methods": [
      "void StaminaHandler(PlayerBase player)",
      "void Init()",
      "void ActivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void DeactivateDepletionModifier(EStaminaMultiplierTypes type)",
      "void RecalculateDepletionMultiplier()",
      "void ActivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void DeactivateRecoveryModifier(EStaminaMultiplierTypes type)",
      "void RecalculateRecoveryMultiplier()",
      "void Update(float deltaT, int pCurrentCommandID)",
      "void OnRPC(float stamina, float stamina_cap, bool cooldown)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void StaminaProcessor_Move(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Ladder(HumanMovementState pHumanMovementState)",
      "void StaminaProcessor_Swimming(HumanMovementState pHumanMovementState)",
      "void SyncStamina(float stamina, float stamina_cap, bool cooldown)",
      "void SyncAdditionalStaminaInfo(Param par)",
      "void ReadAdditionalStaminaInfo(ParamsReadContext pCtx)",
      "void RegisterStaminaConsumers()",
      "void RegisterStaminaModifiers()",
      "float CalcStaminaGainBonus()",
      "void ApplyExhaustion()",
      "void CheckStaminaState()",
      "void SetCooldown(float time, int modifier = -1)",
      "void ResetCooldown(int modifier = -1)",
      "bool HasEnoughStaminaFor(EStaminaConsumers consumer)",
      "bool HasEnoughStaminaToStart(EStaminaConsumers consumer)",
      "void SetStamina(float stamina_value)",
      "float GetStamina()",
      "float GetStaminaNormalized()",
      "float GetSyncedStamina()",
      "float GetSyncedStaminaNormalized()",
      "float GetStaminaCap()",
      "float GetStaminaMax()",
      "void SetDepletionMultiplier(float val)",
      "void SetRecoveryMultiplier(float val)",
      "float GetDepletionMultiplier()",
      "float GetRecoveryMultiplier()",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "void SetStaminaDisabled(bool value)"
    ]
  },
  "SMDataBase": {
    "parent": null,
    "methods": [
      "void SMDataBase()",
      "void Init()",
      "int GetType()",
      "bool IsInUse()",
      "void SetInUse(bool val)"
    ]
  },
  "SMDataExponential": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "SMDataHoldBreath": {
    "parent": null,
    "methods": []
  },
  "SoundHandlerBase": {
    "parent": null,
    "methods": [
      "void Update()",
      "void SoundHandlerBase(PlayerBase player)",
      "void Init()",
      "void SetStaminaZoneOffset(int zone_offset)",
      "void PostponeStamina(float time)"
    ]
  },
  "StaminaSoundHandlerBase": {
    "parent": "SoundHandlerBase",
    "methods": [
      "void Init()",
      "void SetStaminaZoneOffset(int zone_offset)",
      "void Update()",
      "void PostponeStamina(float time)"
    ]
  },
  "StaminaSoundHandlerServer": {
    "parent": "StaminaSoundHandlerBase",
    "methods": [
      "void SetStaminaZoneOffset(int zone_offset)",
      "void Update()",
      "void PostponeStamina(float time)"
    ]
  },
  "StaminaSoundHandlerClient": {
    "parent": "StaminaSoundHandlerBase",
    "methods": [
      "void PostponeStamina(float time)",
      "void Update()"
    ]
  },
  "StanceIndicator": {
    "parent": null,
    "methods": [
      "void StanceIndicator(PlayerBase player)",
      "void Update()",
      "void DisplayStance(int stance)"
    ]
  },
  "ToggleAnimations": {
    "parent": null,
    "methods": [
      "void ToggleAnimations( string toggle_off, string toggle_on, int mask, array<string> linked_anims_off = null, array<string> linked_anims_on = null )",
      "string GetToggleOff()",
      "string GetToggleOn()",
      "int GetOpeningBit()"
    ]
  },
  "TransferValues": {
    "parent": "Managed",
    "methods": [
      "void TransferValues(PlayerBase player)",
      "void Init()",
      "void OnScheduledTick(float deltatime)",
      "void CheckValues()",
      "float GetBlood()",
      "float GetHealth()",
      "void CheckHealth()",
      "void CheckBlood()",
      "void SendInitValues()",
      "void SendValue(int value_type, float value)",
      "void ReceiveValue(int value_type, float value)",
      "void OnRPC(ParamsReadContext ctx)",
      "void ShowDebugValues(bool show)"
    ]
  },
  "UndergroundBunkerHandlerClient": {
    "parent": null,
    "methods": [
      "bool CalculateEyeAcco(float timeSlice)",
      "void CalculateEyeAccoTarget()",
      "void ProcessLighting(float timeSlice)",
      "void ApplyEyeAcco()",
      "void ProcessSound(float timeSlice)",
      "void PlayAmbientSound()"
    ]
  },
  "UndergroundHandlerClient": {
    "parent": null,
    "methods": [
      "void UndergroundHandlerClient(PlayerBase player)",
      "void OnTriggerEnter(UndergroundTrigger trigger)",
      "void OnTriggerLeave(UndergroundTrigger trigger)",
      "void CalculateEyeAccoTarget()",
      "void CalculateBreadCrumbs()",
      "void CalculateLinePointFade()",
      "void ProcessEyeAcco(float timeSlice)",
      "void ProcessLighting(float timeSlice)",
      "void ProcessSound(float timeSlice)",
      "void Tick(float timeSlice)",
      "void ApplyEyeAcco()",
      "void UpdateNVGRequester(float value)",
      "bool CalculateEyeAcco(float timeSlice)",
      "void OnTriggerInsiderUpdate()",
      "void SetUndergroundPresence(UndergroundTrigger trigger)",
      "void EnableLights(bool enable)",
      "void OnUpdateTimerEnd()",
      "void OnUpdateTimerIn()",
      "void OnUpdateTimerOut()",
      "void PlayAmbientSound()",
      "void StopAmbientSound()",
      "void OnUndergroundPresenceUpdate(EUndergroundPresence newPresence, EUndergroundPresence oldPresence)",
      "void DisplayDebugInfo(float acco, float lighting)"
    ]
  },
  "UnderObjectDecalSpawnSettings": {
    "parent": null,
    "methods": [
      "void UnderObjectDecalSpawnComponent(notnull UnderObjectDecalSpawnSettings pSettings, notnull Object pparent)",
      "string GetObjectNameFromSurfaceConfig(string surfaceParamName = SURFACE_PARAM_DECAL_NAME)",
      "void SpawnDecal()",
      "void RemoveDecal()",
      "void UpdateSize(float pScaleValue)"
    ]
  },
  "UnderObjectDecalSpawnComponent": {
    "parent": null,
    "methods": [
      "void UnderObjectDecalSpawnComponent(notnull UnderObjectDecalSpawnSettings pSettings, notnull Object pparent)",
      "string GetObjectNameFromSurfaceConfig(string surfaceParamName = SURFACE_PARAM_DECAL_NAME)",
      "void SpawnDecal()",
      "void RemoveDecal()",
      "void UpdateSize(float pScaleValue)"
    ]
  },
  "WeaponDebug": {
    "parent": null,
    "methods": [
      "void WeaponDebug()",
      "void RemoveAllShapes(bool is_exit = false)",
      "void OnCommandHandlerUpdate()",
      "void OnKeyDown(KeyCode key)",
      "void CycleDebugMode()",
      "void OnPostFrameUpdate()",
      "void DrawBarrelMemoryPoints(vector begin_point, vector end_point)",
      "void DrawLineOfFire(vector begin_point, vector end_point)",
      "void AddPosToCyclicBuffer(vector pos)",
      "void OrderTrailArray()",
      "void DrawEyePoint(Weapon weapon)",
      "void DisplayGeneralInfo()",
      "void DisplayTargetInfo()",
      "void DrawLineOfFireMuzzleToHit(vector begin_point, vector camera_dir, vector camera_pos)",
      "void DrawLineOfFireCameraHybrid(vector usti_hlavne_position, vector camera_dir, vector camera_pos, vector konec_hlavne_position)"
    ]
  },
  "WrittenNoteData": {
    "parent": null,
    "methods": [
      "void WrittenNoteData(ItemBase parent)",
      "void OnRPC( PlayerIdentity sender, int rpc_type, ParamsReadContext  ctx)",
      "void InitNoteInfo(ItemBase pen = null, ItemBase paper = null)",
      "bool GetNoteInfo(out ItemBase pen, out ItemBase paper)",
      "string GetNoteText()",
      "void SetNoteText(string text)",
      "void DepleteWritingImplement(notnull ItemBase pen,string old_text,string new_text)"
    ]
  },
  "ClutterCutter2x2": {
    "parent": null,
    "methods": []
  },
  "ClutterCutter6x6": {
    "parent": null,
    "methods": [
      "void ClutterCutter6x6()"
    ]
  },
  "ClutterCutterFireplace": {
    "parent": null,
    "methods": []
  },
  "DayZAnimalCommandMoveModdable": {
    "parent": "DayZAnimalCommandMove",
    "methods": []
  },
  "DayZAnimalCommandAttackModdable": {
    "parent": "DayZAnimalCommandAttack",
    "methods": []
  },
  "DayZAnimalCommandJumpModdable": {
    "parent": "DayZAnimalCommandJump",
    "methods": []
  },
  "DayZAnimalCommandLookAtModdable": {
    "parent": "DayZAnimalCommandLookAt",
    "methods": []
  },
  "DayZAnimalCommandBehaviourModifierModdable": {
    "parent": "DayZAnimalCommandBehaviourModifier",
    "methods": []
  },
  "DayZAnimalCommandHitModdable": {
    "parent": "DayZAnimalCommandHit",
    "methods": []
  },
  "DayZAnimalCommandDeathModdable": {
    "parent": "DayZAnimalCommandDeath",
    "methods": []
  },
  "DayZAnimalCommandAnimCallbackModdable": {
    "parent": "DayZAnimalCommandAnimCallback",
    "methods": []
  },
  "DayZInfectedCommandMoveModdable": {
    "parent": "DayZInfectedCommandMove",
    "methods": []
  },
  "DayZInfectedCommandDeathModdable": {
    "parent": "DayZInfectedCommandDeath",
    "methods": []
  },
  "DayZInfectedCommandHitModdable": {
    "parent": "DayZInfectedCommandHit",
    "methods": []
  },
  "DayZInfectedCommandAttackModdable": {
    "parent": "DayZInfectedCommandAttack",
    "methods": []
  },
  "DayZInfectedCommandVaultModdable": {
    "parent": "DayZInfectedCommandVault",
    "methods": []
  },
  "DayZInfectedCommandCrawlModdable": {
    "parent": "DayZInfectedCommandCrawl",
    "methods": []
  },
  "DayZPlayerCommandDeathCallback": {
    "parent": null,
    "methods": [
      "void OnSimulationEnd()",
      "bool ShouldSimulationBeDisabled()",
      "void Stop()",
      "void DayZPlayerImplement()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "void OverrideShootFromCamera(bool pState)",
      "bool IsInIronsights()",
      "bool IsInOptics()",
      "bool IsInThirdPerson()",
      "void SetIsInThirdPerson(bool state)",
      "bool IsFireWeaponRaised()",
      "bool IsTryingHoldBreath()",
      "bool IsSprintFull()",
      "void ShowWeaponDebug(bool show)",
      "bool IsWeaponDebugEnabled()",
      "void SetFallYDiff(float value)",
      "float GetCurrentWaterLevel()",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "void SetIronsights(bool value)",
      "void SetOptics(bool value)",
      "void ExitSights()",
      "void SwitchOptics(ItemOptics optic, bool state)",
      "void SetClimbingLadderType(string value)",
      "bool CanConsumeStamina(EStaminaConsumers consumer)",
      "bool CanStartConsumingStamina(EStaminaConsumers consumer)",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "bool IsInVehicle()",
      "bool IsSwimming()",
      "bool IsClimbingLadder()",
      "bool PlaySoundEventType(ESoundEventType soundType, int soundEventID, int param = 0)",
      "bool PlaySoundEvent(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false)",
      "bool PlaySoundEventEx(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false, int param = 0)",
      "bool IsFBSymptomPlaying()",
      "float GetDeltaT()",
      "string GetDebugText()",
      "void TriggerPullPlayerOutOfVehicle()",
      "void TriggerPullPlayerOutOfVehicleImpl()",
      "void OnVariablesSynchronized()",
      "bool HandleDeath(int pCurrentCommandID)",
      "void ResetDeathStartTime()",
      "int GetTypeOfDeath(int pCurrentCommandID)",
      "void SendDeathJuncture(int pAnimTypeDeath, float pAnimHitDirDeath)",
      "void EEKilled(Object killer)",
      "void ShowDeadScreen(bool show, float duration)",
      "void StopDeathDarkeningEffect()",
      "void SimulateDeath(bool state)",
      "void LockControls(bool state)",
      "void SetDeathDarknessLevel(float duration, float tick_time)",
      "void CompleteWeaponRaise()",
      "void ResetWeaponRaiseProgress()",
      "bool IsWeaponRaiseCompleted()",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "void RequestSoundEvent(EPlayerSoundEventID id, bool from_server_and_client = false)",
      "void RequestSoundEventEx(EPlayerSoundEventID id, bool from_server_and_client = false, int param = 0)",
      "void SendSoundEvent(EPlayerSoundEventID id)",
      "void SendSoundEventEx(EPlayerSoundEventID id, int param = 0)",
      "void OnItemInHandsChanged()",
      "void HandleWeapons(float pDt, Entity pInHands, HumanInputController pInputs, out bool pExitIronSights)",
      "void HandleOptic(notnull ItemOptics optic, bool inHands, HumanInputController pInputs, out bool pExitOptics)",
      "bool IsInFullbodyDamageAnimation()",
      "void EvaluateDamageHit(int pCurrentCommandID)",
      "bool HandleDamageHit(int pCurrentCommandID)",
      "void ResetDamageHitState(bool resetTimer)",
      "bool EvaluateDeathAnimation(int pDamageType, EntityAI pSource, string pAmmoType, out int pAnimType, out float pAnimHitDir)",
      "bool EvaluateDamageHitAnimation(TotalDamageResult pDamageResult, int pDamageType, EntityAI pSource, string pComponent, string pAmmoType, vector pModelPos, out int pAnimType, out float pAnimHitDir, out bool pAnimHitFullbody)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "bool ProcessJumpOrClimb(float pDt, int pCurrentCommandID)",
      "bool CanJump()",
      "bool CanClimb(int climbType, SHumanCommandClimbResult climbRes)",
      "void OnJumpStart()",
      "void OnJumpEnd(int pLandType = 0)",
      "void StopHandEvent()",
      "void StopWeaponEvent()",
      "void AbortWeaponEvent()",
      "void HandleADS()",
      "void HandleView()",
      "bool ModCommandHandlerBefore(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerInside(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerAfter(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void HideClothing(ItemOptics optic, bool state)",
      "void CommandHandlerDebug(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void OnMovementChanged()",
      "void OnSprintStart()",
      "void OnSprintEnd()",
      "void OnInputUserDataReceived(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "string GetSurfaceType(SurfaceAnimationBone limbType)",
      "void AddNoise(NoiseParams noisePar, float noiseMultiplier = 1.0)",
      "void OnStepEvent(string pEventType, string pUserString, int pUserInt)",
      "void OnSoundEvent(string pEventType, string pUserString, int pUserInt)",
      "void OnParticleEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessWeaponEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessAttachmentEvent(string pEventType, string pUserString, int pUserInt)",
      "void SetVariablesLadderSoundObjectBuilder(SoundObjectBuilder soundObjectBuilder)",
      "void ProcessSoundEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessFeetDamageServer(int pUserInt)",
      "bool CheckForTakeItem(EntityAI item)",
      "bool CheckForDropItem(EntityAI item)",
      "bool CheckForRespawn(EntityAI item)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool IsLanded(int pCurrentCommandID)",
      "bool OnLand(int pCurrentCommandID, FallDamageData fallDamageData)",
      "bool IsAlreadyInFallingCommand(int pCurrentCommandID)",
      "void OverrideSlidePoseAngle(float value)",
      "float GetSlidePoseAngle()",
      "void CheckAnimationOverrides()",
      "bool IsPlayerSelected()",
      "bool IsRestrained()",
      "bool IsInFBEmoteState()",
      "void SetSuicide(bool state)",
      "bool CommitedSuicide()",
      "void OnLadder(float delta_time, HumanMovementState pState)",
      "void EOnContact(IEntity other, Contact extra)",
      "void AttenuateSoundIfNecessary(SoundObject soundObject)",
      "void CheckLiftWeapon()",
      "void ProcessLiftWeapon()",
      "void SetHandheldOpticsInUse(bool state)",
      "bool IsHandheldOpticsInUse()",
      "bool IsLiftWeapon()",
      "bool IsRaised()",
      "bool IsFighting()",
      "bool CanPickupHeavyItem(notnull EntityAI item)",
      "bool CanPickupHeavyItemSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void SetReturnToOptics(bool state)",
      "void RunADSTimer()",
      "void StopADSTimer()",
      "void SendCompleteWeaponRaiseJuncture()"
    ]
  },
  "DayZPlayerVehicleCommandDeathCallback": {
    "parent": null,
    "methods": [
      "void OnSimulationEnd()",
      "void Stop()",
      "void DayZPlayerImplement()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "void OverrideShootFromCamera(bool pState)",
      "bool IsInIronsights()",
      "bool IsInOptics()",
      "bool IsInThirdPerson()",
      "void SetIsInThirdPerson(bool state)",
      "bool IsFireWeaponRaised()",
      "bool IsTryingHoldBreath()",
      "bool IsSprintFull()",
      "void ShowWeaponDebug(bool show)",
      "bool IsWeaponDebugEnabled()",
      "void SetFallYDiff(float value)",
      "float GetCurrentWaterLevel()",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "void SetIronsights(bool value)",
      "void SetOptics(bool value)",
      "void ExitSights()",
      "void SwitchOptics(ItemOptics optic, bool state)",
      "void SetClimbingLadderType(string value)",
      "bool CanConsumeStamina(EStaminaConsumers consumer)",
      "bool CanStartConsumingStamina(EStaminaConsumers consumer)",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "bool IsInVehicle()",
      "bool IsSwimming()",
      "bool IsClimbingLadder()",
      "bool PlaySoundEventType(ESoundEventType soundType, int soundEventID, int param = 0)",
      "bool PlaySoundEvent(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false)",
      "bool PlaySoundEventEx(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false, int param = 0)",
      "bool IsFBSymptomPlaying()",
      "float GetDeltaT()",
      "string GetDebugText()",
      "void TriggerPullPlayerOutOfVehicle()",
      "void TriggerPullPlayerOutOfVehicleImpl()",
      "void OnVariablesSynchronized()",
      "bool HandleDeath(int pCurrentCommandID)",
      "void ResetDeathStartTime()",
      "int GetTypeOfDeath(int pCurrentCommandID)",
      "void SendDeathJuncture(int pAnimTypeDeath, float pAnimHitDirDeath)",
      "void EEKilled(Object killer)",
      "void ShowDeadScreen(bool show, float duration)",
      "void StopDeathDarkeningEffect()",
      "void SimulateDeath(bool state)",
      "void LockControls(bool state)",
      "void SetDeathDarknessLevel(float duration, float tick_time)",
      "void CompleteWeaponRaise()",
      "void ResetWeaponRaiseProgress()",
      "bool IsWeaponRaiseCompleted()",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "void RequestSoundEvent(EPlayerSoundEventID id, bool from_server_and_client = false)",
      "void RequestSoundEventEx(EPlayerSoundEventID id, bool from_server_and_client = false, int param = 0)",
      "void SendSoundEvent(EPlayerSoundEventID id)",
      "void SendSoundEventEx(EPlayerSoundEventID id, int param = 0)",
      "void OnItemInHandsChanged()",
      "void HandleWeapons(float pDt, Entity pInHands, HumanInputController pInputs, out bool pExitIronSights)",
      "void HandleOptic(notnull ItemOptics optic, bool inHands, HumanInputController pInputs, out bool pExitOptics)",
      "bool IsInFullbodyDamageAnimation()",
      "void EvaluateDamageHit(int pCurrentCommandID)",
      "bool HandleDamageHit(int pCurrentCommandID)",
      "void ResetDamageHitState(bool resetTimer)",
      "bool EvaluateDeathAnimation(int pDamageType, EntityAI pSource, string pAmmoType, out int pAnimType, out float pAnimHitDir)",
      "bool EvaluateDamageHitAnimation(TotalDamageResult pDamageResult, int pDamageType, EntityAI pSource, string pComponent, string pAmmoType, vector pModelPos, out int pAnimType, out float pAnimHitDir, out bool pAnimHitFullbody)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "bool ProcessJumpOrClimb(float pDt, int pCurrentCommandID)",
      "bool CanJump()",
      "bool CanClimb(int climbType, SHumanCommandClimbResult climbRes)",
      "void OnJumpStart()",
      "void OnJumpEnd(int pLandType = 0)",
      "void StopHandEvent()",
      "void StopWeaponEvent()",
      "void AbortWeaponEvent()",
      "void HandleADS()",
      "void HandleView()",
      "bool ModCommandHandlerBefore(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerInside(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerAfter(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void HideClothing(ItemOptics optic, bool state)",
      "void CommandHandlerDebug(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void OnMovementChanged()",
      "void OnSprintStart()",
      "void OnSprintEnd()",
      "void OnInputUserDataReceived(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "string GetSurfaceType(SurfaceAnimationBone limbType)",
      "void AddNoise(NoiseParams noisePar, float noiseMultiplier = 1.0)",
      "void OnStepEvent(string pEventType, string pUserString, int pUserInt)",
      "void OnSoundEvent(string pEventType, string pUserString, int pUserInt)",
      "void OnParticleEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessWeaponEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessAttachmentEvent(string pEventType, string pUserString, int pUserInt)",
      "void SetVariablesLadderSoundObjectBuilder(SoundObjectBuilder soundObjectBuilder)",
      "void ProcessSoundEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessFeetDamageServer(int pUserInt)",
      "bool CheckForTakeItem(EntityAI item)",
      "bool CheckForDropItem(EntityAI item)",
      "bool CheckForRespawn(EntityAI item)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool IsLanded(int pCurrentCommandID)",
      "bool OnLand(int pCurrentCommandID, FallDamageData fallDamageData)",
      "bool IsAlreadyInFallingCommand(int pCurrentCommandID)",
      "void OverrideSlidePoseAngle(float value)",
      "float GetSlidePoseAngle()",
      "void CheckAnimationOverrides()",
      "bool IsPlayerSelected()",
      "bool IsRestrained()",
      "bool IsInFBEmoteState()",
      "void SetSuicide(bool state)",
      "bool CommitedSuicide()",
      "void OnLadder(float delta_time, HumanMovementState pState)",
      "void EOnContact(IEntity other, Contact extra)",
      "void AttenuateSoundIfNecessary(SoundObject soundObject)",
      "void CheckLiftWeapon()",
      "void ProcessLiftWeapon()",
      "void SetHandheldOpticsInUse(bool state)",
      "bool IsHandheldOpticsInUse()",
      "bool IsLiftWeapon()",
      "bool IsRaised()",
      "bool IsFighting()",
      "bool CanPickupHeavyItem(notnull EntityAI item)",
      "bool CanPickupHeavyItemSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void SetReturnToOptics(bool state)",
      "void RunADSTimer()",
      "void StopADSTimer()",
      "void SendCompleteWeaponRaiseJuncture()"
    ]
  },
  "DeathEffectTimer": {
    "parent": "Timer",
    "methods": [
      "void Stop()",
      "void DayZPlayerImplement()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "void OverrideShootFromCamera(bool pState)",
      "bool IsInIronsights()",
      "bool IsInOptics()",
      "bool IsInThirdPerson()",
      "void SetIsInThirdPerson(bool state)",
      "bool IsFireWeaponRaised()",
      "bool IsTryingHoldBreath()",
      "bool IsSprintFull()",
      "void ShowWeaponDebug(bool show)",
      "bool IsWeaponDebugEnabled()",
      "void SetFallYDiff(float value)",
      "float GetCurrentWaterLevel()",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "void SetIronsights(bool value)",
      "void SetOptics(bool value)",
      "void ExitSights()",
      "void SwitchOptics(ItemOptics optic, bool state)",
      "void SetClimbingLadderType(string value)",
      "bool CanConsumeStamina(EStaminaConsumers consumer)",
      "bool CanStartConsumingStamina(EStaminaConsumers consumer)",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "bool IsInVehicle()",
      "bool IsSwimming()",
      "bool IsClimbingLadder()",
      "bool PlaySoundEventType(ESoundEventType soundType, int soundEventID, int param = 0)",
      "bool PlaySoundEvent(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false)",
      "bool PlaySoundEventEx(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false, int param = 0)",
      "bool IsFBSymptomPlaying()",
      "float GetDeltaT()",
      "string GetDebugText()",
      "void TriggerPullPlayerOutOfVehicle()",
      "void TriggerPullPlayerOutOfVehicleImpl()",
      "void OnVariablesSynchronized()",
      "bool HandleDeath(int pCurrentCommandID)",
      "void ResetDeathStartTime()",
      "int GetTypeOfDeath(int pCurrentCommandID)",
      "void SendDeathJuncture(int pAnimTypeDeath, float pAnimHitDirDeath)",
      "void EEKilled(Object killer)",
      "void ShowDeadScreen(bool show, float duration)",
      "void StopDeathDarkeningEffect()",
      "void SimulateDeath(bool state)",
      "void LockControls(bool state)",
      "void SetDeathDarknessLevel(float duration, float tick_time)",
      "void CompleteWeaponRaise()",
      "void ResetWeaponRaiseProgress()",
      "bool IsWeaponRaiseCompleted()",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "void RequestSoundEvent(EPlayerSoundEventID id, bool from_server_and_client = false)",
      "void RequestSoundEventEx(EPlayerSoundEventID id, bool from_server_and_client = false, int param = 0)",
      "void SendSoundEvent(EPlayerSoundEventID id)",
      "void SendSoundEventEx(EPlayerSoundEventID id, int param = 0)",
      "void OnItemInHandsChanged()",
      "void HandleWeapons(float pDt, Entity pInHands, HumanInputController pInputs, out bool pExitIronSights)",
      "void HandleOptic(notnull ItemOptics optic, bool inHands, HumanInputController pInputs, out bool pExitOptics)",
      "bool IsInFullbodyDamageAnimation()",
      "void EvaluateDamageHit(int pCurrentCommandID)",
      "bool HandleDamageHit(int pCurrentCommandID)",
      "void ResetDamageHitState(bool resetTimer)",
      "bool EvaluateDeathAnimation(int pDamageType, EntityAI pSource, string pAmmoType, out int pAnimType, out float pAnimHitDir)",
      "bool EvaluateDamageHitAnimation(TotalDamageResult pDamageResult, int pDamageType, EntityAI pSource, string pComponent, string pAmmoType, vector pModelPos, out int pAnimType, out float pAnimHitDir, out bool pAnimHitFullbody)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "bool ProcessJumpOrClimb(float pDt, int pCurrentCommandID)",
      "bool CanJump()",
      "bool CanClimb(int climbType, SHumanCommandClimbResult climbRes)",
      "void OnJumpStart()",
      "void OnJumpEnd(int pLandType = 0)",
      "void StopHandEvent()",
      "void StopWeaponEvent()",
      "void AbortWeaponEvent()",
      "void HandleADS()",
      "void HandleView()",
      "bool ModCommandHandlerBefore(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerInside(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerAfter(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void HideClothing(ItemOptics optic, bool state)",
      "void CommandHandlerDebug(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void OnMovementChanged()",
      "void OnSprintStart()",
      "void OnSprintEnd()",
      "void OnInputUserDataReceived(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "string GetSurfaceType(SurfaceAnimationBone limbType)",
      "void AddNoise(NoiseParams noisePar, float noiseMultiplier = 1.0)",
      "void OnStepEvent(string pEventType, string pUserString, int pUserInt)",
      "void OnSoundEvent(string pEventType, string pUserString, int pUserInt)",
      "void OnParticleEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessWeaponEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessAttachmentEvent(string pEventType, string pUserString, int pUserInt)",
      "void SetVariablesLadderSoundObjectBuilder(SoundObjectBuilder soundObjectBuilder)",
      "void ProcessSoundEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessFeetDamageServer(int pUserInt)",
      "bool CheckForTakeItem(EntityAI item)",
      "bool CheckForDropItem(EntityAI item)",
      "bool CheckForRespawn(EntityAI item)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool IsLanded(int pCurrentCommandID)",
      "bool OnLand(int pCurrentCommandID, FallDamageData fallDamageData)",
      "bool IsAlreadyInFallingCommand(int pCurrentCommandID)",
      "void OverrideSlidePoseAngle(float value)",
      "float GetSlidePoseAngle()",
      "void CheckAnimationOverrides()",
      "bool IsPlayerSelected()",
      "bool IsRestrained()",
      "bool IsInFBEmoteState()",
      "void SetSuicide(bool state)",
      "bool CommitedSuicide()",
      "void OnLadder(float delta_time, HumanMovementState pState)",
      "void EOnContact(IEntity other, Contact extra)",
      "void AttenuateSoundIfNecessary(SoundObject soundObject)",
      "void CheckLiftWeapon()",
      "void ProcessLiftWeapon()",
      "void SetHandheldOpticsInUse(bool state)",
      "bool IsHandheldOpticsInUse()",
      "bool IsLiftWeapon()",
      "bool IsRaised()",
      "bool IsFighting()",
      "bool CanPickupHeavyItem(notnull EntityAI item)",
      "bool CanPickupHeavyItemSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void SetReturnToOptics(bool state)",
      "void RunADSTimer()",
      "void StopADSTimer()",
      "void SendCompleteWeaponRaiseJuncture()"
    ]
  },
  "DayZPlayerImplement": {
    "parent": "DayZPlayer",
    "methods": [
      "void DayZPlayerImplement()",
      "bool IsEyeZoom()",
      "int GetEyeZoomLevel()",
      "bool IsShootingFromCamera()",
      "void OverrideShootFromCamera(bool pState)",
      "bool IsInIronsights()",
      "bool IsInOptics()",
      "bool IsInThirdPerson()",
      "void SetIsInThirdPerson(bool state)",
      "bool IsFireWeaponRaised()",
      "bool IsTryingHoldBreath()",
      "bool IsSprintFull()",
      "void ShowWeaponDebug(bool show)",
      "bool IsWeaponDebugEnabled()",
      "void SetFallYDiff(float value)",
      "float GetCurrentWaterLevel()",
      "void SetCurrentWaterLevel(float pWaterLevel)",
      "void SetIronsights(bool value)",
      "void SetOptics(bool value)",
      "void ExitSights()",
      "void SwitchOptics(ItemOptics optic, bool state)",
      "void SetClimbingLadderType(string value)",
      "bool CanConsumeStamina(EStaminaConsumers consumer)",
      "bool CanStartConsumingStamina(EStaminaConsumers consumer)",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "bool IsInVehicle()",
      "bool IsSwimming()",
      "bool IsClimbingLadder()",
      "bool PlaySoundEventType(ESoundEventType soundType, int soundEventID, int param = 0)",
      "bool PlaySoundEvent(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false)",
      "bool PlaySoundEventEx(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false, int param = 0)",
      "bool IsFBSymptomPlaying()",
      "float GetDeltaT()",
      "string GetDebugText()",
      "void TriggerPullPlayerOutOfVehicle()",
      "void TriggerPullPlayerOutOfVehicleImpl()",
      "void OnVariablesSynchronized()",
      "bool HandleDeath(int pCurrentCommandID)",
      "void ResetDeathStartTime()",
      "int GetTypeOfDeath(int pCurrentCommandID)",
      "void SendDeathJuncture(int pAnimTypeDeath, float pAnimHitDirDeath)",
      "void EEKilled(Object killer)",
      "void ShowDeadScreen(bool show, float duration)",
      "void StopDeathDarkeningEffect()",
      "void SimulateDeath(bool state)",
      "void LockControls(bool state)",
      "void SetDeathDarknessLevel(float duration, float tick_time)",
      "void CompleteWeaponRaise()",
      "void ResetWeaponRaiseProgress()",
      "bool IsWeaponRaiseCompleted()",
      "void OnInputForRemote(ParamsReadContext ctx)",
      "void OnInputFromServer(ParamsReadContext ctx)",
      "void RequestSoundEvent(EPlayerSoundEventID id, bool from_server_and_client = false)",
      "void RequestSoundEventEx(EPlayerSoundEventID id, bool from_server_and_client = false, int param = 0)",
      "void SendSoundEvent(EPlayerSoundEventID id)",
      "void SendSoundEventEx(EPlayerSoundEventID id, int param = 0)",
      "void OnItemInHandsChanged()",
      "void HandleWeapons(float pDt, Entity pInHands, HumanInputController pInputs, out bool pExitIronSights)",
      "void HandleOptic(notnull ItemOptics optic, bool inHands, HumanInputController pInputs, out bool pExitOptics)",
      "bool IsInFullbodyDamageAnimation()",
      "void EvaluateDamageHit(int pCurrentCommandID)",
      "bool HandleDamageHit(int pCurrentCommandID)",
      "void ResetDamageHitState(bool resetTimer)",
      "bool EvaluateDeathAnimation(int pDamageType, EntityAI pSource, string pAmmoType, out int pAnimType, out float pAnimHitDir)",
      "bool EvaluateDamageHitAnimation(TotalDamageResult pDamageResult, int pDamageType, EntityAI pSource, string pComponent, string pAmmoType, vector pModelPos, out int pAnimType, out float pAnimHitDir, out bool pAnimHitFullbody)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool AimingModel(float pDt, SDayZPlayerAimingModel pModel)",
      "bool ProcessJumpOrClimb(float pDt, int pCurrentCommandID)",
      "bool CanJump()",
      "bool CanClimb(int climbType, SHumanCommandClimbResult climbRes)",
      "void OnJumpStart()",
      "void OnJumpEnd(int pLandType = 0)",
      "void StopHandEvent()",
      "void StopWeaponEvent()",
      "void AbortWeaponEvent()",
      "void HandleADS()",
      "void HandleView()",
      "bool ModCommandHandlerBefore(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerInside(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "bool ModCommandHandlerAfter(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void HideClothing(ItemOptics optic, bool state)",
      "void CommandHandlerDebug(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "int CameraHandler(int pCameraMode)",
      "void OnMovementChanged()",
      "void OnSprintStart()",
      "void OnSprintEnd()",
      "void OnInputUserDataReceived(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "string GetSurfaceType(SurfaceAnimationBone limbType)",
      "void AddNoise(NoiseParams noisePar, float noiseMultiplier = 1.0)",
      "void OnStepEvent(string pEventType, string pUserString, int pUserInt)",
      "void OnSoundEvent(string pEventType, string pUserString, int pUserInt)",
      "void OnParticleEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessWeaponEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessAttachmentEvent(string pEventType, string pUserString, int pUserInt)",
      "void SetVariablesLadderSoundObjectBuilder(SoundObjectBuilder soundObjectBuilder)",
      "void ProcessSoundEvent(string pEventType, string pUserString, int pUserInt)",
      "void ProcessFeetDamageServer(int pUserInt)",
      "bool CheckForTakeItem(EntityAI item)",
      "bool CheckForDropItem(EntityAI item)",
      "bool CheckForRespawn(EntityAI item)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool IsLanded(int pCurrentCommandID)",
      "bool OnLand(int pCurrentCommandID, FallDamageData fallDamageData)",
      "bool IsAlreadyInFallingCommand(int pCurrentCommandID)",
      "void OverrideSlidePoseAngle(float value)",
      "float GetSlidePoseAngle()",
      "void CheckAnimationOverrides()",
      "bool IsPlayerSelected()",
      "bool IsRestrained()",
      "bool IsInFBEmoteState()",
      "void SetSuicide(bool state)",
      "bool CommitedSuicide()",
      "void OnLadder(float delta_time, HumanMovementState pState)",
      "void EOnContact(IEntity other, Contact extra)",
      "void AttenuateSoundIfNecessary(SoundObject soundObject)",
      "void CheckLiftWeapon()",
      "void ProcessLiftWeapon()",
      "void SetHandheldOpticsInUse(bool state)",
      "bool IsHandheldOpticsInUse()",
      "bool IsLiftWeapon()",
      "bool IsRaised()",
      "bool IsFighting()",
      "bool CanPickupHeavyItem(notnull EntityAI item)",
      "bool CanPickupHeavyItemSwap(notnull EntityAI item1, notnull EntityAI item2)",
      "void SetReturnToOptics(bool state)",
      "void RunADSTimer()",
      "void StopADSTimer()",
      "void SendCompleteWeaponRaiseJuncture()"
    ]
  },
  "PlayerSwayConstants": {
    "parent": null,
    "methods": [
      "void DayZPlayerImplementAiming(DayZPlayerImplement player)",
      "void SetRecoil(Weapon_Base weapon)",
      "void RequestKuruShake(float amount)",
      "void OnRaiseBegin(DayZPlayerImplement player)",
      "void OnFinisherBegin(float currentAimY)",
      "void OnSwayStateChange(int state)",
      "float GetSwayWeight()",
      "void SetAimNoiseAllowed(bool state)",
      "bool IsAimNoiseAllowed()",
      "void SetProceduralRecoilEnabled(bool state)",
      "bool IsProceduralRecoilEnabled()",
      "void SetCamShakeValues(float x_axis, float y_axis)",
      "bool ProcessStealthFilters(float pDt, SDayZPlayerAimingModel pModel)",
      "bool ProcessAimFilters(float pDt, SDayZPlayerAimingModel pModel, int stance_index)",
      "float CalculateSwayMultiplier()",
      "float CalculateSpeedMultiplier(float stamina)",
      "bool UpdateSwayState(int state)",
      "int GetCurrentSwayState()",
      "void ApplyBreathingPattern(out float x_axis, out float y_axis, float pAmplitude, float pTotalTime, float weight)",
      "void ApplyHorizontalNoise(out float x_axis, out float y_axis, float smooth_time,float max_velocity_low, float max_velocity_high, float velocity_modifier,  float max_distance, float weight, float pDt)",
      "void ApplyShakes(out float x_axis, out float y_axis, int level)",
      "float CalculateWeight(int stance_index, float current_stamina, float camera_sway_modifier, bool holding_breath)",
      "void DbgPrintAimingImplement(string val)"
    ]
  },
  "DayZPlayerImplementAiming": {
    "parent": null,
    "methods": [
      "void DayZPlayerImplementAiming(DayZPlayerImplement player)",
      "void SetRecoil(Weapon_Base weapon)",
      "void RequestKuruShake(float amount)",
      "void OnRaiseBegin(DayZPlayerImplement player)",
      "void OnFinisherBegin(float currentAimY)",
      "void OnSwayStateChange(int state)",
      "float GetSwayWeight()",
      "void SetAimNoiseAllowed(bool state)",
      "bool IsAimNoiseAllowed()",
      "void SetProceduralRecoilEnabled(bool state)",
      "bool IsProceduralRecoilEnabled()",
      "void SetCamShakeValues(float x_axis, float y_axis)",
      "bool ProcessStealthFilters(float pDt, SDayZPlayerAimingModel pModel)",
      "bool ProcessAimFilters(float pDt, SDayZPlayerAimingModel pModel, int stance_index)",
      "float CalculateSwayMultiplier()",
      "float CalculateSpeedMultiplier(float stamina)",
      "bool UpdateSwayState(int state)",
      "int GetCurrentSwayState()",
      "void ApplyBreathingPattern(out float x_axis, out float y_axis, float pAmplitude, float pTotalTime, float weight)",
      "void ApplyHorizontalNoise(out float x_axis, out float y_axis, float smooth_time,float max_velocity_low, float max_velocity_high, float velocity_modifier,  float max_distance, float weight, float pDt)",
      "void ApplyShakes(out float x_axis, out float y_axis, int level)",
      "float CalculateWeight(int stance_index, float current_stamina, float camera_sway_modifier, bool holding_breath)",
      "void DbgPrintAimingImplement(string val)"
    ]
  },
  "FallDamageData": {
    "parent": null,
    "methods": [
      "void DayZPlayerImplementFallDamage(DayZPlayer pPlayer)",
      "float GetHeight()",
      "int GetLandType()",
      "void HandleFallDamage(FallDamageData pData)",
      "float Randomize(int pType, float pValue)",
      "void AttachBleedingToZonesByHeight(notnull PlayerBase pPlayer)",
      "void DamageAttachedGear(notnull PlayerBase pPlayer)",
      "void ShowFallDamageDebugInfo(bool enabled)",
      "static string LandTypeToString(int landType)",
      "void PreloadAmmoTypeData()",
      "static void DisplayFallDamageDebugInfo(bool enabled, FallDamageDebugData data)",
      "void FillDebugFallDamageData(FallDamageDebugData data)",
      "void HandleFallDamage(float pHeight)",
      "float DamageCoef(float pHeight)",
      "void Synch(DayZPlayerImplementFallDamage fallDamage)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)"
    ]
  },
  "DayZPlayerImplementFallDamage": {
    "parent": null,
    "methods": [
      "void DayZPlayerImplementFallDamage(DayZPlayer pPlayer)",
      "float GetHeight()",
      "int GetLandType()",
      "void HandleFallDamage(FallDamageData pData)",
      "float Randomize(int pType, float pValue)",
      "void AttachBleedingToZonesByHeight(notnull PlayerBase pPlayer)",
      "void DamageAttachedGear(notnull PlayerBase pPlayer)",
      "void ShowFallDamageDebugInfo(bool enabled)",
      "static string LandTypeToString(int landType)",
      "void PreloadAmmoTypeData()",
      "static void DisplayFallDamageDebugInfo(bool enabled, FallDamageDebugData data)",
      "void FillDebugFallDamageData(FallDamageDebugData data)",
      "void HandleFallDamage(float pHeight)",
      "float DamageCoef(float pHeight)",
      "void Synch(DayZPlayerImplementFallDamage fallDamage)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)"
    ]
  },
  "FallDamageDebugData": {
    "parent": null,
    "methods": [
      "void Synch(DayZPlayerImplementFallDamage fallDamage)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)"
    ]
  },
  "DayZPlayerImplementHeading": {
    "parent": null,
    "methods": [
      "static bool ClampHeading(float pDt, SDayZPlayerHeadingModel pModel, out float pLastHeadingDiff)",
      "static bool RotateOrient(float pDt, SDayZPlayerHeadingModel pModel, out float pLastHeadingDiff)",
      "static bool RestrictHeading(float pDt, SDayZPlayerHeadingModel pModel, out float pLastHeadingDiff, HeadingRestrictData restrictData)",
      "static float ClampAngle(float angle, HeadingRestrictData restrictData)",
      "static bool NoHeading(float pDt, SDayZPlayerHeadingModel pModel, out float pLastHeadingDiff)",
      "void InitData(float currentHeading, Vector2 restrictedAngles)"
    ]
  },
  "HeadingRestrictData": {
    "parent": null,
    "methods": [
      "void InitData(float currentHeading, Vector2 restrictedAngles)"
    ]
  },
  "DayZPlayerImplementJumpClimb": {
    "parent": null,
    "methods": [
      "void DayZPlayerImplementJumpClimb(DayZPlayerImplement pPlayer)",
      "bool WasSuccessful()",
      "void JumpOrClimb()",
      "void CheckAndFinishJump(int pLandType = 0)",
      "bool Climb(SHumanCommandClimbResult pClimbRes)",
      "void Jump()",
      "int GetClimbType(float pHeight)"
    ]
  },
  "DayZPlayerImplementMeleeCombat": {
    "parent": null,
    "methods": [
      "void DayZPlayerImplementMeleeCombat(DayZPlayerImplement player)",
      "void Init(DayZPlayerImplement player)",
      "void SetHitZoneIdx(int pHitZone)",
      "void SetTargetObject(Object pTarget)",
      "int GetHitZoneIdx()",
      "void SetHitPos(vector pHitPos)",
      "int GetFinisherType()",
      "void SetFinisherType(int pFinisherType)",
      "int GetWeaponMode()",
      "void Reset(InventoryItem weapon, EMeleeHitType hitMask, bool wasHitEvent = false)",
      "void ResetTarget()",
      "void Update(InventoryItem weapon, EMeleeHitType hitMask, bool wasHitEvent = false)",
      "void CheckMeleeItem()",
      "int SelectWeaponMode(InventoryItem weapon)",
      "float GetWeaponRange(InventoryItem weapon, int weaponMode)",
      "float GetRange()",
      "float GetAngle()",
      "void TargetSelection()",
      "int TrySelectFinisherType(InventoryItem weapon, EntityAI target)",
      "int DetermineSpecificFinisherType(ItemBase weapon)",
      "void InternalResetTarget()",
      "void SetTarget(Object obj, vector hitPos, int hitZone)",
      "bool CanObjectBeTargeted(Object obj, bool checkNonAligneAble = false)",
      "bool HitZoneSelectionRaycastHelper(out vector hitPos, out int hitZone, out Object target)",
      "bool HitZoneSelectionRaycast(out vector hitPos, out int hitZone, out Object target, bool useCamera)",
      "void HitZoneSelection()",
      "bool IsObstructed(Object object)",
      "bool IsEntityBehindEntityInAngle(EntityAI source, EntityAI target, float angle)",
      "void Debug(InventoryItem weapon, EMeleeHitType hitType)",
      "int DebugGetForcedFinisherType()",
      "void DebugSetForcedFinisherType(int pFinisherType)",
      "void ShowDebugMeleeTarget()",
      "void DrawDebugTargets()",
      "void DrawDebugTargetsHelper(array<Object> allTargets, Object target, int colorMainTarget, int colorTarget)",
      "void DrawDebugMeleeHitPosition()",
      "void DrawDebugMeleeCone()",
      "void DrawDebugBlockCone(float angle, int color)",
      "void CleanAllDebugShapes()",
      "void CleanupDebugShapes(array<Shape> shapes)"
    ]
  },
  "DayZPlayerImplementSwimming": {
    "parent": null,
    "methods": [
      "void DayZPlayerImplementSwimming(DayZPlayer pPlayer)",
      "float GetWaterDepth()",
      "float GetCharacterDepth()",
      "bool CheckSwimmingStart(out vector waterLevel)",
      "bool HandleSwimming(int pCurrentCommandID, HumanCommandMove pCMove, HumanMovementState pState)"
    ]
  },
  "DayZPlayerImplementThrowing": {
    "parent": null,
    "methods": [
      "void DayZPlayerImplementThrowing(DayZPlayer pPlayer)",
      "void HandleThrowing(HumanInputController pHic, HumanCommandWeapons pHcw, EntityAI pEntityInHands, float pDt)",
      "void ResetState()",
      "void SetThrowingModeEnabled(bool enable)",
      "bool IsThrowingModeEnabled()",
      "bool IsThrowingInProgress()",
      "bool IsThrowingAnimationPlaying()",
      "bool CanChangeThrowingStance(HumanInputController pHic)",
      "bool CanContinueThrowing(HumanInputController pHic)",
      "bool CanContinueThrowingEx(HumanInputController pHic, EntityAI pEntityInHands)",
      "bool CheckFreeSpace()"
    ]
  },
  "GearChangeActionCallback": {
    "parent": null,
    "methods": [
      "void SetVehicleCommand(HumanCommandVehicle hcv)",
      "void OnFinish(bool pCanceled)"
    ]
  },
  "DayZPlayerSyncJunctures": {
    "parent": null,
    "methods": [
      "static void SendGetInVehicle(DayZPlayer pPlayer, EntityAI vehicle)",
      "static bool ReadGetInVehicleParams(ParamsReadContext pCtx, out EntityAI vehicle)",
      "static void SendDeath(DayZPlayer pPlayer, int pType, float pHitDir)",
      "static bool ReadDeathParams(ParamsReadContext pCtx, out int pType, out float pHitDir)",
      "static void SendDamageHit(DayZPlayer pPlayer, int pType, float pHitDir, bool pFullbody)",
      "static void SendDamageHitEx(DayZPlayer pPlayer, int pType, float pHitDir, bool pFullbody, TotalDamageResult pDamageResult, int pDamageType, EntityAI pSource, string pComponent, string pAmmoType, vector pModelPos)",
      "static bool ReadDamageHitParams(ParamsReadContext pCtx, out int pType, out float pHitDir, out bool pFullbody)",
      "static bool ReadDamageHitParamsEx(ParamsReadContext pCtx, out SyncHitInfo pData)",
      "static void SendInjury(DayZPlayer pPlayer, bool pEnable, eInjuryHandlerLevels level)",
      "static bool ReadInjuryParams(ParamsReadContext pCtx, out bool pEnable, out eInjuryHandlerLevels level)",
      "static void SendPlayerUnconsciousness(DayZPlayer pPlayer, bool enable)",
      "static bool ReadPlayerUnconsciousnessParams(ParamsReadContext pCtx, out bool enable)",
      "static void SendPlayerFBModifier(PlayerBase pPlayer, int type)",
      "static bool ReadPlayerFBModifier(ParamsReadContext pCtx, out int type)",
      "static void SendPlayerSymptomADD(DayZPlayer pPlayer, int type, int state_type)",
      "static bool ReadPlayerSymptomADDParams(ParamsReadContext pCtx, out int type)",
      "static void SendPlayerSymptomFB(DayZPlayer pPlayer, DayZPlayerConstants anim_id, int state_type, int stance_mask, float duration)",
      "static bool ReadPlayerSymptomFBParams(ParamsReadContext pCtx, out DayZPlayerConstants anim_id, out int stance_mask, out float duration)",
      "static void SendActionInterrupt(DayZPlayer pPlayer)",
      "static bool ReadActionInterruptParams(ParamsReadContext pCtx)",
      "static void SendActionAcknowledgment(DayZPlayer pPlayer, int AckID, bool accept)",
      "static void SendWeaponActionAcknowledgment(DayZPlayer pPlayer, int AckID, bool accept)",
      "static bool ReadKuruRequest(ParamsReadContext pCtx, out float amount)",
      "static void SendKuruRequest(DayZPlayer pPlayer, float amount)",
      "static void SendQuickbarSetShortcut(DayZPlayer pPlayer, EntityAI item, int index, bool force = false )",
      "static void SendWeaponJamChance(DayZPlayer pPlayer, float jamChance )",
      "static void SendDeleteItem( DayZPlayer pPlayer, EntityAI item )",
      "static void SendBrokenLegs(DayZPlayer pPlayer, bool canPlaySound, eBrokenLegs currentState, eBrokenLegs localState)",
      "static bool ReadBrokenLegsParams(ParamsReadContext pCtx, out bool canPlaySound, out eBrokenLegs currentState, out eBrokenLegs localState)",
      "static void SendBrokenLegsEx(DayZPlayer pPlayer, int currentState)",
      "static bool ReadBrokenLegsParamsEx(ParamsReadContext pCtx, out int currentState)",
      "static void SendShock(DayZPlayer pPlayer, float shockValue)",
      "static bool ReadShockParams(ParamsReadContext pCtx, out float shockValue)"
    ]
  },
  "DayZPlayerUtils": {
    "parent": null,
    "methods": [
      "void EnableDebugDraw(bool pEnable)",
      "void DrawDebugText(string text, vector pos, float size)",
      "void DrawStartFrame()",
      "void DrawDebugBox(vector pos, float size, int color)",
      "bool DebugOverrideAnimationTranslation(string pAnimName, vector pTranslation)",
      "bool DebugOverrideAnimationRotation(string pAnimName, vector pRotation)",
      "bool DebugOverrideAnimationSpeed(string pAnimName, float pSpeed)",
      "float LinearRangeClamp(float pValueX, float pValueY, float pLimits[])",
      "void PhysicsGetEntitiesInBox(vector min, vector max, notnull out array<EntityAI> entList)",
      "void SceneGetEntitiesInBox(vector min, vector max, notnull out array<EntityAI> entList, int flags = QueryFlags.DYNAMIC)",
      "void GetEntitiesInCone(vector pos, vector dir, float angle, float dist, float minHeigh, float maxHeight, out array<Object> entList)",
      "bool PlayerCanChangeStance(DayZPlayer pPlayer, int pTargetStance, bool forceCheck = false)",
      "bool FindMagazinesForAmmo(DayZPlayer player, string ammoTypeName, out array<Magazine> mags)",
      "static bool HandleDropMagazine(DayZPlayer player, Magazine mag)",
      "static bool HandleDropCartridge(DayZPlayer player, float damage, string cartTypeName, string magTypeName)",
      "static bool HandleStoreCartridge(DayZPlayer player, Weapon_Base weapon, int muzzleIndex, float damage, string cartTypeName, string magTypeName, bool CanDrop = true)",
      "bool InitComponentCollisions(Human player, array<ref ComponentCollisionBox> boxes, array<ref ComponentCollisionCapsule> capsules)",
      "bool IsComponentCollisionInitialized()",
      "void ClearComponentCollisions()",
      "static void InitPlayerComponentCollisions(Human player)",
      "static int ConvertStanceMaskToStanceIdx(int stanceMask)",
      "void DayZPlayerUtils()",
      "static void InitCachedEntList()",
      "void ComponentCollisionBox(float x, float y, float z, string b0, string b1)",
      "void ComponentCollisionCapsule(float r, string b0, string b1)"
    ]
  },
  "ComponentCollisionBox": {
    "parent": null,
    "methods": [
      "void ComponentCollisionBox(float x, float y, float z, string b0, string b1)",
      "void ComponentCollisionCapsule(float r, string b0, string b1)"
    ]
  },
  "ComponentCollisionCapsule": {
    "parent": null,
    "methods": [
      "void ComponentCollisionCapsule(float r, string b0, string b1)"
    ]
  },
  "DayZSpectator": {
    "parent": null,
    "methods": [
      "void DayZSpectator()",
      "void EOnFrame(IEntity other, float timeSlice)"
    ]
  },
  "ExplosiveLight": {
    "parent": null,
    "methods": [
      "void ExplosiveLight()",
      "void ExplosivesBase()",
      "bool IsExplosive()",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void EEDelete(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void OnCEUpdate()",
      "void UnpairRemote()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "string GetArmSoundset()",
      "string GetDisarmSoundset()",
      "void InitItemSounds()",
      "void CreateLight()",
      "void DestroyParticle(Particle p)",
      "void InitiateExplosion()",
      "void OnExplode()",
      "void SetActions()",
      "bool IsInventoryVisible()",
      "bool IsTakeable()",
      "bool IsTimerDetonable()",
      "void Arm()",
      "void OnArmed()",
      "bool CanBeArmed()",
      "void Disarm(bool pWithTool = false)",
      "void OnBeforeDisarm()",
      "void OnDisarmed(bool pWithTool)",
      "bool CanBeDisarmed()",
      "bool GetArmed()",
      "void SetArmed(bool state)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanRemoveFromHands(EntityAI parent)",
      "bool GetDefused()",
      "void SetDefused(bool state)",
      "void SetAmmoType(string pAmmoType)",
      "void SetAmmoTypes(array<string> pAmmoTypes)",
      "void SetParticleExplosion(int particle)",
      "void SetParticlePosition(vector local_pos)",
      "void SetParticleOrientation(vector local_ori)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void UpdateLED(int pState)",
      "bool HasLockedTriggerSlots()",
      "void LockTriggerSlots()",
      "void UnlockTriggerSlots()",
      "void LockExplosivesSlots()",
      "void UnlockExplosivesSlots()",
      "void Init()",
      "static void Cleanup()",
      "void InitSpecificsExplosionEffectForSurface()",
      "void AddExplosionEffectForSurface(string surface, int effectID)",
      "int GetParticleExplosionID(string surface)"
    ]
  },
  "ExplosivesBase": {
    "parent": null,
    "methods": [
      "void ExplosivesBase()",
      "bool IsExplosive()",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void EEDelete(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void OnCEUpdate()",
      "void UnpairRemote()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "string GetArmSoundset()",
      "string GetDisarmSoundset()",
      "void InitItemSounds()",
      "void CreateLight()",
      "void DestroyParticle(Particle p)",
      "void InitiateExplosion()",
      "void OnExplode()",
      "void SetActions()",
      "bool IsInventoryVisible()",
      "bool IsTakeable()",
      "bool IsTimerDetonable()",
      "void Arm()",
      "void OnArmed()",
      "bool CanBeArmed()",
      "void Disarm(bool pWithTool = false)",
      "void OnBeforeDisarm()",
      "void OnDisarmed(bool pWithTool)",
      "bool CanBeDisarmed()",
      "bool GetArmed()",
      "void SetArmed(bool state)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanRemoveFromHands(EntityAI parent)",
      "bool GetDefused()",
      "void SetDefused(bool state)",
      "void SetAmmoType(string pAmmoType)",
      "void SetAmmoTypes(array<string> pAmmoTypes)",
      "void SetParticleExplosion(int particle)",
      "void SetParticlePosition(vector local_pos)",
      "void SetParticleOrientation(vector local_ori)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void UpdateLED(int pState)",
      "bool HasLockedTriggerSlots()",
      "void LockTriggerSlots()",
      "void UnlockTriggerSlots()",
      "void LockExplosivesSlots()",
      "void UnlockExplosivesSlots()",
      "void Init()",
      "static void Cleanup()",
      "void InitSpecificsExplosionEffectForSurface()",
      "void AddExplosionEffectForSurface(string surface, int effectID)",
      "int GetParticleExplosionID(string surface)"
    ]
  },
  "GardenBase": {
    "parent": "ItemBase",
    "methods": [
      "void GardenBase()",
      "void OnVariablesSynchronized()",
      "bool HasProxyParts()",
      "int GetHideIconMask()",
      "void SetBaseFertility(float value)",
      "float GetBaseFertility()",
      "void EOnInit(IEntity other, int extra)",
      "void InitializeSlots()",
      "void SetMaxWaterStateVal()",
      "int GetMaxWaterStateVal()",
      "void UpdateTexturesOnAllSlots()",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void AfterStoreLoad()",
      "void EEOnAfterLoad()",
      "void SyncSlots()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "void PrintSlots()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanRemoveFromHands( EntityAI parent )",
      "int GetGardenSlotsCount()",
      "bool CanPlantSeed( string selection_component )",
      "string ConvertAttSlotToPlantSlot(string attach_slot)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void PlantSeed( ItemBase seed, string selection_component )",
      "void CreatePlant(Slot slot )",
      "void Fertilize( PlayerBase player, ItemBase item, float consumed_quantity, string selection_component )",
      "bool IsCorrectFertilizer( ItemBase item, string selection_component )",
      "bool NeedsFertilization( string selection_component )",
      "void SlotWaterStateUpdate( Slot slot )",
      "void UpdateSlotTexture( int slot_index )",
      "void SetSlotTextureDigged( int slot_index )",
      "void SetSlotTextureFertilized( int slot_index, string item_type )",
      "void RemoveSlot( int index )",
      "void RemoveSlotPlant( Object plant )",
      "int GetSlotIndexBySelection( string selection_component )",
      "int GetSlotIndexByAttachmentSlot( string att_slot )",
      "int GetSlotIndexByPlant( Object plant )",
      "int GetNearestSlotIDByState( vector position, int slot_state)",
      "void CheckRainStart()",
      "void CheckRainTick()",
      "void WaterAllSlots()",
      "int GetSlotWateredState()",
      "void SetSlotWateredState( int newState )",
      "void SetActions()"
    ]
  },
  "DummyItem": {
    "parent": "ItemBase",
    "methods": [
      "bool CanPutAsAttachment(EntityAI parent)",
      "void TransferModifiers(PlayerBase reciever)",
      "void ItemBase()",
      "void InitItemVariables()",
      "int GetQuickBarBonus()",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "void SetActions()",
      "void SetActionAnimOverrides()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)",
      "void OverrideActionAnimation(typename action, int commandUID, int stanceMask = -1, int commandUIDProne = -1)",
      "void OnItemInHandsPlayerSwimStart(PlayerBase player)",
      "void LoadParticleConfigOnFire(int id)",
      "void LoadParticleConfigOnOverheating(int id)",
      "float GetOverheatingValue()",
      "void IncreaseOverheating(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void CheckOverheating(ItemBase weapon = null, string ammoType = , ItemBase muzzle_owner = null, ItemBase suppressor = null, string config_to_search = )",
      "bool IsOverheatingEffectActive()",
      "void OnOverheatingDecay()",
      "void StartOverheating(ItemBase weapon = null, string ammoType = , ItemBase muzzle_owner = null, ItemBase suppressor = null, string config_to_search = )",
      "void UpdateOverheating(ItemBase weapon = null, string ammoType = , ItemBase muzzle_owner = null, ItemBase suppressor = null, string config_to_search = )",
      "void StopOverheating(ItemBase weapon = null, string ammoType = , ItemBase muzzle_owner = null, ItemBase suppressor = null, string config_to_search = )",
      "void RegisterOverheatingParticle(Particle p, float min_heat_coef, float max_heat_coef, int particle_id, Object parent, vector local_pos, vector local_ori)",
      "float GetOverheatingCoef()",
      "void UpdateAllOverheatingParticles()",
      "void KillAllOverheatingParticles()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "float GetDisinfectQuantity(int system = 0, Param param1 = null)",
      "float GetFilterDamageRatio()",
      "bool HasMuzzle()",
      "int GetMuzzleID()",
      "int GetDamageSystemVersionChange()",
      "static int GetDebugActionsMask()",
      "static bool HasDebugActionsMask(int mask)",
      "static void SetDebugActionsMask(int mask)",
      "static void AddDebugActionsMask(int mask)",
      "static void RemoveDebugActionsMask(int mask)",
      "static void ToggleDebugActionsMask(int mask)",
      "void SetCEBasedQuantity()",
      "void LockToparent()",
      "void UnlockFromparent()",
      "void CombineItemsClient(EntityAI entity2, bool use_stack_max = true)",
      "bool IsLiquidPresent()",
      "bool IsLiquidContainer()",
      "int GetLiquidContainerMask()",
      "bool IsBloodContainer()",
      "bool IsNVG()",
      "bool IsExplosive()",
      "string GetExplosiveTriggerSlotName()",
      "bool IsLightSource()",
      "bool CanBeRepairedByCrafting()",
      "bool IsFacingPlayer(PlayerBase player, string selection)",
      "bool IsPlayerInside(PlayerBase player, string selection)",
      "bool CanObstruct()",
      "bool IsBeingPlaced()",
      "void SetIsBeingPlaced(bool is_being_placed)",
      "void OnEndPlacement()",
      "bool IsHologram()",
      "bool CanBeDigged()",
      "int GetOnDigWormsAmount()",
      "bool CanMakeGardenplot()",
      "void SetIsHologram(bool is_hologram)",
      "void OnMovedInsideCargo(EntityAI container)",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RefreshPhysics()",
      "void OnCreatePhysics()",
      "void OnItemAttachmentSlotChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void EEDelete(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "string ChangeIntoOnAttach(string slot)",
      "string ChangeIntoOnDetach()",
      "void ExplodeAmmo()",
      "void DoAmmoExplosion()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "bool DamageItemInCargo(float damage)",
      "bool DamageItemAttachments(float damage)",
      "bool IsSplitable()",
      "bool CanBeSplit()",
      "void SplitIntoStackMaxClient(EntityAI destination_entity, int slot_id )",
      "void SplitIntoStackMax(EntityAI destination_entity, int slot_id, PlayerBase player)",
      "void SplitIntoStackMaxEx(EntityAI destination_entity, int slot_id)",
      "void SplitIntoStackMaxToInventoryLocationClient(notnull InventoryLocation dst)",
      "void SplitIntoStackMaxCargoClient(EntityAI destination_entity, int idx, int row, int col)",
      "void SplitIntoStackMaxToInventoryLocation(notnull InventoryLocation dst)",
      "void SplitIntoStackMaxCargo(EntityAI destination_entity, int idx, int row, int col)",
      "void SplitIntoStackMaxHandsClient(PlayerBase player)",
      "void SplitIntoStackMaxHands(PlayerBase player)",
      "void SplitItemToInventoryLocation(notnull InventoryLocation dst)",
      "void SplitItem(PlayerBase player)",
      "void OnQuantityChanged(float delta)",
      "void OnAttachmentQuantityChanged(ItemBase item)",
      "void OnAttachmentQuantityChangedEx(ItemBase item , float delta)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void OnRightClick()",
      "bool CanBeCombined(EntityAI other_item, bool reservation_check = true, bool stack_max_limit = false)",
      "bool IsCombineAll(ItemBase other_item, bool use_stack_max = false)",
      "bool IsResultOfSplit()",
      "void SetResultOfSplit(bool value)",
      "int ComputeQuantityUsed(ItemBase other_item, bool use_stack_max = true)",
      "float ComputeQuantityUsedEx(ItemBase other_item, bool use_stack_max = true)",
      "void CombineItemsEx(EntityAI entity2, bool use_stack_max = true)",
      "void CombineItems(ItemBase other_item, bool use_stack_max = true)",
      "void OnCombine(ItemBase other_item)",
      "void GetRecipesActions(Man player, out TSelectableActionInfoArray outputList)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void OnActivatedByTripWire()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "bool CanExplodeInFire()",
      "bool CanEat()",
      "bool IsIgnoredByConstruction()",
      "bool HasFoodStage()",
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "void RefreshAudioVisualsOnClient( CookingMethodType cooking_method, bool is_done, bool is_empty, bool is_burned )",
      "void RemoveAudioVisualsOnClient()",
      "bool CanRepair(ItemBase item_repair_kit)",
      "bool Repair(PlayerBase player, ItemBase item_repair_kit, float specialty_weight)",
      "int GetItemSize()",
      "bool CanBeMovedOverride()",
      "void SetCanBeMovedOverride(bool setting)",
      "void MessageToOwnerStatus(string text)",
      "void MessageToOwnerAction(string text)",
      "void MessageToOwnerFriendly(string text)",
      "void MessageToOwnerImportant(string text)",
      "bool IsItemBase()",
      "bool KindOf(string tag)",
      "void OnRPC(PlayerIdentity sender, int rpc_type,ParamsReadContext ctx)",
      "int NameToID(string name)",
      "string IDToName(int id)",
      "void OnSyncVariables(ParamsReadContext ctx)",
      "void SerializeNumericalVars(array<float> floats_out)",
      "void DeSerializeNumericalVars(array<float> floats)",
      "void WriteVarsToCTX(ParamsWriteContext ctx)",
      "bool ReadVarsFromCTX(ParamsReadContext ctx, int version = -1)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void AfterStoreLoad()",
      "void EEOnAfterLoad()",
      "bool CanBeDisinfected()",
      "void OnVariablesSynchronized()",
      "bool SetQuantity(float value, bool destroy_config = true, bool destroy_forced = false, bool allow_client = false, bool clamp_to_stack_max = true)",
      "bool AddQuantity(float value, bool destroy_config = true, bool destroy_forced = false)",
      "void SetQuantityMax()",
      "void SetQuantityToMinimum()",
      "void SetQuantityNormalized(float value, bool destroy_config = true, bool destroy_forced = false)",
      "float GetQuantityNormalized()",
      "float GetQuantityNormalizedScripted()",
      "int GetQuantityMax()",
      "int GetTargetQuantityMax(int attSlotID = -1)",
      "int GetQuantityMin()",
      "int GetQuantityInit()",
      "bool HasQuantity()",
      "float GetQuantity()",
      "bool IsFullQuantity()",
      "float GetSingleInventoryItemWeightEx()",
      "float GetSingleInventoryItemWeight()",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "int GetNumberOfItems()",
      "float GetUnitWeight(bool include_wetness = true)",
      "void ClearInventory()",
      "float GetEnergy()",
      "void OnEnergyConsumed()",
      "void OnEnergyAdded()",
      "void ConvertEnergyToQuantity()",
      "float GetHeatIsolationInit()",
      "float GetHeatIsolation()",
      "float GetDryingIncrement(string pIncrementName)",
      "float GetSoakingIncrement(string pIncrementName)",
      "void SetWet(float value, bool allow_client = false)",
      "void AddWet(float value)",
      "void SetWetMax()",
      "float GetWet()",
      "float GetWetMax()",
      "float GetWetMin()",
      "float GetWetInit()",
      "void OnWetChanged(float newVal, float oldVal)",
      "void OnWetLevelChanged(EWetnessLevel newLevel, EWetnessLevel oldLevel)",
      "void SetStoreLoad(bool value)",
      "bool IsStoreLoad()",
      "void SetStoreLoadedQuantity(float value)",
      "float GetStoreLoadedQuantity()",
      "float GetItemModelLength()",
      "float GetItemAttachOffset()",
      "void SetCleanness(int value, bool allow_client = false)",
      "int GetCleanness()",
      "bool AllowFoodConsumption()",
      "int GetLockType()",
      "string GetLockSoundSet()",
      "void SetColor(int r, int g, int b, int a)",
      "void GetColor(out int r,out int g,out int b,out int a)",
      "bool IsColorSet()",
      "string GetColorString()",
      "void SetLiquidType(int value, bool allow_client = false)",
      "int GetLiquidTypeInit()",
      "int GetLiquidType()",
      "void OnLiquidTypeChanged(int oldType, int newType)",
      "void UpdateQuickbarShortcutVisibility(PlayerBase player)",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnPlacementStarted(Man player)",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "bool ContainsAgent(int agent_id)",
      "void RemoveAgent(int agent_id)",
      "void RemoveAllAgents()",
      "void RemoveAllAgentsExcept(int agent_to_keep)",
      "void InsertAgent(int agent, float count = 1)",
      "void TransferAgents(int agents)",
      "int GetAgents()",
      "bool LoadAgents(ParamsReadContext ctx, int version)",
      "void SaveAgents(ParamsWriteContext ctx)",
      "void CheckForRoofLimited(float timeTresholdMS = 3000)",
      "float GetProtectionLevel(int type, bool consider_filter = false, int system = 0)",
      "void EEOnCECreate()",
      "void Open()",
      "void Close()",
      "bool IsOpen()",
      "bool CanDisplayCargo()",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "static void PlayFireParticles(ItemBase weapon, int muzzle_index, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "static void PlayBulletCasingEjectParticles(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "static void PlayOverheatingParticles(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "static void UpdateOverheatingParticles(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "static void StopOverheatingParticles(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "bool IsHeavyBehaviour()",
      "bool IsOneHandedBehaviour()",
      "bool IsTwoHandedBehaviour()",
      "bool IsDeployable()",
      "float GetDeployTime()",
      "void SetTakeable(bool pState)",
      "bool IsTakeable()",
      "bool IsActionTargetVisible()",
      "void PreLoadSoundAttachmentType()",
      "string GetAttachmentSoundType()",
      "string GetPlaceSoundset()",
      "string GetLoopDeploySoundset()",
      "string GetDeploySoundset()",
      "void InitItemSounds()",
      "void StartItemSoundServer(int id)",
      "void StopItemSoundServer(int id)",
      "void ClearStartItemSoundServer()",
      "void ClearStopItemSoundServer()",
      "void PlayAttachSound(string slot_type)",
      "void PlayDetachSound(string slot_type)",
      "void OnApply(PlayerBase player)",
      "float GetBandagingEffectivity()",
      "bool HidesSelectionBySlot()",
      "void StopItemDynamicPhysics()",
      "void PerformDamageSystemReinit()",
      "void SetZoneDamageCEInit()",
      "bool IsCoverFaceForShave(string slot_name)",
      "void ProcessItemWetness(float delta, bool hasparent, bool hasRootAsPlayer, ItemBase refparentIB)",
      "void ProcessItemTemperature(float delta, bool hasparent, bool hasRootAsPlayer, ItemBase refparentIB)",
      "void HierarchyCheck(out bool hasparent, out bool hasRootAsPlayer, out ItemBase refparentIB)",
      "void ProcessDecay(float delta, bool hasRootAsPlayer)",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "bool CanHaveWetness()",
      "bool CanBeConsumed(ConsumeConditionData data = null)",
      "void ProcessVariables()",
      "float GetTemperaturePerQuantityWeight()",
      "float GetTemperatureFreezeThreshold()",
      "float GetTemperatureThawThreshold()",
      "float GetItemOverheatThreshold()",
      "float GetTemperatureFreezeTime()",
      "float GetTemperatureThawTime()",
      "void AffectLiquidContainerOnFill(int liquid_type, float amount)",
      "void AffectLiquidContainerOnTransfer(int liquidType, float amount, float sourceLiquidTemperature)",
      "bool IsCargoException4x3(EntityAI item)",
      "void CopyScriptPropertiesFrom(EntityAI oldItem)",
      "void AddLightSourceItem(ItemBase lightsource)",
      "void RemoveLightSourceItem()",
      "bool GetActionWidgetOverride(out typename name)",
      "bool PairWithDevice(notnull ItemBase otherDevice)",
      "float GetBaitEffectivity()",
      "void SetDebugItem()",
      "string GetDebugText()",
      "bool CanBeUsedForSuicide()",
      "void ProcessItemWetnessAndTemperature(float delta, bool hasparent, bool hasRootAsPlayer, ItemBase refparentIB)",
      "string GetDeployFinishSoundset()",
      "void PlayDeploySound()",
      "void PlayDeployFinishSound()",
      "void PlayPlaceSound()",
      "void PlayDeployLoopSoundEx()",
      "void StopDeployLoopSoundEx()",
      "void SoundSynchRemoteReset()",
      "void SoundSynchRemote()",
      "bool UsesGlobalDeploy()",
      "bool CanPlayDeployLoopSound()",
      "bool IsSoundSynchRemote()",
      "bool IsPlaceSound()",
      "bool IsDeploySound()",
      "void SetIsPlaceSound(bool is_place_sound)",
      "void SetIsDeploySound(bool is_deploy_sound)",
      "void SetupSpawnedItem(ItemBase item, float health, float quantity)"
    ]
  },
  "ItemBase": {
    "parent": "InventoryItem",
    "methods": [
      "void TransferModifiers(PlayerBase reciever)",
      "void ItemBase()",
      "void InitItemVariables()",
      "int GetQuickBarBonus()",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "void SetActions()",
      "void SetActionAnimOverrides()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)",
      "void OverrideActionAnimation(typename action, int commandUID, int stanceMask = -1, int commandUIDProne = -1)",
      "void OnItemInHandsPlayerSwimStart(PlayerBase player)",
      "void LoadParticleConfigOnFire(int id)",
      "void LoadParticleConfigOnOverheating(int id)",
      "float GetOverheatingValue()",
      "void IncreaseOverheating(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void CheckOverheating(ItemBase weapon = null, string ammoType = , ItemBase muzzle_owner = null, ItemBase suppressor = null, string config_to_search = )",
      "bool IsOverheatingEffectActive()",
      "void OnOverheatingDecay()",
      "void StartOverheating(ItemBase weapon = null, string ammoType = , ItemBase muzzle_owner = null, ItemBase suppressor = null, string config_to_search = )",
      "void UpdateOverheating(ItemBase weapon = null, string ammoType = , ItemBase muzzle_owner = null, ItemBase suppressor = null, string config_to_search = )",
      "void StopOverheating(ItemBase weapon = null, string ammoType = , ItemBase muzzle_owner = null, ItemBase suppressor = null, string config_to_search = )",
      "void RegisterOverheatingParticle(Particle p, float min_heat_coef, float max_heat_coef, int particle_id, Object parent, vector local_pos, vector local_ori)",
      "float GetOverheatingCoef()",
      "void UpdateAllOverheatingParticles()",
      "void KillAllOverheatingParticles()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "float GetDisinfectQuantity(int system = 0, Param param1 = null)",
      "float GetFilterDamageRatio()",
      "bool HasMuzzle()",
      "int GetMuzzleID()",
      "int GetDamageSystemVersionChange()",
      "static int GetDebugActionsMask()",
      "static bool HasDebugActionsMask(int mask)",
      "static void SetDebugActionsMask(int mask)",
      "static void AddDebugActionsMask(int mask)",
      "static void RemoveDebugActionsMask(int mask)",
      "static void ToggleDebugActionsMask(int mask)",
      "void SetCEBasedQuantity()",
      "void LockToparent()",
      "void UnlockFromparent()",
      "void CombineItemsClient(EntityAI entity2, bool use_stack_max = true)",
      "bool IsLiquidPresent()",
      "bool IsLiquidContainer()",
      "int GetLiquidContainerMask()",
      "bool IsBloodContainer()",
      "bool IsNVG()",
      "bool IsExplosive()",
      "string GetExplosiveTriggerSlotName()",
      "bool IsLightSource()",
      "bool CanBeRepairedByCrafting()",
      "bool IsFacingPlayer(PlayerBase player, string selection)",
      "bool IsPlayerInside(PlayerBase player, string selection)",
      "bool CanObstruct()",
      "bool IsBeingPlaced()",
      "void SetIsBeingPlaced(bool is_being_placed)",
      "void OnEndPlacement()",
      "bool IsHologram()",
      "bool CanBeDigged()",
      "int GetOnDigWormsAmount()",
      "bool CanMakeGardenplot()",
      "void SetIsHologram(bool is_hologram)",
      "void OnMovedInsideCargo(EntityAI container)",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EOnContact(IEntity other, Contact extra)",
      "void RefreshPhysics()",
      "void OnCreatePhysics()",
      "void OnItemAttachmentSlotChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void EEDelete(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "string ChangeIntoOnAttach(string slot)",
      "string ChangeIntoOnDetach()",
      "void ExplodeAmmo()",
      "void DoAmmoExplosion()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "bool DamageItemInCargo(float damage)",
      "bool DamageItemAttachments(float damage)",
      "bool IsSplitable()",
      "bool CanBeSplit()",
      "void SplitIntoStackMaxClient(EntityAI destination_entity, int slot_id )",
      "void SplitIntoStackMax(EntityAI destination_entity, int slot_id, PlayerBase player)",
      "void SplitIntoStackMaxEx(EntityAI destination_entity, int slot_id)",
      "void SplitIntoStackMaxToInventoryLocationClient(notnull InventoryLocation dst)",
      "void SplitIntoStackMaxCargoClient(EntityAI destination_entity, int idx, int row, int col)",
      "void SplitIntoStackMaxToInventoryLocation(notnull InventoryLocation dst)",
      "void SplitIntoStackMaxCargo(EntityAI destination_entity, int idx, int row, int col)",
      "void SplitIntoStackMaxHandsClient(PlayerBase player)",
      "void SplitIntoStackMaxHands(PlayerBase player)",
      "void SplitItemToInventoryLocation(notnull InventoryLocation dst)",
      "void SplitItem(PlayerBase player)",
      "void OnQuantityChanged(float delta)",
      "void OnAttachmentQuantityChanged(ItemBase item)",
      "void OnAttachmentQuantityChangedEx(ItemBase item , float delta)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void OnRightClick()",
      "bool CanBeCombined(EntityAI other_item, bool reservation_check = true, bool stack_max_limit = false)",
      "bool IsCombineAll(ItemBase other_item, bool use_stack_max = false)",
      "bool IsResultOfSplit()",
      "void SetResultOfSplit(bool value)",
      "int ComputeQuantityUsed(ItemBase other_item, bool use_stack_max = true)",
      "float ComputeQuantityUsedEx(ItemBase other_item, bool use_stack_max = true)",
      "void CombineItemsEx(EntityAI entity2, bool use_stack_max = true)",
      "void CombineItems(ItemBase other_item, bool use_stack_max = true)",
      "void OnCombine(ItemBase other_item)",
      "void GetRecipesActions(Man player, out TSelectableActionInfoArray outputList)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void OnActivatedByTripWire()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "bool CanExplodeInFire()",
      "bool CanEat()",
      "bool IsIgnoredByConstruction()",
      "bool HasFoodStage()",
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "void RefreshAudioVisualsOnClient( CookingMethodType cooking_method, bool is_done, bool is_empty, bool is_burned )",
      "void RemoveAudioVisualsOnClient()",
      "bool CanRepair(ItemBase item_repair_kit)",
      "bool Repair(PlayerBase player, ItemBase item_repair_kit, float specialty_weight)",
      "int GetItemSize()",
      "bool CanBeMovedOverride()",
      "void SetCanBeMovedOverride(bool setting)",
      "void MessageToOwnerStatus(string text)",
      "void MessageToOwnerAction(string text)",
      "void MessageToOwnerFriendly(string text)",
      "void MessageToOwnerImportant(string text)",
      "bool IsItemBase()",
      "bool KindOf(string tag)",
      "void OnRPC(PlayerIdentity sender, int rpc_type,ParamsReadContext ctx)",
      "int NameToID(string name)",
      "string IDToName(int id)",
      "void OnSyncVariables(ParamsReadContext ctx)",
      "void SerializeNumericalVars(array<float> floats_out)",
      "void DeSerializeNumericalVars(array<float> floats)",
      "void WriteVarsToCTX(ParamsWriteContext ctx)",
      "bool ReadVarsFromCTX(ParamsReadContext ctx, int version = -1)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void AfterStoreLoad()",
      "void EEOnAfterLoad()",
      "bool CanBeDisinfected()",
      "void OnVariablesSynchronized()",
      "bool SetQuantity(float value, bool destroy_config = true, bool destroy_forced = false, bool allow_client = false, bool clamp_to_stack_max = true)",
      "bool AddQuantity(float value, bool destroy_config = true, bool destroy_forced = false)",
      "void SetQuantityMax()",
      "void SetQuantityToMinimum()",
      "void SetQuantityNormalized(float value, bool destroy_config = true, bool destroy_forced = false)",
      "float GetQuantityNormalized()",
      "float GetQuantityNormalizedScripted()",
      "int GetQuantityMax()",
      "int GetTargetQuantityMax(int attSlotID = -1)",
      "int GetQuantityMin()",
      "int GetQuantityInit()",
      "bool HasQuantity()",
      "float GetQuantity()",
      "bool IsFullQuantity()",
      "float GetSingleInventoryItemWeightEx()",
      "float GetSingleInventoryItemWeight()",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "int GetNumberOfItems()",
      "float GetUnitWeight(bool include_wetness = true)",
      "void ClearInventory()",
      "float GetEnergy()",
      "void OnEnergyConsumed()",
      "void OnEnergyAdded()",
      "void ConvertEnergyToQuantity()",
      "float GetHeatIsolationInit()",
      "float GetHeatIsolation()",
      "float GetDryingIncrement(string pIncrementName)",
      "float GetSoakingIncrement(string pIncrementName)",
      "void SetWet(float value, bool allow_client = false)",
      "void AddWet(float value)",
      "void SetWetMax()",
      "float GetWet()",
      "float GetWetMax()",
      "float GetWetMin()",
      "float GetWetInit()",
      "void OnWetChanged(float newVal, float oldVal)",
      "void OnWetLevelChanged(EWetnessLevel newLevel, EWetnessLevel oldLevel)",
      "void SetStoreLoad(bool value)",
      "bool IsStoreLoad()",
      "void SetStoreLoadedQuantity(float value)",
      "float GetStoreLoadedQuantity()",
      "float GetItemModelLength()",
      "float GetItemAttachOffset()",
      "void SetCleanness(int value, bool allow_client = false)",
      "int GetCleanness()",
      "bool AllowFoodConsumption()",
      "int GetLockType()",
      "string GetLockSoundSet()",
      "void SetColor(int r, int g, int b, int a)",
      "void GetColor(out int r,out int g,out int b,out int a)",
      "bool IsColorSet()",
      "string GetColorString()",
      "void SetLiquidType(int value, bool allow_client = false)",
      "int GetLiquidTypeInit()",
      "int GetLiquidType()",
      "void OnLiquidTypeChanged(int oldType, int newType)",
      "void UpdateQuickbarShortcutVisibility(PlayerBase player)",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnPlacementStarted(Man player)",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "bool ContainsAgent(int agent_id)",
      "void RemoveAgent(int agent_id)",
      "void RemoveAllAgents()",
      "void RemoveAllAgentsExcept(int agent_to_keep)",
      "void InsertAgent(int agent, float count = 1)",
      "void TransferAgents(int agents)",
      "int GetAgents()",
      "bool LoadAgents(ParamsReadContext ctx, int version)",
      "void SaveAgents(ParamsWriteContext ctx)",
      "void CheckForRoofLimited(float timeTresholdMS = 3000)",
      "float GetProtectionLevel(int type, bool consider_filter = false, int system = 0)",
      "void EEOnCECreate()",
      "void Open()",
      "void Close()",
      "bool IsOpen()",
      "bool CanDisplayCargo()",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanPutAsAttachment(EntityAI parent)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "static void PlayFireParticles(ItemBase weapon, int muzzle_index, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "static void PlayBulletCasingEjectParticles(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "static void PlayOverheatingParticles(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "static void UpdateOverheatingParticles(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "static void StopOverheatingParticles(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "bool IsHeavyBehaviour()",
      "bool IsOneHandedBehaviour()",
      "bool IsTwoHandedBehaviour()",
      "bool IsDeployable()",
      "float GetDeployTime()",
      "void SetTakeable(bool pState)",
      "bool IsTakeable()",
      "bool IsActionTargetVisible()",
      "void PreLoadSoundAttachmentType()",
      "string GetAttachmentSoundType()",
      "string GetPlaceSoundset()",
      "string GetLoopDeploySoundset()",
      "string GetDeploySoundset()",
      "void InitItemSounds()",
      "void StartItemSoundServer(int id)",
      "void StopItemSoundServer(int id)",
      "void ClearStartItemSoundServer()",
      "void ClearStopItemSoundServer()",
      "void PlayAttachSound(string slot_type)",
      "void PlayDetachSound(string slot_type)",
      "void OnApply(PlayerBase player)",
      "float GetBandagingEffectivity()",
      "bool HidesSelectionBySlot()",
      "void StopItemDynamicPhysics()",
      "void PerformDamageSystemReinit()",
      "void SetZoneDamageCEInit()",
      "bool IsCoverFaceForShave(string slot_name)",
      "void ProcessItemWetness(float delta, bool hasparent, bool hasRootAsPlayer, ItemBase refparentIB)",
      "void ProcessItemTemperature(float delta, bool hasparent, bool hasRootAsPlayer, ItemBase refparentIB)",
      "void HierarchyCheck(out bool hasparent, out bool hasRootAsPlayer, out ItemBase refparentIB)",
      "void ProcessDecay(float delta, bool hasRootAsPlayer)",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "bool CanHaveWetness()",
      "bool CanBeConsumed(ConsumeConditionData data = null)",
      "void ProcessVariables()",
      "float GetTemperaturePerQuantityWeight()",
      "float GetTemperatureFreezeThreshold()",
      "float GetTemperatureThawThreshold()",
      "float GetItemOverheatThreshold()",
      "float GetTemperatureFreezeTime()",
      "float GetTemperatureThawTime()",
      "void AffectLiquidContainerOnFill(int liquid_type, float amount)",
      "void AffectLiquidContainerOnTransfer(int liquidType, float amount, float sourceLiquidTemperature)",
      "bool IsCargoException4x3(EntityAI item)",
      "void CopyScriptPropertiesFrom(EntityAI oldItem)",
      "void AddLightSourceItem(ItemBase lightsource)",
      "void RemoveLightSourceItem()",
      "bool GetActionWidgetOverride(out typename name)",
      "bool PairWithDevice(notnull ItemBase otherDevice)",
      "float GetBaitEffectivity()",
      "void SetDebugItem()",
      "string GetDebugText()",
      "bool CanBeUsedForSuicide()",
      "void ProcessItemWetnessAndTemperature(float delta, bool hasparent, bool hasRootAsPlayer, ItemBase refparentIB)",
      "string GetDeployFinishSoundset()",
      "void PlayDeploySound()",
      "void PlayDeployFinishSound()",
      "void PlayPlaceSound()",
      "void PlayDeployLoopSoundEx()",
      "void StopDeployLoopSoundEx()",
      "void SoundSynchRemoteReset()",
      "void SoundSynchRemote()",
      "bool UsesGlobalDeploy()",
      "bool CanPlayDeployLoopSound()",
      "bool IsSoundSynchRemote()",
      "bool IsPlaceSound()",
      "bool IsDeploySound()",
      "void SetIsPlaceSound(bool is_place_sound)",
      "void SetIsDeploySound(bool is_deploy_sound)",
      "void SetupSpawnedItem(ItemBase item, float health, float quantity)"
    ]
  },
  "ManBase": {
    "parent": "DayZPlayerImplement",
    "methods": [
      "void ManBase()",
      "bool IsControlledPlayer()",
      "void OnVariablesSynchronized()"
    ]
  },
  "RockBase": {
    "parent": null,
    "methods": [
      "bool IsRock()",
      "bool CanBeAutoDeleted()",
      "int GetAmountOfDrops(ItemBase item)",
      "void GetMaterialAndQuantityMap(ItemBase item, out map<string,int> output_map)",
      "float GetDamageToMiningItemEachDrop(ItemBase item)"
    ]
  },
  "Static_stone1": {
    "parent": null,
    "methods": []
  },
  "Static_stone2": {
    "parent": null,
    "methods": []
  },
  "Static_stone3": {
    "parent": null,
    "methods": []
  },
  "Static_stone4": {
    "parent": null,
    "methods": []
  },
  "Static_stone5": {
    "parent": null,
    "methods": []
  },
  "Static_rock_apart1": {
    "parent": null,
    "methods": []
  },
  "Static_rock_apart2": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_apart1": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_apart2": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_monolith1": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_monolith2": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_monolith3": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_monolith4": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_spike1": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_spike2": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_spike3": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_wallh1": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_wallh2": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_wallh3": {
    "parent": null,
    "methods": []
  },
  "Static_rock_bright_wallv": {
    "parent": null,
    "methods": []
  },
  "Static_rock_monolith1": {
    "parent": null,
    "methods": []
  },
  "Static_rock_monolith2": {
    "parent": null,
    "methods": []
  },
  "Static_rock_monolith3": {
    "parent": null,
    "methods": []
  },
  "Static_rock_monolith4": {
    "parent": null,
    "methods": []
  },
  "Static_rock_spike1": {
    "parent": null,
    "methods": []
  },
  "Static_rock_spike2": {
    "parent": null,
    "methods": []
  },
  "Static_rock_spike3": {
    "parent": null,
    "methods": []
  },
  "Static_rock_wallh1": {
    "parent": null,
    "methods": []
  },
  "Static_rock_wallh2": {
    "parent": null,
    "methods": []
  },
  "Static_rock_wallh3": {
    "parent": null,
    "methods": []
  },
  "Static_rock_wallv": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone6": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone6_moss": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone7": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone7_moss": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone8": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone8_moss": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone9": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone9_moss": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone10": {
    "parent": null,
    "methods": []
  },
  "Static_rock_stone10_moss": {
    "parent": null,
    "methods": []
  },
  "Static_rock_wallh4": {
    "parent": null,
    "methods": []
  },
  "Static_rock_wallh5": {
    "parent": null,
    "methods": []
  },
  "Static_rock_wallh6": {
    "parent": null,
    "methods": []
  },
  "Static_stone10": {
    "parent": null,
    "methods": []
  },
  "Static_stone10_moss": {
    "parent": null,
    "methods": []
  },
  "Static_stone6": {
    "parent": null,
    "methods": []
  },
  "Static_stone6_moss": {
    "parent": null,
    "methods": []
  },
  "Static_stone7": {
    "parent": null,
    "methods": []
  },
  "Static_stone7_moss": {
    "parent": null,
    "methods": []
  },
  "Static_stone8": {
    "parent": null,
    "methods": []
  },
  "Static_stone8_moss": {
    "parent": null,
    "methods": []
  },
  "Static_stone9": {
    "parent": null,
    "methods": []
  },
  "Static_stone9_moss": {
    "parent": null,
    "methods": []
  },
  "ScriptedLightBase": {
    "parent": "EntityLightSource",
    "methods": [
      "void ScriptedLightBase()",
      "void EOnInit(IEntity other, int extra)",
      "bool IsScriptedLight()",
      "void UpdateMode()",
      "void UpdateLightMode(string slotName)",
      "void DeleteLightWithDelay()",
      "void DeleteLightNow()",
      "void AttachOnObject(Object parent, vector local_pos = , vector local_ori = )",
      "void AttachOnMemoryPoint(Object parent, string memory_point_start, string memory_point_target = )",
      "void DetachFromparent()",
      "void SetBrightnessTo(float value)",
      "void CorrectLightPulseDuringDaylight()",
      "void FadeBrightnessTo( float value, float time_in_s )",
      "void SetRadiusTo(float value)",
      "void FadeRadiusTo( float value, float time_in_s )",
      "void Destroy()",
      "void SetLifetime(float life_in_s)",
      "void SetFadeOutTime(float time_in_s)",
      "void FadeOut(float time_in_s = -1)",
      "void FadeIn(float time_in_s)",
      "void AddLifetime(float life_in_s)",
      "void OnFrameLightSource(IEntity other, float timeSlice)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void SetDancingShadowsAmplitude(float max_deviation_in_meters)",
      "void SetDancingShadowsMovementSpeed(float speed_in_meters_per_frame)",
      "float GetDancingShadowsAmplitude()",
      "float GetDancingShadowsMovementSpeed()",
      "void SetSelectionID(int id)",
      "void UpdateLightSourceMaterial(string path)",
      "void EnableDebug(bool state)",
      "void HandleDancingShadows(float time, float timeSlice)",
      "void HandleFlickering(float time, float timeSlice)",
      "void SetFlickerSpeed(float speed)",
      "void SetFlickerAmplitude(float coef)",
      "void SetFlickerAmplitudeMax(float coef)",
      "void SetFlickerAmplitudeMin(float coef)",
      "float GetFlickerSpeed()",
      "float GetFlickerAmplitudeCoefMax()",
      "float GetFlickerAmplitudeCoefMin()",
      "void TryShadowOptimization()",
      "void SetDisableShadowsWithinRadius(float radius_in_m)",
      "float GetDisableShadowsWithinRadius()",
      "void CheckIfparentIsInCargo()",
      "bool CheckLifetime(int current_time)",
      "void CheckFadeOut( int current_time)",
      "void HandleBrightnessFadeing(float timeSlice)",
      "void HandleRadiusFadeing(float timeSlice)",
      "void SetBlinkingSpeed(float _speed)",
      "float GetBlinkingSpeed()",
      "void HandleBlinking(float time)",
      "void EnableDimming(float baseBrightness, DimmingConfig dimCfg)",
      "void StopDimming()"
    ]
  },
  "SyncHitInfo": {
    "parent": "Managed",
    "methods": []
  },
  "UndergroundStash": {
    "parent": "ItemBase",
    "methods": [
      "void UndergroundStash()",
      "void PlaceOnGround()",
      "bool CanDisplayCargo()",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanReleaseCargo(EntityAI cargo)",
      "bool CanReceiveItemIntoHands(EntityAI item_to_hands)",
      "bool CanSaveItemInHands(EntityAI item_in_hands)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool IsInventoryVisible()"
    ]
  },
  "UndergroundStashSnow": {
    "parent": "UndergroundStash",
    "methods": []
  },
  "WeaponParticlesBase": {
    "parent": null,
    "methods": [
      "void WeaponParticlesBase(ItemBase muzzle_owner, string config_OnFire_entry)",
      "void OnActivate(ItemBase weapon, int muzzle_index, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void OnParticleCreated(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search, Particle p)",
      "void OnDeactivate(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void OnUpdate(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "bool CheckBoltStateCondition(ItemBase weapon)",
      "bool CheckHealthCondition(int health_label)",
      "bool CheckOverheatingCondition(float overheating_coef)",
      "bool CheckRainCondition(float rain_coef)",
      "int CheckParticleOverride(string ammoType)",
      "void RegisterParticle( Particle p)",
      "void SetOverheatingLimitMin(float min)",
      "void SetOverheatingLimitMax(float max)",
      "float GetOverheatingLimitMin()",
      "float GetOverheatingLimitMax()",
      "void SetParticleParams(int particle_id, Object parent, vector local_pos, vector local_ori)",
      "int GetParticleID()"
    ]
  },
  "WeaponParticlesOnFire": {
    "parent": null,
    "methods": [
      "void OnParticleCreated(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search, Particle p)",
      "void OnDeactivate(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void OnUpdate(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void RegisterParticle( Particle p)",
      "void SetOverheatingLimitMin(float min)",
      "void SetOverheatingLimitMax(float max)",
      "float GetOverheatingLimitMin()",
      "float GetOverheatingLimitMax()",
      "void SetParticleParams(int particle_id, Object parent, vector local_pos, vector local_ori)",
      "int GetParticleID()"
    ]
  },
  "WeaponParticlesOnBulletCasingEject": {
    "parent": null,
    "methods": [
      "void OnParticleCreated(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search, Particle p)",
      "void OnDeactivate(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void OnUpdate(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void RegisterParticle( Particle p)",
      "void SetOverheatingLimitMin(float min)",
      "void SetOverheatingLimitMax(float max)",
      "float GetOverheatingLimitMin()",
      "float GetOverheatingLimitMax()",
      "void SetParticleParams(int particle_id, Object parent, vector local_pos, vector local_ori)",
      "int GetParticleID()"
    ]
  },
  "WeaponParticlesOnOverheating": {
    "parent": null,
    "methods": [
      "void OnParticleCreated(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search, Particle p)",
      "void OnDeactivate(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void OnUpdate(ItemBase weapon, string ammoType, ItemBase muzzle_owner, ItemBase suppressor, string config_to_search)",
      "void RegisterParticle( Particle p)",
      "void SetOverheatingLimitMin(float min)",
      "void SetOverheatingLimitMax(float max)",
      "float GetOverheatingLimitMin()",
      "float GetOverheatingLimitMax()",
      "void SetParticleParams(int particle_id, Object parent, vector local_pos, vector local_ori)",
      "int GetParticleID()"
    ]
  },
  "OverheatingParticle": {
    "parent": null,
    "methods": [
      "void RegisterParticle( Particle p)",
      "void SetOverheatingLimitMin(float min)",
      "void SetOverheatingLimitMax(float max)",
      "float GetOverheatingLimitMin()",
      "float GetOverheatingLimitMax()",
      "void SetParticleParams(int particle_id, Object parent, vector local_pos, vector local_ori)",
      "int GetParticleID()"
    ]
  },
  "WoodBase": {
    "parent": "Plant",
    "methods": [
      "void WoodBase()",
      "void InitMiningValues()",
      "bool IsWoodBase()",
      "bool IsCuttable()",
      "bool HasPlayerCollisionParticle()",
      "bool HasPlayerCollisionSound()",
      "int GetPrimaryDropsAmount()",
      "int GetSecondaryDropsAmount()",
      "float GetToolDamage()",
      "float GetCycleTimeOverride()",
      "string GetPrimaryOutput()",
      "string GetSecondaryOutput()",
      "string GetBarkType()",
      "int GetAmountOfDrops(ItemBase item)",
      "int GetAmountOfDropsEx(ItemBase item, EHarvestType type)",
      "void GetMaterialAndQuantityMap(ItemBase item, out map<string,int> output_map)",
      "void GetMaterialAndQuantityMapEx(ItemBase item, out map<string,int> output_map, EHarvestType type)",
      "float GetDamageToMiningItemEachDrop(ItemBase item)",
      "float GetDamageToMiningItemEachDropEx(ItemBase item, EHarvestType type)",
      "bool CanBeActionTarget()",
      "void TreeEffecterParameters(string type, float lifespan, int radius)",
      "void TreeEffecter()",
      "void Init(int id, EffecterParameters parameters)",
      "void SetRadius(float radius)",
      "void OnVariablesSynchronized()"
    ]
  },
  "TreeEffecterParameters": {
    "parent": null,
    "methods": [
      "void TreeEffecterParameters(string type, float lifespan, int radius)",
      "void TreeEffecter()",
      "void Init(int id, EffecterParameters parameters)",
      "void SetRadius(float radius)",
      "void OnVariablesSynchronized()"
    ]
  },
  "TreeEffecter": {
    "parent": null,
    "methods": [
      "void TreeEffecter()",
      "void Init(int id, EffecterParameters parameters)",
      "void SetRadius(float radius)",
      "void OnVariablesSynchronized()"
    ]
  },
  "PluginBase": {
    "parent": null,
    "methods": [
      "void PluginBase()",
      "void OnInit()",
      "void OnUpdate(float delta_time)",
      "void OnDestroy()",
      "void Log(string msg, string label)",
      "string GetModuleName()"
    ]
  },
  "PluginManager": {
    "parent": null,
    "methods": [
      "void PluginManager()",
      "void Init()",
      "void PluginsInit()",
      "void MainOnUpdate(float delta_time)",
      "void RegisterPlugin( string plugin_class_name, bool reg_on_client, bool reg_on_server, bool reg_on_release = true )",
      "void RegisterPluginDebug( string plugin_class_name, bool reg_on_client, bool reg_on_server )",
      "void RegisterPluginDiag( string plugin_class_name, bool reg_on_client, bool reg_on_server )",
      "bool UnregisterPlugin( string plugin_class_name )",
      "void PluginManagerInit()",
      "void PluginManagerDelete()",
      "bool IsPluginManagerExists()",
      "bool IsModuleExist(typename plugin_type)"
    ]
  },
  "BetaSound": {
    "parent": null,
    "methods": []
  },
  "BloodTypes": {
    "parent": null,
    "methods": [
      "static int GenerateBloodType()",
      "static bool MatchBloodCompatibility(int bloodtypetarget, int bloodtype)",
      "static string GetBloodTypeName(int bloodtype, out string type, out bool positive )"
    ]
  },
  "LiquidInfo": {
    "parent": null,
    "methods": [
      "void LiquidInfo(string className, NutritionalProfile profile)",
      "void Init(string className)",
      "static string GetLiquidClassname(int liquid_type)",
      "static bool InitAllLiquids()",
      "static void Transfer(ItemBase source_ent, ItemBase target_ent, float quantity = -1)",
      "static bool CanTransfer(ItemBase source_ent, ItemBase target_ent)",
      "static void FillContainer(ItemBase container, int liquid_type, float amount)",
      "static void FillContainerEnviro(ItemBase container, int liquid_type, float amount, bool inject_agents = true)",
      "static void AffectContainerOnFill(ItemBase container, int liquid_type, float amount)",
      "static void AffectContainerOnTransfer(ItemBase container, int liquidType, float amount, float sourceLiquidTransfer)",
      "static bool IsLiquidDrinkWater(int liquidType)",
      "static int TranslateLiquidType(int liquidType)",
      "static bool CanFillContainer(ItemBase container, int liquid_type, bool ignore_fullness_check = false)",
      "static float GetLiquidTypeEnviroTemperature(int liquidType)",
      "static string GetLiquidConfigProperty(int liquid_type, string property_name, bool is_nutrition_property = false)",
      "static int GetAgents(int liquid_type)",
      "static int GetAgentsPerDigest(int liquidType)",
      "static float GetToxicity(int liquid_type)",
      "static float GetWaterContent(int liquid_type)",
      "static float GetEnergy(int liquid_type)",
      "static float GetNutritionalIndex(int liquid_type)",
      "static string GetDisplayName(int liquid_type)",
      "static float GetFlammability(int liquid_type)",
      "static float GetFullness(int liquid_type)",
      "static float GetDigestibility(int liquid_type)",
      "static float GetFreezeThreshold(int liquid_type)",
      "static float GetThawThreshold(int liquid_type)",
      "static float GetBoilThreshold(int liquid_type)",
      "static string GetName(int liquid_type)"
    ]
  },
  "Liquid": {
    "parent": null,
    "methods": [
      "static string GetLiquidClassname(int liquid_type)",
      "static bool InitAllLiquids()",
      "static void Transfer(ItemBase source_ent, ItemBase target_ent, float quantity = -1)",
      "static bool CanTransfer(ItemBase source_ent, ItemBase target_ent)",
      "static void FillContainer(ItemBase container, int liquid_type, float amount)",
      "static void FillContainerEnviro(ItemBase container, int liquid_type, float amount, bool inject_agents = true)",
      "static void AffectContainerOnFill(ItemBase container, int liquid_type, float amount)",
      "static void AffectContainerOnTransfer(ItemBase container, int liquidType, float amount, float sourceLiquidTransfer)",
      "static bool IsLiquidDrinkWater(int liquidType)",
      "static int TranslateLiquidType(int liquidType)",
      "static bool CanFillContainer(ItemBase container, int liquid_type, bool ignore_fullness_check = false)",
      "static float GetLiquidTypeEnviroTemperature(int liquidType)",
      "static string GetLiquidConfigProperty(int liquid_type, string property_name, bool is_nutrition_property = false)",
      "static int GetAgents(int liquid_type)",
      "static int GetAgentsPerDigest(int liquidType)",
      "static float GetToxicity(int liquid_type)",
      "static float GetWaterContent(int liquid_type)",
      "static float GetEnergy(int liquid_type)",
      "static float GetNutritionalIndex(int liquid_type)",
      "static string GetDisplayName(int liquid_type)",
      "static float GetFlammability(int liquid_type)",
      "static float GetFullness(int liquid_type)",
      "static float GetDigestibility(int liquid_type)",
      "static float GetFreezeThreshold(int liquid_type)",
      "static float GetThawThreshold(int liquid_type)",
      "static float GetBoilThreshold(int liquid_type)",
      "static string GetName(int liquid_type)"
    ]
  },
  "MiscEffects": {
    "parent": null,
    "methods": [
      "static void PlayVegetationCollideParticles(Object object, DayZPlayerImplement player)",
      "static void UpdateVegeCollisionCooldowns()"
    ]
  },
  "TurnItemIntoItemLambda": {
    "parent": "ReplaceItemWithNewLambda",
    "methods": [
      "void TurnItemIntoItemLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void SetTransferParams(bool transfer_agents = true, bool transfer_variables = true, bool transfer_health = true, bool exclude_quantity = false, float quantity_override = -1)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void VerifyItemTypeBySlotType()",
      "void OnSuccess(EntityAI new_item)",
      "void DropEquipAndDestroyRootLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void MoveEquipToExistingItemAndDestroyOldRootLambda(EntityAI old_item, string new_item_type, PlayerBase player, EntityAI new_item)",
      "void RemoveNetworkObjectInfo()",
      "void UndoRemoveNetworkObjectInfo()",
      "void CreateNetworkObjectInfo(EntityAI new_item)",
      "static float Truncate(float value, int decimals = 2)",
      "static string TruncateToS(float value, int decimals = 2)",
      "static string TruncateVecToS(vector value,int decimals = 2, string delimiter = )",
      "static string GetColorString(float r, float g, float b, float a)",
      "static string ValueToBar(float value, string bar = , string mark = )",
      "static string InsertAtPos(string base, string insert, int pos)",
      "static void TransferItemProperties(EntityAI source, notnull EntityAI target, bool transfer_agents = true, bool transfer_variables = true, bool transfer_health = true, bool exclude_quantity = false)",
      "static void TransferEntityVariables(EntityAI source, EntityAI target, bool exclude_quantity = false)",
      "static void TransferItemVariables(ItemBase source, ItemBase target, bool exclude_quantity = false)",
      "static void TransferEntityHealth(EntityAI source, EntityAI target, array<string> healthTypes = null, bool transferZoneDamage = true)",
      "static void UnlimitedAmmoDebugCheck(Weapon_Base weapon)",
      "static void TurnItemIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static void TurnItemInHandsIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemInHandsIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static int GetHealthLevelForAmmo(string class_name, float health)",
      "static float GetTypeMaxGlobalHealth(string class_name, string health_type = )",
      "static bool GetProjectedCursorPos3d(out vector position, Weapon_Base weapon)",
      "static void GetHeadBonePos(notnull PlayerBase player, out vector pos)",
      "static float GetHeadingAngle(notnull DayZPlayerImplement player)",
      "static float GetEnergyMetabolicSpeed(int movement_speed)",
      "static float GetWaterMetabolicSpeed(int movement_speed)",
      "static string ObtainRestrainItemTargetClassname(notnull EntityAI entity)",
      "static void TransformRestrainItem(EntityAI current_item, EntityAI tool, PlayerBase player_source, PlayerBase player_target, bool destroy = false)",
      "static bool IsValueInRange(float value, float from, float to)",
      "static bool IsPlayerOrientedTowardPos(notnull DayZPlayerImplement player, vector target_pos, float cone_angle)",
      "static string SanitizeString(string input)",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, string partName =  )",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, int constraction_index )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check, int constraction_index )",
      "static void IsUnderRoofFromToCalculation(EntityAI entity, out vector from, out vector to, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoof(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoofEx(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST, int geometry = ObjIntersectView)",
      "static void DropAllItemsInInventoryInBounds(ItemBase ib, vector halfExtents)",
      "static void ThrowAllItemsInInventory(notnull EntityAI parent, int flags)",
      "static void ThrowEntityFromInventory(notnull EntityAI entity, vector position, float direction[4], vector force, int flags)",
      "static float GetCurrentItemHeatIsolation( ItemBase pItem )",
      "static void FilterObstructingObjects(array<Object> potentiallyObstructingObjects, out array<Object> obstructingObjects)",
      "static bool CanIgnoreDistanceCheck(Object obj)",
      "static void FilterObstructedObjectsByGrouping(vector origin, float range, float distanceDelta, array<Object> objects, array<Object> obstructingObjects, out array<Object> filteredObjects, bool doDistanceCheck = false, bool checkIfDistanceCanBeIgnored = false, float maxDist = 0)",
      "static void SplitArrayIntoGroupsByDistance(array<Object> objects, array<ref array<Object>> objectGroups, float squaredDistanceDelta)",
      "static bool IsObjectObstructed(Object object, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedEx(Object object, IsObjectObstructedCache cache, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedProxy(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilter(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilterEx(Object object, IsObjectObstructedCache cache, PlayerBase player, int geometryTypeOverride = -1)",
      "static void DealEvinronmentAdjustedDmg(ItemBase item, PlayerBase player, float baseDamage)",
      "static void DealAbsoluteDmg(ItemBase item, float dmg)",
      "static float Normalize(int val, int maxVal)",
      "static float Bobbing(float period, float amplitude, float elapsedTime)",
      "static float FModulus(float x, float y)",
      "static void RemoveSplint( PlayerBase player )",
      "static void TeleportCheck(notnull PlayerBase player, notnull array<ref array<float>> safe_positions)",
      "static bool TeleportPlayerToSafeLocation3D(notnull PlayerBase player, vector safePos)",
      "static void GenerateAINoiseAtPosition(vector position, float lifeTime, NoiseParams noiseParams)",
      "static float GetMinValue(array<float> pArray)",
      "static float GetMaxValue(array<float> pArray)",
      "static string GetItemDisplayName(string type)",
      "static bool IsComponentInSelection(array<Selection> pSelection, string pCompName)",
      "static int GetComponentIndex(array<Selection> pSelection, string pCompName)",
      "static void RemoveAllAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void DeleteAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void GetAttachedChildren(IEntity parent, array<IEntity> outputObjects)",
      "static void SoakItemInsideparentContainingLiquidAboveThreshold(notnull ItemBase item, notnull ItemBase parent, float liquidQuantityThresholdPercentage = 0.05)",
      "static float GetCombinedSnowfallWindValue()",
      "void DestroyItemInCorpsesHandsAndCreateNewOnGndLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void RemoveOldItemFromLocation()",
      "void IsObjectObstructedCache(vector rayCastStart, int totalObjects)",
      "void ClearCache()"
    ]
  },
  "TurnItemIntoItemLambdaAnimSysNotifyLambda": {
    "parent": "TurnItemIntoItemLambda",
    "methods": [
      "void OnSuccess(EntityAI new_item)",
      "void DropEquipAndDestroyRootLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void MoveEquipToExistingItemAndDestroyOldRootLambda(EntityAI old_item, string new_item_type, PlayerBase player, EntityAI new_item)",
      "void RemoveNetworkObjectInfo()",
      "void UndoRemoveNetworkObjectInfo()",
      "void CreateNetworkObjectInfo(EntityAI new_item)",
      "static float Truncate(float value, int decimals = 2)",
      "static string TruncateToS(float value, int decimals = 2)",
      "static string TruncateVecToS(vector value,int decimals = 2, string delimiter = )",
      "static string GetColorString(float r, float g, float b, float a)",
      "static string ValueToBar(float value, string bar = , string mark = )",
      "static string InsertAtPos(string base, string insert, int pos)",
      "static void TransferItemProperties(EntityAI source, notnull EntityAI target, bool transfer_agents = true, bool transfer_variables = true, bool transfer_health = true, bool exclude_quantity = false)",
      "static void TransferEntityVariables(EntityAI source, EntityAI target, bool exclude_quantity = false)",
      "static void TransferItemVariables(ItemBase source, ItemBase target, bool exclude_quantity = false)",
      "static void TransferEntityHealth(EntityAI source, EntityAI target, array<string> healthTypes = null, bool transferZoneDamage = true)",
      "static void UnlimitedAmmoDebugCheck(Weapon_Base weapon)",
      "static void TurnItemIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static void TurnItemInHandsIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemInHandsIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static int GetHealthLevelForAmmo(string class_name, float health)",
      "static float GetTypeMaxGlobalHealth(string class_name, string health_type = )",
      "static bool GetProjectedCursorPos3d(out vector position, Weapon_Base weapon)",
      "static void GetHeadBonePos(notnull PlayerBase player, out vector pos)",
      "static float GetHeadingAngle(notnull DayZPlayerImplement player)",
      "static float GetEnergyMetabolicSpeed(int movement_speed)",
      "static float GetWaterMetabolicSpeed(int movement_speed)",
      "static string ObtainRestrainItemTargetClassname(notnull EntityAI entity)",
      "static void TransformRestrainItem(EntityAI current_item, EntityAI tool, PlayerBase player_source, PlayerBase player_target, bool destroy = false)",
      "static bool IsValueInRange(float value, float from, float to)",
      "static bool IsPlayerOrientedTowardPos(notnull DayZPlayerImplement player, vector target_pos, float cone_angle)",
      "static string SanitizeString(string input)",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, string partName =  )",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, int constraction_index )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check, int constraction_index )",
      "static void IsUnderRoofFromToCalculation(EntityAI entity, out vector from, out vector to, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoof(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoofEx(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST, int geometry = ObjIntersectView)",
      "static void DropAllItemsInInventoryInBounds(ItemBase ib, vector halfExtents)",
      "static void ThrowAllItemsInInventory(notnull EntityAI parent, int flags)",
      "static void ThrowEntityFromInventory(notnull EntityAI entity, vector position, float direction[4], vector force, int flags)",
      "static float GetCurrentItemHeatIsolation( ItemBase pItem )",
      "static void FilterObstructingObjects(array<Object> potentiallyObstructingObjects, out array<Object> obstructingObjects)",
      "static bool CanIgnoreDistanceCheck(Object obj)",
      "static void FilterObstructedObjectsByGrouping(vector origin, float range, float distanceDelta, array<Object> objects, array<Object> obstructingObjects, out array<Object> filteredObjects, bool doDistanceCheck = false, bool checkIfDistanceCanBeIgnored = false, float maxDist = 0)",
      "static void SplitArrayIntoGroupsByDistance(array<Object> objects, array<ref array<Object>> objectGroups, float squaredDistanceDelta)",
      "static bool IsObjectObstructed(Object object, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedEx(Object object, IsObjectObstructedCache cache, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedProxy(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilter(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilterEx(Object object, IsObjectObstructedCache cache, PlayerBase player, int geometryTypeOverride = -1)",
      "static void DealEvinronmentAdjustedDmg(ItemBase item, PlayerBase player, float baseDamage)",
      "static void DealAbsoluteDmg(ItemBase item, float dmg)",
      "static float Normalize(int val, int maxVal)",
      "static float Bobbing(float period, float amplitude, float elapsedTime)",
      "static float FModulus(float x, float y)",
      "static void RemoveSplint( PlayerBase player )",
      "static void TeleportCheck(notnull PlayerBase player, notnull array<ref array<float>> safe_positions)",
      "static bool TeleportPlayerToSafeLocation3D(notnull PlayerBase player, vector safePos)",
      "static void GenerateAINoiseAtPosition(vector position, float lifeTime, NoiseParams noiseParams)",
      "static float GetMinValue(array<float> pArray)",
      "static float GetMaxValue(array<float> pArray)",
      "static string GetItemDisplayName(string type)",
      "static bool IsComponentInSelection(array<Selection> pSelection, string pCompName)",
      "static int GetComponentIndex(array<Selection> pSelection, string pCompName)",
      "static void RemoveAllAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void DeleteAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void GetAttachedChildren(IEntity parent, array<IEntity> outputObjects)",
      "static void SoakItemInsideparentContainingLiquidAboveThreshold(notnull ItemBase item, notnull ItemBase parent, float liquidQuantityThresholdPercentage = 0.05)",
      "static float GetCombinedSnowfallWindValue()",
      "void DestroyItemInCorpsesHandsAndCreateNewOnGndLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void RemoveOldItemFromLocation()",
      "void IsObjectObstructedCache(vector rayCastStart, int totalObjects)",
      "void ClearCache()"
    ]
  },
  "TurnItemIntoItemLambdaRestrainLambda": {
    "parent": "TurnItemIntoItemLambdaAnimSysNotifyLambda",
    "methods": [
      "void OnSuccess(EntityAI new_item)",
      "void DropEquipAndDestroyRootLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void MoveEquipToExistingItemAndDestroyOldRootLambda(EntityAI old_item, string new_item_type, PlayerBase player, EntityAI new_item)",
      "void RemoveNetworkObjectInfo()",
      "void UndoRemoveNetworkObjectInfo()",
      "void CreateNetworkObjectInfo(EntityAI new_item)",
      "static float Truncate(float value, int decimals = 2)",
      "static string TruncateToS(float value, int decimals = 2)",
      "static string TruncateVecToS(vector value,int decimals = 2, string delimiter = )",
      "static string GetColorString(float r, float g, float b, float a)",
      "static string ValueToBar(float value, string bar = , string mark = )",
      "static string InsertAtPos(string base, string insert, int pos)",
      "static void TransferItemProperties(EntityAI source, notnull EntityAI target, bool transfer_agents = true, bool transfer_variables = true, bool transfer_health = true, bool exclude_quantity = false)",
      "static void TransferEntityVariables(EntityAI source, EntityAI target, bool exclude_quantity = false)",
      "static void TransferItemVariables(ItemBase source, ItemBase target, bool exclude_quantity = false)",
      "static void TransferEntityHealth(EntityAI source, EntityAI target, array<string> healthTypes = null, bool transferZoneDamage = true)",
      "static void UnlimitedAmmoDebugCheck(Weapon_Base weapon)",
      "static void TurnItemIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static void TurnItemInHandsIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemInHandsIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static int GetHealthLevelForAmmo(string class_name, float health)",
      "static float GetTypeMaxGlobalHealth(string class_name, string health_type = )",
      "static bool GetProjectedCursorPos3d(out vector position, Weapon_Base weapon)",
      "static void GetHeadBonePos(notnull PlayerBase player, out vector pos)",
      "static float GetHeadingAngle(notnull DayZPlayerImplement player)",
      "static float GetEnergyMetabolicSpeed(int movement_speed)",
      "static float GetWaterMetabolicSpeed(int movement_speed)",
      "static string ObtainRestrainItemTargetClassname(notnull EntityAI entity)",
      "static void TransformRestrainItem(EntityAI current_item, EntityAI tool, PlayerBase player_source, PlayerBase player_target, bool destroy = false)",
      "static bool IsValueInRange(float value, float from, float to)",
      "static bool IsPlayerOrientedTowardPos(notnull DayZPlayerImplement player, vector target_pos, float cone_angle)",
      "static string SanitizeString(string input)",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, string partName =  )",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, int constraction_index )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check, int constraction_index )",
      "static void IsUnderRoofFromToCalculation(EntityAI entity, out vector from, out vector to, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoof(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoofEx(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST, int geometry = ObjIntersectView)",
      "static void DropAllItemsInInventoryInBounds(ItemBase ib, vector halfExtents)",
      "static void ThrowAllItemsInInventory(notnull EntityAI parent, int flags)",
      "static void ThrowEntityFromInventory(notnull EntityAI entity, vector position, float direction[4], vector force, int flags)",
      "static float GetCurrentItemHeatIsolation( ItemBase pItem )",
      "static void FilterObstructingObjects(array<Object> potentiallyObstructingObjects, out array<Object> obstructingObjects)",
      "static bool CanIgnoreDistanceCheck(Object obj)",
      "static void FilterObstructedObjectsByGrouping(vector origin, float range, float distanceDelta, array<Object> objects, array<Object> obstructingObjects, out array<Object> filteredObjects, bool doDistanceCheck = false, bool checkIfDistanceCanBeIgnored = false, float maxDist = 0)",
      "static void SplitArrayIntoGroupsByDistance(array<Object> objects, array<ref array<Object>> objectGroups, float squaredDistanceDelta)",
      "static bool IsObjectObstructed(Object object, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedEx(Object object, IsObjectObstructedCache cache, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedProxy(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilter(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilterEx(Object object, IsObjectObstructedCache cache, PlayerBase player, int geometryTypeOverride = -1)",
      "static void DealEvinronmentAdjustedDmg(ItemBase item, PlayerBase player, float baseDamage)",
      "static void DealAbsoluteDmg(ItemBase item, float dmg)",
      "static float Normalize(int val, int maxVal)",
      "static float Bobbing(float period, float amplitude, float elapsedTime)",
      "static float FModulus(float x, float y)",
      "static void RemoveSplint( PlayerBase player )",
      "static void TeleportCheck(notnull PlayerBase player, notnull array<ref array<float>> safe_positions)",
      "static bool TeleportPlayerToSafeLocation3D(notnull PlayerBase player, vector safePos)",
      "static void GenerateAINoiseAtPosition(vector position, float lifeTime, NoiseParams noiseParams)",
      "static float GetMinValue(array<float> pArray)",
      "static float GetMaxValue(array<float> pArray)",
      "static string GetItemDisplayName(string type)",
      "static bool IsComponentInSelection(array<Selection> pSelection, string pCompName)",
      "static int GetComponentIndex(array<Selection> pSelection, string pCompName)",
      "static void RemoveAllAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void DeleteAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void GetAttachedChildren(IEntity parent, array<IEntity> outputObjects)",
      "static void SoakItemInsideparentContainingLiquidAboveThreshold(notnull ItemBase item, notnull ItemBase parent, float liquidQuantityThresholdPercentage = 0.05)",
      "static float GetCombinedSnowfallWindValue()",
      "void DestroyItemInCorpsesHandsAndCreateNewOnGndLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void RemoveOldItemFromLocation()",
      "void IsObjectObstructedCache(vector rayCastStart, int totalObjects)",
      "void ClearCache()"
    ]
  },
  "DropEquipAndDestroyRootLambda": {
    "parent": null,
    "methods": [
      "void DropEquipAndDestroyRootLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void MoveEquipToExistingItemAndDestroyOldRootLambda(EntityAI old_item, string new_item_type, PlayerBase player, EntityAI new_item)",
      "void RemoveNetworkObjectInfo()",
      "void UndoRemoveNetworkObjectInfo()",
      "void CreateNetworkObjectInfo(EntityAI new_item)",
      "static float Truncate(float value, int decimals = 2)",
      "static string TruncateToS(float value, int decimals = 2)",
      "static string TruncateVecToS(vector value,int decimals = 2, string delimiter = )",
      "static string GetColorString(float r, float g, float b, float a)",
      "static string ValueToBar(float value, string bar = , string mark = )",
      "static string InsertAtPos(string base, string insert, int pos)",
      "static void TransferItemProperties(EntityAI source, notnull EntityAI target, bool transfer_agents = true, bool transfer_variables = true, bool transfer_health = true, bool exclude_quantity = false)",
      "static void TransferEntityVariables(EntityAI source, EntityAI target, bool exclude_quantity = false)",
      "static void TransferItemVariables(ItemBase source, ItemBase target, bool exclude_quantity = false)",
      "static void TransferEntityHealth(EntityAI source, EntityAI target, array<string> healthTypes = null, bool transferZoneDamage = true)",
      "static void UnlimitedAmmoDebugCheck(Weapon_Base weapon)",
      "static void TurnItemIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static void TurnItemInHandsIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemInHandsIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static int GetHealthLevelForAmmo(string class_name, float health)",
      "static float GetTypeMaxGlobalHealth(string class_name, string health_type = )",
      "static bool GetProjectedCursorPos3d(out vector position, Weapon_Base weapon)",
      "static void GetHeadBonePos(notnull PlayerBase player, out vector pos)",
      "static float GetHeadingAngle(notnull DayZPlayerImplement player)",
      "static float GetEnergyMetabolicSpeed(int movement_speed)",
      "static float GetWaterMetabolicSpeed(int movement_speed)",
      "static string ObtainRestrainItemTargetClassname(notnull EntityAI entity)",
      "static void TransformRestrainItem(EntityAI current_item, EntityAI tool, PlayerBase player_source, PlayerBase player_target, bool destroy = false)",
      "static bool IsValueInRange(float value, float from, float to)",
      "static bool IsPlayerOrientedTowardPos(notnull DayZPlayerImplement player, vector target_pos, float cone_angle)",
      "static string SanitizeString(string input)",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, string partName =  )",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, int constraction_index )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check, int constraction_index )",
      "static void IsUnderRoofFromToCalculation(EntityAI entity, out vector from, out vector to, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoof(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoofEx(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST, int geometry = ObjIntersectView)",
      "static void DropAllItemsInInventoryInBounds(ItemBase ib, vector halfExtents)",
      "static void ThrowAllItemsInInventory(notnull EntityAI parent, int flags)",
      "static void ThrowEntityFromInventory(notnull EntityAI entity, vector position, float direction[4], vector force, int flags)",
      "static float GetCurrentItemHeatIsolation( ItemBase pItem )",
      "static void FilterObstructingObjects(array<Object> potentiallyObstructingObjects, out array<Object> obstructingObjects)",
      "static bool CanIgnoreDistanceCheck(Object obj)",
      "static void FilterObstructedObjectsByGrouping(vector origin, float range, float distanceDelta, array<Object> objects, array<Object> obstructingObjects, out array<Object> filteredObjects, bool doDistanceCheck = false, bool checkIfDistanceCanBeIgnored = false, float maxDist = 0)",
      "static void SplitArrayIntoGroupsByDistance(array<Object> objects, array<ref array<Object>> objectGroups, float squaredDistanceDelta)",
      "static bool IsObjectObstructed(Object object, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedEx(Object object, IsObjectObstructedCache cache, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedProxy(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilter(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilterEx(Object object, IsObjectObstructedCache cache, PlayerBase player, int geometryTypeOverride = -1)",
      "static void DealEvinronmentAdjustedDmg(ItemBase item, PlayerBase player, float baseDamage)",
      "static void DealAbsoluteDmg(ItemBase item, float dmg)",
      "static float Normalize(int val, int maxVal)",
      "static float Bobbing(float period, float amplitude, float elapsedTime)",
      "static float FModulus(float x, float y)",
      "static void RemoveSplint( PlayerBase player )",
      "static void TeleportCheck(notnull PlayerBase player, notnull array<ref array<float>> safe_positions)",
      "static bool TeleportPlayerToSafeLocation3D(notnull PlayerBase player, vector safePos)",
      "static void GenerateAINoiseAtPosition(vector position, float lifeTime, NoiseParams noiseParams)",
      "static float GetMinValue(array<float> pArray)",
      "static float GetMaxValue(array<float> pArray)",
      "static string GetItemDisplayName(string type)",
      "static bool IsComponentInSelection(array<Selection> pSelection, string pCompName)",
      "static int GetComponentIndex(array<Selection> pSelection, string pCompName)",
      "static void RemoveAllAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void DeleteAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void GetAttachedChildren(IEntity parent, array<IEntity> outputObjects)",
      "static void SoakItemInsideparentContainingLiquidAboveThreshold(notnull ItemBase item, notnull ItemBase parent, float liquidQuantityThresholdPercentage = 0.05)",
      "static float GetCombinedSnowfallWindValue()",
      "void DestroyItemInCorpsesHandsAndCreateNewOnGndLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void RemoveOldItemFromLocation()",
      "void IsObjectObstructedCache(vector rayCastStart, int totalObjects)",
      "void ClearCache()"
    ]
  },
  "MoveEquipToExistingItemAndDestroyOldRootLambda": {
    "parent": null,
    "methods": [
      "void MoveEquipToExistingItemAndDestroyOldRootLambda(EntityAI old_item, string new_item_type, PlayerBase player, EntityAI new_item)",
      "void RemoveNetworkObjectInfo()",
      "void UndoRemoveNetworkObjectInfo()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void CreateNetworkObjectInfo(EntityAI new_item)",
      "static float Truncate(float value, int decimals = 2)",
      "static string TruncateToS(float value, int decimals = 2)",
      "static string TruncateVecToS(vector value,int decimals = 2, string delimiter = )",
      "static string GetColorString(float r, float g, float b, float a)",
      "static string ValueToBar(float value, string bar = , string mark = )",
      "static string InsertAtPos(string base, string insert, int pos)",
      "static void TransferItemProperties(EntityAI source, notnull EntityAI target, bool transfer_agents = true, bool transfer_variables = true, bool transfer_health = true, bool exclude_quantity = false)",
      "static void TransferEntityVariables(EntityAI source, EntityAI target, bool exclude_quantity = false)",
      "static void TransferItemVariables(ItemBase source, ItemBase target, bool exclude_quantity = false)",
      "static void TransferEntityHealth(EntityAI source, EntityAI target, array<string> healthTypes = null, bool transferZoneDamage = true)",
      "static void UnlimitedAmmoDebugCheck(Weapon_Base weapon)",
      "static void TurnItemIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static void TurnItemInHandsIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemInHandsIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static int GetHealthLevelForAmmo(string class_name, float health)",
      "static float GetTypeMaxGlobalHealth(string class_name, string health_type = )",
      "static bool GetProjectedCursorPos3d(out vector position, Weapon_Base weapon)",
      "static void GetHeadBonePos(notnull PlayerBase player, out vector pos)",
      "static float GetHeadingAngle(notnull DayZPlayerImplement player)",
      "static float GetEnergyMetabolicSpeed(int movement_speed)",
      "static float GetWaterMetabolicSpeed(int movement_speed)",
      "static string ObtainRestrainItemTargetClassname(notnull EntityAI entity)",
      "static void TransformRestrainItem(EntityAI current_item, EntityAI tool, PlayerBase player_source, PlayerBase player_target, bool destroy = false)",
      "static bool IsValueInRange(float value, float from, float to)",
      "static bool IsPlayerOrientedTowardPos(notnull DayZPlayerImplement player, vector target_pos, float cone_angle)",
      "static string SanitizeString(string input)",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, string partName =  )",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, int constraction_index )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check, int constraction_index )",
      "static void IsUnderRoofFromToCalculation(EntityAI entity, out vector from, out vector to, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoof(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoofEx(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST, int geometry = ObjIntersectView)",
      "static void DropAllItemsInInventoryInBounds(ItemBase ib, vector halfExtents)",
      "static void ThrowAllItemsInInventory(notnull EntityAI parent, int flags)",
      "static void ThrowEntityFromInventory(notnull EntityAI entity, vector position, float direction[4], vector force, int flags)",
      "static float GetCurrentItemHeatIsolation( ItemBase pItem )",
      "static void FilterObstructingObjects(array<Object> potentiallyObstructingObjects, out array<Object> obstructingObjects)",
      "static bool CanIgnoreDistanceCheck(Object obj)",
      "static void FilterObstructedObjectsByGrouping(vector origin, float range, float distanceDelta, array<Object> objects, array<Object> obstructingObjects, out array<Object> filteredObjects, bool doDistanceCheck = false, bool checkIfDistanceCanBeIgnored = false, float maxDist = 0)",
      "static void SplitArrayIntoGroupsByDistance(array<Object> objects, array<ref array<Object>> objectGroups, float squaredDistanceDelta)",
      "static bool IsObjectObstructed(Object object, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedEx(Object object, IsObjectObstructedCache cache, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedProxy(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilter(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilterEx(Object object, IsObjectObstructedCache cache, PlayerBase player, int geometryTypeOverride = -1)",
      "static void DealEvinronmentAdjustedDmg(ItemBase item, PlayerBase player, float baseDamage)",
      "static void DealAbsoluteDmg(ItemBase item, float dmg)",
      "static float Normalize(int val, int maxVal)",
      "static float Bobbing(float period, float amplitude, float elapsedTime)",
      "static float FModulus(float x, float y)",
      "static void RemoveSplint( PlayerBase player )",
      "static void TeleportCheck(notnull PlayerBase player, notnull array<ref array<float>> safe_positions)",
      "static bool TeleportPlayerToSafeLocation3D(notnull PlayerBase player, vector safePos)",
      "static void GenerateAINoiseAtPosition(vector position, float lifeTime, NoiseParams noiseParams)",
      "static float GetMinValue(array<float> pArray)",
      "static float GetMaxValue(array<float> pArray)",
      "static string GetItemDisplayName(string type)",
      "static bool IsComponentInSelection(array<Selection> pSelection, string pCompName)",
      "static int GetComponentIndex(array<Selection> pSelection, string pCompName)",
      "static void RemoveAllAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void DeleteAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void GetAttachedChildren(IEntity parent, array<IEntity> outputObjects)",
      "static void SoakItemInsideparentContainingLiquidAboveThreshold(notnull ItemBase item, notnull ItemBase parent, float liquidQuantityThresholdPercentage = 0.05)",
      "static float GetCombinedSnowfallWindValue()",
      "void DestroyItemInCorpsesHandsAndCreateNewOnGndLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void RemoveOldItemFromLocation()",
      "void IsObjectObstructedCache(vector rayCastStart, int totalObjects)",
      "void ClearCache()"
    ]
  },
  "MiscGameplayFunctions": {
    "parent": null,
    "methods": [
      "static float Truncate(float value, int decimals = 2)",
      "static string TruncateToS(float value, int decimals = 2)",
      "static string TruncateVecToS(vector value,int decimals = 2, string delimiter = )",
      "static string GetColorString(float r, float g, float b, float a)",
      "static string ValueToBar(float value, string bar = , string mark = )",
      "static string InsertAtPos(string base, string insert, int pos)",
      "static void TransferItemProperties(EntityAI source, notnull EntityAI target, bool transfer_agents = true, bool transfer_variables = true, bool transfer_health = true, bool exclude_quantity = false)",
      "static void TransferEntityVariables(EntityAI source, EntityAI target, bool exclude_quantity = false)",
      "static void TransferItemVariables(ItemBase source, ItemBase target, bool exclude_quantity = false)",
      "static void TransferEntityHealth(EntityAI source, EntityAI target, array<string> healthTypes = null, bool transferZoneDamage = true)",
      "static void UnlimitedAmmoDebugCheck(Weapon_Base weapon)",
      "static void TurnItemIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static void TurnItemInHandsIntoItem(notnull ItemBase old_item, string new_item_type, notnull PlayerBase player)",
      "static void TurnItemInHandsIntoItemEx(notnull PlayerBase player, ReplaceItemWithNewLambdaBase lambda)",
      "static int GetHealthLevelForAmmo(string class_name, float health)",
      "static float GetTypeMaxGlobalHealth(string class_name, string health_type = )",
      "static bool GetProjectedCursorPos3d(out vector position, Weapon_Base weapon)",
      "static void GetHeadBonePos(notnull PlayerBase player, out vector pos)",
      "static float GetHeadingAngle(notnull DayZPlayerImplement player)",
      "static float GetEnergyMetabolicSpeed(int movement_speed)",
      "static float GetWaterMetabolicSpeed(int movement_speed)",
      "static string ObtainRestrainItemTargetClassname(notnull EntityAI entity)",
      "static void TransformRestrainItem(EntityAI current_item, EntityAI tool, PlayerBase player_source, PlayerBase player_target, bool destroy = false)",
      "static bool IsValueInRange(float value, float from, float to)",
      "static bool IsPlayerOrientedTowardPos(notnull DayZPlayerImplement player, vector target_pos, float cone_angle)",
      "static string SanitizeString(string input)",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, string partName =  )",
      "static bool ComplexBuildCollideCheckClient( PlayerBase player, ActionTarget target, ItemBase item, int constraction_index )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "static bool BuildCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check, int constraction_index )",
      "static void IsUnderRoofFromToCalculation(EntityAI entity, out vector from, out vector to, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoof(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST)",
      "static bool IsUnderRoofEx(EntityAI entity, float height = GameConstants.ROOF_CHECK_RAYCAST_DIST, int geometry = ObjIntersectView)",
      "static void DropAllItemsInInventoryInBounds(ItemBase ib, vector halfExtents)",
      "static void ThrowAllItemsInInventory(notnull EntityAI parent, int flags)",
      "static void ThrowEntityFromInventory(notnull EntityAI entity, vector position, float direction[4], vector force, int flags)",
      "static float GetCurrentItemHeatIsolation( ItemBase pItem )",
      "static void FilterObstructingObjects(array<Object> potentiallyObstructingObjects, out array<Object> obstructingObjects)",
      "static bool CanIgnoreDistanceCheck(Object obj)",
      "static void FilterObstructedObjectsByGrouping(vector origin, float range, float distanceDelta, array<Object> objects, array<Object> obstructingObjects, out array<Object> filteredObjects, bool doDistanceCheck = false, bool checkIfDistanceCanBeIgnored = false, float maxDist = 0)",
      "static void SplitArrayIntoGroupsByDistance(array<Object> objects, array<ref array<Object>> objectGroups, float squaredDistanceDelta)",
      "static bool IsObjectObstructed(Object object, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedEx(Object object, IsObjectObstructedCache cache, bool doDistanceCheck = false, vector distanceCheckPos = , float maxDist = 0)",
      "static bool IsObjectObstructedProxy(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilter(Object object, IsObjectObstructedCache cache, PlayerBase player)",
      "static bool IsObjectObstructedFilterEx(Object object, IsObjectObstructedCache cache, PlayerBase player, int geometryTypeOverride = -1)",
      "static void DealEvinronmentAdjustedDmg(ItemBase item, PlayerBase player, float baseDamage)",
      "static void DealAbsoluteDmg(ItemBase item, float dmg)",
      "static float Normalize(int val, int maxVal)",
      "static float Bobbing(float period, float amplitude, float elapsedTime)",
      "static float FModulus(float x, float y)",
      "static void RemoveSplint( PlayerBase player )",
      "static void TeleportCheck(notnull PlayerBase player, notnull array<ref array<float>> safe_positions)",
      "static bool TeleportPlayerToSafeLocation3D(notnull PlayerBase player, vector safePos)",
      "static void GenerateAINoiseAtPosition(vector position, float lifeTime, NoiseParams noiseParams)",
      "static float GetMinValue(array<float> pArray)",
      "static float GetMaxValue(array<float> pArray)",
      "static string GetItemDisplayName(string type)",
      "static bool IsComponentInSelection(array<Selection> pSelection, string pCompName)",
      "static int GetComponentIndex(array<Selection> pSelection, string pCompName)",
      "static void RemoveAllAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void DeleteAttachedChildrenByTypename(notnull EntityAI parent, array<typename> listOfTypenames)",
      "static void GetAttachedChildren(IEntity parent, array<IEntity> outputObjects)",
      "static void SoakItemInsideparentContainingLiquidAboveThreshold(notnull ItemBase item, notnull ItemBase parent, float liquidQuantityThresholdPercentage = 0.05)",
      "static float GetCombinedSnowfallWindValue()",
      "void DestroyItemInCorpsesHandsAndCreateNewOnGndLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void RemoveOldItemFromLocation()",
      "void IsObjectObstructedCache(vector rayCastStart, int totalObjects)",
      "void ClearCache()"
    ]
  },
  "DestroyItemInCorpsesHandsAndCreateNewOnGndLambda": {
    "parent": null,
    "methods": [
      "void DestroyItemInCorpsesHandsAndCreateNewOnGndLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void RemoveOldItemFromLocation()",
      "void IsObjectObstructedCache(vector rayCastStart, int totalObjects)",
      "void ClearCache()"
    ]
  },
  "IsObjectObstructedCache": {
    "parent": null,
    "methods": [
      "void IsObjectObstructedCache(vector rayCastStart, int totalObjects)",
      "void ClearCache()"
    ]
  },
  "OpenItem": {
    "parent": null,
    "methods": [
      "static void OpenAndSwitch(ItemBase item_tool, ItemBase item_target, PlayerBase player, float specialty_weight = 0)",
      "static void SwitchItems(EntityAI old_item, PlayerBase player, float spill_modificator, float specialty_weight)",
      "void OpenAndSwitchLambda(EntityAI old_item, string new_item_type, PlayerBase player, float spill_modificator, float specialty_weight)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "OpenAndSwitchLambda": {
    "parent": null,
    "methods": [
      "void OpenAndSwitchLambda(EntityAI old_item, string new_item_type, PlayerBase player, float spill_modificator, float specialty_weight)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "PaintItem": {
    "parent": null,
    "methods": [
      "static void Paint(ItemBase item_tool, ItemBase item_target, string base_name, PlayerBase player, float specialty_weight = 0)",
      "static bool CanPaintItem(ItemBase item_tool, ItemBase item_target)",
      "static void SwitchItems(EntityAI old_item, string new_item, PlayerBase player)",
      "void PaintItemLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "PaintItemLambda": {
    "parent": null,
    "methods": [
      "void PaintItemLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "QuantityConversions": {
    "parent": null,
    "methods": [
      "static string GetItemQuantityText( EntityAI item, bool showMax = false )",
      "static float GetItemQuantity(InventoryItem item)",
      "static float GetItemQuantityMax(InventoryItem item)",
      "static void GetItemQuantity( InventoryItem item, out float q_cur, out float q_min, out float q_max )",
      "static int HasItemQuantity( notnull EntityAI item )"
    ]
  },
  "NoiseAIEvaluate": {
    "parent": null,
    "methods": [
      "static float GetNoiseMultiplier(DayZPlayerImplement playerImplement)",
      "static float GetNoiseReduction(Weather weather)",
      "static float GetNoiseMultiplierByPlayerSpeed(DayZPlayerImplement playerImplement)",
      "static float GetNoiseMultiplierByShoes(DayZPlayerImplement playerImplement)",
      "static float GetNoiseMultiplierBySurface(DayZPlayerImplement playerImplement)"
    ]
  },
  "SoundSetMap": {
    "parent": null,
    "methods": [
      "static void Init()",
      "static string GetSoundSetName(int id)",
      "static int GetSoundSetID(string name)"
    ]
  },
  "Surface": {
    "parent": null,
    "methods": [
      "static int GetStepsParticleID(string surface_name)",
      "static int GetWheelParticleID(string surface_name)",
      "static int GetParamInt(string surface_name, string param_name)",
      "static float GetParamFloat(string surface_name, string param_name)",
      "static string GetParamText(string surfaceName, string paramName)",
      "static bool AllowedWaterSurface(float pHeight, string pSurface, array<string> pAllowedSurfaceList)",
      "static bool CheckLiquidSource(float pHeight, string pSurface, int allowedWaterSourceMask)"
    ]
  },
  "ActionMenu": {
    "parent": null,
    "methods": [
      "void ActionMenu()",
      "void Init(Widget actions_panel_widget, TextWidget default_action_widget)",
      "void UpdateWidgets()",
      "void NextAction()",
      "void PrevAction()",
      "void NextActionCategory()",
      "void PrevActionCategory()",
      "void Show()",
      "void Refresh()",
      "void Hide()",
      "void HideWithFadeout()"
    ]
  },
  "ATCCachedObject": {
    "parent": null,
    "methods": [
      "void ATCCachedTarget()",
      "void Store(Object obj, vector pos, int compIdx)",
      "void Invalidate()",
      "int GetCursorCompIdx()",
      "void ActionTargetsCursor()",
      "void SetHealthVisibility(bool state)",
      "void SetQuantityVisibility(bool state)",
      "void SetInteractXboxIcon(string imageset_name, string image_name)",
      "void SetContinuousInteractXboxIcon(string imageset_name, string image_name)",
      "void SetSingleXboxIcon(string imageset_name, string image_name)",
      "void SetContinuousXboxIcon(string imageset_name, string image_name)",
      "void SetXboxIcon(string name, string imageset_name, string image_name)",
      "void SetControllerIcon(string pWidgetName, string pInputName)",
      "void OnWidgetScriptInit(Widget w)",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void UpdateControllerInputIcons()",
      "void UpdatePCIconsVisibility()",
      "void PrepareCursorContent()",
      "void BuildFixedCursor()",
      "void BuildFloatingCursor(bool forceRebuild)",
      "bool OnUpdate(Widget w)",
      "void HideWidget()",
      "void Update()",
      "void ShowXboxHidePCIcons(string widget, bool show_xbox_icon)",
      "void GetOnScreenPosition(out float x, out float y)",
      "bool IsComponentInSelection(array<Selection> selection, string compName)",
      "void GetPlayer()",
      "void GetActionManager()",
      "void GetActions()",
      "void GetTarget()",
      "string GetActionDesc(ActionBase action)",
      "string GetItemDesc(ActionBase action)",
      "int GetItemHealth()",
      "bool GetItemFrozen()",
      "void GetItemQuantity(out int q_type, out float q_cur, out int q_min, out int q_max)",
      "void GetItemCargoCount(out int cargoCount)",
      "void SetItemDesc(string descText, int cargoCount, string itemWidget, string descWidget)",
      "void SetItemHealth(int health, string itemWidget, string healthWidget, bool enabled)",
      "void SetItemQuantity(int type, float current, int min, int max, string itemWidget, string quantityPBWidget, string quantityTextWidget, bool enabled)",
      "void SetActionWidget(ActionBase action, string descText, string actionWidget, string descWidget)",
      "void SetMultipleInteractAction(string multiActionsWidget, string multiActionsWidget_NotSelect)",
      "void SetMultipleContinuousInteractAction(string multiActionsWidget, string multiActionsWidget_NotSelect)",
      "void SetMultipleItemAction(string multiActionsWidget, string multiActionsWidget_NotSelect)",
      "void SetMultipleContinuousItemAction(string multiActionsWidget, string multiActionsWidget_NotSelect)",
      "void SetInteractActionIcon(string actionWidget, string actionIconFrameWidget, string actionIconWidget, string actionIconTextWidget)",
      "void CheckRefresherFlagVisibilityEx(ActionTarget target)",
      "int AttachmentsWithInventoryOrCargoCount(notnull GameInventory inventory)",
      "void CheckRefresherFlagVisibility(Object object)"
    ]
  },
  "ActionTargetsCursor": {
    "parent": null,
    "methods": [
      "void ActionTargetsCursor()",
      "void SetHealthVisibility(bool state)",
      "void SetQuantityVisibility(bool state)",
      "void SetInteractXboxIcon(string imageset_name, string image_name)",
      "void SetContinuousInteractXboxIcon(string imageset_name, string image_name)",
      "void SetSingleXboxIcon(string imageset_name, string image_name)",
      "void SetContinuousXboxIcon(string imageset_name, string image_name)",
      "void SetXboxIcon(string name, string imageset_name, string image_name)",
      "void SetControllerIcon(string pWidgetName, string pInputName)",
      "void OnWidgetScriptInit(Widget w)",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void UpdateControllerInputIcons()",
      "void UpdatePCIconsVisibility()",
      "void PrepareCursorContent()",
      "void BuildFixedCursor()",
      "void BuildFloatingCursor(bool forceRebuild)",
      "bool OnUpdate(Widget w)",
      "void HideWidget()",
      "void Update()",
      "void ShowXboxHidePCIcons(string widget, bool show_xbox_icon)",
      "void GetOnScreenPosition(out float x, out float y)",
      "bool IsComponentInSelection(array<Selection> selection, string compName)",
      "void GetPlayer()",
      "void GetActionManager()",
      "void GetActions()",
      "void GetTarget()",
      "string GetActionDesc(ActionBase action)",
      "string GetItemDesc(ActionBase action)",
      "int GetItemHealth()",
      "bool GetItemFrozen()",
      "void GetItemQuantity(out int q_type, out float q_cur, out int q_min, out int q_max)",
      "void GetItemCargoCount(out int cargoCount)",
      "void SetItemDesc(string descText, int cargoCount, string itemWidget, string descWidget)",
      "void SetItemHealth(int health, string itemWidget, string healthWidget, bool enabled)",
      "void SetItemQuantity(int type, float current, int min, int max, string itemWidget, string quantityPBWidget, string quantityTextWidget, bool enabled)",
      "void SetActionWidget(ActionBase action, string descText, string actionWidget, string descWidget)",
      "void SetMultipleInteractAction(string multiActionsWidget, string multiActionsWidget_NotSelect)",
      "void SetMultipleContinuousInteractAction(string multiActionsWidget, string multiActionsWidget_NotSelect)",
      "void SetMultipleItemAction(string multiActionsWidget, string multiActionsWidget_NotSelect)",
      "void SetMultipleContinuousItemAction(string multiActionsWidget, string multiActionsWidget_NotSelect)",
      "void SetInteractActionIcon(string actionWidget, string actionIconFrameWidget, string actionIconWidget, string actionIconTextWidget)",
      "void CheckRefresherFlagVisibilityEx(ActionTarget target)",
      "int AttachmentsWithInventoryOrCargoCount(notnull GameInventory inventory)",
      "void CheckRefresherFlagVisibility(Object object)"
    ]
  },
  "BookMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void ReadBook(InventoryItem book)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void NextPrevPage(bool next)"
    ]
  },
  "ConnectionDialogue": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void ConnectionDialogue()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void UpdateControlsElementVisibility()",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void OnShow()",
      "void OnHide()",
      "void Update(float timeslice)",
      "void CloseDialog()"
    ]
  },
  "ContinuousActionProgress": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ContinuousActionProgress()",
      "void OnWidgetScriptInit(Widget w)",
      "void Update()",
      "void GetPlayer()",
      "void GetActionManager()",
      "void GetActions()",
      "void SetProgress(float progress)"
    ]
  },
  "JsonControlMappingInfo": {
    "parent": null,
    "methods": [
      "void ControlsXbox()",
      "void Back()",
      "void DrawConnectingLines(int index)",
      "void OnShow()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Update(float timeslice)",
      "void LoadFooterButtonTexts()",
      "void LoadTextStrings()",
      "void SwitchPreset()"
    ]
  },
  "ControlsXbox": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void ControlsXbox()",
      "void Back()",
      "void DrawConnectingLines(int index)",
      "void OnShow()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Update(float timeslice)",
      "void LoadFooterButtonTexts()",
      "void LoadTextStrings()",
      "void SwitchPreset()"
    ]
  },
  "ControlsXboxNew": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void Back()",
      "void UpdateTabContent(int tab_index)",
      "void DrawConnectingLines(int index)",
      "void OnShow()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsFocusable(Widget w)",
      "void Update(float timeslice)",
      "void ComposeData()",
      "void PerformSwitchPreset()",
      "void UpdateToolbarText()",
      "bool FindAllChildrenByID(Widget wid, int user_id, out array<Widget> results)",
      "int FilterByVisible(array<Widget> input, array<Widget> filtered)",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ButtonSetText(Widget w, string text)",
      "void ButtonSetColor(Widget w, int color)",
      "void ButtonSetTextColor(Widget w, int color)",
      "void UpdateControlsElements()",
      "void UpdateControlsElementVisibility()"
    ]
  },
  "CrossHair": {
    "parent": null,
    "methods": [
      "void CrossHair(Widget w)",
      "string GetName()",
      "bool IsCurrent()",
      "bool IsShown()",
      "void Show()",
      "void Hide()",
      "void CrossHairSelector()",
      "void Init()",
      "void OnWidgetScriptInit(Widget w)",
      "void Update()",
      "void GetPlayer()",
      "void GetActionManager()",
      "void SelectCrossHair()",
      "void ShowCrossHair(CrossHair crossHair)",
      "void FloatingCrossHair(Widget widget)"
    ]
  },
  "CrossHairSelector": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void CrossHairSelector()",
      "void Init()",
      "void OnWidgetScriptInit(Widget w)",
      "void Update()",
      "void GetPlayer()",
      "void GetActionManager()",
      "void SelectCrossHair()",
      "void ShowCrossHair(CrossHair crossHair)",
      "void FloatingCrossHair(Widget widget)"
    ]
  },
  "DebugMonitor": {
    "parent": null,
    "methods": [
      "void DebugMonitor()",
      "void Init()",
      "void SetHealth(float value)",
      "void SetBlood(float value)",
      "void SetLastDamage(string value)",
      "void SetFramerate(float current, float min, float max, float avg)",
      "void SetFramerateText(TextWidget widget, float value)",
      "void SetPosition(vector value)",
      "void Show()",
      "void Hide()",
      "string CalculateMapTile(vector pos)",
      "int GetTileFomFraction(float fraction)",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "bool IsVisible()"
    ]
  },
  "EarlyAccessMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void EarlyAccessMenu()",
      "bool OnClick(Widget w, int x, int y, int button)"
    ]
  },
  "GestureMenuItem": {
    "parent": null,
    "methods": [
      "void GestureMenuItem(int id, string name, GestureCategories category)",
      "string GetName()",
      "string GetBoundButtonText()",
      "int GetID()",
      "void SetRadialItemCard( Widget widget )",
      "void SetCanPerformEmote(bool state)",
      "bool GetCanPerformEmote()",
      "void GesturesMenu()",
      "static void OpenMenu()",
      "static void CloseMenu()",
      "static bool CanOpenMenu()",
      "void OnInputPresetChanged()",
      "void OnShow()",
      "void OnHide()",
      "bool OnController( Widget w, int control, int value )",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool UseMouse()",
      "bool UseGamepad()",
      "void Update(float timeslice)",
      "void ProcessEmoteConditionRequest(GestureMenuItem gesture_item)",
      "void RefreshGestures( GestureCategories category_id = -1 )",
      "void GetGestureItems( out array<ref GestureMenuItem> gesture_items, GestureCategories category )",
      "void CreateGestureContent()",
      "void UpdateQuickbarItemCard( GestureMenuItem gesture_item )",
      "void DeleteGestureItems()",
      "void UpdateToolbar()",
      "void UpdateCategoryName( string name )",
      "void OnControlsChanged( RadialMenuControlType type )",
      "void OnMouseSelect( Widget w )",
      "void OnMouseDeselect( Widget w )",
      "void OnMouseExecute( Widget w )",
      "void OnMousePressLeft( Widget w )",
      "void OnMousePressRight( Widget w )",
      "void OnControllerSelect( Widget w )",
      "void OnControllerDeselect( Widget w )",
      "void OnControllerExecute( Widget w )",
      "void OnControllerPressSelect( Widget w )",
      "void OnControllerPressBack( Widget w )",
      "void MarkSelected( Widget w )",
      "void UnmarkSelected( Widget w )",
      "void ExecuteSelectedCategory( Widget w )",
      "void ExecuteSelectedItem()",
      "void BackOneLevel()",
      "bool IsMenuClosing()",
      "void SetMenuClosing(bool state)",
      "void UpdateControlsElements()",
      "void OnMenuRelease()"
    ]
  },
  "GesturesMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void GesturesMenu()",
      "static void OpenMenu()",
      "static void CloseMenu()",
      "static bool CanOpenMenu()",
      "void OnInputPresetChanged()",
      "void OnShow()",
      "void OnHide()",
      "bool OnController( Widget w, int control, int value )",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool UseMouse()",
      "bool UseGamepad()",
      "void Update(float timeslice)",
      "void ProcessEmoteConditionRequest(GestureMenuItem gesture_item)",
      "void RefreshGestures( GestureCategories category_id = -1 )",
      "void GetGestureItems( out array<ref GestureMenuItem> gesture_items, GestureCategories category )",
      "void CreateGestureContent()",
      "void UpdateQuickbarItemCard( GestureMenuItem gesture_item )",
      "void DeleteGestureItems()",
      "void UpdateToolbar()",
      "void UpdateCategoryName( string name )",
      "void OnControlsChanged( RadialMenuControlType type )",
      "void OnMouseSelect( Widget w )",
      "void OnMouseDeselect( Widget w )",
      "void OnMouseExecute( Widget w )",
      "void OnMousePressLeft( Widget w )",
      "void OnMousePressRight( Widget w )",
      "void OnControllerSelect( Widget w )",
      "void OnControllerDeselect( Widget w )",
      "void OnControllerExecute( Widget w )",
      "void OnControllerPressSelect( Widget w )",
      "void OnControllerPressBack( Widget w )",
      "void MarkSelected( Widget w )",
      "void UnmarkSelected( Widget w )",
      "void ExecuteSelectedCategory( Widget w )",
      "void ExecuteSelectedItem()",
      "void BackOneLevel()",
      "bool IsMenuClosing()",
      "void SetMenuClosing(bool state)",
      "void UpdateControlsElements()",
      "void OnMenuRelease()"
    ]
  },
  "HelpScreen": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void HelpScreen()",
      "bool OnClick(Widget w, int x, int y, int button)"
    ]
  },
  "HudDebugEventHandler": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void HudDebugEventHandler( HudDebug hud_debug )",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnSelect(Widget w, int x, int y)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void HudDebug()",
      "void Init( Widget hud_panel_widget )",
      "void Update( float timeslice )",
      "void SetPanelVisible(int panel_type, bool visible)",
      "void PanelShow(int panel_type)",
      "void PanelHide(int panel_type)",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "void RefreshByLocalProfile()",
      "bool IsInitialized()"
    ]
  },
  "HudDebug": {
    "parent": "Hud",
    "methods": [
      "void HudDebug()",
      "void Init( Widget hud_panel_widget )",
      "void Update( float timeslice )",
      "void SetPanelVisible(int panel_type, bool visible)",
      "void PanelShow(int panel_type)",
      "void PanelHide(int panel_type)",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "void RefreshByLocalProfile()",
      "bool IsInitialized()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnChange(Widget w, int x, int y, bool finished)"
    ]
  },
  "IngameHud": {
    "parent": "Hud",
    "methods": [
      "void IngameHud()",
      "void Init( Widget hud_panel_widget )",
      "void InitBadgesAndNotifiers()",
      "void OnConnectionIconsSettingsChanged(bool enabled)",
      "void OnResizeScreen()",
      "void OnPlayerLoaded()",
      "void OnUnconsciousStart()",
      "void OnUnconsciousStop()",
      "void Show( bool show )",
      "void ShowWalkieTalkie( bool show )",
      "void ShowWalkieTalkie( int fadeOutSeconds )",
      "void SetWalkieTalkieText( string text )",
      "void SetCursorIcon( string icon )",
      "void ShowCursor()",
      "void HideCursor()",
      "void SetCursorIconScale( string type, float percentage )",
      "void SetCursorIconOffset( string type, float x, float y )",
      "void SetCursorIconSize( string type, float x, float y )",
      "void SetPermanentCrossHair( bool show )",
      "void DisplayNotifier( int key, int tendency, int status )",
      "void DisplayTendencyNormal( int key, int tendency, int status )",
      "void DisplayTendencyTemp( int key, int tendency, int status )",
      "void DisplayBadge( int key, int value )",
      "void SetTemperature( string temp )",
      "void HideTemperature()",
      "void SetStaminaBarVisibility( bool show )",
      "void SetStomachState( int state )",
      "void SetStamina( int value , int range )",
      "bool KeyPress(int key)",
      "void ZeroingKeyPress()",
      "void DisplayStance( int stance )",
      "void DisplayPresence()",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void RefreshVehicleHud(float timeslice)",
      "void InitQuickbar()",
      "void UpdateQuickbarGlobalVisibility()",
      "void ShowQuickbarUI( bool show )",
      "void ShowQuickbarPlayer( bool show )",
      "void ShowHudPlayer( bool show )",
      "void ShowHudUI( bool show )",
      "void ShowHudInventory( bool show )",
      "void ShowQuickBar( bool show )",
      "void ShowHud( bool show )",
      "void ShowVehicleHud(bool state)",
      "void SetVehicleHudDisabled(bool state)",
      "void SetConnectivityStatIcon(EConnectivityStatType type, EConnectivityStatLevel level)",
      "void RefreshQuickbar( bool itemChanged = false )",
      "void UpdateBloodName()",
      "void RefreshPlayerTags()",
      "void ShowPlayerTag( float timeslice )",
      "void Update( float timeslice )",
      "void SpawnHitDirEffect(DayZPlayer player, float hit_direction,float intensity_max)",
      "void UpdateHitDirEffects( float timeslice )",
      "void CleanupHitDirEffects()",
      "void InitHeatBufferUI(Man player)",
      "void Debug()",
      "void HideQuickbarTimer()",
      "void RefreshVehicleHudVisibility()",
      "void RefreshQuickbarVisibility()",
      "void RefreshHudVisibility()",
      "void UpdateSpecialtyMeter(float x, float y)",
      "void SetLeftStatsVisibility(bool visible)",
      "bool IsQuickbarVisible()",
      "bool IsHideQuickbarPlayer()",
      "bool GetQuickBarState()",
      "bool IsHudVisible()",
      "bool IsHideHudPlayer()",
      "bool GetHudState()"
    ]
  },
  "IngameHudHeatBuffer": {
    "parent": null,
    "methods": [
      "void IngameHudHeatBuffer(Widget root, notnull PlayerBase player)",
      "void OnPlayerNegativeCondition(PlayerBase player)",
      "void OnPlayerConditionChanged(PlayerBase player)",
      "bool CanUpdate()",
      "void Update(float timeslice)",
      "void SetBaseAlpha(Widget hbw, float valuePercent, float stageThreshold)",
      "void UpdateEffect(Widget hbw, float duration, float timeslice)"
    ]
  },
  "IngameHudVisibility": {
    "parent": null,
    "methods": [
      "void Init(Widget panel)",
      "void InitElementMap(Widget panel)",
      "void LinkElementsToFlags()",
      "void SetContextFlag(EHudContextFlags flag, bool state)",
      "bool IsElementVisible(EHudElement element)",
      "bool IsContextFlagActive(EHudContextFlags flag)",
      "void UpdateElement(EHudElement element)",
      "void UpdateVisibility(EHudElement element, bool target)"
    ]
  },
  "InGameMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void SetGameVersion()",
      "bool SetServerInfo()",
      "void HudShow(bool show)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void OnClick_Continue()",
      "void OnClick_Restart()",
      "void OnClick_Respawn()",
      "void OnClick_Options()",
      "void OnClick_Exit()",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "void Update(float timeslice)",
      "void UpdateGUI()",
      "void MenuRequestRespawn(UIScriptedMenu menu, bool random)",
      "void GameRespawn(bool random)",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ColorDisable(Widget w)",
      "void ButtonSetText(Widget w, string text)",
      "void ButtonSetColor(Widget w, int color)",
      "void ButtonSetTextColor(Widget w, int color)",
      "void SetServerInfoVisibility(bool show)",
      "void OpenFeedback()",
      "void ToggleFavoriteServer()"
    ]
  },
  "InGameMenuXbox": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void InGameMenuXbox()",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void ToggleFeedbackDialog()",
      "bool FeedbackDialogVisible()",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "void GameRetry(bool random)",
      "void MenuRequestRespawn(UIScriptedMenu menu, bool random)",
      "bool IsLocalPlayer(string uid)",
      "void Update(float timeslice)",
      "bool ShouldRestartBeVisible(Man player)",
      "void UpdateGUI()",
      "bool IsOnlineOpen()",
      "void CloseOnline()",
      "void SelectServer()",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "void SyncEvent_OnRecievedPlayerList(SyncPlayerList player_list)",
      "void OnPermissionsUpdate(BiosPrivacyUidResultArray result_list)",
      "void OnShow()",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsFocusable(Widget w)",
      "void Refresh()",
      "void ColorDisable(Widget w)",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ButtonSetText(Widget w, string text)",
      "void ButtonSetColor(Widget w, int color)",
      "void ButtonSetTextColor(Widget w, int color)",
      "void SetMuteButtonText(bool isMuted)",
      "void LoadTextStrings()",
      "void LoadFooterButtonTexts()",
      "void UpdateMenuFocus()",
      "void UpdateControlsElements()",
      "void OnHide()"
    ]
  },
  "InputDeviceDisconnectWarningMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void InputDeviceDisconnectWarningMenu()",
      "void BuildMessages()",
      "void UpdateDisconnectTexts()",
      "void SetDisconnectTexts()",
      "void UpdateDisconnectedDevices(int device = -1)",
      "void UpdateWarningMenu(int device)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnKeyUp(Widget w, int x, int y, int key)"
    ]
  },
  "InspectMenuNew": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void InspectMenuNew()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SetItem(EntityAI item)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "void UpdateRotation(int mouse_x, int mouse_y, bool is_dragging)",
      "bool OnMouseWheel(Widget  w, int  x, int  y, int wheel)",
      "void UpdateScale()",
      "static void UpdateItemInfo(Widget root_widget, EntityAI item)",
      "static void UpdateSlotInfo(Widget root_widget, string name, string desc = )",
      "static void UpdateItemInfoDamage(Widget root_widget, EntityAI item)",
      "static void UpdateItemInfoLiquidType(Widget root_widget, EntityAI item)",
      "static void UpdateItemInfoTemperature(Widget root_widget, EntityAI item)",
      "static void UpdateItemInfoWetness(Widget root_widget, EntityAI item)",
      "static void UpdateItemInfoQuantity(Widget root_widget, EntityAI item)",
      "static void UpdateItemInfoWeight(Widget root_widget, EntityAI item)",
      "static void UpdateItemInfoFoodStage(Widget root_widget, EntityAI item)",
      "static void UpdateItemInfoCleanness(Widget root_widget, EntityAI item)",
      "static void WidgetTrySetText(Widget root_widget, string widget_name, string text, int color = 0)",
      "void OnPlayerDeath()"
    ]
  },
  "InventoryMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void InventoryMenu()",
      "void CheckWidth()",
      "static int GetWidth()",
      "static int GetHeight()",
      "static float GetHeightMultiplied( float value )",
      "void RefreshQuickbar()",
      "void InitContainers(EntityAI target)",
      "void Update( float timeslice )",
      "void Refresh()",
      "void OnShow()",
      "bool OnController( Widget w, int control, int value )",
      "bool IsOpened()",
      "void OnHide()",
      "int GetLastDisplayLanguage()",
      "bool LanguageChanged()",
      "void OnPlayerDeath()"
    ]
  },
  "InviteMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void InviteMenu()",
      "void Update(float timeslice)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SetTime(int time)",
      "void UpdateTime()",
      "void Cancel()",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void UpdateControlsElements()",
      "void UpdateControlsElementVisibility()"
    ]
  },
  "ItemActionsWidget": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ItemActionsWidget()",
      "void SetInteractXboxIcon(string imageset_name, string image_name)",
      "void SetContinuousInteractXboxIcon(string imageset_name, string image_name)",
      "void SetSingleXboxIcon(string imageset_name, string image_name)",
      "void SetContinuousXboxIcon(string imageset_name, string image_name)",
      "void SetXboxIcon(string name, string imageset_name, string image_name)",
      "void SetControllerIcon(string pWidgetName, string pInputName)",
      "void ShowXboxHidePCIcons(string widget, bool show_xbox_icon)",
      "void OnWidgetScriptInit(Widget w)",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void UpdateControllerInputIcons()",
      "void UpdatePCIconsVisibility()",
      "void BuildCursor()",
      "void Update()",
      "void GetPlayer()",
      "void GetActionManager()",
      "void GetActions()",
      "void GetEntityInHands()",
      "string GetActionDesc(ActionBase action)",
      "string GetItemDesc(EntityAI entity)",
      "bool GetItemFrozen()",
      "int GetItemHealth()",
      "void GetItemQuantity(out int q_type, out float q_cur, out int q_min, out int q_max)",
      "string GetRadioFrequency()",
      "void SetItemDesc(EntityAI entity, string descText, string itemWidget, string descWidget)",
      "void SetItemHealth(int health, string itemWidget, string healthWidget, bool enabled)",
      "void SetItemQuantity(int type, float current, int min, int max, string itemWidget, string quantityPBWidget, string quantityTextWidget, bool enabled)",
      "void SetWeaponQuantity(int chamber, int mag, string itemWidget, string quantityPBWidget, string quantityTextWidget, bool enabled)",
      "void SetWeaponModeAndZeroing(string itemWidget, string upWidget, string downWidget, bool enabled)",
      "string WeaponModeTextTemp()",
      "void SetRadioFrequency(string freq, string itemWidget, string upWidget, string downWidget, bool enabled)",
      "void SetActionWidget(ActionBase action, string descText, string actionWidget, string descWidget)",
      "void SetMultipleInteractAction(string multiActionsWidget)",
      "void SetMultipleContinuousInteractAction(string multiActionsWidget)",
      "void SetMultipleItemAction(string multiActionsWidget)",
      "void SetMultipleContinuousItemAction(string multiActionsWidget)",
      "void SetInteractActionIcon(string actionWidget, string actionIconFrameWidget, string actionIconWidget, string actionIconTextWidget)",
      "void CheckRefresherFlagVisibility()",
      "void CheckForActionWidgetOverrides()"
    ]
  },
  "WarningMenuBase": {
    "parent": null,
    "methods": [
      "void WarningMenuBase()",
      "string GetText()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Update(float timeslice)",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void UpdateControlsElements()",
      "void UpdateControlsElementVisibility()"
    ]
  },
  "ItemDropWarningMenu": {
    "parent": null,
    "methods": [
      "string GetText()"
    ]
  },
  "PlayerRepositionWarningMenu": {
    "parent": null,
    "methods": [
      "string GetText()"
    ]
  },
  "LoadingMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void LoadingMenu()"
    ]
  },
  "LogoutMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void LogoutMenu()",
      "void Show()",
      "void Hide()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Update(float timeslice)",
      "void SetLogoutTime()",
      "void SetTime(int time)",
      "void UpdateTime()",
      "void UpdateInfo()",
      "void Exit()",
      "void Cancel()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void UpdateControlsElementVisibility()"
    ]
  },
  "MapHandler": {
    "parent": null,
    "methods": [
      "void MapHandler(Widget w)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)"
    ]
  },
  "MapMarkerTypes": {
    "parent": null,
    "methods": [
      "static void Init()",
      "static void RegisterMarkerType(int id, string path)",
      "static string GetMarkerTypeFromID(int id)"
    ]
  },
  "MapMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void InitMapItem(EntityAI item)",
      "void OnShow()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void Update(float timeslice)",
      "void AddMarker(vector pos, int color, int icon = 0)",
      "void RemoveMarker()",
      "void LoadMapMarkers()",
      "void CloseMapMenu()",
      "void SetCompassUIVisibility(bool pState)",
      "void SetGPSMarkerVisibility(bool pState)",
      "void SetGPSDirectionVisibility(bool pState)",
      "void SetUpperLegendVisibility(bool pState)",
      "void RenderScaleRuler()",
      "void ProcessDistanceAndUnits(float num, out float dist, out string units)",
      "void UpdateControlsElements()",
      "void UpdateControlsElementVisibility()",
      "void ShiftMapToolsContainer()"
    ]
  },
  "NoteMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void NoteMenu()",
      "void InitNoteRead(string text = )",
      "void InitNoteWrite(EntityAI paper, EntityAI pen, string text = )",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Update(float timeslice)"
    ]
  },
  "ObjectFollower": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ObjectFollower()",
      "void OnWidgetScriptInit(Widget w)",
      "void SetTarget(Object obj)",
      "bool OnUpdate(Widget w)",
      "void Update()",
      "void GetOnScreenPosition(out float x, out float y)"
    ]
  },
  "PresetsMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void PresetsMenu()",
      "bool OnClick(Widget w, int x, int y, int button)"
    ]
  },
  "ProfileOptionsUI": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void Attach(int profileOption, array<Widget> widget_array)",
      "void Deattach()",
      "void Init()",
      "void SetValue()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SetButtonStates(int index)",
      "int GetProfileOption()"
    ]
  },
  "ProjectedCrosshair": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ProjectedCrosshair()",
      "void OnWidgetScriptInit(Widget w)",
      "void Update()",
      "void GetPlayer()",
      "void GetCrosshairPosition()"
    ]
  },
  "RadialQuickbarItem": {
    "parent": null,
    "methods": [
      "void RadialQuickbarItem( int id, EntityAI item, string item_name, int category = RadialQuickbarCategory.DEFAULT, int category_switch = -1 )",
      "void SetItem( EntityAI item )",
      "bool IsLightSourceExtra()",
      "bool IsNVGExtra()",
      "int GetId()",
      "int GetItemCategory()",
      "int GetCategorySwitchID()",
      "void SetRadialItemCard( Widget widget )",
      "string GetItemName()",
      "void RadialQuickbarMenu()",
      "static void SetItemToAssign( EntityAI item )",
      "void OnInputPresetChanged()",
      "static void OpenMenu( UIScriptedMenu parent = NULL )",
      "static void CloseMenu()",
      "void OnShow()",
      "void OnHide()",
      "bool OnController( Widget w, int control, int value )",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool UseMouse()",
      "bool UseGamepad()",
      "void RefreshQuickbar( bool reset_selection = true )",
      "void GetItems( out array<ref RadialQuickbarItem> items )",
      "void CheckForLightsAndNVG( out array<ref RadialQuickbarItem> items, int last_idx )",
      "void CreateContent( int selected_item_id = -1 )",
      "void UpdateQuickbarItemCard( RadialQuickbarItem quickbar_item )",
      "void DeleteItems()",
      "void ChangeCurrentCategory(int category)",
      "void OnControlsChanged( RadialMenuControlType type )",
      "void OnMouseSelect( Widget w )",
      "void OnMouseDeselect( Widget w )",
      "void OnMouseExecute( Widget w )",
      "void OnMousePressLeft( Widget w )",
      "void OnMousePressRight( Widget w )",
      "void OnControllerSelect( Widget w )",
      "void OnControllerDeselect( Widget w )",
      "void OnControllerPressSelect( Widget w )",
      "void OnControllerPressBack( Widget w )",
      "void MarkSelected( Widget w )",
      "void UnmarkSelected( Widget w )",
      "void PrimaryAction( Widget w )",
      "void SecondaryAction( Widget w )",
      "void BackOneLevel()",
      "void HandleLights(RadialQuickbarItem quickbar_item)",
      "void HandleNVG(RadialQuickbarItem quickbar_item)",
      "bool IsMenuClosing()",
      "void SetMenuClosing(bool state)",
      "void UpdateControlsElements()",
      "void OnPlayerDeath()"
    ]
  },
  "RadialQuickbarMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void RadialQuickbarMenu()",
      "static void SetItemToAssign( EntityAI item )",
      "void OnInputPresetChanged()",
      "static void OpenMenu( UIScriptedMenu parent = NULL )",
      "static void CloseMenu()",
      "void OnShow()",
      "void OnHide()",
      "bool OnController( Widget w, int control, int value )",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool UseMouse()",
      "bool UseGamepad()",
      "void RefreshQuickbar( bool reset_selection = true )",
      "void GetItems( out array<ref RadialQuickbarItem> items )",
      "void CheckForLightsAndNVG( out array<ref RadialQuickbarItem> items, int last_idx )",
      "void CreateContent( int selected_item_id = -1 )",
      "void UpdateQuickbarItemCard( RadialQuickbarItem quickbar_item )",
      "void DeleteItems()",
      "void ChangeCurrentCategory(int category)",
      "void OnControlsChanged( RadialMenuControlType type )",
      "void OnMouseSelect( Widget w )",
      "void OnMouseDeselect( Widget w )",
      "void OnMouseExecute( Widget w )",
      "void OnMousePressLeft( Widget w )",
      "void OnMousePressRight( Widget w )",
      "void OnControllerSelect( Widget w )",
      "void OnControllerDeselect( Widget w )",
      "void OnControllerPressSelect( Widget w )",
      "void OnControllerPressBack( Widget w )",
      "void MarkSelected( Widget w )",
      "void UnmarkSelected( Widget w )",
      "void PrimaryAction( Widget w )",
      "void SecondaryAction( Widget w )",
      "void BackOneLevel()",
      "void HandleLights(RadialQuickbarItem quickbar_item)",
      "void HandleNVG(RadialQuickbarItem quickbar_item)",
      "bool IsMenuClosing()",
      "void SetMenuClosing(bool state)",
      "void UpdateControlsElements()",
      "void OnPlayerDeath()"
    ]
  },
  "RespawnDialogue": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void RespawnDialogue()",
      "void Update(float timeslice)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void OnShow()",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsFocusable(Widget w)",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ButtonSetColor(Widget w, int color)",
      "void ButtonSetTextColor(Widget w, int color)",
      "void SetTooltipTexts(Widget w, string header = , string desc = )",
      "bool RequestRespawn(bool random)"
    ]
  },
  "SceneEditorMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void RenderPresets()",
      "bool IsPresetFixed( string preset_name )",
      "int GetPresetIndexByName( string preset_name )",
      "void NewPreset( string preset_name )",
      "void DeletePreset()",
      "void SetDefaultPreset( int preset_index )",
      "void RefreshLists()",
      "void RenamePreset( string new_preset_name )",
      "void RenderPresetItems()",
      "string GetCurrentPresetName()",
      "string GetCurrentItemName()",
      "string GetCurrentObjectName()",
      "int GetCurrentPresetIndex()",
      "int GetCurrentItemIndex()",
      "bool IsCurrentPresetFixed()",
      "void AddItemToPreset()",
      "void RemoveItemFromPreset()",
      "void SetPreset( bool clear_inventory, string preset_name)",
      "void ItemMoveUp()",
      "void ItemMoveDown()",
      "void SaveProfileSpawnDistance()",
      "bool UseMouse()",
      "bool UseKeyboard()",
      "void SceneEditorMenu()",
      "bool OnDoubleClick( Widget w, int x, int y, int button )",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void OnShow()",
      "void OnHide()",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "void PopupCloseAll()",
      "void ToggleVisibility()",
      "void Refresh()",
      "void SceneEditorCommand( Param params )",
      "void RefreshByLocalProfile()",
      "void UpdateListObjects()",
      "void UpdateListClasses()",
      "void PopupClose(int popup_id)",
      "void PopupHideAll()",
      "bool ComponentsOnClick(Widget w, int x, int y, int button)",
      "bool ComponentsOnChange(Widget w, int x, int y, bool finished)"
    ]
  },
  "ScriptConsole": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void ScriptConsole()",
      "static void SaveData()",
      "void SetHintText(string text, Widget w)",
      "void RegisterTab(ScriptConsoleTabBase handler)",
      "void HideHint()",
      "int GetWidgetCombinedHash(Widget w)",
      "string GetMessage()",
      "void HoverSuccess()",
      "void HoverInterrupt()",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "void Update(float timeslice)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int  column,\tint  oldRow, int  oldColumn)",
      "void SelectTabByID(int id)",
      "void SelectTabByButton(Widget button)",
      "void SelectTab(ScriptConsoleTabBase selectedHandler)",
      "void ShowMenuBackground(bool state)",
      "void DisplayHint(string message)",
      "void OnRPCEx(int rpc_type, ParamsReadContext ctx)",
      "void OnShow()",
      "void OnWidgetScriptInit(Widget w)",
      "bool Tick()"
    ]
  },
  "ScriptConsoleToolTipEventHandler": {
    "parent": null,
    "methods": [
      "void OnWidgetScriptInit(Widget w)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool Tick()",
      "void DisplayHint(string message)",
      "void HideHint()",
      "string GetMessage()",
      "void HoverSuccess()",
      "void HoverInterrupt()"
    ]
  },
  "JsonHintsData": {
    "parent": null,
    "methods": []
  },
  "ScriptConsoleCameraValues": {
    "parent": null,
    "methods": [
      "static void SetDefaultValues()",
      "void ScriptConsoleCameraTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "void ReloadDOFPresetsList()",
      "void UpdateFOV(float value)",
      "void UpdateFocusDistance(float value)",
      "void UpdateFocusLength(float value)",
      "void UpdateFocusLengthNear(float value)",
      "void UpdateBlur(float value)",
      "void UpdateFocusDepthOffset(float value)",
      "void SetDOF()",
      "void ResetDOF()",
      "void UpdateDOFSliders()",
      "void SaveDOFPreset()",
      "void DeleteDOFPreset()",
      "void OnListItemSelected(int row, int column)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void LoadDOFPreset()",
      "void ToggleValueEditMode(bool editBoxMode)",
      "void UpdateValuesFromEditMode()",
      "bool IsValidEditboxValue(string text, float min, float max)",
      "void Update(float timeslice)"
    ]
  },
  "ScriptConsoleCameraTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleCameraTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "void ReloadDOFPresetsList()",
      "void UpdateFOV(float value)",
      "void UpdateFocusDistance(float value)",
      "void UpdateFocusLength(float value)",
      "void UpdateFocusLengthNear(float value)",
      "void UpdateBlur(float value)",
      "void UpdateFocusDepthOffset(float value)",
      "void SetDOF()",
      "void ResetDOF()",
      "void UpdateDOFSliders()",
      "void SaveDOFPreset()",
      "void DeleteDOFPreset()",
      "void OnListItemSelected(int row, int column)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void LoadDOFPreset()",
      "void ToggleValueEditMode(bool editBoxMode)",
      "void UpdateValuesFromEditMode()",
      "bool IsValidEditboxValue(string text, float min, float max)",
      "void Update(float timeslice)"
    ]
  },
  "ScriptConsoleConfigTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleConfigTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int  column,\tint  oldRow, int  oldColumn)",
      "void RenderClassPath()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Update(float timeslice)",
      "void Init()",
      "void DumpParam(string param, string relativePath)",
      "void ChangeConfigFilter()",
      "void ClearHierarchy()",
      "void FindInHierarchy(string class_name)",
      "void ExpandHierarchy(int row)",
      "void CollapseHierarchy(int row)",
      "void RenderVariables(int row)"
    ]
  },
  "ScriptConsoleEnfScriptTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleEnfScriptTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "void OnSelected()",
      "static void PrintS(string message)",
      "static void PrintS(bool message)",
      "static void PrintS(int message)",
      "static void PrintS(float message)",
      "static void PrintS(vector message)",
      "static void PrintS(Object message)",
      "void Add(string message, bool isReload = false)",
      "void Clear(bool clearFile = false)",
      "void ReloadScriptOutput()",
      "void HistoryBack()",
      "void HistoryForward()",
      "void RunEnscript()",
      "void ColorRunButton(bool success)",
      "void ResetRunButtonColor()",
      "void RunEnscriptServer()",
      "void EnscriptHistoryBack()",
      "void EnscriptHistoryForward()",
      "void OnRPCEx(int rpc_type, ParamsReadContext ctx)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void Show(bool show, ScriptConsoleTabBase selectedHandler)"
    ]
  },
  "ScriptConsoleEnfScriptServerTab": {
    "parent": null,
    "methods": [
      "void OnSelected()",
      "void EnscriptHistoryBack()",
      "void EnscriptHistoryForward()",
      "bool OnClick(Widget w, int x, int y, int button)"
    ]
  },
  "ScriptConsoleGeneralTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleGeneralTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "void Init()",
      "void RefreshDateWidgets(int year, int month, int day, int hour, int minute)",
      "bool IsLocationNameAvailable(string name)",
      "void LateInit()",
      "void Teleport(PlayerBase player, vector position)",
      "void ProcessTeleportText(PlayerBase player)",
      "void RefreshLocations()",
      "string GetCurrentLocationName()",
      "void GetCurrentPositionData(out LocationParams data)",
      "bool IsCurrentPositionCustom()",
      "int GetCurrentPositionIndex()",
      "bool IsCurrentPositionValid()",
      "void UpdateHudDebugSetting()",
      "void RefreshPlayerPosEditBoxes()",
      "void UpdateTime(bool slider_used)",
      "void UpdateMousePos()",
      "void SetMapPos(vector pos)",
      "void SetMapCameraPos(vector pos)",
      "void SetDir(vector dir)",
      "void SetCameraDir(vector dir)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int  column,\tint  oldRow, int  oldColumn)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void OnRPCEx(int rpc_type, ParamsReadContext ctx)",
      "void Update(float timeslice)"
    ]
  },
  "ScriptConsoleItemsTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleItemsTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "void Init()",
      "static void DrawItems(string type, float distance = 0)",
      "static void DrawItemsClear()",
      "static string GetLastSelectedObject()",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "void SelectObject(bool hide_presets = true)",
      "void SelectPreset()",
      "int GetCurrentPresetIndex()",
      "int GetCurrentItemIndex()",
      "bool IsCurrentPresetFixed()",
      "bool IsPresetFixed(string preset_name)",
      "int GetPresetIndexByName(string preset_name)",
      "void ShowItemButtons()",
      "void HideItemButtons()",
      "void ShowItemTransferButtons()",
      "void ItemMoveUp()",
      "void ItemMoveDown()",
      "void SaveProfileSpawnDistance()",
      "void RenamePreset(string new_preset_name)",
      "void SpawnPreset(EntityAI target, bool clear_inventory, string preset_name, InventoryLocationType location = InventoryLocationType.ATTACHMENT, float distance = 0)",
      "void SetDefaultPreset(int preset_index)",
      "void SetObject(string object)",
      "void SetPreviewObject(string object)",
      "void AddItemToPreset()",
      "void ShowPresetButtons()",
      "void RemoveItemFromPreset()",
      "string GetCurrentPresetName()",
      "string GetCurrentItemName()",
      "string GetCurrentObjectName()",
      "void RefreshLists()",
      "void RenderPresets()",
      "void RenderPresetItems()",
      "void NewPreset(string preset_name)",
      "void DeletePreset()",
      "int GetFilterColor(string color)",
      "void PrepareFilters(string filter, out TStringArray filters, out TIntArray colors)",
      "void ChangeFilter(TStringArray classes, TextListboxWidget widget, MultilineEditBoxWidget filterWidget, int categoryMask = -1, bool ignoreScope = false)",
      "void SetFilterOrder(bool reversed)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int  column,\tint  oldRow, int  oldColumn)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "void Update(float timeslice)",
      "void SetTextSpawnButton(ButtonWidget w, bool special, string suffix = )",
      "void UpdateButtonNames()",
      "string PreprocessFilterText(MultilineEditBoxWidget w)",
      "void ChangeFilterItems(bool forced = false)",
      "bool ListItemRelatedActions()"
    ]
  },
  "ScriptConsoleOutputTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleOutputTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void Clear(bool clearFile = false)",
      "void Add(string message, bool isReload = false)",
      "void ReloadOutput()"
    ]
  },
  "ScriptConsolePresetsList": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ScriptConsolePresetsList(Widget parent, ScriptConsoleTabBase tab)",
      "void AddListItem(string label, int column, int row, Class data = null)",
      "void ClearList()",
      "bool OnItemSelected(Widget w, int x, int y, int row, int column, int oldRow, int oldColumn)",
      "string GetLayoutFile()"
    ]
  },
  "ScriptConsoleSelector": {
    "parent": null,
    "methods": [
      "void ScriptConsoleSelector(Widget parent, float value, ScriptConsoleTabBase parent_tab, bool disabled, float min, float max)",
      "string GetLayoutFile()",
      "void SetColor(int color)"
    ]
  },
  "ScriptConsoleSoundsTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleSoundsTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void UpdateMousePos()",
      "void PrepareFilters(string filter, out TStringArray filters)",
      "void ChangeFilter(TStringArray classes, TextListboxWidget widget, EditBoxWidget filterWidget, int categoryMask = -1, bool ignoreScope = false)",
      "void Update(float timeslice)",
      "void HandleKeys()",
      "void SetMapPos(vector pos)",
      "void PlaySoundEvent()",
      "void UpdateAttachmentSelection()",
      "void UpdateSelectedColor(ImageWidget buttonBackground)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "void ChangeFilterSound()"
    ]
  },
  "ScriptConsoleTabBase": {
    "parent": null,
    "methods": [
      "void ScriptConsoleTabBase(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "void Init(int id)",
      "int GetID()",
      "bool IsSelected()",
      "void Select(bool select, ScriptConsoleTabBase selectedHandler)",
      "void OnSelected()",
      "void Show(bool show, ScriptConsoleTabBase selectedHandler)",
      "void Update(float timeslice)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnItemSelected(Widget w, int x, int y, int row, int  column,\tint  oldRow, int  oldColumn)",
      "bool OnKeyDown(Widget w, int x, int y, int key)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "void OnRPCEx(int rpc_type, ParamsReadContext ctx)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void AddItemToClipboard(TextListboxWidget text_listbox_widget)"
    ]
  },
  "ScriptConsoleVicinityTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleVicinityTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "void OnSelected()",
      "void RenderList()",
      "void UpdateSelected()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void OnSelectAction(EntityAI ent, int actionId)"
    ]
  },
  "ScriptConsoleWeatherValues": {
    "parent": null,
    "methods": [
      "static void SetDefaultValues()",
      "void ScriptConsoleWeatherTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "void ReloadWeatherPresetsList()",
      "void ResetValues()",
      "void InitValues(bool forceCurrent = false)",
      "void PasteValues(string clipboard)",
      "string CopyValues()",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void UpdateSliderValues()",
      "void UpdateEditboxValues()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SaveWeatherPreset()",
      "void DeleteWeatherPreset()",
      "void LoadWeatherPreset()",
      "void OnListItemSelected(int row, int column)",
      "void ToogleUIVisibility()",
      "void SendRPC(DebugWeatherRPCData data)",
      "void InvokeSendRPC()",
      "void UpdateWeatherValues()",
      "void Update(float timeslice)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void ButtonHighlight(Widget w)",
      "void ButtonNormal(Widget w)",
      "void ScriptConsoleWeatherWindTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)"
    ]
  },
  "ScriptConsoleWeatherTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleWeatherTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)",
      "void ReloadWeatherPresetsList()",
      "void ResetValues()",
      "void InitValues(bool forceCurrent = false)",
      "void PasteValues(string clipboard)",
      "string CopyValues()",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void UpdateSliderValues()",
      "void UpdateEditboxValues()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SaveWeatherPreset()",
      "void DeleteWeatherPreset()",
      "void LoadWeatherPreset()",
      "void OnListItemSelected(int row, int column)",
      "void ToogleUIVisibility()",
      "void SendRPC(DebugWeatherRPCData data)",
      "void InvokeSendRPC()",
      "void UpdateWeatherValues()",
      "void Update(float timeslice)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void ButtonHighlight(Widget w)",
      "void ButtonNormal(Widget w)",
      "void ScriptConsoleWeatherWindTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)"
    ]
  },
  "ScriptConsoleWeatherWindTab": {
    "parent": null,
    "methods": [
      "void ScriptConsoleWeatherWindTab(Widget root, ScriptConsole console, Widget button, ScriptConsoleTabBase parent = null)"
    ]
  },
  "StartupMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void StartupMenu()"
    ]
  },
  "StaticGUIUtils": {
    "parent": null,
    "methods": [
      "static string VerifyIconImageString(int imageset_group = IMAGESETGROUP_INVENTORY, string icon_name = )"
    ]
  },
  "TitleScreenMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void TitleScreenMenu()",
      "void OnShow()",
      "void OnHide()",
      "void Update(float timeslice)"
    ]
  },
  "Watermark": {
    "parent": null,
    "methods": [
      "void Watermark(Widget parent = null)"
    ]
  },
  "WidgetEventHandler": {
    "parent": null,
    "methods": [
      "void WidgetEventHandler()",
      "void UnregisterWidget( Widget w )",
      "void RegisterOnMouseButtonDown( Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnMouseButtonUp( Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnMouseWheel( Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnDropReceived( Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnDrag( Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnDrop( Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnDraggingOver( Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnMouseEnter(Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnMouseLeave(Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnClick(Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnDoubleClick(Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnFocus(Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnFocusLost(Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnChildAdd(Widget w, Managed eventHandler, string functionName )",
      "void RegisterOnChildRemove(Widget w, Managed eventHandler, string functionName )",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool OnMouseButtonDown( Widget w, int x, int y, int button )",
      "bool OnMouseButtonUp( Widget w, int x, int y, int button )",
      "bool OnDrag(Widget w, int x, int y)",
      "bool OnDrop(Widget w, int x, int y, Widget reciever)",
      "bool OnDraggingOver(Widget w, int x, int y, Widget reciever)",
      "bool OnDropReceived( Widget w, int x, int y, Widget reciever )",
      "bool OnFocus( Widget w, int x, int y )",
      "bool OnFocusLost( Widget w, int x, int y )",
      "bool OnMouseWheel(Widget  w, int  x, int  y, int wheel)",
      "bool OnChildAdd( Widget w, Widget child )",
      "bool OnChildRemove( Widget w, Widget child )"
    ]
  },
  "DispatcherCaller": {
    "parent": "Dispatcher",
    "methods": [
      "void SendLogAtClient(Param1<string> p)",
      "void ScriptConsoleAddPrint(Param1<string> p)",
      "void ScriptConsoleHistoryBack()",
      "void ScriptConsoleHistoryForward()",
      "void SceneEditorCommand(Param params)",
      "void MissionGameplayHideInventory()"
    ]
  },
  "MissionBase": {
    "parent": "MissionBaseWorld",
    "methods": [
      "void MissionBase()",
      "void OnUpdate(float timeslice)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void InitialiseWorldData()",
      "void InitWorldYieldDataDefaults(CatchYieldBank bank)",
      "void SpawnItems()",
      "void UpdateInputDevicesAvailability()",
      "void OnKeyPress(int key)",
      "void DumpCurrentUILayout()",
      "void DumpWidget(Widget w, int tabs)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnLog(string msg_log)",
      "void UpdateDummyScheduler()",
      "void AddDummyPlayerToScheduler(Man player)",
      "void UpdateInputDeviceDiag()",
      "void DisplayInputDebug(bool show)"
    ]
  },
  "MissionDummy": {
    "parent": "MissionBase",
    "methods": []
  },
  "BenchmarkLocation": {
    "parent": null,
    "methods": [
      "void BenchmarkLocation(string name)",
      "void SetPosition(vector start)",
      "void SetLookAtPosition(vector start)",
      "void SetCameraSpeedMultiplier(float multiplier)",
      "void SetDummyTeleport()",
      "void SetDummyWait()",
      "void AddLocation(notnull BenchmarkLocation loc)",
      "void AddQuickLocation(string name, vector pos, vector lookAtPos)",
      "void AddTeleport()",
      "void AddWait()",
      "void LogToRPT(bool logRPT)",
      "void DoDevPrints(bool doPrints)",
      "void SetPreloadLengthTime(int seconds)",
      "void SetTestTimeMultiplier(float multiplier)",
      "void SetCSVName(string name)",
      "void MissionBenchmark()",
      "void Start()",
      "void OnUpdate(float timeslice)",
      "void PreloadUpdate()",
      "void MeasureUpdate(float timeSlice)",
      "void AdvanceLocation()",
      "void LerpCamera()",
      "void OnLocationSwitch()",
      "void TeleportToPos(BenchmarkLocation loc)",
      "void OnBenchmarkEnd(string reason)",
      "void CreatePlayer()",
      "void CreateCSVLog()",
      "void FPSLog( string position, float frames )"
    ]
  },
  "BenchmarkConfig": {
    "parent": null,
    "methods": [
      "void AddLocation(notnull BenchmarkLocation loc)",
      "void AddQuickLocation(string name, vector pos, vector lookAtPos)",
      "void AddTeleport()",
      "void AddWait()",
      "void LogToRPT(bool logRPT)",
      "void DoDevPrints(bool doPrints)",
      "void SetPreloadLengthTime(int seconds)",
      "void SetTestTimeMultiplier(float multiplier)",
      "void SetCSVName(string name)",
      "void MissionBenchmark()",
      "void Start()",
      "void OnUpdate(float timeslice)",
      "void PreloadUpdate()",
      "void MeasureUpdate(float timeSlice)",
      "void AdvanceLocation()",
      "void LerpCamera()",
      "void OnLocationSwitch()",
      "void TeleportToPos(BenchmarkLocation loc)",
      "void OnBenchmarkEnd(string reason)",
      "void CreatePlayer()",
      "void CreateCSVLog()",
      "void FPSLog( string position, float frames )"
    ]
  },
  "MissionBenchmark": {
    "parent": null,
    "methods": [
      "void MissionBenchmark()",
      "void Start()",
      "void OnUpdate(float timeslice)",
      "void PreloadUpdate()",
      "void MeasureUpdate(float timeSlice)",
      "void AdvanceLocation()",
      "void LerpCamera()",
      "void OnLocationSwitch()",
      "void TeleportToPos(BenchmarkLocation loc)",
      "void OnBenchmarkEnd(string reason)",
      "void CreatePlayer()",
      "void CreateCSVLog()",
      "void FPSLog( string position, float frames )"
    ]
  },
  "MissionGameplay": {
    "parent": "MissionBase",
    "methods": [
      "void MissionGameplay()",
      "void OnInit()",
      "void OnMissionStart()",
      "void InitInventory()",
      "void TickScheduler(float timeslice)",
      "void SendMuteListToServer( map<string, bool> mute_list )",
      "void UpdateInputDevicesAvailability()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void OnItemUsed(InventoryItem item, Man owner)",
      "void SetInputSuppression(bool state)",
      "bool GetInputSuppression()",
      "void PlayerControlEnable( bool bForceSupress )",
      "void PlayerControlDisable(int mode)",
      "void RemoveActiveInputExcludes(array<string> excludes, bool bForceSupress = false)",
      "void RemoveActiveInputRestriction(int restrictor)",
      "void AddActiveInputExcludes(array<string> excludes)",
      "void AddActiveInputRestriction(int restrictor)",
      "void RefreshExcludes()",
      "void PerformRefreshExcludes()",
      "void EnableAllInputs(bool bForceSupress = false)",
      "bool IsControlDisabled()",
      "bool IsInputExcludeActive(string exclude)",
      "bool IsInputRestrictionActive(int restriction)",
      "int GetControlDisabledMode()",
      "void CloseAllMenus()",
      "void DestroyAllMenus()",
      "void MoveHudForInventory( bool inv_open )",
      "void ShowInventory()",
      "void HideInventory()",
      "void DestroyInventory()",
      "void ResetGUI()",
      "void ShowChat()",
      "void HideChat()",
      "void ShowVehicleInfo()",
      "void HideVehicleInfo()",
      "void RefreshCrosshairVisibility()",
      "void HideCrosshairVisibility()",
      "bool IsPaused()",
      "void Pause()",
      "void Continue()",
      "bool IsMissionGameplay()",
      "void AbortMission()",
      "void CreateLogoutMenu(UIMenuPanel parent)",
      "void StartLogoutMenu(int time)",
      "void CreateDebugMonitor()",
      "void HideDebugMonitor()",
      "void HandleMapToggleByKeyboardShortcut(Man player)",
      "bool IsMapUnfoldActionRunning(ActionBase pAction)",
      "void UpdateDebugMonitor()",
      "void SetActionDownTime( int time_down )",
      "void SetActionUpTime( int time_up )",
      "int LocalPressTime()",
      "int LocalReleaseTime()",
      "float GetHoldActionTime()",
      "void DisplayHairDebug()",
      "void ShowHairDebugValues(bool state)",
      "void UpdateVoiceLevelWidgets(int level)",
      "bool IsVoNActive()",
      "void SetVoNActive(bool active)",
      "void HideVoiceLevelWidgets()",
      "void SetNoteMenu(UIScriptedMenu menu)",
      "void OnPlayerRespawned(Man player)",
      "void SetPlayerRespawning(bool state)",
      "bool IsPlayerRespawning()",
      "void SetRespawnModeClient(int mode)",
      "int GetRespawnModeClient()",
      "void OnInputBufferEvent(bool state)",
      "void InputBufferCheck()"
    ]
  },
  "MissionMainMenu": {
    "parent": "MissionBase",
    "methods": [
      "void OnInit()",
      "void Reset()",
      "void CreateIntroScene()",
      "void UpdateInputDevicesAvailability()",
      "void OnMissionStart()",
      "void OnMissionFinish()",
      "void OnUpdate(float timeslice)",
      "void OnMenuEnter(int menu_id)",
      "void OnInputDeviceChanged(int device)",
      "int SortedInsert( array<int> list, int number )",
      "void PlayMusic()",
      "void StopMusic()"
    ]
  },
  "MissionServer": {
    "parent": "MissionBase",
    "methods": [
      "void MissionServer()",
      "void OnInit()",
      "void OnMissionStart()",
      "void OnUpdate(float timeslice)",
      "void OnGameplayDataHandlerLoad()",
      "void RandomArtillery(float deltaTime)",
      "bool IsServer()",
      "bool IsPlayerDisconnecting(Man player)",
      "void UpdatePlayersStats()",
      "void AddNewPlayerLogout(PlayerBase player, notnull LogoutInfo info)",
      "void UpdateLogoutPlayers()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void InvokeOnConnect(PlayerBase player, PlayerIdentity identity)",
      "void InvokeOnDisconnect(PlayerBase player)",
      "void OnClientPrepareEvent(PlayerIdentity identity, out bool useDB, out vector pos, out float yaw, out int preloadTimeout)",
      "void ControlPersonalLight(PlayerBase player)",
      "void SyncGlobalLighting(PlayerBase player)",
      "bool ProcessLoginData(ParamsReadContext ctx)",
      "void EquipCharacter(MenuDefaultCharacterData char_data)",
      "void StartingEquipSetup(PlayerBase player, bool clothesChosen)",
      "bool VerifyAttachmentType(int slot_ID, string attachment_type)",
      "void OnClientReadyEvent(PlayerIdentity identity, PlayerBase player)",
      "void OnClientRespawnEvent(PlayerIdentity identity, PlayerBase player)",
      "void OnClientReconnectEvent(PlayerIdentity identity, PlayerBase player)",
      "void OnClientDisconnectedEvent(PlayerIdentity identity, PlayerBase player, int logoutTime, bool authFailed)",
      "void PlayerDisconnected(PlayerBase player, PlayerIdentity identity, string uid)",
      "bool ShouldPlayerBeKilled(PlayerBase player)",
      "void HandleBody(PlayerBase player)",
      "void TickScheduler(float timeslice)",
      "bool InsertCorpse(Man player)",
      "void UpdateCorpseStatesServer()",
      "void SyncRespawnModeInfo(PlayerIdentity identity)"
    ]
  },
  "DayZTool": {
    "parent": null,
    "methods": [
      "void RunDayZBat(string filepath, bool wait = false)",
      "void Configure()",
      "void DialogOk()",
      "void Run()"
    ]
  },
  "RestartDayzTool": {
    "parent": null,
    "methods": [
      "void Run()"
    ]
  },
  "RunDayzTool": {
    "parent": null,
    "methods": [
      "void Run()"
    ]
  },
  "KillDayzTool": {
    "parent": null,
    "methods": [
      "void Run()"
    ]
  },
  "SVNBlamePlugin": {
    "parent": null,
    "methods": [
      "void Run()",
      "void Configure()",
      "void OkButton()"
    ]
  },
  "CheckLocalisationPlugin": {
    "parent": null,
    "methods": [
      "void FindTexts(WidgetSource src)",
      "void CheckTextIDs(string file)",
      "void Run()"
    ]
  },
  "SVNDiffPlugin": {
    "parent": null,
    "methods": [
      "void Run()",
      "void Configure()",
      "void OkButton()"
    ]
  },
  "OpenDirPlugin": {
    "parent": null,
    "methods": [
      "void Run()",
      "void Configure()",
      "void OkButton()"
    ]
  },
  "ResavePlugin": {
    "parent": null,
    "methods": [
      "void Resave(string file)",
      "void Run()",
      "void RunCommandline()",
      "bool Cancel()"
    ]
  },
  "SVNShowLogPlugin": {
    "parent": null,
    "methods": [
      "void Run()",
      "void Configure()",
      "void OkButton()"
    ]
  },
  "ModLoader": {
    "parent": null,
    "methods": [
      "static void LoadMods()"
    ]
  },
  "ModStructure": {
    "parent": null,
    "methods": [
      "void ModStructure( int index, string path )",
      "void LoadData()",
      "string GetModName()",
      "string GetModLogo()",
      "string GetModLogoSmall()",
      "string GetModLogoOver()",
      "string GetModActionURL()",
      "string GetModToltip()",
      "string GetModOverview()"
    ]
  },
  "NotificationData": {
    "parent": null,
    "methods": [
      "void NotificationData(string icon, string title_text, string desc_text = )"
    ]
  },
  "NotificationRuntimeData": {
    "parent": null,
    "methods": [
      "void NotificationRuntimeData(float time, NotificationData data, string detail_text)",
      "float GetTime()",
      "float GetRemainingTime()",
      "string GetIcon()",
      "string GetTitleText()",
      "string GetDetailText()",
      "void UpdateRemainingTime(float updateInterval)",
      "void SetTime(float time)",
      "static void InitInstance()",
      "static void CleanupInstance()",
      "void NotificationSystem()",
      "static void SendNotificationToPlayerExtended(Man player, float show_time, string title_text, string detail_text = , string icon = )",
      "static void SendNotificationToPlayerIdentityExtended(PlayerIdentity player, float show_time, string title_text, string detail_text = , string icon = )",
      "static void SendNotificationToPlayer(Man player, NotificationType type, float show_time, string detail_text = )",
      "static void SendNotificationToPlayerIdentity( PlayerIdentity player, NotificationType type, float show_time, string detail_text =  )",
      "static void AddNotification(NotificationType type, float show_time, string detail_text = )",
      "static void AddNotificationExtended(float show_time, string title_text, string detail_text = , string icon = )",
      "static void Update(float timeslice)",
      "static void LoadNotificationData()"
    ]
  },
  "NotificationSystem": {
    "parent": null,
    "methods": [
      "static void InitInstance()",
      "static void CleanupInstance()",
      "void NotificationSystem()",
      "static void SendNotificationToPlayerExtended(Man player, float show_time, string title_text, string detail_text = , string icon = )",
      "static void SendNotificationToPlayerIdentityExtended(PlayerIdentity player, float show_time, string title_text, string detail_text = , string icon = )",
      "static void SendNotificationToPlayer(Man player, NotificationType type, float show_time, string detail_text = )",
      "static void SendNotificationToPlayerIdentity( PlayerIdentity player, NotificationType type, float show_time, string detail_text =  )",
      "static void AddNotification(NotificationType type, float show_time, string detail_text = )",
      "static void AddNotificationExtended(float show_time, string title_text, string detail_text = , string icon = )",
      "static void Update(float timeslice)",
      "static void LoadNotificationData()"
    ]
  },
  "NotificationUI": {
    "parent": null,
    "methods": [
      "void NotificationUI()",
      "void AddNotification( NotificationRuntimeData data )",
      "void RemoveNotification( NotificationRuntimeData data )",
      "void AddVoiceNotification(string player, string name)",
      "void RemoveVoiceNotification( string player )",
      "void ClearVoiceNotifications()",
      "void UpdateTargetHeight()",
      "void UpdateOffset()",
      "void Update( float timeslice )"
    ]
  },
  "Backlit": {
    "parent": null,
    "methods": [
      "void OnInit( DayZGame game )",
      "void LoadingAnim()",
      "void MainMenu_OnShow()",
      "void MainMenu_OnHide()",
      "void OnEnterCar()",
      "void OnLeaveCar()",
      "void OnSwimmingStart()",
      "void OnSwimmingStop()",
      "void HintClear()",
      "void HintShow( UAInput action )",
      "void KeybindingClear( )",
      "void KeybindingShow( int keyHash )",
      "void VisualiseHealth( int iLevel )",
      "void VisualiseBlood( int iLevel )",
      "void SetHealth( float fHealth )",
      "void SetBlood( float fBlood )",
      "void UpdatePlayer( bool bForce )",
      "void RefreshVehicleLayout( int iGear, bool bCEL )"
    ]
  },
  "DestructionEffectBase": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool HasExplosionDamage()",
      "void DealExplosionDamage()",
      "void OnHealthLevelChanged(notnull EntityAI entity, int oldLevel, int newLevel, string zone)",
      "void ReplaceEntityServer()",
      "void OnEntityDestroyedOneTimeClient(EntityAI entity, int oldLevel,string zone)",
      "void OnEntityDestroyedOneTimeServer(EntityAI entity, int oldLevel, string zone)",
      "void OnEntityDestroyedPersistentClient(EntityAI entity, string zone)",
      "void OnEntityDestroyedPersistentServer(EntityAI entity, string zone)",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)"
    ]
  },
  "BleedingSourceEffect": {
    "parent": null,
    "methods": [
      "void BleedingSourceEffect()",
      "void BleedingSourceEffectLight()"
    ]
  },
  "BleedingSourceEffectLight": {
    "parent": null,
    "methods": [
      "void BleedingSourceEffectLight()"
    ]
  },
  "BloodSplatter": {
    "parent": null,
    "methods": [
      "void BloodSplatter()"
    ]
  },
  "EffBulletImpactBase": {
    "parent": null,
    "methods": [
      "void EffBulletImpactBase()",
      "void OnCheckUpdate()",
      "void SetEnterParticle(int id)",
      "void SetExitParticle(int id)",
      "void SetRicochetParticle(int id)",
      "void SetSingleParticle(int id)",
      "void SetAngledEnterValue(float f)",
      "void EvaluateEffect(Object directHit, int componentIndex, vector pos, int impact_type, vector surfNormal, vector exitPos, vector inSpeed, vector outSpeed, string ammoType)",
      "float CalculateStoppingForce(float in_speedf, float out_speedf, string ammoType, float weight)",
      "void OnEnterCalculations( Particle p )",
      "void OnExitCalculations(Particle p, float outSpeedf)",
      "void OnRicochetCalculations(Particle p, float outspeedf)",
      "void OnEnterAngledCalculations(Particle p)",
      "void Event_OnStarted()"
    ]
  },
  "EffBulletImpactTest": {
    "parent": null,
    "methods": [
      "void EffBulletImpactTest()"
    ]
  },
  "EffGeneratorSmoke": {
    "parent": null,
    "methods": [
      "void EffGeneratorSmoke()"
    ]
  },
  "LandmineExplosion": {
    "parent": null,
    "methods": [
      "void LandmineExplosion()"
    ]
  },
  "MenuCarEngineSmoke": {
    "parent": null,
    "methods": [
      "void MenuCarEngineSmoke()"
    ]
  },
  "MenuEvaporation": {
    "parent": null,
    "methods": [
      "void MenuEvaporation()"
    ]
  },
  "EffSwarmingFlies": {
    "parent": null,
    "methods": [
      "void EffSwarmingFlies()"
    ]
  },
  "EffVehicleSmoke": {
    "parent": null,
    "methods": [
      "void EffVehicleSmoke()",
      "void SetParticleStateLight()",
      "void SetParticleStateHeavy()",
      "void SetParticleState( int state )"
    ]
  },
  "EffVomit": {
    "parent": null,
    "methods": [
      "void EffVomit()"
    ]
  },
  "EffVomitBlood": {
    "parent": null,
    "methods": [
      "void EffVomitBlood()"
    ]
  },
  "BIOSErrorModule": {
    "parent": null,
    "methods": [
      "void BIOSErrorModule()",
      "void InitOptionalVariables()",
      "void FillErrorDataMap()",
      "void InsertBIOSError(int code, string message)"
    ]
  },
  "ClientKickedModule": {
    "parent": null,
    "methods": [
      "void ClientKickedModule()",
      "void InitOptionalVariables()",
      "void FillErrorDataMap()"
    ]
  },
  "ConnectErrorClientModule": {
    "parent": null,
    "methods": [
      "void ConnectErrorClientModule()",
      "void InitOptionalVariables()",
      "void FillErrorDataMap()",
      "void OnEvent(EventType eventTypeId, Param params)"
    ]
  },
  "ConnectErrorScriptModule": {
    "parent": null,
    "methods": [
      "void ConnectErrorScriptModule()",
      "void InitOptionalVariables()",
      "void FillErrorDataMap()",
      "void OnEvent(EventType eventTypeId, Param params)",
      "static void DisconnectSession(bool loadMpPrivilege)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)"
    ]
  },
  "ConnectErrorScriptModuleUI": {
    "parent": null,
    "methods": [
      "static void DisconnectSession(bool loadMpPrivilege)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)"
    ]
  },
  "ConnectErrorServerModule": {
    "parent": null,
    "methods": [
      "void ConnectErrorServerModule()",
      "void InitOptionalVariables()",
      "void FillErrorDataMap()",
      "void OnEvent(EventType eventTypeId, Param params)"
    ]
  },
  "ErrorHandlerModule": {
    "parent": null,
    "methods": [
      "void SetCategory(ErrorCategory category)",
      "void OnErrorThrown(int errorCode, owned string additionalInfo = )",
      "string GetClientMessage(int errorCode, string additionalInfo = )",
      "string GetLastClientMessage(int errorCode)",
      "string GetServerMessage(int errorCode, string additionalInfo = )",
      "string GetLastServerMessage(int errorCode)",
      "string GetSimpleMessage(int errorCode, string additionalInfo = )",
      "void OnEvent(EventType eventTypeId, Param params)",
      "void ErrorHandlerModuleScript()",
      "void InitOptionalVariables()",
      "void FillErrorDataMap()",
      "void InsertDialogueErrorProperties(int code, string message, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertHeaderDialogueErrorProperties(int code, string message, string header, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertPrefixDialogueErrorProperties(int code, string message, string prefix, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertExtendedPrefixDialogueErrorProperties(int code, string message, string prefix, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertExtendedPrefixSplitDialogueErrorProperties(int code, string message, string prefix, string serverMessage, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertSplitDialogueErrorProperties(int code, string message, string serverMessage, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertErrorProperties(int code, string message = )"
    ]
  },
  "ErrorHandlerModuleScript": {
    "parent": null,
    "methods": [
      "void ErrorHandlerModuleScript()",
      "void InitOptionalVariables()",
      "void FillErrorDataMap()",
      "string GetClientMessage(int errorCode, string additionalInfo = )",
      "string GetLastClientMessage(int errorCode)",
      "string GetServerMessage(int errorCode, string additionalInfo = )",
      "string GetLastServerMessage(int errorCode)",
      "void OnErrorThrown(int errorCode, owned string additionalInfo = )",
      "void InsertDialogueErrorProperties(int code, string message, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertHeaderDialogueErrorProperties(int code, string message, string header, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertPrefixDialogueErrorProperties(int code, string message, string prefix, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertExtendedPrefixDialogueErrorProperties(int code, string message, string prefix, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertExtendedPrefixSplitDialogueErrorProperties(int code, string message, string prefix, string serverMessage, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertSplitDialogueErrorProperties(int code, string message, string serverMessage, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void InsertErrorProperties(int code, string message = )"
    ]
  },
  "ErrorModuleHandler": {
    "parent": null,
    "methods": [
      "int ThrowError(ErrorCategory category, int code, string additionalInfo = )",
      "int ThrowErrorCode(int errorCode, string additionalInfo = )",
      "int CreateError(ErrorCategory category, int code)",
      "int GetCodeFromError(int errorCode)",
      "string GetErrorHex(int errorCode)",
      "bool AddModule(ErrorCategory category, notnull ErrorHandlerModule errorModule)",
      "bool RemoveModule(ErrorCategory category)",
      "string GetClientMessage(ErrorCategory category, int code, string additionalInfo = )",
      "string GetClientMessageByCode(int errorCode, string additionalInfo = )",
      "string GetLastClientMessage(ErrorCategory category, int code)",
      "string GetLastClientMessageByCode(int errorCode)",
      "string GetServerMessage(ErrorCategory category, int code, string additionalInfo = )",
      "string GetServerMessageByCode(int errorCode, string additionalInfo = )",
      "string GetLastServerMessage(ErrorCategory category, int code)",
      "string GetLastServerMessageByCode(int errorCode)",
      "void GetErrorModules(notnull out array<ErrorHandlerModule> errorModules)",
      "void SafeAddModule(notnull ErrorHandlerModule errorModule)",
      "void SafeRemoveModule(notnull ErrorHandlerModule errorModule)",
      "void SafeRemoveModule(ErrorCategory category)",
      "void Init()",
      "void OnEvent(EventType eventTypeId, Param params)"
    ]
  },
  "ErrorProperties": {
    "parent": null,
    "methods": [
      "void ErrorProperties(string message, string serverMessage)",
      "void HandleError(int errorCode, string additionalInfo = )",
      "string GetClientMessage(string additionalInfo = )",
      "string GetServerMessage(string additionalInfo = )",
      "void DialogueErrorProperties(string message, string serverMessage, string header, UIScriptedMenu handler = null, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "string GetHeader()",
      "int GetDialogButtonType()",
      "int GetDefaultButton()",
      "int GetDialogMeaningType()"
    ]
  },
  "DialogueErrorProperties": {
    "parent": null,
    "methods": [
      "void DialogueErrorProperties(string message, string serverMessage, string header, UIScriptedMenu handler = null, int dialogButtonType = DBT_OK, int defaultButton = DBB_OK, int dialogMeaningType = DMT_EXCLAMATION, bool displayAdditionalInfo = true)",
      "void HandleError(int errorCode, string additionalInfo = )",
      "string GetHeader()",
      "int GetDialogButtonType()",
      "int GetDefaultButton()",
      "int GetDialogMeaningType()"
    ]
  },
  "ScrollBarContainer": {
    "parent": null,
    "methods": [
      "void ScrollFixedAmount( bool down, float amount )",
      "void ScrollToPos( float pos )",
      "void ScrollToBottom()",
      "void ScrollToTop()",
      "float GetContentYPos()",
      "float GetRootHeight()",
      "void UpdateScroller()",
      "void OnWidgetScriptInit(Widget w)",
      "void StopScrolling()",
      "void UpdateScroll(int mouse_x, int mouse_y, bool is_dragging)",
      "bool OnMouseButtonDown(Widget  w, int  x, int  y, int  button)",
      "bool OnMouseButtonUp(Widget  w, int  x, int  y, int  button)",
      "bool OnMouseWheel(Widget  w, int  x, int  y, int  wheel)",
      "bool OnResize( Widget  w, int x, int y)"
    ]
  },
  "SizeToChild": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void OnWidgetScriptInit(Widget w)",
      "bool ResizeparentToChild()",
      "bool ResizeparentToChild( out bool changed_size, int limit = -1, bool immedUpdate = true )",
      "void Refresh()"
    ]
  },
  "SizeToparent": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void OnWidgetScriptInit(Widget w)",
      "void Refresh()"
    ]
  },
  "CreditsLoader": {
    "parent": null,
    "methods": [
      "static void CreateTestJson()"
    ]
  },
  "JsonDataCredits": {
    "parent": null,
    "methods": []
  },
  "JsonDataCreditsDepartment": {
    "parent": null,
    "methods": []
  },
  "JsonDataCreditsSection": {
    "parent": null,
    "methods": []
  },
  "DlcDataLoader": {
    "parent": null,
    "methods": []
  },
  "JsonDataDLCList": {
    "parent": null,
    "methods": []
  },
  "JsonDataDLCInfo": {
    "parent": null,
    "methods": []
  },
  "Bouncer": {
    "parent": null,
    "methods": [
      "void Bouncer()",
      "void Update()",
      "void OnWidgetScriptInit(Widget w)"
    ]
  },
  "HoverEffect": {
    "parent": null,
    "methods": [
      "void HoverEffect()",
      "void OnWidgetScriptInit(Widget w)",
      "void Update()",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)"
    ]
  },
  "MainMenuButtonEffect": {
    "parent": null,
    "methods": [
      "void MainMenuButtonEffect()",
      "void OnWidgetScriptInit(ButtonWidget w)",
      "void Update(float tDelta)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)"
    ]
  },
  "RadialMenu": {
    "parent": null,
    "methods": [
      "void RadialMenu()",
      "void OnWidgetScriptInit(Widget w)",
      "void SetControlType(RadialMenuControlType type)",
      "bool IsUsingMouse()",
      "bool IsUsingController()",
      "void SetWidgetInitialized(bool state)",
      "bool IsWidgetInitialized()",
      "void RegisterClass(UIScriptedMenu class_name)",
      "void SetRadiusOffset(float radius_offset)",
      "void SetExecuteDistOffset(float execute_dist_offset)",
      "void SetOffsetFromTop(float offset_from_top)",
      "void SetItemCardRadiusOffset(float item_card_radius_offset)",
      "void ActivateControllerTimeout(bool state)",
      "void SetWidgetProperties(string delimiter_layout)",
      "void Refresh(bool hide_selector = true)",
      "void ShowRadialSelector(Widget selected_item)",
      "void HideRadialSelector()",
      "int GetItemCardsCount()",
      "float GetRadius()",
      "void GetparentCenter(out float center_x, out float center_y)",
      "float GetparentMinSize()",
      "float GetMousePointerAngle()",
      "float GetMouseDistance()",
      "float GetAngleInDegrees(float rad_angle)",
      "void Update()",
      "float NormalizeInvertAngle(float angle)",
      "void UpdataControllerInput()",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)"
    ]
  },
  "RadialProgressBar": {
    "parent": null,
    "methods": [
      "void RadialProgressBar()",
      "void SetProgress( float progress )",
      "void Update(float tDelta)",
      "void UpdateChild( Widget child, int index )",
      "void OnWidgetScriptInit( Widget w )"
    ]
  },
  "Rotator": {
    "parent": null,
    "methods": [
      "void Rotator()",
      "void Update()",
      "void OnWidgetScriptInit(Widget w)"
    ]
  },
  "HintPage": {
    "parent": null,
    "methods": [
      "string GetHeadlineText()",
      "string GetDescriptionText()",
      "string GetImagePath()"
    ]
  },
  "UiHintPanel": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void UiHintPanel(Widget parent_widget)",
      "void Init(DayZGame game)",
      "void LoadContentList()",
      "void BuildLayout(Widget parent_widget)",
      "void PopulateLayout()",
      "void SetHintHeadline()",
      "void SetHintDescription()",
      "void SetHintImage()",
      "void SetHintPaging()",
      "void ShowRandomPage()",
      "void RandomizePageIndex()",
      "void ShowNextPage()",
      "void ShowPreviousPage()",
      "void StartSlideshow()",
      "void SlideshowThread()",
      "void StopSlideShow()",
      "void RestartSlideShow()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)"
    ]
  },
  "UiHintPanelLoading": {
    "parent": "UiHintPanel",
    "methods": [
      "void Init(DayZGame game)"
    ]
  },
  "AutoHeightSpacer": {
    "parent": null,
    "methods": [
      "void Update()",
      "void OnWidgetScriptInit(Widget w)",
      "bool OnChildRemove( Widget  w, Widget  child)"
    ]
  },
  "HorizontalSpacer": {
    "parent": null,
    "methods": [
      "void UpdateChild(Widget child, float w, float h, int index)"
    ]
  },
  "HorizontalSpacerWithFixedAspect": {
    "parent": null,
    "methods": [
      "void OnWidgetScriptInit(Widget w)",
      "bool OnUpdate(Widget w)",
      "void UpdateLayout()"
    ]
  },
  "ItemsCounter": {
    "parent": null,
    "methods": [
      "void OnWidgetScriptInit(Widget w)"
    ]
  },
  "NoticeSpacer": {
    "parent": null,
    "methods": [
      "bool OnEvent(EventType eventType, Widget target, int parameter0, int parameter1)"
    ]
  },
  "RightGap": {
    "parent": null,
    "methods": [
      "bool OnUpdate( Widget  w)"
    ]
  },
  "SpacerBase": {
    "parent": null,
    "methods": [
      "void OnWidgetScriptInit(Widget w)",
      "bool OnUpdate(Widget w)",
      "bool OnChildAdd( Widget  w, Widget  child)",
      "bool OnChildRemove( Widget  w, Widget  child)",
      "int GetChildIndex(Widget w)",
      "void UpdateLayout()",
      "void UpdateChild(Widget child, float w, float h, int index)"
    ]
  },
  "VerticalSpacer": {
    "parent": null,
    "methods": [
      "void UpdateChild(Widget child, float w, float h, int index)"
    ]
  },
  "ParticleManagerConstants": {
    "parent": null,
    "methods": [
      "void ParticleManagerSettings(int poolSize, int flags = ParticleManagerSettingsFlags.NONE)",
      "static void CleanupInstance()",
      "void ParticleManager(ParticleManagerSettings settings)",
      "int CreateParticles(array<ParticleSource> particles, string path, notnull ParticlePropertiesArray properties, int count = 1)",
      "int CreateParticlesById(int id, notnull ParticlePropertiesArray properties, int count)",
      "int PlayParticles(out array<ParticleSource> particles, string path, notnull array<vector> positions, int count = 1)",
      "int GetParticles(out array<ParticleSource> outArray, int startIndex, int count)",
      "void SetName(string name)",
      "string GetName()",
      "string GetDebugNameNative()",
      "string GetDebugName()",
      "int GetCountID()",
      "static int GetStaticCount()",
      "static int GetStaticActiveCount()",
      "int GetPoolSize()",
      "int GetAllocatedCount()",
      "int GetVirtualCount()",
      "int GetPlayingCount()",
      "bool IsFinishedAllocating()",
      "void SetScriptEvents(Managed events)",
      "void OnAllocation(array<ParticleSource> allocatedParticles)",
      "void OnAllocationEnd()"
    ]
  },
  "ParticleManagerSettings": {
    "parent": null,
    "methods": [
      "void ParticleManagerSettings(int poolSize, int flags = ParticleManagerSettingsFlags.NONE)",
      "static void CleanupInstance()",
      "void ParticleManager(ParticleManagerSettings settings)",
      "int CreateParticles(array<ParticleSource> particles, string path, notnull ParticlePropertiesArray properties, int count = 1)",
      "int CreateParticlesById(int id, notnull ParticlePropertiesArray properties, int count)",
      "int PlayParticles(out array<ParticleSource> particles, string path, notnull array<vector> positions, int count = 1)",
      "int GetParticles(out array<ParticleSource> outArray, int startIndex, int count)",
      "void SetName(string name)",
      "string GetName()",
      "string GetDebugNameNative()",
      "string GetDebugName()",
      "int GetCountID()",
      "static int GetStaticCount()",
      "static int GetStaticActiveCount()",
      "int GetPoolSize()",
      "int GetAllocatedCount()",
      "int GetVirtualCount()",
      "int GetPlayingCount()",
      "bool IsFinishedAllocating()",
      "void SetScriptEvents(Managed events)",
      "void OnAllocation(array<ParticleSource> allocatedParticles)",
      "void OnAllocationEnd()"
    ]
  },
  "ParticleManagerEvents": {
    "parent": null,
    "methods": [
      "static void CleanupInstance()",
      "void ParticleManager(ParticleManagerSettings settings)",
      "int CreateParticles(array<ParticleSource> particles, string path, notnull ParticlePropertiesArray properties, int count = 1)",
      "int CreateParticlesById(int id, notnull ParticlePropertiesArray properties, int count)",
      "int PlayParticles(out array<ParticleSource> particles, string path, notnull array<vector> positions, int count = 1)",
      "int GetParticles(out array<ParticleSource> outArray, int startIndex, int count)",
      "void SetName(string name)",
      "string GetName()",
      "string GetDebugNameNative()",
      "string GetDebugName()",
      "int GetCountID()",
      "static int GetStaticCount()",
      "static int GetStaticActiveCount()",
      "int GetPoolSize()",
      "int GetAllocatedCount()",
      "int GetVirtualCount()",
      "int GetPlayingCount()",
      "bool IsFinishedAllocating()",
      "void SetScriptEvents(Managed events)",
      "void OnAllocation(array<ParticleSource> allocatedParticles)",
      "void OnAllocationEnd()"
    ]
  },
  "ParticleManager": {
    "parent": null,
    "methods": [
      "static void CleanupInstance()",
      "void ParticleManager(ParticleManagerSettings settings)",
      "int CreateParticles(array<ParticleSource> particles, string path, notnull ParticlePropertiesArray properties, int count = 1)",
      "int CreateParticlesById(int id, notnull ParticlePropertiesArray properties, int count)",
      "int PlayParticles(out array<ParticleSource> particles, string path, notnull array<vector> positions, int count = 1)",
      "int GetParticles(out array<ParticleSource> outArray, int startIndex, int count)",
      "void SetName(string name)",
      "string GetName()",
      "string GetDebugNameNative()",
      "string GetDebugName()",
      "int GetCountID()",
      "static int GetStaticCount()",
      "static int GetStaticActiveCount()",
      "int GetPoolSize()",
      "int GetAllocatedCount()",
      "int GetVirtualCount()",
      "int GetPlayingCount()",
      "bool IsFinishedAllocating()",
      "void SetScriptEvents(Managed events)",
      "void OnAllocation(array<ParticleSource> allocatedParticles)",
      "void OnAllocationEnd()"
    ]
  },
  "ParticleProperties": {
    "parent": null,
    "methods": [
      "void ParticleProperties(vector localPos, int flags, Object parent = null, vector localOri = vector.Zero, Class owner = null)",
      "int GetPPFlags()",
      "bool IsPlayOnCreation()",
      "bool IsForceWorldRotation()",
      "bool IsKeepparentOnEnd()",
      "void ParticleSource()",
      "void ParticleInit()",
      "void SetParticleAutoDestroyFlags(ParticleAutoDestroyFlags flags)",
      "void DisableAutoDestroy()",
      "int GetParticleAutoDestroyFlags()",
      "bool PlayParticleNative(int flags)",
      "bool PlayParticleEx(int particle_id = -1, int flags = 0)",
      "bool StopParticleNative(int flags)",
      "bool StopParticle(int flags = 0)",
      "bool ResetParticleNative()",
      "bool ResetParticle()",
      "bool RestartParticleNative()",
      "bool RestartParticle()",
      "bool IsParticlePlayingNative()",
      "bool IsParticlePlaying()",
      "bool SetParticleNative(string path)",
      "bool SetParticle(string path)",
      "bool SetParticleByID(int id)",
      "void SetSource(int particle_id)",
      "bool GetParticleNative(out string path, EGetParticleMode mode)",
      "bool GetParticle(out string path, EGetParticleMode mode)",
      "int GetParticleID()",
      "int GetParticleIDLegacy()",
      "bool ApplyPropertiesNative(ParticleProperties properties)",
      "bool ApplyProperties(ParticleProperties properties)",
      "bool HasActiveParticleNative()",
      "bool HasActiveParticle()",
      "int GetParticleCountNative()",
      "int GetParticleCount()",
      "bool IsRepeatNative()",
      "bool IsRepeat()",
      "float GetMaxLifetimeNative()",
      "float GetMaxLifetime()",
      "void SetOwner(Class owner)",
      "void Orphan()",
      "int GetIndex()",
      "int GetCountID()",
      "static int GetStaticCount()",
      "static int GetStaticActiveCount()",
      "void OnParticleparented(IEntity parent)",
      "void OnParticleUnparented(IEntity parent)",
      "void OnParticleStop()",
      "void AddAsChild(Object parent, vector local_pos = , vector local_ori = , bool force_rotation_to_world = false)",
      "void SetParticleParam(int parameter_id, float value )",
      "void SetParameter(int emitter, int parameter, float value)",
      "void GetParameter(int emitter, int parameter, out float value)",
      "float GetParameterEx(int emitter, int parameter)",
      "void ScaleParticleParamFromOriginal(int parameter_id, float coef )",
      "void ScaleParticleParam(int parameter_id, float coef )",
      "void IncrementParticleParamFromOriginal(int parameter_id, float value )",
      "void IncrementParticleParam(int parameter_id, float value )",
      "void SetWiggle(float random_angle, float random_interval)",
      "void StopWiggle()",
      "void RandomizeOrientation()",
      "void UpdateState()",
      "void DestroyParticleEffect()",
      "void CreateParticleEffect()",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void OnCheckAutoDelete()",
      "void OnToDelete()"
    ]
  },
  "ParticleSource": {
    "parent": null,
    "methods": [
      "void ParticleSource()",
      "void ParticleInit()",
      "void SetParticleAutoDestroyFlags(ParticleAutoDestroyFlags flags)",
      "void DisableAutoDestroy()",
      "int GetParticleAutoDestroyFlags()",
      "bool PlayParticleNative(int flags)",
      "bool PlayParticleEx(int particle_id = -1, int flags = 0)",
      "bool StopParticleNative(int flags)",
      "bool StopParticle(int flags = 0)",
      "bool ResetParticleNative()",
      "bool ResetParticle()",
      "bool RestartParticleNative()",
      "bool RestartParticle()",
      "bool IsParticlePlayingNative()",
      "bool IsParticlePlaying()",
      "bool SetParticleNative(string path)",
      "bool SetParticle(string path)",
      "bool SetParticleByID(int id)",
      "void SetSource(int particle_id)",
      "bool GetParticleNative(out string path, EGetParticleMode mode)",
      "bool GetParticle(out string path, EGetParticleMode mode)",
      "int GetParticleID()",
      "int GetParticleIDLegacy()",
      "bool ApplyPropertiesNative(ParticleProperties properties)",
      "bool ApplyProperties(ParticleProperties properties)",
      "bool HasActiveParticleNative()",
      "bool HasActiveParticle()",
      "int GetParticleCountNative()",
      "int GetParticleCount()",
      "bool IsRepeatNative()",
      "bool IsRepeat()",
      "float GetMaxLifetimeNative()",
      "float GetMaxLifetime()",
      "void SetOwner(Class owner)",
      "void Orphan()",
      "int GetIndex()",
      "int GetCountID()",
      "static int GetStaticCount()",
      "static int GetStaticActiveCount()",
      "void OnParticleparented(IEntity parent)",
      "void OnParticleUnparented(IEntity parent)",
      "void OnParticleStop()",
      "void AddAsChild(Object parent, vector local_pos = , vector local_ori = , bool force_rotation_to_world = false)",
      "void SetParticleParam(int parameter_id, float value )",
      "void SetParameter(int emitter, int parameter, float value)",
      "void GetParameter(int emitter, int parameter, out float value)",
      "float GetParameterEx(int emitter, int parameter)",
      "void ScaleParticleParamFromOriginal(int parameter_id, float coef )",
      "void ScaleParticleParam(int parameter_id, float coef )",
      "void IncrementParticleParamFromOriginal(int parameter_id, float value )",
      "void IncrementParticleParam(int parameter_id, float value )",
      "void SetWiggle(float random_angle, float random_interval)",
      "void StopWiggle()",
      "void RandomizeOrientation()",
      "void UpdateState()",
      "void DestroyParticleEffect()",
      "void CreateParticleEffect()",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void OnCheckAutoDelete()",
      "void OnToDelete()"
    ]
  },
  "OwnershipTestDummyClass": {
    "parent": null,
    "methods": [
      "void PMTCreationAndCleanup()",
      "void PassCheckEvents(ParticleManager pm)"
    ]
  },
  "PMTCreationAndCleanup": {
    "parent": null,
    "methods": [
      "void PMTCreationAndCleanup()",
      "void PassCheckEvents(ParticleManager pm)"
    ]
  },
  "PMTF": {
    "parent": null,
    "methods": [
      "int InsertManager(ParticleManager pm)",
      "bool GetManager(int id, out ParticleManager pm)",
      "void PrintPMStats(notnull ParticleManager pm)",
      "void PrintActiveStats()"
    ]
  },
  "PMTPlayback": {
    "parent": null,
    "methods": [
      "void PMTPlayback()",
      "void PassOnePlaying(ParticleSource p)",
      "void OnePlayingSAADEnded(ParticleSource p)",
      "void OnePlayingSAEnded(ParticleSource p)",
      "void StopEnded(ParticleSource p)"
    ]
  },
  "PPEClassBase": {
    "parent": null,
    "methods": [
      "void PPEClassBase(string mat_path_override = )",
      "void Init(string mat_path_override = )",
      "void CreateMaterial()",
      "void CreateDataStructure()",
      "void RegisterMaterialParameters()",
      "void RegisterParameterScalarBool(int idx, string parameter_name, bool default_value)",
      "void RegisterParameterScalarInt(int idx, string parameter_name, int default_value, int min, int max)",
      "void RegisterParameterScalarFloat(int idx, string parameter_name, float default_value, float min, float max)",
      "void RegisterParameterScalarFloatEx(int idx, string parameter_name, float default_value, float min, float max, typename type)",
      "void RegisterParameterColor(int idx, string parameter_name, float r, float g, float b, float a)",
      "void RegisterParameterColorEx(int idx, string parameter_name, float r, float g, float b, float a, typename type)",
      "void RegisterParameterVector(int idx, string parameter_name, array<float> default_values)",
      "void RegisterParameterTexture(int idx, string parameter_name, string default_path)",
      "void RegisterParameterResource(int idx, string parameter_name, string default_path)",
      "void InsertParamValueData(PPERequestParamDataBase request_data)",
      "void RemoveRequest(int req_idx)",
      "void OnUpdate(float timeslice, int order)",
      "void DbgPrnt(string text)"
    ]
  },
  "PPERequester_BloodLoss": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void SetBloodLossLevel(float level)"
    ]
  },
  "PPERequester_BurlapSackEffects": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)",
      "void OnStop(Param par = null)"
    ]
  },
  "PPERequester_CameraADS": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void SetValuesOptics(out array<float> mask_array, out array<float> lens_array, float gauss = 0.0)",
      "void SetValuesIronsights(out array<float> DOF_array)",
      "void OnStop(Param par = null)"
    ]
  },
  "PPERequester_CameraNV": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void SetNVMode(int mode)",
      "void OnStart(Param par = null)",
      "void OnStop(Param par = null)",
      "void SetUndergroundExposureCoef(float coef)"
    ]
  },
  "PPERequester_ContaminatedAreaTint": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart( Param par = null )",
      "void OnUpdate( float delta )",
      "void OnStop(Param par = null)",
      "float FadeColourMult( float x, float y, float deltaT )"
    ]
  },
  "PPERequester_ControllerDisconnectBlur": {
    "parent": "PPERequester_MenuBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_ControlsBlur": {
    "parent": "PPERequester_MenuBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_DeathDarkening": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_Drowning": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)",
      "void OnUpdate(float delta)",
      "void SetStamina01(float stamina01)"
    ]
  },
  "PPERequesterBase": {
    "parent": null,
    "methods": [
      "void PPERequesterBase(int requester_IDX)",
      "void SetRequesterUpdating(bool state)",
      "void Start(Param par = null)",
      "void Stop(Param par = null)",
      "bool IsRequesterRunning()",
      "void SetRequesterIDX(int idx)",
      "int GetRequesterIDX()",
      "int GetCategoryMask()",
      "void SetTargetValueBool(int mat_id, int param_idx, bool val, int priority_layer, int operator = PPOperators.SET)",
      "void SetTargetValueBoolDefault(int mat_id, int param_idx)",
      "void SetTargetValueInt(int mat_id, int param_idx, bool relative, int val, int priority_layer, int operator = PPOperators.SET)",
      "void SetTargetValueIntDefault(int mat_id, int param_idx)",
      "void SetTargetValueFloat(int mat_id, int param_idx, bool relative, float val, int priority_layer, int operator = PPOperators.ADD_RELATIVE)",
      "void SetTargetValueFloatDefault(int mat_id, int param_idx)",
      "void SetTargetValueColor(int mat_id, int param_idx, array<float> val, int priority_layer, int operator = PPOperators.ADD_RELATIVE)",
      "void SetTargetValueColorDefault(int mat_id, int param_idx)",
      "void QueueValuesSend()",
      "void ClearRequesterData()",
      "void SendCurrentValueData(PPERequestParamDataBase data)",
      "void OnUpdate(float delta)",
      "void OnStart(Param par = null)",
      "void OnStop(Param par = null)",
      "float RelativizeValue(float value, int var_type, int mat_id, int param_id, bool relative)",
      "void SetDefaultValuesAll()",
      "void DbgPrnt(string text)"
    ]
  },
  "PPERequester_GameplayBase": {
    "parent": "PPERequesterBase",
    "methods": [
      "int GetCategoryMask()"
    ]
  },
  "PPERequester_MenuBase": {
    "parent": "PPERequesterBase",
    "methods": [
      "int GetCategoryMask()"
    ]
  },
  "PPERequester_FeedbackBlur": {
    "parent": "PPERequester_MenuBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_FeverEffects": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void SetFeverIntensity(float intensity)"
    ]
  },
  "PPERequester_FlashbangEffects": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)",
      "void OnStop(Param par = null)",
      "void OnUpdate(float delta)",
      "void SetFlashbangIntensity(float intensity, float daytime_toggle)"
    ]
  },
  "PPERequester_GenericBlackGlassesBase": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_GlassesSportBlack": {
    "parent": "PPERequester_GenericBlackGlassesBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_GlassesDesignerBlack": {
    "parent": "PPERequester_GenericBlackGlassesBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_MotoHelmetBlack": {
    "parent": "PPERequester_GenericBlackGlassesBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_GlassesSportBlue": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_GlassesSportGreen": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_GlassesSportOrange": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_GlassesAviator": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_TacticalGoggles": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_WeldingMask": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_HealthHitReaction": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void SetHitIntensity(float intensity)"
    ]
  },
  "PPERequester_HMPGhosts": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)",
      "void OnUpdate(float delta)",
      "void ProcessSimulation(float delta)",
      "void SampleChannels(float time)",
      "void ReSampleChannels(float time)",
      "void ProcessFading(float delta)",
      "void SetPulseProgress(float progress)",
      "void FadeOutEffect(float targetTime)"
    ]
  },
  "PPERequester_HeavyMetalPoisoning_3": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void SetInitialLenseOffset(float offsetAngle, float offsetDistance = 0.5)",
      "void SetEffectProgress(float progress)"
    ]
  },
  "PPERequester_IntroChromAbb": {
    "parent": "PPERequester_MenuBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_InventoryBlur": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_LatencyBlur": {
    "parent": "PPERequester_MenuBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_MenuEffects": {
    "parent": "PPERequester_MenuBase",
    "methods": [
      "void SetBlurIntensity(float gauss)",
      "void SetVignetteIntensity(float vignette)"
    ]
  },
  "PPERequester_PainBlur": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void SetRadialBlur(float power_x, float power_y, float offset_x, float offset_y, float pixel_scale = 0.5 )"
    ]
  },
  "PPERequester_ServerBrowserBlur": {
    "parent": "PPERequester_MenuBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_ShockHitReaction": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_SpookyAreaTint": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart( Param par = null )",
      "void OnUpdate( float delta )",
      "void OnStop(Param par = null)",
      "float FadeColourMult( float x, float y, float deltaT )"
    ]
  },
  "PPERequester_TunnelVisionEffects": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_TutorialMenu": {
    "parent": "PPERequester_MenuBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERequester_UnconEffects": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void OnStart(Param par = null)"
    ]
  },
  "PPERUndergroundAcco": {
    "parent": "PPERequester_GameplayBase",
    "methods": [
      "void SetEyeAccommodation(float value)"
    ]
  },
  "ActionBase_Basic": {
    "parent": null,
    "methods": []
  },
  "ActionInput_Basic": {
    "parent": null,
    "methods": []
  },
  "AbstractAITargetCallbacks": {
    "parent": null,
    "methods": [
      "float GetMaxVisionRangeModifier(EntityAI pApplicant)"
    ]
  },
  "AITargetCallbacks": {
    "parent": null,
    "methods": [
      "float GetMaxVisionRangeModifier(EntityAI pApplicant)"
    ]
  },
  "AnimalCatchingConstants": {
    "parent": null,
    "methods": []
  },
  "BaitData": {
    "parent": null,
    "methods": [
      "void BaitData(float value, EntityAI owner)",
      "void CatchingContextBase(Param par)",
      "void Init(Param par)",
      "void DeserializeData(Param par)",
      "void InitBaitCompatibilityMap()",
      "void SetupInitialTypes()",
      "void ParseYieldItemsForCompatibility(array<ECatchingBaitCategories> excludedTypes = null)",
      "void SetupProbabilityArray()",
      "void CreateResultDataStructure()",
      "void InitCatchMasks()",
      "void InitCatchMethodMask()",
      "void InitCatchEnviroMask()",
      "int GetCatchMethodMask()",
      "int GetCatchEnviroMask()",
      "bool CheckMaskCompatibility(YieldItemBase yItem)",
      "bool CheckBaitCompatibility(YieldItemBase yItem, array<ECatchingBaitCategories> excludedTypes = null)",
      "void UpdateCatchingItemData()",
      "void InitCatchingItemData()",
      "void InitItemValues(EntityAI item)",
      "void ClearCatchingItemData()",
      "void RecalculateProcessingData()",
      "bool IsValid()",
      "void GenerateResult()",
      "void UpdateBaseProbability(YieldItemBase yItem)",
      "bool ModifySignalProbability(inout float probability)",
      "float GetQualityModifier()",
      "void SetResultChanceOverride(bool ovrd, float val = 0.0)",
      "void SetResultQualityOverride(bool ovrd, float val = 0.0)",
      "bool RollCatch()"
    ]
  },
  "CatchingContextBase": {
    "parent": null,
    "methods": [
      "void CatchingContextBase(Param par)",
      "void Init(Param par)",
      "void DeserializeData(Param par)",
      "void InitBaitCompatibilityMap()",
      "void SetupInitialTypes()",
      "void ParseYieldItemsForCompatibility(array<ECatchingBaitCategories> excludedTypes = null)",
      "void SetupProbabilityArray()",
      "void CreateResultDataStructure()",
      "void InitCatchMasks()",
      "void InitCatchMethodMask()",
      "void InitCatchEnviroMask()",
      "int GetCatchMethodMask()",
      "int GetCatchEnviroMask()",
      "bool CheckMaskCompatibility(YieldItemBase yItem)",
      "bool CheckBaitCompatibility(YieldItemBase yItem, array<ECatchingBaitCategories> excludedTypes = null)",
      "void UpdateCatchingItemData()",
      "void InitCatchingItemData()",
      "void InitItemValues(EntityAI item)",
      "void ClearCatchingItemData()",
      "void RecalculateProcessingData()",
      "bool IsValid()",
      "void GenerateResult()",
      "void UpdateBaseProbability(YieldItemBase yItem)",
      "bool ModifySignalProbability(inout float probability)",
      "float GetQualityModifier()",
      "void SetResultChanceOverride(bool ovrd, float val = 0.0)",
      "void SetResultQualityOverride(bool ovrd, float val = 0.0)",
      "bool RollCatch()"
    ]
  },
  "CatchingContextPoissonBase": {
    "parent": null,
    "methods": [
      "void ClearCatchingItemData()",
      "float GetSignalPoissonMean()",
      "int GetSignalMax()",
      "bool ModifySignalProbability(inout float probability)",
      "bool RollCatch()",
      "float GetChanceCoef()"
    ]
  },
  "CatchingResultBasic": {
    "parent": null,
    "methods": [
      "void CatchingResultBasic(EntityAI owner)",
      "void SetYieldItem(YieldItemBase yItem)",
      "int GetYieldItemParticleId()",
      "void SetCatchChance(float val)",
      "void SetQuality(float val)",
      "void SetCatchChanceOverride(bool ovrd, float val = 0.0)",
      "void SetQualityOverride(bool ovrd, float val = 0.0)",
      "void UpdateCatchQuality(CatchingContextBase ctx)",
      "void UpdateCatchChance(CatchingContextBase ctx)",
      "bool RollChance()",
      "float RollChanceSeeded()"
    ]
  },
  "CatchYieldBank": {
    "parent": null,
    "methods": [
      "void CatchYieldBank()",
      "void Init()",
      "void RegisterYieldItem(YieldItemBase data)",
      "void UnregisterYieldItem(string yieldType)",
      "void ClearAllRegisteredItems()"
    ]
  },
  "YieldItemBase": {
    "parent": null,
    "methods": [
      "void YieldItemBase(int baseWeight)",
      "void Init()",
      "string GetType()",
      "int GetRegistrationIdx()",
      "void SetRegistrationIdx(int idx)",
      "int GetYieldWeight(CatchingContextBase ctx)",
      "int GetEnviroMask()",
      "int GetMethodMask()",
      "float GetBaitTypeSensitivity(ECatchingBaitCategories type)",
      "float GetQualityForYieldItem(CatchingContextBase ctx)",
      "void OnEntityYieldSpawned(EntityAI spawn)",
      "float GetChanceForYieldItem(CatchingContextBase ctx)",
      "string GetCatchDeathSoundset()",
      "string GetCatchAINoise()",
      "float GetCatchAINoiseBaseStrength()",
      "int GetCatchParticleID()"
    ]
  },
  "ArrowManagerBase": {
    "parent": null,
    "methods": [
      "void ArrowManagerBase(EntityAI owner)",
      "void AddArrow(EntityAI arrow)",
      "void RemoveArrow(EntityAI arrow)",
      "void ClearArrows()",
      "int GetArrowsCount()",
      "void DropArrow(int index)",
      "void DropFirstArrow()",
      "void DropAllArrows()"
    ]
  },
  "DynamicMusicLocationTypes": {
    "parent": null,
    "methods": [
      "void InsertLocation(vector min, vector max)",
      "void DynamicMusicPlayer(DynamicMusicPlayerRegistry configuration)",
      "void OnUpdate(float timeslice)",
      "void SetCategory(EDynamicMusicPlayerCategory category, bool forced)",
      "void RegisterDynamicLocation(notnull Entity caller, int locationType, float locationSize)",
      "void UnregisterDynamicLocation(notnull Entity caller)",
      "void OnGameEvent(EventType eventTypeId, Param params)",
      "bool IsPriotitizedCategorySelected()",
      "void DetermineTrackByCategory(EDynamicMusicPlayerCategory category)",
      "bool IsPlaybackActive()",
      "void OnProfileOptionChanged(EDayZProfilesOptions option, int value)",
      "void OnCategorySet(EDynamicMusicPlayerCategory category, bool forced)",
      "void OnTrackEnded()",
      "void OnTrackStopped()",
      "void OnNextTrackSelected(DynamicMusicTrackData track, float waitTime)",
      "void OnLocationMatched(EDynamicMusicPlayerCategory category, bool isPriorityLocation)",
      "void OnFadeoutFinished(EDynamicMusicPlayerCategory category)",
      "void PlayTrack(DynamicMusicTrackData track)",
      "void StopTrack()",
      "void ResetWaitingQueue()",
      "void FadeoutTrack(float fadeoutSeconds)",
      "void ProcessFadeOut()",
      "bool PlayerInsideOfLocationFilter(array<ref DynamicMusicTrackData> locations)",
      "bool PlayerInsideOfLocationFilter(map<int, ref DynamicMusicLocationDynamicData> locations)",
      "bool SetSelectedTrackFromCategory(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracklist, int historyLookupType = DynamicMusicPlayerTrackHistoryLookupType.ANY)",
      "int SelectRandomTrackIndexFromCategoryPriorityFlagFirst(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracks)",
      "int SelectRandomTrackIndexFromCategory(EDynamicMusicPlayerCategory category, int lookupType, notnull array<ref DynamicMusicTrackData> tracks)",
      "void SetTimeOfDate()",
      "float GetWaitTimeForCategory(EDynamicMusicPlayerCategory category)",
      "float GetMinWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetMaxWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetPreviousTrackFadeoutSeconds(EDynamicMusicPlayerCategory category)",
      "void RefreshTracksCache()",
      "void DisplayDebugStats(bool enabled)",
      "void DisplayStaticLocations(bool enabled)",
      "void DrawPolygonLocation(notnull DynamicMusicTrackData track)",
      "void DMPDebugPrint(string message)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "DynamicMusicLocationShape": {
    "parent": null,
    "methods": [
      "void InsertLocation(vector min, vector max)",
      "void DynamicMusicPlayer(DynamicMusicPlayerRegistry configuration)",
      "void OnUpdate(float timeslice)",
      "void SetCategory(EDynamicMusicPlayerCategory category, bool forced)",
      "void RegisterDynamicLocation(notnull Entity caller, int locationType, float locationSize)",
      "void UnregisterDynamicLocation(notnull Entity caller)",
      "void OnGameEvent(EventType eventTypeId, Param params)",
      "bool IsPriotitizedCategorySelected()",
      "void DetermineTrackByCategory(EDynamicMusicPlayerCategory category)",
      "bool IsPlaybackActive()",
      "void OnProfileOptionChanged(EDayZProfilesOptions option, int value)",
      "void OnCategorySet(EDynamicMusicPlayerCategory category, bool forced)",
      "void OnTrackEnded()",
      "void OnTrackStopped()",
      "void OnNextTrackSelected(DynamicMusicTrackData track, float waitTime)",
      "void OnLocationMatched(EDynamicMusicPlayerCategory category, bool isPriorityLocation)",
      "void OnFadeoutFinished(EDynamicMusicPlayerCategory category)",
      "void PlayTrack(DynamicMusicTrackData track)",
      "void StopTrack()",
      "void ResetWaitingQueue()",
      "void FadeoutTrack(float fadeoutSeconds)",
      "void ProcessFadeOut()",
      "bool PlayerInsideOfLocationFilter(array<ref DynamicMusicTrackData> locations)",
      "bool PlayerInsideOfLocationFilter(map<int, ref DynamicMusicLocationDynamicData> locations)",
      "bool SetSelectedTrackFromCategory(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracklist, int historyLookupType = DynamicMusicPlayerTrackHistoryLookupType.ANY)",
      "int SelectRandomTrackIndexFromCategoryPriorityFlagFirst(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracks)",
      "int SelectRandomTrackIndexFromCategory(EDynamicMusicPlayerCategory category, int lookupType, notnull array<ref DynamicMusicTrackData> tracks)",
      "void SetTimeOfDate()",
      "float GetWaitTimeForCategory(EDynamicMusicPlayerCategory category)",
      "float GetMinWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetMaxWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetPreviousTrackFadeoutSeconds(EDynamicMusicPlayerCategory category)",
      "void RefreshTracksCache()",
      "void DisplayDebugStats(bool enabled)",
      "void DisplayStaticLocations(bool enabled)",
      "void DrawPolygonLocation(notnull DynamicMusicTrackData track)",
      "void DMPDebugPrint(string message)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "DynamicMusicLocationDynamicData": {
    "parent": null,
    "methods": [
      "void InsertLocation(vector min, vector max)",
      "void DynamicMusicPlayer(DynamicMusicPlayerRegistry configuration)",
      "void OnUpdate(float timeslice)",
      "void SetCategory(EDynamicMusicPlayerCategory category, bool forced)",
      "void RegisterDynamicLocation(notnull Entity caller, int locationType, float locationSize)",
      "void UnregisterDynamicLocation(notnull Entity caller)",
      "void OnGameEvent(EventType eventTypeId, Param params)",
      "bool IsPriotitizedCategorySelected()",
      "void DetermineTrackByCategory(EDynamicMusicPlayerCategory category)",
      "bool IsPlaybackActive()",
      "void OnProfileOptionChanged(EDayZProfilesOptions option, int value)",
      "void OnCategorySet(EDynamicMusicPlayerCategory category, bool forced)",
      "void OnTrackEnded()",
      "void OnTrackStopped()",
      "void OnNextTrackSelected(DynamicMusicTrackData track, float waitTime)",
      "void OnLocationMatched(EDynamicMusicPlayerCategory category, bool isPriorityLocation)",
      "void OnFadeoutFinished(EDynamicMusicPlayerCategory category)",
      "void PlayTrack(DynamicMusicTrackData track)",
      "void StopTrack()",
      "void ResetWaitingQueue()",
      "void FadeoutTrack(float fadeoutSeconds)",
      "void ProcessFadeOut()",
      "bool PlayerInsideOfLocationFilter(array<ref DynamicMusicTrackData> locations)",
      "bool PlayerInsideOfLocationFilter(map<int, ref DynamicMusicLocationDynamicData> locations)",
      "bool SetSelectedTrackFromCategory(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracklist, int historyLookupType = DynamicMusicPlayerTrackHistoryLookupType.ANY)",
      "int SelectRandomTrackIndexFromCategoryPriorityFlagFirst(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracks)",
      "int SelectRandomTrackIndexFromCategory(EDynamicMusicPlayerCategory category, int lookupType, notnull array<ref DynamicMusicTrackData> tracks)",
      "void SetTimeOfDate()",
      "float GetWaitTimeForCategory(EDynamicMusicPlayerCategory category)",
      "float GetMinWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetMaxWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetPreviousTrackFadeoutSeconds(EDynamicMusicPlayerCategory category)",
      "void RefreshTracksCache()",
      "void DisplayDebugStats(bool enabled)",
      "void DisplayStaticLocations(bool enabled)",
      "void DrawPolygonLocation(notnull DynamicMusicTrackData track)",
      "void DMPDebugPrint(string message)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "DynamicMusicPlayerSettings": {
    "parent": null,
    "methods": [
      "void InsertLocation(vector min, vector max)",
      "void DynamicMusicPlayer(DynamicMusicPlayerRegistry configuration)",
      "void OnUpdate(float timeslice)",
      "void SetCategory(EDynamicMusicPlayerCategory category, bool forced)",
      "void RegisterDynamicLocation(notnull Entity caller, int locationType, float locationSize)",
      "void UnregisterDynamicLocation(notnull Entity caller)",
      "void OnGameEvent(EventType eventTypeId, Param params)",
      "bool IsPriotitizedCategorySelected()",
      "void DetermineTrackByCategory(EDynamicMusicPlayerCategory category)",
      "bool IsPlaybackActive()",
      "void OnProfileOptionChanged(EDayZProfilesOptions option, int value)",
      "void OnCategorySet(EDynamicMusicPlayerCategory category, bool forced)",
      "void OnTrackEnded()",
      "void OnTrackStopped()",
      "void OnNextTrackSelected(DynamicMusicTrackData track, float waitTime)",
      "void OnLocationMatched(EDynamicMusicPlayerCategory category, bool isPriorityLocation)",
      "void OnFadeoutFinished(EDynamicMusicPlayerCategory category)",
      "void PlayTrack(DynamicMusicTrackData track)",
      "void StopTrack()",
      "void ResetWaitingQueue()",
      "void FadeoutTrack(float fadeoutSeconds)",
      "void ProcessFadeOut()",
      "bool PlayerInsideOfLocationFilter(array<ref DynamicMusicTrackData> locations)",
      "bool PlayerInsideOfLocationFilter(map<int, ref DynamicMusicLocationDynamicData> locations)",
      "bool SetSelectedTrackFromCategory(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracklist, int historyLookupType = DynamicMusicPlayerTrackHistoryLookupType.ANY)",
      "int SelectRandomTrackIndexFromCategoryPriorityFlagFirst(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracks)",
      "int SelectRandomTrackIndexFromCategory(EDynamicMusicPlayerCategory category, int lookupType, notnull array<ref DynamicMusicTrackData> tracks)",
      "void SetTimeOfDate()",
      "float GetWaitTimeForCategory(EDynamicMusicPlayerCategory category)",
      "float GetMinWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetMaxWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetPreviousTrackFadeoutSeconds(EDynamicMusicPlayerCategory category)",
      "void RefreshTracksCache()",
      "void DisplayDebugStats(bool enabled)",
      "void DisplayStaticLocations(bool enabled)",
      "void DrawPolygonLocation(notnull DynamicMusicTrackData track)",
      "void DMPDebugPrint(string message)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "DynamicMusicTrackData": {
    "parent": null,
    "methods": [
      "void InsertLocation(vector min, vector max)",
      "void DynamicMusicPlayer(DynamicMusicPlayerRegistry configuration)",
      "void OnUpdate(float timeslice)",
      "void SetCategory(EDynamicMusicPlayerCategory category, bool forced)",
      "void RegisterDynamicLocation(notnull Entity caller, int locationType, float locationSize)",
      "void UnregisterDynamicLocation(notnull Entity caller)",
      "void OnGameEvent(EventType eventTypeId, Param params)",
      "bool IsPriotitizedCategorySelected()",
      "void DetermineTrackByCategory(EDynamicMusicPlayerCategory category)",
      "bool IsPlaybackActive()",
      "void OnProfileOptionChanged(EDayZProfilesOptions option, int value)",
      "void OnCategorySet(EDynamicMusicPlayerCategory category, bool forced)",
      "void OnTrackEnded()",
      "void OnTrackStopped()",
      "void OnNextTrackSelected(DynamicMusicTrackData track, float waitTime)",
      "void OnLocationMatched(EDynamicMusicPlayerCategory category, bool isPriorityLocation)",
      "void OnFadeoutFinished(EDynamicMusicPlayerCategory category)",
      "void PlayTrack(DynamicMusicTrackData track)",
      "void StopTrack()",
      "void ResetWaitingQueue()",
      "void FadeoutTrack(float fadeoutSeconds)",
      "void ProcessFadeOut()",
      "bool PlayerInsideOfLocationFilter(array<ref DynamicMusicTrackData> locations)",
      "bool PlayerInsideOfLocationFilter(map<int, ref DynamicMusicLocationDynamicData> locations)",
      "bool SetSelectedTrackFromCategory(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracklist, int historyLookupType = DynamicMusicPlayerTrackHistoryLookupType.ANY)",
      "int SelectRandomTrackIndexFromCategoryPriorityFlagFirst(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracks)",
      "int SelectRandomTrackIndexFromCategory(EDynamicMusicPlayerCategory category, int lookupType, notnull array<ref DynamicMusicTrackData> tracks)",
      "void SetTimeOfDate()",
      "float GetWaitTimeForCategory(EDynamicMusicPlayerCategory category)",
      "float GetMinWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetMaxWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetPreviousTrackFadeoutSeconds(EDynamicMusicPlayerCategory category)",
      "void RefreshTracksCache()",
      "void DisplayDebugStats(bool enabled)",
      "void DisplayStaticLocations(bool enabled)",
      "void DrawPolygonLocation(notnull DynamicMusicTrackData track)",
      "void DMPDebugPrint(string message)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "DynamicMusicPlayerTrackHistoryLookupType": {
    "parent": null,
    "methods": [
      "void DynamicMusicPlayer(DynamicMusicPlayerRegistry configuration)",
      "void OnUpdate(float timeslice)",
      "void SetCategory(EDynamicMusicPlayerCategory category, bool forced)",
      "void RegisterDynamicLocation(notnull Entity caller, int locationType, float locationSize)",
      "void UnregisterDynamicLocation(notnull Entity caller)",
      "void OnGameEvent(EventType eventTypeId, Param params)",
      "bool IsPriotitizedCategorySelected()",
      "void DetermineTrackByCategory(EDynamicMusicPlayerCategory category)",
      "bool IsPlaybackActive()",
      "void OnProfileOptionChanged(EDayZProfilesOptions option, int value)",
      "void OnCategorySet(EDynamicMusicPlayerCategory category, bool forced)",
      "void OnTrackEnded()",
      "void OnTrackStopped()",
      "void OnNextTrackSelected(DynamicMusicTrackData track, float waitTime)",
      "void OnLocationMatched(EDynamicMusicPlayerCategory category, bool isPriorityLocation)",
      "void OnFadeoutFinished(EDynamicMusicPlayerCategory category)",
      "void PlayTrack(DynamicMusicTrackData track)",
      "void StopTrack()",
      "void ResetWaitingQueue()",
      "void FadeoutTrack(float fadeoutSeconds)",
      "void ProcessFadeOut()",
      "bool PlayerInsideOfLocationFilter(array<ref DynamicMusicTrackData> locations)",
      "bool PlayerInsideOfLocationFilter(map<int, ref DynamicMusicLocationDynamicData> locations)",
      "bool SetSelectedTrackFromCategory(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracklist, int historyLookupType = DynamicMusicPlayerTrackHistoryLookupType.ANY)",
      "int SelectRandomTrackIndexFromCategoryPriorityFlagFirst(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracks)",
      "int SelectRandomTrackIndexFromCategory(EDynamicMusicPlayerCategory category, int lookupType, notnull array<ref DynamicMusicTrackData> tracks)",
      "void SetTimeOfDate()",
      "float GetWaitTimeForCategory(EDynamicMusicPlayerCategory category)",
      "float GetMinWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetMaxWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetPreviousTrackFadeoutSeconds(EDynamicMusicPlayerCategory category)",
      "void RefreshTracksCache()",
      "void DisplayDebugStats(bool enabled)",
      "void DisplayStaticLocations(bool enabled)",
      "void DrawPolygonLocation(notnull DynamicMusicTrackData track)",
      "void DMPDebugPrint(string message)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "DynamicMusicPlayer": {
    "parent": null,
    "methods": [
      "void DynamicMusicPlayer(DynamicMusicPlayerRegistry configuration)",
      "void OnUpdate(float timeslice)",
      "void SetCategory(EDynamicMusicPlayerCategory category, bool forced)",
      "void RegisterDynamicLocation(notnull Entity caller, int locationType, float locationSize)",
      "void UnregisterDynamicLocation(notnull Entity caller)",
      "void OnGameEvent(EventType eventTypeId, Param params)",
      "bool IsPriotitizedCategorySelected()",
      "void DetermineTrackByCategory(EDynamicMusicPlayerCategory category)",
      "bool IsPlaybackActive()",
      "void OnProfileOptionChanged(EDayZProfilesOptions option, int value)",
      "void OnCategorySet(EDynamicMusicPlayerCategory category, bool forced)",
      "void OnTrackEnded()",
      "void OnTrackStopped()",
      "void OnNextTrackSelected(DynamicMusicTrackData track, float waitTime)",
      "void OnLocationMatched(EDynamicMusicPlayerCategory category, bool isPriorityLocation)",
      "void OnFadeoutFinished(EDynamicMusicPlayerCategory category)",
      "void PlayTrack(DynamicMusicTrackData track)",
      "void StopTrack()",
      "void ResetWaitingQueue()",
      "void FadeoutTrack(float fadeoutSeconds)",
      "void ProcessFadeOut()",
      "bool PlayerInsideOfLocationFilter(array<ref DynamicMusicTrackData> locations)",
      "bool PlayerInsideOfLocationFilter(map<int, ref DynamicMusicLocationDynamicData> locations)",
      "bool SetSelectedTrackFromCategory(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracklist, int historyLookupType = DynamicMusicPlayerTrackHistoryLookupType.ANY)",
      "int SelectRandomTrackIndexFromCategoryPriorityFlagFirst(EDynamicMusicPlayerCategory category, notnull array<ref DynamicMusicTrackData> tracks)",
      "int SelectRandomTrackIndexFromCategory(EDynamicMusicPlayerCategory category, int lookupType, notnull array<ref DynamicMusicTrackData> tracks)",
      "void SetTimeOfDate()",
      "float GetWaitTimeForCategory(EDynamicMusicPlayerCategory category)",
      "float GetMinWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetMaxWaitTimePerCategory(EDynamicMusicPlayerCategory category)",
      "float GetPreviousTrackFadeoutSeconds(EDynamicMusicPlayerCategory category)",
      "void RefreshTracksCache()",
      "void DisplayDebugStats(bool enabled)",
      "void DisplayStaticLocations(bool enabled)",
      "void DrawPolygonLocation(notnull DynamicMusicTrackData track)",
      "void DMPDebugPrint(string message)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "DynamicMusicPlayerTimeOfDay": {
    "parent": null,
    "methods": []
  },
  "DynamicMusicPlayerRegistry": {
    "parent": null,
    "methods": [
      "void DynamicMusicPlayerRegistry()",
      "void PreloadData()",
      "void RegisterCategorySettings()",
      "void RegisterGlobalSettings()",
      "void RegisterMenuSettings()",
      "void RegisterTimeSettings()",
      "void RegisterLocationStaticSettings()",
      "void RegisterLocationDynamicSettings()",
      "void RegisterTracksMenu()",
      "void RegisterTracksTime()",
      "void RegisterTracksLocationStatic()",
      "void RegisterTracksLocationDynamic()",
      "void RegisterTrackMenu(string soundSetName, bool hasPriority = false, int timeOfDay = DynamicMusicPlayerTimeOfDay.ANY)",
      "void RegisterTrackTime(string soundSetName, int timeOfDay = DynamicMusicPlayerTimeOfDay.ANY)",
      "void RegisterTrackLocationStatic(string soundSetName, vector start, vector end, int timeOfDay = DynamicMusicPlayerTimeOfDay.ANY, bool runImmediately = false)",
      "void RegisterTrackLocationStaticMultiRectangle(string soundSetName, array<ref TVectorArray> locationBoundaries, int timeOfDay = DynamicMusicPlayerTimeOfDay.ANY, bool runImmediately = false)",
      "void RegisterTrackLocationStaticPoints(string soundSetName, array<vector> vertices, int timeOfDay = DynamicMusicPlayerTimeOfDay.ANY, bool runImmediately = false)",
      "void RegisterTrackLocationDynamic(string soundSetName, int locationType = DynamicMusicLocationTypes.NONE, int timeOfDay = DynamicMusicPlayerTimeOfDay.ANY)"
    ]
  },
  "DynamicMusicPlayerRegistryChernarus": {
    "parent": null,
    "methods": [
      "void DynamicMusicPlayerRegistryChernarus()",
      "void RegisterTracksLocationStatic()"
    ]
  },
  "DynamicMusicPlayerRegistryEnoch": {
    "parent": null,
    "methods": [
      "void DynamicMusicPlayerRegistryEnoch()",
      "void RegisterTracksLocationStatic()"
    ]
  },
  "DynamicMusicPlayerRegistrySakhal": {
    "parent": null,
    "methods": [
      "void DynamicMusicPlayerRegistrySakhal()",
      "void RegisterTracksLocationStatic()"
    ]
  },
  "BuildingInventory": {
    "parent": null,
    "methods": []
  },
  "CargoBase": {
    "parent": null,
    "methods": [
      "int GetOwnerCargoIndex()",
      "bool IsProxyCargo()",
      "int GetItemCount()",
      "int GetWidth()",
      "int GetHeight()",
      "bool GetItemRowCol(int index, out int row, out int col)",
      "bool GetItemSize(int index, out int w, out int h)",
      "int FindEntityInCargo(notnull EntityAI e)",
      "void CargoBase()",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanSwapItemInCargo(EntityAI child_entity, EntityAI new_entity)",
      "int GetUserReservedLocationCount()",
      "bool GetUserReservedLocation(int index, out EntityAI eai, out int row, out int col, out int w, out int h, out int flp)",
      "void SetUserReservedLocation(notnull EntityAI eai)",
      "void ClearUserReservedLocation(notnull EntityAI eai)",
      "int GetMaxWeight()",
      "int GetTotalWeight(EntityAI item)",
      "bool CanFitItemIntoCargo(EntityAI cargo)",
      "bool CanFitSwappedItemInCargo(EntityAI child_entity, EntityAI new_entity)"
    ]
  },
  "CargoList": {
    "parent": null,
    "methods": [
      "int GetMaxWeight()",
      "int GetTotalWeight(EntityAI item)",
      "bool CanFitItemIntoCargo(EntityAI cargo)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanFitSwappedItemInCargo(EntityAI child_entity, EntityAI new_entity)",
      "bool CanSwapItemInCargo(EntityAI child_entity, EntityAI new_entity)"
    ]
  },
  "CargoGrid": {
    "parent": null,
    "methods": []
  },
  "HandAnimatedMoveToDst_W4T_Basic": {
    "parent": "HandStateBase",
    "methods": [
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void HandForceSwapingAnimated_Show(Man player = null, HandStateBase parent = null, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void HandAnimatedForceSwapping(Man player = null, HandStateBase parent = null)",
      "void HandAnimatedForceSwapping_Inst(Man player = null, HandStateBase parent = null)"
    ]
  },
  "HandForceSwappingAnimated_Show": {
    "parent": "HandStartAction",
    "methods": [
      "void HandForceSwapingAnimated_Show(Man player = null, HandStateBase parent = null, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void HandAnimatedForceSwapping(Man player = null, HandStateBase parent = null)",
      "void HandAnimatedForceSwapping_Inst(Man player = null, HandStateBase parent = null)"
    ]
  },
  "HandAnimatedForceSwapping": {
    "parent": "HandStateBase",
    "methods": [
      "void HandAnimatedForceSwapping(Man player = null, HandStateBase parent = null)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "void HandAnimatedForceSwapping_Inst(Man player = null, HandStateBase parent = null)"
    ]
  },
  "HandAnimatedForceSwapping_Inst": {
    "parent": "HandStateBase",
    "methods": [
      "void HandAnimatedForceSwapping_Inst(Man player = null, HandStateBase parent = null)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)"
    ]
  },
  "HandStartHidingAnimated": {
    "parent": "HandStartAction",
    "methods": [
      "void HandStartHidingAnimated(Man player = null, HandStateBase parent = null, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void HandAnimatedMovingToAtt(Man player = null, HandStateBase parent = null)"
    ]
  },
  "HandAnimatedMoveToDst_W4T": {
    "parent": "HandStartAction",
    "methods": [
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void HandAnimatedMovingToAtt(Man player = null, HandStateBase parent = null)"
    ]
  },
  "HandAnimatedMovingToAtt": {
    "parent": "HandStateBase",
    "methods": [
      "void HandAnimatedMovingToAtt(Man player = null, HandStateBase parent = null)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)"
    ]
  },
  "HandSwappingAnimated_Show": {
    "parent": "HandForceSwappingAnimated_Show",
    "methods": [
      "void HandAnimatedSwapping(Man player = null, HandStateBase parent = null)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)"
    ]
  },
  "HandAnimatedSwapping": {
    "parent": "HandStateBase",
    "methods": [
      "void HandAnimatedSwapping(Man player = null, HandStateBase parent = null)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)"
    ]
  },
  "HandTakingAnimated_Hide": {
    "parent": "HandStartAction",
    "methods": [
      "void HandTakingAnimated_Show(Man player = null, HandStateBase parent = null, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void HandAnimatedTakingFromAtt(Man player = null, HandStateBase parent = null)"
    ]
  },
  "HandTakingAnimated_Show": {
    "parent": "HandStartAction",
    "methods": [
      "void HandTakingAnimated_Show(Man player = null, HandStateBase parent = null, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void HandAnimatedTakingFromAtt(Man player = null, HandStateBase parent = null)"
    ]
  },
  "HandAnimatedTakingFromAtt": {
    "parent": "HandStateBase",
    "methods": [
      "void HandAnimatedTakingFromAtt(Man player = null, HandStateBase parent = null)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)"
    ]
  },
  "HandSelectAnimationOfTakeToHandsEvent": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandSelectAnimationOfTakeToHandsEvent(Man p = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandSelectAnimationOfMoveFromHandsEvent(Man p = null)",
      "void HandSelectAnimationOfForceSwapInHandsEvent(Man p = NULL)",
      "bool ProcessSwapEvent(notnull HandEventBase e, out int animType1, out int animType2)"
    ]
  },
  "HandSelectAnimationOfMoveFromHandsEvent": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandSelectAnimationOfMoveFromHandsEvent(Man p = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandSelectAnimationOfForceSwapInHandsEvent(Man p = NULL)",
      "bool ProcessSwapEvent(notnull HandEventBase e, out int animType1, out int animType2)"
    ]
  },
  "HandSelectAnimationOfForceSwapInHandsEvent": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandSelectAnimationOfForceSwapInHandsEvent(Man p = NULL)",
      "bool ProcessSwapEvent(notnull HandEventBase e, out int animType1, out int animType2)",
      "bool GuardCondition(HandEventBase e)"
    ]
  },
  "HandSelectAnimationOfSwapInHandsEvent": {
    "parent": "HandSelectAnimationOfForceSwapInHandsEvent",
    "methods": [
      "bool GuardCondition(HandEventBase e)"
    ]
  },
  "HandFSM": {
    "parent": "HFSMBase",
    "methods": [
      "int GetCurrentStateID()",
      "bool SyncStateFromID(int id)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void NetSyncCurrentStateID(int id)"
    ]
  },
  "HandStartReplacingItemElsewhereWithNewInHands": {
    "parent": "HandStateBase",
    "methods": [
      "void HandStartReplacingItemElsewhereWithNewInHands(Man player = NULL, HandStateBase parent = NULL)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void HandReplacingItemElsewhereWithNewInHands(Man player = NULL, HandStateBase parent = NULL)"
    ]
  },
  "HandReplacingItemElsewhereWithNewInHands": {
    "parent": "HandStateBase",
    "methods": [
      "void HandReplacingItemElsewhereWithNewInHands(Man player = NULL, HandStateBase parent = NULL)"
    ]
  },
  "HandStartReplacingItemInHands": {
    "parent": "HandStateBase",
    "methods": [
      "void HandStartReplacingItemInHands(Man player = NULL, HandStateBase parent = NULL)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void HandReplacingItemInHands(Man player = NULL, HandStateBase parent = NULL)"
    ]
  },
  "HandReplacingItemInHands": {
    "parent": "HandStateBase",
    "methods": [
      "void HandReplacingItemInHands(Man player = NULL, HandStateBase parent = NULL)",
      "void OnEntry(HandEventBase e)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)"
    ]
  },
  "HandStableState": {
    "parent": "HandStateBase",
    "methods": [
      "void HandStableState(Man player = NULL, HandStateBase parent = NULL, int anim_state = -1)",
      "void SyncAnimState()",
      "void OnEntry(HandEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsIdle()",
      "int GetCurrentStateID()",
      "bool HasEntityInHands()"
    ]
  },
  "HandStartAction": {
    "parent": "HandStateBase",
    "methods": [
      "void HandStartAction(Man player = NULL, HandStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsIdle()"
    ]
  },
  "HandStateBase": {
    "parent": null,
    "methods": [
      "void HandStateBase(Man player = NULL, HandStateBase parent = NULL)",
      "void SetparentState(HandStateBase parent)",
      "bool HasFSM()",
      "bool ProcessEvent(HandEventBase e)",
      "void AddTransition(HandTransition t)",
      "void OnEntry(HandEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "bool IsWaitingForActionFinish()",
      "bool IsIdle()",
      "void OnSubMachineChanged(HandStateBase src, HandStateBase dst)",
      "void OnStateChanged(HandStateBase src, HandStateBase dst)"
    ]
  },
  "HandActionBase": {
    "parent": null,
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionCreated": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionTake": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionDrop": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionThrow": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionMoveTo": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionDestroy": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionDestroyed": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionDestroyAndReplaceWithNew": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionDestroyAndReplaceWithNewElsewhere": {
    "parent": "HandActionDestroyAndReplaceWithNew",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionReplaced": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionSwap": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandActionForceSwap": {
    "parent": "HandActionBase",
    "methods": [
      "void Action(HandEventBase e)"
    ]
  },
  "HandEventBase": {
    "parent": null,
    "methods": [
      "void HandEventBase(Man p = null, InventoryLocation src = null)",
      "bool IsAuthoritative()",
      "bool IsOwner()",
      "bool IsProxy()",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "int GetAnimationID()",
      "bool AcquireInventoryJunctureFromServer(notnull Man player)",
      "bool CheckRequest()",
      "bool CheckRequestEx(InventoryValidation validation)",
      "bool CanPerformEvent()",
      "bool CanPerformEventEx(InventoryValidation validation)",
      "bool CheckRequestSrc()",
      "bool IsServerSideOnly()",
      "string DumpToString()",
      "bool ReserveInventory()",
      "void ClearInventoryReservation()",
      "void HandEventTake(Man p = null, InventoryLocation src = null)",
      "void HandEventMoveTo(Man p = null, InventoryLocation src = null, InventoryLocation dst = null)",
      "void HandEventDrop(Man p = null, InventoryLocation src = null)",
      "void HandEventThrow(Man p = null, InventoryLocation src = null)",
      "void SetForce(vector force)",
      "void HandEventSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void CheckAndExecuteForceStandUp()",
      "void HandEventForceSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void HandEventDestroy(Man p = null, InventoryLocation src = null)",
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventTake": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEventTake(Man p = null, InventoryLocation src = null)",
      "bool CheckRequestSrc()",
      "bool CheckRequest()",
      "bool CanPerformEventEx(InventoryValidation validation)",
      "bool AcquireInventoryJunctureFromServer(notnull Man player)",
      "void HandEventMoveTo(Man p = null, InventoryLocation src = null, InventoryLocation dst = null)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "bool CanPerformEvent()",
      "string DumpToString()",
      "void HandEventDrop(Man p = null, InventoryLocation src = null)",
      "bool CheckRequestEx(InventoryValidation validation)",
      "void HandEventThrow(Man p = null, InventoryLocation src = null)",
      "void SetForce(vector force)",
      "void HandEventSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void CheckAndExecuteForceStandUp()",
      "bool ReserveInventory()",
      "void ClearInventoryReservation()",
      "void HandEventForceSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void HandEventDestroy(Man p = null, InventoryLocation src = null)",
      "bool IsServerSideOnly()",
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventMoveTo": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEventMoveTo(Man p = null, InventoryLocation src = null, InventoryLocation dst = null)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "bool CheckRequestSrc()",
      "bool CheckRequest()",
      "bool CanPerformEvent()",
      "bool AcquireInventoryJunctureFromServer(notnull Man player)",
      "string DumpToString()",
      "void HandEventDrop(Man p = null, InventoryLocation src = null)",
      "bool CheckRequestEx(InventoryValidation validation)",
      "bool CanPerformEventEx(InventoryValidation validation)",
      "void HandEventThrow(Man p = null, InventoryLocation src = null)",
      "void SetForce(vector force)",
      "void HandEventSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void CheckAndExecuteForceStandUp()",
      "bool ReserveInventory()",
      "void ClearInventoryReservation()",
      "void HandEventForceSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void HandEventDestroy(Man p = null, InventoryLocation src = null)",
      "bool IsServerSideOnly()",
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventRemove": {
    "parent": "HandEventBase",
    "methods": [
      "bool CheckRequestSrc()",
      "bool CheckRequest()",
      "bool CanPerformEvent()",
      "bool AcquireInventoryJunctureFromServer(notnull Man player)",
      "void HandEventDrop(Man p = null, InventoryLocation src = null)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "bool CheckRequestEx(InventoryValidation validation)",
      "bool CanPerformEventEx(InventoryValidation validation)",
      "void HandEventThrow(Man p = null, InventoryLocation src = null)",
      "void SetForce(vector force)",
      "void HandEventSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "string DumpToString()",
      "void CheckAndExecuteForceStandUp()",
      "bool ReserveInventory()",
      "void ClearInventoryReservation()",
      "void HandEventForceSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void HandEventDestroy(Man p = null, InventoryLocation src = null)",
      "bool IsServerSideOnly()",
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventDrop": {
    "parent": "HandEventRemove",
    "methods": [
      "void HandEventDrop(Man p = null, InventoryLocation src = null)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "bool CheckRequestEx(InventoryValidation validation)",
      "bool CanPerformEventEx(InventoryValidation validation)",
      "void HandEventThrow(Man p = null, InventoryLocation src = null)",
      "void SetForce(vector force)",
      "void HandEventSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "bool CheckRequestSrc()",
      "bool CheckRequest()",
      "bool CanPerformEvent()",
      "bool AcquireInventoryJunctureFromServer(notnull Man player)",
      "string DumpToString()",
      "void CheckAndExecuteForceStandUp()",
      "bool ReserveInventory()",
      "void ClearInventoryReservation()",
      "void HandEventForceSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void HandEventDestroy(Man p = null, InventoryLocation src = null)",
      "bool IsServerSideOnly()",
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventThrow": {
    "parent": "HandEventRemove",
    "methods": [
      "void HandEventThrow(Man p = null, InventoryLocation src = null)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void SetForce(vector force)",
      "void HandEventSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "bool CheckRequestSrc()",
      "bool CheckRequest()",
      "bool CanPerformEvent()",
      "bool AcquireInventoryJunctureFromServer(notnull Man player)",
      "string DumpToString()",
      "void CheckAndExecuteForceStandUp()",
      "bool ReserveInventory()",
      "void ClearInventoryReservation()",
      "void HandEventForceSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void HandEventDestroy(Man p = null, InventoryLocation src = null)",
      "bool IsServerSideOnly()",
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventSwap": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEventSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "bool CheckRequestSrc()",
      "bool CheckRequest()",
      "bool CanPerformEvent()",
      "bool AcquireInventoryJunctureFromServer(notnull Man player)",
      "string DumpToString()",
      "void CheckAndExecuteForceStandUp()",
      "bool ReserveInventory()",
      "void ClearInventoryReservation()",
      "void HandEventForceSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "void HandEventDestroy(Man p = null, InventoryLocation src = null)",
      "bool IsServerSideOnly()",
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventForceSwap": {
    "parent": "HandEventSwap",
    "methods": [
      "void HandEventForceSwap(Man p = null, InventoryLocation src = null, InventoryLocation src2 = null, InventoryLocation dst = null, InventoryLocation dst2 = null)",
      "bool CheckRequest()",
      "bool CanPerformEvent()",
      "void HandEventDestroy(Man p = null, InventoryLocation src = null)",
      "bool IsServerSideOnly()",
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "string DumpToString()",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventDestroy": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEventDestroy(Man p = null, InventoryLocation src = null)",
      "bool IsServerSideOnly()",
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "string DumpToString()",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventCreated": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEventCreated(Man p = null, InventoryLocation src = null)",
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "bool IsServerSideOnly()",
      "string DumpToString()",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventDestroyed": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEventDestroyed(Man p = null, InventoryLocation src = null)",
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "bool IsServerSideOnly()",
      "string DumpToString()",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventReplaceWithNewBase": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEvengReplaceWithNewBase(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "bool IsServerSideOnly()",
      "string DumpToString()",
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventDestroyAndReplaceWithNew": {
    "parent": "HandEventReplaceWithNewBase",
    "methods": [
      "void HandEventDestroyAndReplaceWithNew(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventDestroyAndReplaceWithNewElsewhere": {
    "parent": "HandEventDestroyAndReplaceWithNew",
    "methods": [
      "void HandEventDestroyAndReplaceWithNewElsewhere(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventDestroyElsewhereAndReplaceWithNewInHands": {
    "parent": "HandEventReplaceWithNewBase",
    "methods": [
      "void HandEventDestroyElsewhereAndReplaceWithNewInHands(Man p = null, InventoryLocation src = null, ReplaceItemWithNewLambdaBase lambda = NULL)",
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventReplaced": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEventReplaced(Man p = null, InventoryLocation src = null)",
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandAnimEventChanged": {
    "parent": "HandEventBase",
    "methods": [
      "void HandAnimEventChanged(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventHumanCommandActionFinished": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEventHumanCommandActionFinished(Man p = null, InventoryLocation src = null)",
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandEventHumanCommandActionAborted": {
    "parent": "HandEventBase",
    "methods": [
      "void HandEventHumanCommandActionAborted(Man p = null, InventoryLocation src = null)"
    ]
  },
  "HandGuardBase": {
    "parent": null,
    "methods": [
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardAnd(HandGuardBase arg0 = null, HandGuardBase arg1 = null)",
      "void HandGuardNot(HandGuardBase arg0 = null)",
      "void HandGuardOr(HandGuardBase arg0 = null, HandGuardBase arg1 = null)",
      "void HandGuardHasItemInEvent(Man p = null)",
      "void HandGuardHasWeapoonInEvent(Man p = null)",
      "void HandGuardIsSameItemInHands(Man p = null)",
      "void HandGuardHasDestroyedItemInHands(Man p = null)",
      "void HandGuardHasItemInHands(Man p = null)",
      "void HandGuardHasRoomForItem(Man p = null)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardAnd": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardAnd(HandGuardBase arg0 = null, HandGuardBase arg1 = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardNot(HandGuardBase arg0 = null)",
      "void HandGuardOr(HandGuardBase arg0 = null, HandGuardBase arg1 = null)",
      "void HandGuardHasItemInEvent(Man p = null)",
      "void HandGuardHasWeapoonInEvent(Man p = null)",
      "void HandGuardIsSameItemInHands(Man p = null)",
      "void HandGuardHasDestroyedItemInHands(Man p = null)",
      "void HandGuardHasItemInHands(Man p = null)",
      "void HandGuardHasRoomForItem(Man p = null)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardNot": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardNot(HandGuardBase arg0 = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardOr(HandGuardBase arg0 = null, HandGuardBase arg1 = null)",
      "void HandGuardHasItemInEvent(Man p = null)",
      "void HandGuardHasWeapoonInEvent(Man p = null)",
      "void HandGuardIsSameItemInHands(Man p = null)",
      "void HandGuardHasDestroyedItemInHands(Man p = null)",
      "void HandGuardHasItemInHands(Man p = null)",
      "void HandGuardHasRoomForItem(Man p = null)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardOr": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardOr(HandGuardBase arg0 = null, HandGuardBase arg1 = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardHasItemInEvent(Man p = null)",
      "void HandGuardHasWeapoonInEvent(Man p = null)",
      "void HandGuardIsSameItemInHands(Man p = null)",
      "void HandGuardHasDestroyedItemInHands(Man p = null)",
      "void HandGuardHasItemInHands(Man p = null)",
      "void HandGuardHasRoomForItem(Man p = null)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardHasItemInEvent": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardHasItemInEvent(Man p = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardHasWeapoonInEvent(Man p = null)",
      "void HandGuardIsSameItemInHands(Man p = null)",
      "void HandGuardHasDestroyedItemInHands(Man p = null)",
      "void HandGuardHasItemInHands(Man p = null)",
      "void HandGuardHasRoomForItem(Man p = null)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardHasWeaponInEvent": {
    "parent": "HandGuardHasItemInEvent",
    "methods": [
      "void HandGuardHasWeapoonInEvent(Man p = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardIsSameItemInHands(Man p = null)",
      "void HandGuardHasDestroyedItemInHands(Man p = null)",
      "void HandGuardHasItemInHands(Man p = null)",
      "void HandGuardHasRoomForItem(Man p = null)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardIsSameItemInHands": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardIsSameItemInHands(Man p = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardHasDestroyedItemInHands(Man p = null)",
      "void HandGuardHasItemInHands(Man p = null)",
      "void HandGuardHasRoomForItem(Man p = null)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardHasDestroyedItemInHands": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardHasDestroyedItemInHands(Man p = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardHasItemInHands(Man p = null)",
      "void HandGuardHasRoomForItem(Man p = null)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardHasItemInHands": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardHasItemInHands(Man p = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardHasRoomForItem(Man p = null)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardHasRoomForItem": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardHasRoomForItem(Man p = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardCanMove(Man p = null)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardCanMove": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardCanMove(Man p = null)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardCanSwap(Man p = NULL)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardCanSwap": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardCanSwap(Man p = NULL)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardCanForceSwap(Man p = NULL)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardCanForceSwap": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardCanForceSwap(Man p = NULL)",
      "bool GuardCondition(HandEventBase e)",
      "void HandGuardInstantForceSwap(Man p = NULL)"
    ]
  },
  "HandGuardInstantForceSwap": {
    "parent": "HandGuardBase",
    "methods": [
      "void HandGuardInstantForceSwap(Man p = NULL)",
      "bool GuardCondition(HandEventBase e)"
    ]
  },
  "HandStateEmpty": {
    "parent": null,
    "methods": [
      "void OnEntry(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "int GetCurrentStateID()"
    ]
  },
  "HandStateEquipped": {
    "parent": null,
    "methods": [
      "void OnEntry(HandEventBase e)",
      "void OnExit(HandEventBase e)",
      "int GetCurrentStateID()"
    ]
  },
  "HumanInventory": {
    "parent": null,
    "methods": [
      "bool CanAddEntityInHands(EntityAI e)",
      "bool TestAddEntityInHands(EntityAI e, bool do_resevation_check, bool do_item_check, bool do_lock_check, bool do_occupancy_test, bool do_script_check)",
      "bool CanRemoveEntityInHands()",
      "bool CanOpenInventory()",
      "int GetUserReservedLocationCount()",
      "int FindUserReservedLocationIndex(notnull EntityAI e)",
      "int FindCollidingUserReservedLocationIndex(notnull EntityAI e, notnull InventoryLocation dst)",
      "void GetUserReservedLocation(int index, out notnull InventoryLocation dst)",
      "int FindFirstUserReservedLocationIndexForContainer(notnull EntityAI e)",
      "void SetUserReservedLocation(notnull EntityAI eai, notnull InventoryLocation dst)",
      "void ClearUserReservedLocation(notnull EntityAI eai)",
      "bool ClearUserReservedLocationAtIndex(int index)",
      "void ClearUserReservedLocationForContainer(notnull EntityAI eai)",
      "bool GetDebugFlag()",
      "void ClearUserReservedLocationSynced(notnull EntityAI eai)",
      "void ClearUserReservedLocationAtIndexSynced(int index)",
      "bool HasEntityInHands(EntityAI e)",
      "bool ProcessHandEvent(HandEventBase e)",
      "void OnHandsStateChanged(HandStateBase src, HandStateBase dst)",
      "void OnHandsExitedStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsEnteredStableState(HandStateBase src, HandStateBase dst)",
      "void OnEntityInHandsCreated(InventoryLocation src)",
      "void OnEntityInHandsDestroyed(InventoryLocation src)",
      "bool HandEvent(InventoryMode mode, HandEventBase e)",
      "bool DropEntity(InventoryMode mode, EntityAI owner, notnull EntityAI item)",
      "bool ThrowEntity(EntityAI item, vector dir, float force)",
      "bool RedirectToHandEvent(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool TakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool TakeEntityToInventory(InventoryMode mode, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool TakeEntityToCargoEx(InventoryMode mode, notnull EntityAI item, int idx, int row, int col)",
      "bool TakeEntityAsAttachmentEx(InventoryMode mode, notnull EntityAI item, int slot)",
      "bool SwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool ForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "bool LocalDestroyEntity(notnull EntityAI item)",
      "bool ReplaceItemWithNew(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool ReplaceItemElsewhereWithNewInHands(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool ReplaceItemInElsewhereWithNewinHandsImpl(InventoryMode mode, HandEventBase e)",
      "bool ReplaceItemInHandsWithNewImpl(InventoryMode mode, HandEventBase e)",
      "bool ReplaceItemInHandsWithNew(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool ReplaceItemInHandsWithNewElsewhere(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool SwappingToPreviousLocation(EntityAI item1, EntityAI item2, out InventoryLocation dst)",
      "void HandleInventoryManipulation()",
      "void Update(float delta_time)",
      "bool ValidateUserReservationCancel(inout Serializer ctx, InventoryValidation validation)",
      "bool PostDeferredEventTakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PostDeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)"
    ]
  },
  "HumanInventoryWithFSM": {
    "parent": null,
    "methods": [
      "void HumanInventoryWithFSM()",
      "void CreateStableStates()",
      "void Init()",
      "bool CanProcessHandEvents()",
      "bool ProcessHandEvent(HandEventBase e)",
      "bool ProcessHandAbortEvent(HandEventBase e)",
      "void CheckFSMState()",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "int GetCurrentStateID()",
      "bool IsIdle()",
      "void NetSyncCurrentStateID(int id)"
    ]
  },
  "InventoryValidation": {
    "parent": null,
    "methods": [
      "bool IsAuthoritative()",
      "void DumpInventoryDebug()",
      "void DumpStaticInventoryDebug()",
      "bool HasEntityInInventory(notnull EntityAI item)",
      "bool EnumerateInventory(InventoryTraversalType tt, out array<EntityAI> items)",
      "int CountInventory()",
      "bool HasEntityInCargo(notnull EntityAI e)",
      "bool HasEntityInCargoEx(notnull EntityAI e, int idx, int row, int col)",
      "bool CanAddEntityInCargo(notnull EntityAI e, bool flip)",
      "bool CanAddEntityInCargoEx(notnull EntityAI e, int idx, int row, int col, bool flip)",
      "bool CanAddEntityInCargoExLoc(InventoryLocation loc)",
      "bool TestAddEntityInCargoEx(notnull EntityAI e, int idx, int row, int col, bool flip, bool do_resevation_check, bool do_item_check, bool do_lock_check, bool do_occupancy_test, bool do_script_check, bool do_script_load_check)",
      "bool TestAddEntityInCargoExLoc(notnull InventoryLocation loc, bool do_resevation_check, bool do_item_check, bool do_lock_check, bool do_occupancy_test, bool do_script_check, bool do_script_load_check)",
      "bool CanRemoveEntityInCargo(notnull EntityAI e)",
      "bool CanRemoveEntityInCargoEx(notnull EntityAI e, int idx, int row, int col)",
      "int GetSlotId(int index)",
      "int GetSlotIdCount()",
      "int GetAttachmentSlotId(int index)",
      "int GetAttachmentSlotsCount()",
      "bool HasAttachmentSlot(int slotId)",
      "bool HasInventorySlot(int slotId)",
      "int AttachmentCount()",
      "bool HasAttachment(notnull EntityAI e)",
      "bool HasAttachmentEx(notnull EntityAI e, int slot)",
      "bool CanAddAttachment(notnull EntityAI e)",
      "bool CanAddAttachmentEx(notnull EntityAI e, int slot)",
      "bool CanRemoveAttachment(EntityAI attachment)",
      "bool CanRemoveAttachmentEx(EntityAI attachment, int slot)",
      "bool IsPlaceholderEntity(notnull Object e)",
      "bool GetCurrentInventoryLocation(out notnull InventoryLocation loc)",
      "bool FindFreeLocationFor(notnull EntityAI item, FindInventoryLocationType flags, out notnull InventoryLocation loc)",
      "bool FindFreeLocationForEx(notnull EntityAI item, FindInventoryLocationType flags, notnull InventoryLocation exclude, out notnull InventoryLocation loc)",
      "bool FindFirstFreeLocationForNewEntity(string item_type, FindInventoryLocationType flags, out notnull InventoryLocation loc)",
      "int FindFreeLocationsFor(notnull EntityAI item, FindInventoryLocationType flags, out notnull array<ref InventoryLocation> locs)",
      "bool LocationCanAddEntity(notnull InventoryLocation inv_loc)",
      "static bool LocationCanAddEntityEx(notnull InventoryLocation inv_loc)",
      "bool LocationTestAddEntity(notnull InventoryLocation inv_loc, bool do_resevation_check, bool do_item_check, bool do_lock_check, bool do_occupancy_test, bool do_script_check, bool do_script_load_check)",
      "bool LocationCanRemoveEntity(notnull InventoryLocation inv_loc)",
      "bool LocationCanMoveEntity(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "static int GetInventoryCheckContext()",
      "static bool LocationCanMoveEntitySyncCheck(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool IsInCargo()",
      "bool IsAttachment()",
      "bool IsCargoInHiearchy()",
      "bool AreChildrenAccessible()",
      "bool GetCurrentAttachmentSlotInfo(out int slot_id, out string slot_name)",
      "static void OnServerInventoryCommandStatic(ParamsReadContext ctx)",
      "bool LocationAddEntity(notnull InventoryLocation inv_loc)",
      "bool LocationRemoveEntity(notnull InventoryLocation inv_loc)",
      "bool LocationMoveEntity(notnull InventoryLocation src_loc, notnull InventoryLocation dst_loc)",
      "bool LocationSyncMoveEntity(notnull InventoryLocation src_loc, notnull InventoryLocation dst_loc)",
      "bool LocationSwap(notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ServerLocationMoveEntity(notnull EntityAI item, ParamsWriteContext ctx)",
      "bool ServerLocationSyncMoveEntity(Man player, notnull EntityAI item, ParamsWriteContext ctx)",
      "bool ServerLocationSwap(notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, ParamsWriteContext ctx)",
      "bool ServerHandEvent(notnull Man player, notnull EntityAI item, ParamsWriteContext ctx)",
      "bool PrepareDropEntityPos(EntityAI owner, notnull EntityAI item, out vector mat[4], bool useValuesInMatrix = false, int conflictCheckDepth = -1)",
      "bool TestDropEntityPos(EntityAI owner, notnull EntityAI item, out vector mat[4], bool useValuesInMatrix = false, int conflictCheckDepth = -1)",
      "bool CanSwapEntities(notnull EntityAI item1, notnull EntityAI item2)",
      "static bool CanSwapEntitiesEx(notnull EntityAI item1, notnull EntityAI item2)",
      "bool CanForceSwapEntities(notnull EntityAI item1, InventoryLocation item1_dst, notnull EntityAI item2, out InventoryLocation item2_dst)",
      "static bool CanForceSwapEntitiesEx(notnull EntityAI item1, InventoryLocation item1_dst, notnull EntityAI item2, out InventoryLocation item2_dst)",
      "bool CanAddSwappedEntity(notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool AddInventoryReservation(EntityAI item, InventoryLocation dst, int timeout_ms)",
      "bool AddInventoryReservationEx(EntityAI item, InventoryLocation dst, int timeout_ms)",
      "bool ExtendInventoryReservation(EntityAI item, InventoryLocation dst, int timeout_ms)",
      "bool ExtendInventoryReservationEx(EntityAI item, InventoryLocation dst, int timeout_ms)",
      "bool ClearInventoryReservation(EntityAI item, InventoryLocation dst)",
      "bool ClearInventoryReservationEx(EntityAI item, InventoryLocation dst)",
      "bool HasInventoryReservation(EntityAI item, InventoryLocation dst)",
      "bool HasInventoryReservationCanAdd(EntityAI item, InventoryLocation dst)",
      "bool HasInventoryReservationEx(EntityAI item, InventoryLocation dst, FindInventoryReservationMode itemMode, FindInventoryReservationMode parentMode)",
      "bool GetInventoryReservationCount(EntityAI item, InventoryLocation dst)",
      "int GetAnyInventoryReservationCount()",
      "bool CanLockInventoryWithKey(notnull EntityAI key)",
      "bool CanUnlockInventoryWithKey(notnull EntityAI key)",
      "void LockInventoryWithKey(notnull EntityAI key)",
      "void UnlockInventoryWithKey(notnull EntityAI key)",
      "bool HasKeys()",
      "void LockInventory(int lockType)",
      "void UnlockInventory(int lockType)",
      "int GetScriptLockCount()",
      "bool IsInventoryUnlocked()",
      "bool IsInventoryLocked()",
      "bool IsInventoryLockedForLockType(int lockType)",
      "bool SetSlotLock(int slot, bool locked)",
      "bool GetSlotLock(int slot)",
      "bool CheckRequestSrc(notnull Man requestingPlayer, notnull InventoryLocation src, float radius)",
      "bool CheckDropRequest(notnull Man requestingPlayer, notnull InventoryLocation src, float radius)",
      "bool CheckTakeItemRequest(notnull Man requestingPlayer, notnull InventoryLocation src, notnull InventoryLocation dst, float radius)",
      "bool CheckMoveToDstRequest(notnull Man requestingPlayer, notnull InventoryLocation src, notnull InventoryLocation dst, float radius)",
      "bool CheckSwapItemsRequest(notnull Man requestingPlayer, notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, float radius)",
      "bool CheckManipulatedObjectsDistances(notnull EntityAI e0, notnull EntityAI e1, float radius)",
      "void Init()",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnAfterStoreLoad()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void EEInit()",
      "void EEDelete(EntityAI parent)",
      "bool CanAddEntityToInventory(notnull EntityAI item, int flag = FindInventoryLocationType.ANY)",
      "bool AddEntityToInventory(notnull EntityAI item)",
      "bool CanRemoveEntity()",
      "bool CanAddEntityInto(notnull EntityAI item, FindInventoryLocationType flags = FindInventoryLocationType.ANY)",
      "bool CanAddEntityIntoInventory(notnull EntityAI item)",
      "bool CanAddEntityIntoHands(notnull EntityAI item)",
      "bool OnInputUserDataProcess(ParamsReadContext ctx)",
      "bool OnInventoryJunctureFromServer(ParamsReadContext ctx)",
      "bool OnInventoryJunctureRepairFromServer(ParamsReadContext ctx)",
      "void OnInventoryJunctureFailureFromServer(ParamsReadContext ctx)",
      "void OnServerInventoryCommand(ParamsReadContext ctx)",
      "void OnInventoryFailure(InventoryCommandType type, InventoryValidationReason reason, InventoryLocation src, InventoryLocation dst)",
      "bool TakeEntityToInventory(InventoryMode mode, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool TakeEntityToTargetInventory(InventoryMode mode, notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool TakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool TakeEntityToCargo(InventoryMode mode, notnull EntityAI item)",
      "bool TakeEntityToTargetCargo(InventoryMode mode, notnull EntityAI target, notnull EntityAI item)",
      "bool TakeEntityToCargoEx(InventoryMode mode, notnull EntityAI item, int idx, int row, int col)",
      "bool TakeEntityToTargetCargoEx(InventoryMode mode, notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool TakeEntityAsAttachmentEx(InventoryMode mode, notnull EntityAI item, int slot)",
      "bool TakeEntityAsTargetAttachmentEx(InventoryMode mode, notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool TakeEntityAsAttachment(InventoryMode mode, notnull EntityAI item)",
      "bool TakeEntityAsTargetAttachment(InventoryMode mode, notnull EntityAI target, notnull EntityAI item)",
      "static bool MakeDstForSwap(notnull InventoryLocation src1, notnull InventoryLocation src2, out InventoryLocation dst1, out InventoryLocation dst2)",
      "static bool MakeSrcAndDstForSwap(notnull EntityAI item1, notnull EntityAI item2, out InventoryLocation src1, out InventoryLocation src2, out InventoryLocation dst1, out InventoryLocation dst2)",
      "static bool MakeSrcAndDstForForceSwap(notnull EntityAI item1, notnull EntityAI item2, out InventoryLocation src1, out InventoryLocation src2, out InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool SwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool ForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "static bool SetGroundPosByOwner(EntityAI owner, notnull EntityAI item, out InventoryLocation ground)",
      "bool DropEntity(InventoryMode mode, EntityAI owner, notnull EntityAI item)",
      "static bool SetGroundPosByTransform(EntityAI owner, notnull EntityAI item, out InventoryLocation ground, vector transform[4])",
      "bool DropEntityWithTransform(InventoryMode mode, EntityAI owner, notnull EntityAI item, vector transform[4])",
      "static void SetGroundPosByOwnerBounds(EntityAI owner, notnull EntityAI item, out InventoryLocation ground, vector halfExtents, float angle, float cosAngle, float sinAngle)",
      "bool DropEntityInBounds(InventoryMode mode, EntityAI owner, notnull EntityAI item, vector halfExtents, float angle, float cosAngle, float sinAngle)",
      "bool LocalDestroyEntity(notnull EntityAI item)",
      "bool ReplaceItemWithNew(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool GetFlipCargo()",
      "void SetFlipCargo(bool flip)",
      "void FlipCargo()",
      "void ResetFlipCargo()"
    ]
  },
  "GameInventory": {
    "parent": null,
    "methods": [
      "void DumpInventoryDebug()",
      "void DumpStaticInventoryDebug()",
      "bool HasEntityInInventory(notnull EntityAI item)",
      "bool EnumerateInventory(InventoryTraversalType tt, out array<EntityAI> items)",
      "int CountInventory()",
      "bool HasEntityInCargo(notnull EntityAI e)",
      "bool HasEntityInCargoEx(notnull EntityAI e, int idx, int row, int col)",
      "bool CanAddEntityInCargo(notnull EntityAI e, bool flip)",
      "bool CanAddEntityInCargoEx(notnull EntityAI e, int idx, int row, int col, bool flip)",
      "bool CanAddEntityInCargoExLoc(InventoryLocation loc)",
      "bool TestAddEntityInCargoEx(notnull EntityAI e, int idx, int row, int col, bool flip, bool do_resevation_check, bool do_item_check, bool do_lock_check, bool do_occupancy_test, bool do_script_check, bool do_script_load_check)",
      "bool TestAddEntityInCargoExLoc(notnull InventoryLocation loc, bool do_resevation_check, bool do_item_check, bool do_lock_check, bool do_occupancy_test, bool do_script_check, bool do_script_load_check)",
      "bool CanRemoveEntityInCargo(notnull EntityAI e)",
      "bool CanRemoveEntityInCargoEx(notnull EntityAI e, int idx, int row, int col)",
      "int GetSlotId(int index)",
      "int GetSlotIdCount()",
      "int GetAttachmentSlotId(int index)",
      "int GetAttachmentSlotsCount()",
      "bool HasAttachmentSlot(int slotId)",
      "bool HasInventorySlot(int slotId)",
      "int AttachmentCount()",
      "bool HasAttachment(notnull EntityAI e)",
      "bool HasAttachmentEx(notnull EntityAI e, int slot)",
      "bool CanAddAttachment(notnull EntityAI e)",
      "bool CanAddAttachmentEx(notnull EntityAI e, int slot)",
      "bool CanRemoveAttachment(EntityAI attachment)",
      "bool CanRemoveAttachmentEx(EntityAI attachment, int slot)",
      "bool IsPlaceholderEntity(notnull Object e)",
      "bool GetCurrentInventoryLocation(out notnull InventoryLocation loc)",
      "bool FindFreeLocationFor(notnull EntityAI item, FindInventoryLocationType flags, out notnull InventoryLocation loc)",
      "bool FindFreeLocationForEx(notnull EntityAI item, FindInventoryLocationType flags, notnull InventoryLocation exclude, out notnull InventoryLocation loc)",
      "bool FindFirstFreeLocationForNewEntity(string item_type, FindInventoryLocationType flags, out notnull InventoryLocation loc)",
      "int FindFreeLocationsFor(notnull EntityAI item, FindInventoryLocationType flags, out notnull array<ref InventoryLocation> locs)",
      "bool LocationCanAddEntity(notnull InventoryLocation inv_loc)",
      "static bool LocationCanAddEntityEx(notnull InventoryLocation inv_loc)",
      "bool LocationTestAddEntity(notnull InventoryLocation inv_loc, bool do_resevation_check, bool do_item_check, bool do_lock_check, bool do_occupancy_test, bool do_script_check, bool do_script_load_check)",
      "bool LocationCanRemoveEntity(notnull InventoryLocation inv_loc)",
      "bool LocationCanMoveEntity(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "static int GetInventoryCheckContext()",
      "static bool LocationCanMoveEntitySyncCheck(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool IsInCargo()",
      "bool IsAttachment()",
      "bool IsCargoInHiearchy()",
      "bool AreChildrenAccessible()",
      "bool GetCurrentAttachmentSlotInfo(out int slot_id, out string slot_name)",
      "static void OnServerInventoryCommandStatic(ParamsReadContext ctx)",
      "bool LocationAddEntity(notnull InventoryLocation inv_loc)",
      "bool LocationRemoveEntity(notnull InventoryLocation inv_loc)",
      "bool LocationMoveEntity(notnull InventoryLocation src_loc, notnull InventoryLocation dst_loc)",
      "bool LocationSyncMoveEntity(notnull InventoryLocation src_loc, notnull InventoryLocation dst_loc)",
      "bool LocationSwap(notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ServerLocationMoveEntity(notnull EntityAI item, ParamsWriteContext ctx)",
      "bool ServerLocationSyncMoveEntity(Man player, notnull EntityAI item, ParamsWriteContext ctx)",
      "bool ServerLocationSwap(notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, ParamsWriteContext ctx)",
      "bool ServerHandEvent(notnull Man player, notnull EntityAI item, ParamsWriteContext ctx)",
      "bool PrepareDropEntityPos(EntityAI owner, notnull EntityAI item, out vector mat[4], bool useValuesInMatrix = false, int conflictCheckDepth = -1)",
      "bool TestDropEntityPos(EntityAI owner, notnull EntityAI item, out vector mat[4], bool useValuesInMatrix = false, int conflictCheckDepth = -1)",
      "bool CanSwapEntities(notnull EntityAI item1, notnull EntityAI item2)",
      "static bool CanSwapEntitiesEx(notnull EntityAI item1, notnull EntityAI item2)",
      "bool CanForceSwapEntities(notnull EntityAI item1, InventoryLocation item1_dst, notnull EntityAI item2, out InventoryLocation item2_dst)",
      "static bool CanForceSwapEntitiesEx(notnull EntityAI item1, InventoryLocation item1_dst, notnull EntityAI item2, out InventoryLocation item2_dst)",
      "bool CanAddSwappedEntity(notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool AddInventoryReservation(EntityAI item, InventoryLocation dst, int timeout_ms)",
      "bool AddInventoryReservationEx(EntityAI item, InventoryLocation dst, int timeout_ms)",
      "bool ExtendInventoryReservation(EntityAI item, InventoryLocation dst, int timeout_ms)",
      "bool ExtendInventoryReservationEx(EntityAI item, InventoryLocation dst, int timeout_ms)",
      "bool ClearInventoryReservation(EntityAI item, InventoryLocation dst)",
      "bool ClearInventoryReservationEx(EntityAI item, InventoryLocation dst)",
      "bool HasInventoryReservation(EntityAI item, InventoryLocation dst)",
      "bool HasInventoryReservationCanAdd(EntityAI item, InventoryLocation dst)",
      "bool HasInventoryReservationEx(EntityAI item, InventoryLocation dst, FindInventoryReservationMode itemMode, FindInventoryReservationMode parentMode)",
      "bool GetInventoryReservationCount(EntityAI item, InventoryLocation dst)",
      "int GetAnyInventoryReservationCount()",
      "bool CanLockInventoryWithKey(notnull EntityAI key)",
      "bool CanUnlockInventoryWithKey(notnull EntityAI key)",
      "void LockInventoryWithKey(notnull EntityAI key)",
      "void UnlockInventoryWithKey(notnull EntityAI key)",
      "bool HasKeys()",
      "void LockInventory(int lockType)",
      "void UnlockInventory(int lockType)",
      "int GetScriptLockCount()",
      "bool IsInventoryUnlocked()",
      "bool IsInventoryLocked()",
      "bool IsInventoryLockedForLockType(int lockType)",
      "bool SetSlotLock(int slot, bool locked)",
      "bool GetSlotLock(int slot)",
      "bool CheckRequestSrc(notnull Man requestingPlayer, notnull InventoryLocation src, float radius)",
      "bool CheckDropRequest(notnull Man requestingPlayer, notnull InventoryLocation src, float radius)",
      "bool CheckTakeItemRequest(notnull Man requestingPlayer, notnull InventoryLocation src, notnull InventoryLocation dst, float radius)",
      "bool CheckMoveToDstRequest(notnull Man requestingPlayer, notnull InventoryLocation src, notnull InventoryLocation dst, float radius)",
      "bool CheckSwapItemsRequest(notnull Man requestingPlayer, notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, float radius)",
      "bool CheckManipulatedObjectsDistances(notnull EntityAI e0, notnull EntityAI e1, float radius)",
      "void Init()",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnAfterStoreLoad()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void EEInit()",
      "void EEDelete(EntityAI parent)",
      "bool CanAddEntityToInventory(notnull EntityAI item, int flag = FindInventoryLocationType.ANY)",
      "bool AddEntityToInventory(notnull EntityAI item)",
      "bool CanRemoveEntity()",
      "bool CanAddEntityInto(notnull EntityAI item, FindInventoryLocationType flags = FindInventoryLocationType.ANY)",
      "bool CanAddEntityIntoInventory(notnull EntityAI item)",
      "bool CanAddEntityIntoHands(notnull EntityAI item)",
      "bool OnInputUserDataProcess(ParamsReadContext ctx)",
      "bool OnInventoryJunctureFromServer(ParamsReadContext ctx)",
      "bool OnInventoryJunctureRepairFromServer(ParamsReadContext ctx)",
      "void OnInventoryJunctureFailureFromServer(ParamsReadContext ctx)",
      "void OnServerInventoryCommand(ParamsReadContext ctx)",
      "void OnInventoryFailure(InventoryCommandType type, InventoryValidationReason reason, InventoryLocation src, InventoryLocation dst)",
      "bool TakeEntityToInventory(InventoryMode mode, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool TakeEntityToTargetInventory(InventoryMode mode, notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool TakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool TakeEntityToCargo(InventoryMode mode, notnull EntityAI item)",
      "bool TakeEntityToTargetCargo(InventoryMode mode, notnull EntityAI target, notnull EntityAI item)",
      "bool TakeEntityToCargoEx(InventoryMode mode, notnull EntityAI item, int idx, int row, int col)",
      "bool TakeEntityToTargetCargoEx(InventoryMode mode, notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool TakeEntityAsAttachmentEx(InventoryMode mode, notnull EntityAI item, int slot)",
      "bool TakeEntityAsTargetAttachmentEx(InventoryMode mode, notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool TakeEntityAsAttachment(InventoryMode mode, notnull EntityAI item)",
      "bool TakeEntityAsTargetAttachment(InventoryMode mode, notnull EntityAI target, notnull EntityAI item)",
      "static bool MakeDstForSwap(notnull InventoryLocation src1, notnull InventoryLocation src2, out InventoryLocation dst1, out InventoryLocation dst2)",
      "static bool MakeSrcAndDstForSwap(notnull EntityAI item1, notnull EntityAI item2, out InventoryLocation src1, out InventoryLocation src2, out InventoryLocation dst1, out InventoryLocation dst2)",
      "static bool MakeSrcAndDstForForceSwap(notnull EntityAI item1, notnull EntityAI item2, out InventoryLocation src1, out InventoryLocation src2, out InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool SwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool ForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "static bool SetGroundPosByOwner(EntityAI owner, notnull EntityAI item, out InventoryLocation ground)",
      "bool DropEntity(InventoryMode mode, EntityAI owner, notnull EntityAI item)",
      "static bool SetGroundPosByTransform(EntityAI owner, notnull EntityAI item, out InventoryLocation ground, vector transform[4])",
      "bool DropEntityWithTransform(InventoryMode mode, EntityAI owner, notnull EntityAI item, vector transform[4])",
      "static void SetGroundPosByOwnerBounds(EntityAI owner, notnull EntityAI item, out InventoryLocation ground, vector halfExtents, float angle, float cosAngle, float sinAngle)",
      "bool DropEntityInBounds(InventoryMode mode, EntityAI owner, notnull EntityAI item, vector halfExtents, float angle, float cosAngle, float sinAngle)",
      "bool LocalDestroyEntity(notnull EntityAI item)",
      "bool ReplaceItemWithNew(InventoryMode mode, ReplaceItemWithNewLambdaBase lambda)",
      "bool GetFlipCargo()",
      "void SetFlipCargo(bool flip)",
      "void FlipCargo()",
      "void ResetFlipCargo()"
    ]
  },
  "InventoryInputUserData": {
    "parent": null,
    "methods": [
      "static void SerializeMove(ParamsWriteContext ctx, int type, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "static void SendInputUserDataMove(int type, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "static void SendServerMove(Man player, int type, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "static void SerializeSwap(ParamsWriteContext ctx, notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, bool skippedSwap)",
      "static void SendInputUserDataSwap(notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, bool skippedSwap = false)",
      "static void SendServerSwap(notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, bool skippedSwap = false)",
      "static void SerializeHandEvent(ParamsWriteContext ctx, HandEventBase e)",
      "static void SendInputUserDataHandEvent(HandEventBase e)",
      "static void SendServerHandEventViaInventoryCommand(notnull Man player, HandEventBase e)"
    ]
  },
  "InventoryLocation": {
    "parent": null,
    "methods": [
      "bool IsValid()",
      "int GetType()",
      "int GetSlot()",
      "int GetIdx()",
      "int GetRow()",
      "int GetCol()",
      "bool GetFlip()",
      "void GetDir(out float dir[4])",
      "void SetGround(EntityAI e, vector mat[4])",
      "void SetGroundEx(EntityAI e, vector pos, float dir[4])",
      "void SetAttachment(notnull EntityAI parent, EntityAI e, int slotId)",
      "void SetCargoAuto(notnull CargoBase cargo, EntityAI e, int row, int col, bool flip)",
      "void SetCargo(notnull EntityAI parent, EntityAI e, int idx, int row, int col, bool flip)",
      "void SetProxyCargo(notnull EntityAI parent, EntityAI e, int idx, int row, int col, bool flip)",
      "void SetHands(notnull EntityAI parent, EntityAI e)",
      "void SetVehicle(notnull EntityAI parent, EntityAI e, int idx)",
      "void Setparent(notnull EntityAI parent)",
      "void SetItem(notnull EntityAI item)",
      "void SetSlot(int slotId)",
      "void SetIndex(int idx)",
      "void SetRow(int row)",
      "void SetCol(int col)",
      "void SetFlip(bool flip)",
      "void Reset()",
      "bool CompareLocationOnly(notnull InventoryLocation other)",
      "bool CollidesWith(notnull InventoryLocation rhs)",
      "static string DumpToStringNullSafe(InventoryLocation loc)",
      "string DumpToString()",
      "bool ReadFromContext(ParamsReadContext ctx)",
      "bool WriteToContext(ParamsWriteContext ctx)",
      "bool OptionalLocationWriteToContext(InventoryLocation loc, notnull ParamsWriteContext ctx)",
      "bool OptionalLocationReadFromContext(out InventoryLocation loc, notnull ParamsReadContext ctx)"
    ]
  },
  "InventorySlots": {
    "parent": null,
    "methods": [
      "void InventorySlots()",
      "int GetSlotIdFromString(string slot_name)",
      "string GetSlotName(int id)",
      "string GetSlotDisplayName(int id)",
      "bool IsSlotIdValid(int slotId)",
      "int GetStackMaxForSlotId(int slot_Id)",
      "bool GetShowForSlotId(int slot_Id)",
      "bool GetAutoAttachForSlotId(int slot_Id)",
      "bool GetBoneNameForSlotId(int slot_Id, out string bone_name)",
      "bool GetSelectionForSlotId(int slot_Id, out string selection)"
    ]
  },
  "ReplaceItemWithNewLambdaBase": {
    "parent": null,
    "methods": [
      "void ReplaceItemWithNewLambdaBase(EntityAI old_item, string new_item_type)",
      "void OverrideNewLocation(InventoryLocation newLocation)",
      "void VerifyItemTypeBySlotType()",
      "bool WantCreateNewEntity()",
      "bool CanExecuteLambda()",
      "bool PrepareLocations()",
      "void RemoveOldItemFromLocation()",
      "void UndoRemoveOldItemFromLocation()",
      "void RemoveNetworkObjectInfo()",
      "void UndoRemoveNetworkObjectInfo()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void DeleteOldEntity()",
      "void CreateNetworkObjectInfo(EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "void OnAbort()",
      "void Execute(HumanInventoryWithFSM fsm_to_notify = null)",
      "string DumpToString()"
    ]
  },
  "ItemInventory": {
    "parent": null,
    "methods": []
  },
  "TransportInventory": {
    "parent": null,
    "methods": []
  },
  "WeaponInventory": {
    "parent": null,
    "methods": [
      "bool TryFireWeapon(EntityAI weapon, int muzzleIndex)"
    ]
  },
  "TemperatureAccessComponent": {
    "parent": null,
    "methods": [
      "void TemperatureAccessComponent(EntityAI owner)",
      "bool TryAccessSource(TemperatureData data)",
      "bool PriorityCheck(TemperatureData data)",
      "bool CheckAccessTimeout(TemperatureData data)"
    ]
  },
  "TemperatureAccessManager": {
    "parent": null,
    "methods": [
      "void TemperatureAccessManager()",
      "void Init()",
      "void RegisterTemperatureAccesType(typename type)"
    ]
  },
  "TemperatureAccessTypeBase": {
    "parent": null,
    "methods": [
      "void TemperatureAccessTypeBase()",
      "void Init()",
      "int GetPriority()"
    ]
  },
  "TemperatureAccessTypeUnknown": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "TemperatureAccessTypeWorld": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "TemperatureAccessTypeInventory": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "TemperatureAccessTypeUTS": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "TemperatureAccessTypeFireplace": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "TemperatureAccessTypeCooking": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "TemperatureData": {
    "parent": null,
    "methods": [
      "void TemperatureData(float val, ETemperatureAccessTypes accessType = ETemperatureAccessTypes.ACCESS_UNKNOWN, float time = -1, float timeCoef = 1, float heatPermCoef = 1)",
      "void Init()",
      "void InterpolateTemperatureDelta(float start)"
    ]
  },
  "TemperatureDataInterpolated": {
    "parent": null,
    "methods": [
      "void InterpolateTemperatureDelta(float start)"
    ]
  },
  "EnProfilerTests": {
    "parent": null,
    "methods": [
      "void EnProfilerTests()",
      "float Sleep(float timeS)",
      "float StringFormat()",
      "float StringConcat()",
      "void TestFuncCountDataHelper()",
      "static void TestFuncCountDataHelperStatic()",
      "float Sleep2(float timeS)",
      "float SleepAgain(float timeS)",
      "float DoEverything()"
    ]
  },
  "EPTHelperClass": {
    "parent": null,
    "methods": [
      "float Sleep2(float timeS)",
      "float SleepAgain(float timeS)",
      "float DoEverything()"
    ]
  },
  "ScriptInvokerTests": {
    "parent": null,
    "methods": [
      "void ScriptInvokerTests()",
      "void InvokeLog(string s)",
      "void InvokeReset()",
      "void InvokeClear(string s)",
      "void InvokeInvoke(string s)",
      "void InvokeInsert(string s)"
    ]
  },
  "UniversalTemperatureSourceSettings": {
    "parent": null,
    "methods": [
      "void OnTimer()",
      "void Stop()",
      "void SetParams(Param params)",
      "void UniversalTemperatureSource(EntityAI pparent, UniversalTemperatureSourceSettings pSettings, UniversalTemperatureSourceLambdaBase pLambda)",
      "void Init(EntityAI pparent)",
      "float GetFullRange()",
      "float GetMaxRange()",
      "float GetTemperatureCap()",
      "float GetTemperatureItemCap()",
      "float GetTemperatureItemCoef()",
      "bool IsActive()",
      "void SetActive(bool pActive)",
      "void SetDefferedActive(bool pActive, float pSeconds)",
      "void ChangeSettings(UniversalTemperatureSourceSettings pSettings)",
      "void Update(UniversalTemperatureSourceSettings settings, UniversalTemperatureSourceLambdaBase lambda)",
      "float GetTemperatureMin()",
      "float GetTemperatureMax()",
      "float GetTemperature()",
      "float GetTemperatureRaw()",
      "void UniversalTemperatureSourceDebug()",
      "void AddHeader(string header)",
      "void Add(string name, string value)",
      "void Commit()",
      "int PairsCount()",
      "string GetHeader()",
      "string GetName(int pIndex)",
      "string GetValue(int pIndex)",
      "void ParseKeyPairs()",
      "void Debug()"
    ]
  },
  "UniversalTemperatureSourceResult": {
    "parent": null,
    "methods": [
      "void OnTimer()",
      "void Stop()",
      "void SetParams(Param params)",
      "void UniversalTemperatureSource(EntityAI pparent, UniversalTemperatureSourceSettings pSettings, UniversalTemperatureSourceLambdaBase pLambda)",
      "void Init(EntityAI pparent)",
      "float GetFullRange()",
      "float GetMaxRange()",
      "float GetTemperatureCap()",
      "float GetTemperatureItemCap()",
      "float GetTemperatureItemCoef()",
      "bool IsActive()",
      "void SetActive(bool pActive)",
      "void SetDefferedActive(bool pActive, float pSeconds)",
      "void ChangeSettings(UniversalTemperatureSourceSettings pSettings)",
      "void Update(UniversalTemperatureSourceSettings settings, UniversalTemperatureSourceLambdaBase lambda)",
      "float GetTemperatureMin()",
      "float GetTemperatureMax()",
      "float GetTemperature()",
      "float GetTemperatureRaw()",
      "void UniversalTemperatureSourceDebug()",
      "void AddHeader(string header)",
      "void Add(string name, string value)",
      "void Commit()",
      "int PairsCount()",
      "string GetHeader()",
      "string GetName(int pIndex)",
      "string GetValue(int pIndex)",
      "void ParseKeyPairs()",
      "void Debug()"
    ]
  },
  "UniversalTemperatureSourceTimer": {
    "parent": null,
    "methods": [
      "void OnTimer()",
      "void Stop()",
      "void SetParams(Param params)",
      "void UniversalTemperatureSource(EntityAI pparent, UniversalTemperatureSourceSettings pSettings, UniversalTemperatureSourceLambdaBase pLambda)",
      "void Init(EntityAI pparent)",
      "float GetFullRange()",
      "float GetMaxRange()",
      "float GetTemperatureCap()",
      "float GetTemperatureItemCap()",
      "float GetTemperatureItemCoef()",
      "bool IsActive()",
      "void SetActive(bool pActive)",
      "void SetDefferedActive(bool pActive, float pSeconds)",
      "void ChangeSettings(UniversalTemperatureSourceSettings pSettings)",
      "void Update(UniversalTemperatureSourceSettings settings, UniversalTemperatureSourceLambdaBase lambda)",
      "float GetTemperatureMin()",
      "float GetTemperatureMax()",
      "float GetTemperature()",
      "float GetTemperatureRaw()",
      "void UniversalTemperatureSourceDebug()",
      "void AddHeader(string header)",
      "void Add(string name, string value)",
      "void Commit()",
      "int PairsCount()",
      "string GetHeader()",
      "string GetName(int pIndex)",
      "string GetValue(int pIndex)",
      "void ParseKeyPairs()",
      "void Debug()"
    ]
  },
  "UniversalTemperatureSource": {
    "parent": null,
    "methods": [
      "void UniversalTemperatureSource(EntityAI pparent, UniversalTemperatureSourceSettings pSettings, UniversalTemperatureSourceLambdaBase pLambda)",
      "void Init(EntityAI pparent)",
      "float GetFullRange()",
      "float GetMaxRange()",
      "float GetTemperatureCap()",
      "float GetTemperatureItemCap()",
      "float GetTemperatureItemCoef()",
      "bool IsActive()",
      "void SetActive(bool pActive)",
      "void SetDefferedActive(bool pActive, float pSeconds)",
      "void ChangeSettings(UniversalTemperatureSourceSettings pSettings)",
      "void Update(UniversalTemperatureSourceSettings settings, UniversalTemperatureSourceLambdaBase lambda)",
      "float GetTemperatureMin()",
      "float GetTemperatureMax()",
      "float GetTemperature()",
      "float GetTemperatureRaw()",
      "void UniversalTemperatureSourceDebug()",
      "void AddHeader(string header)",
      "void Add(string name, string value)",
      "void Commit()",
      "int PairsCount()",
      "string GetHeader()",
      "string GetName(int pIndex)",
      "string GetValue(int pIndex)",
      "void ParseKeyPairs()",
      "void Debug()"
    ]
  },
  "UniversalTemperatureSourceDebug": {
    "parent": null,
    "methods": [
      "void UniversalTemperatureSourceDebug()",
      "void AddHeader(string header)",
      "void Add(string name, string value)",
      "void Commit()",
      "int PairsCount()",
      "string GetHeader()",
      "string GetName(int pIndex)",
      "string GetValue(int pIndex)",
      "void ParseKeyPairs()",
      "void Debug()"
    ]
  },
  "UniversalTemperatureSourceLambdaBase": {
    "parent": null,
    "methods": [
      "void UniversalTemperatureSourceLambdaBase()",
      "void Execute(UniversalTemperatureSourceSettings pSettings, UniversalTemperatureSourceResult resultValues)",
      "void DryItemsInVicinity(UniversalTemperatureSourceSettings pSettings)",
      "void DryItemsInVicinity(UniversalTemperatureSourceSettings pSettings, vector position, out notnull array<Object> nearestObjects)",
      "void WarmAndCoolItemsInVicinity(UniversalTemperatureSourceSettings pSettings, vector position, out notnull array<Object> nearestObjects)",
      "void OnBeforeExecute()",
      "void OnAfterExecute()",
      "void OnUTSActivate()",
      "void OnUTSDeactivate()",
      "bool AffectsPlayer()"
    ]
  },
  "ComponentBodyStaging": {
    "parent": null,
    "methods": [
      "void ComponentBodyStaging()",
      "void SetAsSkinned()",
      "bool IsSkinned()",
      "void SetAsSkinnedClient()",
      "void SynchSkinnedState()"
    ]
  },
  "ComponentAnimalBleeding": {
    "parent": null,
    "methods": [
      "void ComponentAnimalBleeding()",
      "void InflictWoundDamage( TotalDamageResult damage_result, string zone_name, string ammo )",
      "void CreateWound( TotalDamageResult damage_result, string zone_name, string ammo )",
      "void Bleed( float wound_intensity )",
      "float GetWoundIntensity( float bleed_treshold )"
    ]
  },
  "ComponentEnergyManager": {
    "parent": null,
    "methods": [
      "void ComponentEnergyManager()",
      "void Event_OnInit()",
      "void DebugUpdate()",
      "void Event_OnAwake()",
      "int GetCompType()",
      "void OnDeviceDestroyed()",
      "void RefreshDebug()",
      "bool GetDebugPlugs()",
      "void SetDebugPlugs( bool newVal )",
      "void SwitchOn()",
      "void SwitchOff()",
      "void SetPassiveState(bool state = true)",
      "void UnplugDevice(EntityAI device_to_unplug)",
      "void UnplugThis()",
      "void UnplugAllDevices()",
      "void RestorePlugState(bool state)",
      "void SetEnergy(float new_energy)",
      "void SetEnergy0To1(float energy01)",
      "void UpdateSelections()",
      "void UpdatePlugState()",
      "void GetCompatiblePlugTypes(out TIntArray IDs)",
      "void StoreEnergySourceIDs(int b1, int b2, int b3, int b4)",
      "void SetEnergyMaxPristine(float new_limit)",
      "void SetCordLength( float new_length )",
      "void SetPlugType( int new_type )",
      "void SetAttachmentAction( int new_action_type )",
      "void SetEnergyUsage( float new_usage )",
      "void ResetEnergyUsage()",
      "void SetCordTextureFile( string new_path )",
      "void SetEnergySourceClient( EntityAI source )",
      "void SetDeviceBySocketID(int id, EntityAI plugged_device)",
      "void SetElectricityIconVisibility( bool make_visible )",
      "void UpdateCanWork()",
      "void HandleMoveInsideCargo(EntityAI container)",
      "void SetUpdateInterval( float value )",
      "bool GetRestorePlugState()",
      "bool PlugThisInto(EntityAI energy_source, int socket_id = -1)",
      "bool CanSwitchOn()",
      "bool CanWork( float test_energy = -1)",
      "bool CheckWetness()",
      "bool CanSwitchOff()",
      "bool GetPreviousSwitchState()",
      "bool IsSwitchedOn()",
      "bool IsCordFolded()",
      "bool IsPassive()",
      "bool IsPlugged()",
      "bool ConsumeEnergy(float amount)",
      "bool IsWorking()",
      "bool HasEnoughStoredEnergy()",
      "bool HasFreeSocket( int socket_id = -1 )",
      "bool IsPlugCompatible(int plug_ID)",
      "bool CanReceivePlugFrom( EntityAI device_to_plug )",
      "bool CanBePluggedInto( EntityAI potential_energy_provider )",
      "bool HasElectricityIcon()",
      "bool HasConversionOfEnergyToQuantity()",
      "bool IsEnergySourceAtReach( vector from_position, float add_tolerance = 0, vector override_source_position =  )",
      "bool HasVisibleSocketsInInventory()",
      "bool IsSelectionAPlug(string selection_to_test )",
      "int GetSocketsCount()",
      "int GetPlugType()",
      "int GetAttachmentAction()",
      "int GetEnergySourceStorageIDb1()",
      "int GetEnergySourceStorageIDb2()",
      "int GetEnergySourceStorageIDb3()",
      "int GetEnergySourceStorageIDb4()",
      "int GetEnergySourceNetworkIDLow()",
      "int GetEnergySourceNetworkIDHigh()",
      "int GetPluggedDevicesCount()",
      "int GetEnergy0To100()",
      "float GetEnergy0To1()",
      "float GetUpdateInterval()",
      "float GetWetnessExposure()",
      "float GetEnergyUsage()",
      "float GetEnergy()",
      "float AddEnergy(float added_energy)",
      "float GetEnergyMax()",
      "float GetEnergyMaxPristine()",
      "float GetEnergyAtSpawn()",
      "float GetCordLength()",
      "string GetCordTextureFile()",
      "void OnWork( float consumed_energy )",
      "void OnIsPlugged(EntityAI source_device)",
      "void OnIsUnplugged( EntityAI last_energy_source )",
      "void OnOwnSocketTaken( EntityAI device )",
      "void OnOwnSocketReleased( EntityAI device )",
      "void OnAttachmentAdded(EntityAI elec_device)",
      "void OnAttachmentRemoved(EntityAI elec_device)",
      "void StartUpdates()",
      "void OnEnergyConsumed()",
      "void OnEnergyAdded()",
      "void StopUpdates()",
      "void InteractBranch(EntityAI originalCaller, Man player = null, int system = 0)",
      "void OnInteractBranch(EntityAI originalCaller, Man player, int system)",
      "void WakeUpWholeBranch( EntityAI original_caller )",
      "void PlugCordIntoSocket( EntityAI device_to_plug, int socket_id = -1 )",
      "void UpdateSocketSelections(int socket_id, EntityAI device_to_plug)",
      "void SetEnergySource( EntityAI source )",
      "bool PlugInDevice(EntityAI device_to_plug, int socket_id = -1)",
      "void SetPlugOwner(string selection_name, EntityAI device)",
      "void UnplugCordFromSocket( int socket_to_unplug_ID )",
      "void SetPowered( bool state )",
      "bool FindAndConsumeEnergy(EntityAI original_caller, float amount, bool ignore_switch_state = false)",
      "int GetMySocketID()",
      "void SetMySocketID( int slot_ID )",
      "void Synch()",
      "void ClearLastUpdateTime()",
      "void RememberLastUpdateTime()",
      "float GetCurrentUpdateTime()",
      "void DeviceUpdate()"
    ]
  },
  "ComponentEntityDebug": {
    "parent": "Component",
    "methods": [
      "void DebugBBoxSetColor(int color)",
      "void DebugBBoxDelete()",
      "void DebugDirectionDelete()",
      "void OnDrawing()"
    ]
  },
  "AreaDamageBase": {
    "parent": null,
    "methods": [
      "void AreaDamageBase(EntityAI parent)",
      "void OnEnter(Object object)",
      "void OnEnterClient(Object object)",
      "void OnEnterServer(Object object)",
      "void OnLeave(Object object)",
      "void OnLeaveClient(Object object)",
      "void OnLeaveServer(Object object)",
      "void EvaluateDamage_Loop(Object object)",
      "void EvaluateDamage_Defer(Object object)",
      "void EvaluateDamage_DeferLoop(Object object)",
      "void EvaluateDamage(Object object)",
      "void EvaluateDamage_Common(Object object, string hitzone)",
      "string GetRandomHitZone(array<string> hitzones)",
      "string GetRaycastedHitZone(Object victim, array<string> raycast_sources_str)",
      "void EnableDebug(bool pState = false)",
      "void Debug_DrawArea()",
      "void Debug_CleanupShapes(array<Shape> shapesArr)"
    ]
  },
  "AreaDamageOneTime": {
    "parent": "AreaDamageBase",
    "methods": [
      "void AreaDamageOneTime(EntityAI parent)",
      "void SetHitZones( array<string> hitzones )",
      "void OnEnterServer(Object object)"
    ]
  },
  "AreaDamageOneTimeDeferred": {
    "parent": "AreaDamageBase",
    "methods": [
      "void AreaDamageOneTimeDeferred(EntityAI parent)",
      "void SetDeferDuration(float time)",
      "void SetHitZones( array<string> hitzones )",
      "void OnEnterServer(Object object)"
    ]
  },
  "AreaDamageOneTimeRaycasted": {
    "parent": "AreaDamageBase",
    "methods": [
      "void AreaDamageOneTimeRaycasted(EntityAI parent)",
      "void SetRaycastSources( array<string> raycast_sources )",
      "void OnEnterServer(Object object)"
    ]
  },
  "AreaDamageOneTimeRaycastedDeferred": {
    "parent": "AreaDamageBase",
    "methods": [
      "void AreaDamageOneTimeRaycastedDeferred(EntityAI parent)",
      "void SetDeferDuration(float time)",
      "void SetRaycastSources( array<string> raycast_sources )",
      "void OnEnterServer(Object object)"
    ]
  },
  "AreaDamageRegular": {
    "parent": "AreaDamageBase",
    "methods": [
      "void AreaDamageRegular(EntityAI parent)",
      "void SetLoopInterval( float time )",
      "void SetHitZones( array<string> hitzones )",
      "void OnEnterServer(Object object)"
    ]
  },
  "AreaDamageRegularDeferred": {
    "parent": "AreaDamageRegular",
    "methods": [
      "void AreaDamageRegularDeferred(EntityAI parent)",
      "void SetLoopInterval(float time)",
      "void SetDeferDuration(float time)",
      "void SetHitZones( array<string> hitzones )",
      "void OnEnterServer(Object object)"
    ]
  },
  "AreaDamageRegularRaycasted": {
    "parent": "AreaDamageBase",
    "methods": [
      "void AreaDamageRegularRaycasted(EntityAI parent)",
      "void SetLoopInterval(float time)",
      "void SetRaycastSources( array<string> raycast_sources )",
      "void OnEnterServer(Object object)"
    ]
  },
  "AreaDamageRegularRaycastedDeferred": {
    "parent": "AreaDamageBase",
    "methods": [
      "void AreaDamageRegularRaycastedDeferred(EntityAI parent)",
      "void SetLoopInterval(float time)",
      "void SetDeferDuration(float time)",
      "void SetRaycastSources( array<string> raycast_sources )",
      "void OnEnterServer(Object object)"
    ]
  },
  "AreaDamageTrigger": {
    "parent": "AreaDamageTriggerBase",
    "methods": [
      "void AreaDamageTrigger()",
      "void EOnTouch(IEntity other, int extra)",
      "void SetExtents( vector mins, vector maxs )",
      "void SetAreaDamageManager( AreaDamageManager adType )",
      "void SetAreaDamageType( AreaDamageBase adType )",
      "void OnEnter( Object obj )",
      "void OnLeave( Object obj )",
      "void UpdateInsiders(int timeout)"
    ]
  },
  "ArrowManagerPlayer": {
    "parent": null,
    "methods": [
      "void ArrowManagerPlayer(EntityAI owner)",
      "static void InitializeHash()",
      "static void AddArrowTypeToHash(string ArrowType)",
      "bool Save(ParamsWriteContext ctx)",
      "bool Load(ParamsReadContext ctx)"
    ]
  },
  "Construction": {
    "parent": null,
    "methods": [
      "void Construction( BaseBuildingBase parent )",
      "void Init()",
      "void Setparent( BaseBuildingBase parent )",
      "void AddToConstructedParts( string part_name )",
      "void RemoveFromConstructedParts( string part_name )",
      "void BuildPartServer( notnull Man player, string part_name, int action_id )",
      "void DismantlePartServer( notnull Man player, string part_name, int action_id )",
      "void DestroyPartServer( Man player, string part_name, int action_id, bool destroyed_by_connected_part = false )",
      "void DestroyConnectedParts(string part_name)",
      "bool ExceptionCheck(string part_name)",
      "void InitVisuals()",
      "void UpdateVisuals()",
      "void UpdatePhysics()",
      "void InitBaseState()",
      "void UpdateConstructionParts()",
      "bool CanBuildPart( string part_name, ItemBase tool, bool use_tool )",
      "bool MaterialIsRuined(string part_name)",
      "void GetConstructionPartsToBuild( string main_part_name, out array<ConstructionPart> construction_parts, ItemBase tool, out string real_constructionTarget, bool use_tool )",
      "bool HasRequiredPart( string part_name )",
      "bool HasConflictPart( string part_name )",
      "bool CanDismantlePart( string part_name, ItemBase tool )",
      "bool HasDependentPart( string part_name )",
      "bool CanDestroyPart( string part_name )",
      "void ShowConstructionPart( string part_name )",
      "void HideConstructionPart( string part_name )",
      "void ShowConstructionPartPhysics( string part_name )",
      "void HideConstructionPartPhysics( string part_name )",
      "bool IsPartConstructed( string part_name )",
      "bool HasMaterials( string part_name, bool repairing = false )",
      "bool HasMaterialWithQuantityAttached( string slot_name, float quantity )",
      "void TakeMaterialsServer( string part_name, bool repairing = false )",
      "void ReceiveMaterialsServer( notnull Man player, string part_name, string damagezone_name )",
      "void DestroyMaterialsServer( Man player, string part_name )",
      "void DropNonUsableMaterialsServer( Man player, string part_name )",
      "void SetLockOnAttachedMaterials( string part_name, bool lock_slot )",
      "bool CanUseToolToBuildPart( string part_name, ItemBase tool )",
      "bool CanUseToolToDismantlePart( string part_name, ItemBase tool )",
      "bool IsColliding( string part_name )",
      "bool IsCollidingEx( CollisionCheckData check_data )",
      "void GetCollisionBoxData( string part_name, out vector min_max[2] )",
      "void GetTriggerExtents( vector min_max[2], out vector extents[2] )",
      "void DrawDebugCollisionBox( vector min_max[2], int color )",
      "void DestroyDebugCollisionBox()",
      "void CreateCollisionTrigger( string part_name, vector min_max[2], vector center )",
      "void DestroyCollisionTrigger()",
      "bool IsTriggerColliding()",
      "static void SpawnConstructionMaterialPiles(notnull EntityAI entity, Man player, string cfg_path, string main_part_name, string damagezone_name = , bool is_base = false )",
      "void CollisionCheckData()",
      "void SetPartName( string part_name )",
      "string GetPartName()",
      "void UpdateInsiders( int timeout )",
      "bool IsColliding()"
    ]
  },
  "StaticConstructionmethods": {
    "parent": null,
    "methods": [
      "static void SpawnConstructionMaterialPiles(notnull EntityAI entity, Man player, string cfg_path, string main_part_name, string damagezone_name = , bool is_base = false )",
      "void CollisionCheckData()",
      "void SetPartName( string part_name )",
      "string GetPartName()",
      "void UpdateInsiders( int timeout )",
      "bool IsColliding()"
    ]
  },
  "CollisionCheckData": {
    "parent": null,
    "methods": [
      "void CollisionCheckData()",
      "void SetPartName( string part_name )",
      "string GetPartName()",
      "void UpdateInsiders( int timeout )",
      "bool IsColliding()"
    ]
  },
  "ConstructionBoxTrigger": {
    "parent": null,
    "methods": [
      "void SetPartName( string part_name )",
      "string GetPartName()",
      "void UpdateInsiders( int timeout )",
      "bool IsColliding()"
    ]
  },
  "ConstructionActionData": {
    "parent": null,
    "methods": [
      "void ConstructionActionData()",
      "string GetMainPartName()",
      "string GetMainPartNameNoTool()",
      "void SetTarget( Object target )",
      "void SetTargetPart( ConstructionPart target_part )",
      "void SetSlotId( int slot_id )",
      "int GetSlotId()",
      "void SetActionInitiator( PlayerBase action_initiator )",
      "void SetNextIndex()",
      "void RefreshPartsToBuild( string main_part_name, ItemBase tool, bool use_tool = true )",
      "void OnUpdateActions( Object item, Object target, int component_index )",
      "void OnUpdateActionsNoTool( Object item, Object target, int component_index )",
      "int GetConstructionPartsCount()",
      "void SetCombinationLock( CombinationLock combination_lock )",
      "string GetDialNumberText()",
      "int GetAttachmentSlotFromSelection( PlayerBase player, EntityAI target, ItemBase item_to_attach, string selection )",
      "void GetAttachmentsFromSelection( EntityAI target, string selection, out array<EntityAI> attachments )",
      "void CombineItems( ItemBase target, ItemBase item )",
      "void RefreshAttachmentsToDetach( EntityAI target, string main_part_name )",
      "void SetNextAttachmentIndex()",
      "int GetAttachmentsToDetachCount()",
      "void ResetActionIndexes()"
    ]
  },
  "ConstructionPart": {
    "parent": null,
    "methods": [
      "void ConstructionPart( string name, string part_name, string main_part_name, int id, bool is_built, bool is_base, bool is_gate, array<string> required_parts )",
      "string GetName()",
      "string GetPartName()",
      "string GetMainPartName()",
      "int GetId()",
      "bool IsBuilt()",
      "void SetBuiltState( bool is_built )",
      "void SetRequestBuiltState( bool req_built )",
      "bool IsBase()",
      "bool IsGate()"
    ]
  },
  "BleedingIndicationConstants": {
    "parent": null,
    "methods": []
  },
  "DbgBleedingIndicationStaticInfo": {
    "parent": null,
    "methods": []
  },
  "BleedingSource": {
    "parent": null,
    "methods": [
      "void BleedingSource(PlayerBase player, int bit, string bone, vector orientation, vector offset,int max_time, float flow_modifier, string particle_name)",
      "void SetType(eBleedingSourceType type)",
      "int GetActiveTime()",
      "void SetActiveTime(int time)",
      "int GetBit()",
      "void CreateParticle()",
      "void RemoveParticle()",
      "void OnUpdateServer(float deltatime, float blood_scale, bool no_blood_loss )",
      "void StartSourceBleedingIndication()",
      "void StopSourceBleedingIndication(bool instant = false)",
      "void DrawDebugShape()",
      "void RemoveDebugShape()"
    ]
  },
  "BleedingSourceLocation": {
    "parent": null,
    "methods": [
      "void BleedingSourceLocation()"
    ]
  },
  "BleedingSourcesManagerBase": {
    "parent": null,
    "methods": [
      "void BleedingSourcesManagerBase( PlayerBase player )",
      "void Init()",
      "void SetItem(ItemBase item)",
      "int GetBleedingSourceBitsByInvLocation(int inv_location)",
      "int GetFreeBleedingSourceBitsByInvLocation(int inv_location)",
      "bool IsBleedingSourceActive(string name)",
      "int GetBitFromSelectionID(int id)",
      "int GetRegisteredSourcesCount()",
      "void RegisterBleedingZoneEx(string name, int max_time, string bone = , vector orientation = , vector offset = , float flow_modifier = 1, string particle_name = , int inv_location = 0)",
      "void RegisterBleedingZone(string name, int max_time, string bone = , vector orientation = , vector offset = , float flow_modifier = 1, string particle_name = )",
      "void RemoveAllSources()",
      "int GetBitFromSelectionName(string name)",
      "string GetSelectionNameFromBit(int bit)",
      "bool AttemptAddBleedingSource(int component)",
      "bool AttemptAddBleedingSourceBySelection(string selection_name)",
      "bool AttemptAddBleedingSourceDirectly(int bit, eBleedingSourceType type = eBleedingSourceType.NORMAL, int context = 0)",
      "bool CanAddBleedingSource(int bit)",
      "void AddBleedingSourceEx(int bit, eBleedingSourceType type = eBleedingSourceType.NORMAL, int context = 0)",
      "void AddBleedingSource(int bit)",
      "int GetBleedingSourceActiveTime(int bit)",
      "void SetBleedingSourceActiveTime(int bit, int time)",
      "void SetBleedingSourceType(int bit, eBleedingSourceType type)",
      "bool RemoveBleedingSource(int bit)",
      "int GetBleedingSourcesCount()"
    ]
  },
  "BleedingSourcesManagerRemote": {
    "parent": "BleedingSourcesManagerBase",
    "methods": [
      "void Init()",
      "void RegisterBleedingZoneEx(string name, int max_time, string bone = , vector orientation = , vector offset = , float flow_modifier = 1, string particle_name = , int inv_location = 0)",
      "void OnVariablesSynchronized(int current_bits)",
      "void Reload()",
      "void AddBleedingSource(int bit)",
      "bool RemoveBleedingSource(int bit)",
      "void OnBleedingBitsUpdate(int old_mask, int new_mask)",
      "int GetBleedingSourceCountRemote()",
      "void SetDiag(bool value)",
      "void OnUpdate()",
      "void DisplayDebug()",
      "void CleanDebug()",
      "void DisplayVisualDebug()",
      "void CleanVisualDebug()"
    ]
  },
  "BleedingSourcesManagerServer": {
    "parent": "BleedingSourcesManagerBase",
    "methods": [
      "int GetStorageVersion()",
      "void RequestDeletion(int bit)",
      "void AddBleedingSource(int bit)",
      "bool RemoveBleedingSource(int bit)",
      "void RemoveAnyBleedingSource()",
      "void RemoveMostSignificantBleedingSource()",
      "void RemoveMostSignificantBleedingSourceEx(ItemBase item)",
      "int GetMostSignificantBleedingSource()",
      "void OnTick(float delta_time)",
      "void ActivateAllBS()",
      "void ProcessHit(float damage, EntityAI source, int component, string zone, string ammo, vector modelPos)",
      "void DebugActivateBleedingSource(int source)",
      "void SetBloodLoss(bool status)",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )"
    ]
  },
  "BleedingSourceZone": {
    "parent": null,
    "methods": [
      "void BleedingSourceZone(string selection_name, int bit, vector offset, vector orientation, string bone, int max_time, float flow_modifier, string particle_name)",
      "void SetInvLocation(int inv_slot)",
      "int GetInvLocation()",
      "string GetSelectionName()",
      "int GetMaxTime()",
      "string GetParticleName()",
      "int GetBit()",
      "float GetFlowModifier()",
      "string GetBoneName()"
    ]
  },
  "DamageDealtEffect": {
    "parent": null,
    "methods": [
      "void DamageDealtEffect()",
      "void Update(float deltatime)",
      "void EffectRadial(Param param1, Param param2)"
    ]
  },
  "EffectRadial": {
    "parent": null,
    "methods": [
      "void EffectRadial(Param param1, Param param2)",
      "void Update(float deltatime)"
    ]
  },
  "CfgParam": {
    "parent": null,
    "methods": [
      "void CfgParam(string param_name)",
      "void SetName(string param_name)",
      "string GetName()",
      "int GetType()",
      "bool IsArray()"
    ]
  },
  "CfgParamArray": {
    "parent": "CfgParam",
    "methods": [
      "void CfgParamArray(string param_name)",
      "void Clear()",
      "void InsertValue(CfgParam value)",
      "bool IsParamExist(string name, int cfg_type)",
      "bool RenameParam(string name, int cfg_type, string new_name)",
      "void SetParams(array<ref CfgParam> value_array)",
      "bool IsValueArray()",
      "int GetType()"
    ]
  },
  "CfgParamBool": {
    "parent": "CfgParamType",
    "methods": [
      "void CfgParamBool(string param_name)",
      "void SetValue(bool value)",
      "bool GetValue()",
      "int GetType()"
    ]
  },
  "CfgParamFloat": {
    "parent": "CfgParamType",
    "methods": [
      "void CfgParamFloat(string param_name)",
      "void SetValue(float value)",
      "float GetValue()",
      "int GetType()"
    ]
  },
  "CfgParamInt": {
    "parent": "CfgParamType",
    "methods": [
      "void CfgParamInt(string param_name)",
      "void SetValue(int value)",
      "int GetValue()",
      "int GetType()"
    ]
  },
  "CfgParamString": {
    "parent": "CfgParamType",
    "methods": [
      "void CfgParamString(string param_name)",
      "void SetValue(string value)",
      "string GetValue()",
      "int GetType()"
    ]
  },
  "CfgParamType": {
    "parent": "CfgParam",
    "methods": [
      "void CfgParamType(string param_name)"
    ]
  },
  "ContaminatedArea_Base": {
    "parent": null,
    "methods": [
      "void OnPlayerEnterServer(PlayerBase player, EffectTrigger trigger)",
      "void OnPlayerExitServer(PlayerBase player, EffectTrigger trigger)",
      "void InitZoneClient()",
      "void EEDelete(EntityAI parent)",
      "void SetupZoneData(  EffectAreaParams params )",
      "void EEInit()",
      "void InitZoneServer()"
    ]
  },
  "ContaminatedArea_Static": {
    "parent": null,
    "methods": [
      "void SetupZoneData(  EffectAreaParams params )",
      "void EEInit()",
      "void InitZoneServer()",
      "void InitZoneClient()"
    ]
  },
  "EffectAreaLoader": {
    "parent": null,
    "methods": [
      "static void CreateZones()"
    ]
  },
  "ShellLight": {
    "parent": "PointLightBase",
    "methods": [
      "void ShellLight()",
      "void ContaminatedArea_Dynamic()",
      "void EEOnCECreate()",
      "float GetRemainingTime()",
      "float GetStartDecayLifetime()",
      "float GetFinishDecayLifetime()",
      "void Tick()",
      "void SetDecayState( int newState )",
      "void EEInit()",
      "void InitZone()",
      "void InitZoneServer()",
      "void SpawnItems()",
      "void InitZoneClient()",
      "void OnParticleAllocation(ParticleManager pm, array<ParticleSource> particles)",
      "void CreateTrigger( vector pos, int radius )",
      "void PlayFX()",
      "void PlayExplosionLight()",
      "void PlayFlareVFX()",
      "void EEDelete( EntityAI parent )",
      "void OnVariablesSynchronized()"
    ]
  },
  "ContaminatedArea_Dynamic": {
    "parent": null,
    "methods": [
      "void ContaminatedArea_Dynamic()",
      "void EEOnCECreate()",
      "float GetRemainingTime()",
      "float GetStartDecayLifetime()",
      "float GetFinishDecayLifetime()",
      "void Tick()",
      "void SetDecayState( int newState )",
      "void EEInit()",
      "void InitZone()",
      "void InitZoneServer()",
      "void SpawnItems()",
      "void InitZoneClient()",
      "void OnParticleAllocation(ParticleManager pm, array<ParticleSource> particles)",
      "void CreateTrigger( vector pos, int radius )",
      "void PlayFX()",
      "void PlayExplosionLight()",
      "void PlayFlareVFX()",
      "void EEDelete( EntityAI parent )",
      "void OnVariablesSynchronized()"
    ]
  },
  "ContaminatedArea_Local": {
    "parent": null,
    "methods": [
      "void ContaminatedArea_Local()",
      "void SetupZoneData(  EffectAreaParams params )",
      "void EEInit()",
      "void SpawnItems()",
      "float GetStartDecayLifetime()",
      "float GetFinishDecayLifetime()",
      "float GetRemainingTime()",
      "void Tick()"
    ]
  },
  "DynamicArea_Flare": {
    "parent": null,
    "methods": [
      "void DynamicArea_Flare()",
      "void EOnFrame( IEntity other, float timeSlice )",
      "void EEDelete( EntityAI parent )"
    ]
  },
  "EffectAreaParams": {
    "parent": null,
    "methods": [
      "void EffectArea()",
      "void SetupZoneData( EffectAreaParams params )",
      "void Tick()",
      "void OnCEUpdate()",
      "void InitZone()",
      "void InitZoneServer()",
      "void InitZoneClient()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool DisableVicinityIcon()",
      "bool CanBeTargetedByAI( EntityAI ai )",
      "void PlaceParticles( vector pos, float radius, int nbRings, int innerSpacing, bool outerToggle, int outerSpacing, int outerOffset, int partId )",
      "void OnParticleAllocation(ParticleManager pm, array<ParticleSource> particles)",
      "int GetRequesterIndex(string type)",
      "void CreateTrigger( vector pos, int radius )",
      "void EEDelete( EntityAI parent )",
      "void OnPlayerEnterServer(PlayerBase player, EffectTrigger trigger)",
      "void OnPlayerExitServer(PlayerBase player, EffectTrigger trigger)"
    ]
  },
  "EffectArea": {
    "parent": null,
    "methods": [
      "void EffectArea()",
      "void SetupZoneData( EffectAreaParams params )",
      "void Tick()",
      "void OnCEUpdate()",
      "void InitZone()",
      "void InitZoneServer()",
      "void InitZoneClient()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool DisableVicinityIcon()",
      "bool CanBeTargetedByAI( EntityAI ai )",
      "void PlaceParticles( vector pos, float radius, int nbRings, int innerSpacing, bool outerToggle, int outerSpacing, int outerOffset, int partId )",
      "void OnParticleAllocation(ParticleManager pm, array<ParticleSource> particles)",
      "int GetRequesterIndex(string type)",
      "void CreateTrigger( vector pos, int radius )",
      "void EEDelete( EntityAI parent )",
      "void OnPlayerEnterServer(PlayerBase player, EffectTrigger trigger)",
      "void OnPlayerExitServer(PlayerBase player, EffectTrigger trigger)"
    ]
  },
  "GeyserArea": {
    "parent": null,
    "methods": [
      "void EEDelete( EntityAI parent )",
      "void InitZoneServer()",
      "void TickState()",
      "void KillEntitiesInArea()"
    ]
  },
  "HotSpringArea": {
    "parent": null,
    "methods": [
      "void InitZoneServer()"
    ]
  },
  "JsonDataContaminatedAreas": {
    "parent": null,
    "methods": []
  },
  "JsonDataContaminatedArea": {
    "parent": null,
    "methods": []
  },
  "JsonDataAreaData": {
    "parent": null,
    "methods": []
  },
  "JsonDataPlayerData": {
    "parent": null,
    "methods": []
  },
  "SpookyArea": {
    "parent": null,
    "methods": [
      "void EEInit()",
      "void InitZoneServer()",
      "void InitZoneClient()",
      "void OnPlayerEnterServer(PlayerBase player, EffectTrigger trigger)",
      "void OnPlayerExitServer(PlayerBase player, EffectTrigger trigger)"
    ]
  },
  "SpookyArea23": {
    "parent": null,
    "methods": [
      "void OnPlayerEnterServer(PlayerBase player, EffectTrigger trigger)",
      "void OnPlayerExitServer(PlayerBase player, EffectTrigger trigger)"
    ]
  },
  "SpookyEventWind": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool CanDo(PlayerBase player, TStringVectorMap surfaceTypes)",
      "void Do(PlayerBase player)",
      "void SpookyEventBase()",
      "void SetCoolDown(float secs)",
      "bool HasSurfaces()",
      "bool CanPerform(PlayerBase player, float currentTime, TStringVectorMap surfaceTypes)",
      "void Perform(PlayerBase player, float currentTime, TStringVectorMap gatheredSurfaces)",
      "void SpookyTriggerEventsHandler(notnull PlayerBase player)",
      "void RegisterEvents()",
      "void Update(float deltaTime)",
      "void GatherSurfaces(notnull TStringVectorMap gatheredGurfaces)",
      "bool SelectEvent()",
      "void EEInit()"
    ]
  },
  "SpookyEventWhisper": {
    "parent": null,
    "methods": [
      "void Init()",
      "void Do(PlayerBase player)",
      "bool CanDo(PlayerBase player, TStringVectorMap surfaceTypes)",
      "void SpookyEventBase()",
      "void SetCoolDown(float secs)",
      "bool HasSurfaces()",
      "bool CanPerform(PlayerBase player, float currentTime, TStringVectorMap surfaceTypes)",
      "void Perform(PlayerBase player, float currentTime, TStringVectorMap gatheredSurfaces)",
      "void SpookyTriggerEventsHandler(notnull PlayerBase player)",
      "void RegisterEvents()",
      "void Update(float deltaTime)",
      "void GatherSurfaces(notnull TStringVectorMap gatheredGurfaces)",
      "bool SelectEvent()",
      "void EEInit()"
    ]
  },
  "SpookyEventSteps": {
    "parent": null,
    "methods": [
      "void Init()",
      "void Do(PlayerBase player)",
      "bool CanDo(PlayerBase player, TStringVectorMap surfaceTypes)",
      "void SpookyEventBase()",
      "void SetCoolDown(float secs)",
      "bool HasSurfaces()",
      "bool CanPerform(PlayerBase player, float currentTime, TStringVectorMap surfaceTypes)",
      "void Perform(PlayerBase player, float currentTime, TStringVectorMap gatheredSurfaces)",
      "void SpookyTriggerEventsHandler(notnull PlayerBase player)",
      "void RegisterEvents()",
      "void Update(float deltaTime)",
      "void GatherSurfaces(notnull TStringVectorMap gatheredGurfaces)",
      "bool SelectEvent()",
      "void EEInit()"
    ]
  },
  "SpookyEventRustle": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool CanDo(PlayerBase player, TStringVectorMap surfaceTypes)",
      "void Do(PlayerBase player)",
      "void SpookyEventBase()",
      "void SetCoolDown(float secs)",
      "bool HasSurfaces()",
      "bool CanPerform(PlayerBase player, float currentTime, TStringVectorMap surfaceTypes)",
      "void Perform(PlayerBase player, float currentTime, TStringVectorMap gatheredSurfaces)",
      "void SpookyTriggerEventsHandler(notnull PlayerBase player)",
      "void RegisterEvents()",
      "void Update(float deltaTime)",
      "void GatherSurfaces(notnull TStringVectorMap gatheredGurfaces)",
      "bool SelectEvent()",
      "void EEInit()"
    ]
  },
  "SpookyEventBase": {
    "parent": null,
    "methods": [
      "void SpookyEventBase()",
      "void Init()",
      "void SetCoolDown(float secs)",
      "bool HasSurfaces()",
      "bool CanDo(PlayerBase player, TStringVectorMap surfaceTypes)",
      "void Do(PlayerBase player)",
      "bool CanPerform(PlayerBase player, float currentTime, TStringVectorMap surfaceTypes)",
      "void Perform(PlayerBase player, float currentTime, TStringVectorMap gatheredSurfaces)",
      "void SpookyTriggerEventsHandler(notnull PlayerBase player)",
      "void RegisterEvents()",
      "void Update(float deltaTime)",
      "void GatherSurfaces(notnull TStringVectorMap gatheredGurfaces)",
      "bool SelectEvent()",
      "void EEInit()"
    ]
  },
  "SpookyTriggerEventsHandler": {
    "parent": null,
    "methods": [
      "void SpookyTriggerEventsHandler(notnull PlayerBase player)",
      "void RegisterEvents()",
      "void Update(float deltaTime)",
      "void GatherSurfaces(notnull TStringVectorMap gatheredGurfaces)",
      "bool SelectEvent()",
      "void EEInit()"
    ]
  },
  "SpookyPlayerStalker": {
    "parent": null,
    "methods": [
      "void EEInit()"
    ]
  },
  "VolcanicArea": {
    "parent": null,
    "methods": [
      "void InitZoneServer()"
    ]
  },
  "Cooking": {
    "parent": null,
    "methods": [
      "void SetCookingUpdateTime(float val)",
      "void ProcessItemToCook(notnull ItemBase pItem, ItemBase cookingEquip, Param2<CookingMethodType, float> pCookingMethod, out Param2<bool, bool> pStateFlags)",
      "int CookWithEquipment(ItemBase cooking_equipment, float cooking_time_coef = 1)",
      "int CookOnStick( Edible_Base item_to_cook, float cook_time_inc )",
      "int UpdateCookingState(Edible_Base item_to_cook, CookingMethodType cooking_method, ItemBase cooking_equipment, float cooking_time_coef)",
      "int UpdateCookingStateOnStick( Edible_Base item_to_cook, float cook_time_inc )",
      "void SmokeItem(Edible_Base item_to_cook, float cook_time_inc)",
      "void TerminateCookingSounds(ItemBase pItem)",
      "float GetTimeToCook( Edible_Base item_to_cook, CookingMethodType cooking_method )",
      "float GetMinTempToCook( Edible_Base item_to_cook, CookingMethodType cooking_method )",
      "void AddTemperatureToItem( ItemBase cooked_item, ItemBase cooking_equipment, float min_temperature )",
      "void DecreaseCookedItemQuantity(notnull Edible_Base pItem, float pAmount = 0.0)"
    ]
  },
  "FireConsumable": {
    "parent": null,
    "methods": [
      "void FireConsumable( ItemBase item, float energy )",
      "float GetEnergy()",
      "float GetRemainingEnergy()",
      "void SetRemainingEnergy( float energy )"
    ]
  },
  "FireConsumableType": {
    "parent": null,
    "methods": [
      "void FireConsumableType( typename item_type, float energy, bool is_kindling, string att_slot )",
      "float GetEnergy()",
      "bool IsKindling()",
      "string GetAttSlot()"
    ]
  },
  "FreshSpawn_Preset": {
    "parent": "PresetSpawnBase",
    "methods": [
      "void OnPresetSpawn(PlayerBase player)",
      "void Init(PlayerBase player)",
      "void TakeToHands(EntityAI item)",
      "void FindAndTakeToHandsFromInventory(string classname)"
    ]
  },
  "Farmer_Preset": {
    "parent": "PresetSpawnBase",
    "methods": [
      "void OnPresetSpawn(PlayerBase player)",
      "void Init(PlayerBase player)",
      "void TakeToHands(EntityAI item)",
      "void FindAndTakeToHandsFromInventory(string classname)"
    ]
  },
  "Fisherman_Preset": {
    "parent": "PresetSpawnBase",
    "methods": [
      "void OnPresetSpawn(PlayerBase player)",
      "void Init(PlayerBase player)",
      "void TakeToHands(EntityAI item)",
      "void FindAndTakeToHandsFromInventory(string classname)"
    ]
  },
  "AntiHazard_Preset": {
    "parent": "PresetSpawnBase",
    "methods": [
      "void OnPresetSpawn(PlayerBase player)",
      "void Init(PlayerBase player)",
      "void TakeToHands(EntityAI item)",
      "void FindAndTakeToHandsFromInventory(string classname)"
    ]
  },
  "Update117_Preset": {
    "parent": "PresetSpawnBase",
    "methods": [
      "void OnPresetSpawn(PlayerBase player)",
      "void Init(PlayerBase player)",
      "void TakeToHands(EntityAI item)",
      "void FindAndTakeToHandsFromInventory(string classname)"
    ]
  },
  "Update118_Preset": {
    "parent": "PresetSpawnBase",
    "methods": [
      "void OnPresetSpawn(PlayerBase player)",
      "void Init(PlayerBase player)",
      "void TakeToHands(EntityAI item)",
      "void FindAndTakeToHandsFromInventory(string classname)"
    ]
  },
  "BBMaterials_Preset": {
    "parent": "PresetSpawnBase",
    "methods": [
      "void OnPresetSpawn(PlayerBase player)",
      "void Init(PlayerBase player)",
      "void TakeToHands(EntityAI item)",
      "void FindAndTakeToHandsFromInventory(string classname)"
    ]
  },
  "Military_Light_Preset": {
    "parent": "PresetSpawnBase",
    "methods": [
      "void OnPresetSpawn(PlayerBase player)",
      "void Init(PlayerBase player)",
      "void TakeToHands(EntityAI item)",
      "void FindAndTakeToHandsFromInventory(string classname)"
    ]
  },
  "PresetSpawnBase": {
    "parent": null,
    "methods": [
      "void Init(PlayerBase player)",
      "void OnPresetSpawn(PlayerBase player)",
      "void TakeToHands(EntityAI item)",
      "void FindAndTakeToHandsFromInventory(string classname)"
    ]
  },
  "DestructionEffectGasCanister": {
    "parent": null,
    "methods": [
      "void Init()",
      "void OnEntityDestroyedOneTimeClient(EntityAI entity, int oldLevel, string zone)",
      "void OnEntityDestroyedOneTimeServer(EntityAI entity, int oldLevel, string zone)",
      "void OnEntityDestroyedPersistentClient(EntityAI entity, string zone)",
      "void OnEntityDestroyedPersistentServer(EntityAI entity, string zone)",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)"
    ]
  },
  "DestructionEffectMetalicMechanism": {
    "parent": null,
    "methods": [
      "void Init()",
      "void OnEntityDestroyedOneTimeClient(EntityAI entity, int oldLevel, string zone)",
      "void OnEntityDestroyedOneTimeServer(EntityAI entity, int oldLevel, string zone)",
      "void OnEntityDestroyedPersistentClient(EntityAI entity, string zone)",
      "void OnEntityDestroyedPersistentServer(EntityAI entity, string zone)",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)"
    ]
  },
  "DestructionEffectSpookyGoat": {
    "parent": null,
    "methods": [
      "void Init()",
      "void OnEntityDestroyedOneTimeClient(EntityAI entity, int oldLevel, string zone)",
      "void OnEntityDestroyedOneTimeServer(EntityAI entity, int oldLevel, string zone)",
      "void OnEntityDestroyedPersistentClient(EntityAI entity, string zone)",
      "void OnEntityDestroyedPersistentServer(EntityAI entity, string zone)",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)"
    ]
  },
  "EmoteBase": {
    "parent": null,
    "methods": [
      "bool EmoteCondition(int stancemask)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "bool EmoteFBStanceCheck(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void SetOwnerPlayer(PlayerBase player)",
      "int GetID()",
      "string GetInputActionName()",
      "int GetStanceMaskAdditive()",
      "int GetStanceMaskFullbody()",
      "int GetAdditiveCallbackUID()",
      "int GetFullbodyCallbackUID()",
      "bool GetHideItemInHands()"
    ]
  },
  "EmoteGreeting": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteGreeting()",
      "void EmoteSOS()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteHeart()",
      "void EmoteTaunt()",
      "void EmoteLyingDown()",
      "void EmoteTauntKiss()",
      "void EmotePoint()",
      "void EmoteTauntElbow()",
      "void EmoteThumb()",
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteSOS": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteSOS()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteHeart()",
      "void EmoteTaunt()",
      "void EmoteLyingDown()",
      "void EmoteTauntKiss()",
      "void EmotePoint()",
      "void EmoteTauntElbow()",
      "void EmoteThumb()",
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteHeart": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteHeart()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteTaunt()",
      "void EmoteLyingDown()",
      "void EmoteTauntKiss()",
      "void EmotePoint()",
      "void EmoteTauntElbow()",
      "void EmoteThumb()",
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteTaunt": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteTaunt()",
      "void EmoteLyingDown()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteTauntKiss()",
      "void EmotePoint()",
      "void EmoteTauntElbow()",
      "void EmoteThumb()",
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteLyingDown": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteLyingDown()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteTauntKiss()",
      "void EmotePoint()",
      "void EmoteTauntElbow()",
      "void EmoteThumb()",
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteTauntKiss": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteTauntKiss()",
      "void EmotePoint()",
      "void EmoteTauntElbow()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteThumb()",
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmotePoint": {
    "parent": "EmoteBase",
    "methods": [
      "void EmotePoint()",
      "void EmoteTauntElbow()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteThumb()",
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteTauntElbow": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteTauntElbow()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteThumb()",
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteThumb": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteThumb()",
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteThumbDown": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteThumbDown()",
      "void EmoteThroat()",
      "void EmoteDance()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteThroat": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteThroat()",
      "void EmoteDance()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteDance": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteDance()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteSalute()",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteSalute": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteSalute()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteTimeout()",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteTimeout": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteTimeout()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteDabbing": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteDabbing()",
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteFacepalm": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteFacepalm()",
      "void EmoteClap()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteClap": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteClap()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteSilent": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteSilent()",
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteWatching": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteWatching()",
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteHold": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteHold()",
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteListening": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteListening()",
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmotePointSelf": {
    "parent": "EmoteBase",
    "methods": [
      "void EmotePointSelf()",
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteLookAtMe": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteLookAtMe()",
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteTauntThink": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteTauntThink()",
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteMove": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteMove()",
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteGetDown": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteGetDown()",
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteCome": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteCome()",
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteSurrender": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteSurrender()",
      "bool EmoteCondition(int stancemask)",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)",
      "void EmoteCampfireSit()",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()"
    ]
  },
  "EmoteCampfireSit": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteCampfireSit()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteSitA()",
      "void EmoteSitB()",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteSitA": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteSitA()",
      "void EmoteSitB()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteSitB": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteSitB()",
      "bool EmoteCondition(int stancemask)",
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteRPSRandom": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteRPSRandom()",
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteCondition(int stancemask)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteRPSRock": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteRPSRock()",
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteCondition(int stancemask)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteRPSPaper": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteRPSPaper()",
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteCondition(int stancemask)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteRPSScisors": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteRPSScisors()",
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteCondition(int stancemask)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteNod": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteNod()",
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteCondition(int stancemask)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteShake": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteShake()",
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteCondition(int stancemask)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteShrug": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteShrug()",
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteCondition(int stancemask)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteSuicide": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteSuicide()",
      "bool DetermineOverride(out int callback_ID, out int stancemask, out bool is_fullbody)",
      "bool EmoteCondition(int stancemask)",
      "bool CanBeCanceledNormally(notnull EmoteCB callback)",
      "void OnBeforeStandardCallbackCreated(int callback_ID, int stancemask, bool is_fullbody)",
      "void OnCallbackEnd()",
      "void EmoteVomit()",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EmoteVomit": {
    "parent": "EmoteBase",
    "methods": [
      "void EmoteVomit()",
      "bool EmoteCondition(int stancemask)",
      "bool EmoteStartOverride(typename callbacktype, int id, int mask, bool fullbody)"
    ]
  },
  "EnvironmentSnapshotData": {
    "parent": null,
    "methods": [
      "void Environment(PlayerBase pPlayer)",
      "void Init()",
      "void Update(float pDelta)",
      "bool IsTemperatureSet()",
      "float GetPlayerHeat()",
      "bool IsUnderRoof()",
      "bool IsWaterContact()",
      "bool IsInsideBuilding()",
      "bool IsInsideVehicle()",
      "bool IsChildOfType(array<typename> typenames)",
      "bool IsUnderRoofBuilding()",
      "bool IsRaining()",
      "bool IsSnowing()",
      "bool DetermineHeatcomfortBehavior()",
      "void CheckUnderRoof()",
      "void CheckWaterContact(out float pWaterLevel)",
      "float GetWindModifierPerSurface()",
      "float GetTemperature()",
      "float GetTargetHeatComfort()",
      "float GetEnvironmentTemperature()",
      "float GetWetDelta()",
      "void CollectAndSetPlayerData()",
      "void CollectAndSetEnvironmentData()",
      "void SetEnvironmentTemperature()",
      "void SetAreaGenericColdness()",
      "void ProcessWetnessByWaterLevel(float pWaterLevel)",
      "void ProcessItemsWetness(array<int> pSlotIds)",
      "void ProcessItemsDryness()",
      "void ApplyWetnessToItem(ItemBase pItem)",
      "void ApplyDrynessToItem(ItemBase pItem)",
      "void ApplyDrynessToItemEx(ItemBase pItem, EnvironmentDrynessData pDrynessData)",
      "void ProcessHeatComfort()",
      "void SetTargetHeatComfort(float value)",
      "void SetHeatcomfortDirectly()",
      "void ProcessHeatBuffer(EnvironmentSnapshotData data)",
      "float GetApplicableHeatbuffer()",
      "void ProcessItemsTemperature(array<int> pBodyPartIds)",
      "void ProcessItemsInHandsTemperature()",
      "void ProcessItemHierarchyRecursive(ItemBase item, float heatPermeabilityCoef = 1.0)",
      "void SetProcessedItemTemperature(ItemBase item, float heatPermeabilityCoef = 1.0)",
      "float EnvTempToCoef(float pTemp)",
      "void BodyPartHeatProperties(int pBodyPartId, float pCoef, out float pHeatComfort, out float pHeat)",
      "float NakedBodyPartHeatComfortPenalty(int pBodyPartSlotId, float pCoef)",
      "void GatherTemperatureSources()",
      "void SetItemHeatingCoef(float val)",
      "void ProcessTemperatureSources()",
      "void OnTemperatureSourcesEnter()",
      "void OnTemperatureSourcesLeft()",
      "float GetUniversalSourcesTemperageAverage()",
      "float CalcTemperatureFromTemperatureSource(notnull UTemperatureSource uts)",
      "void ShowEnvDebugPlayerInfo(bool enabled)",
      "static void DisplayEnvDebugPlayerInfo(bool enabled, EnvDebugData data)",
      "void FillDebugWeatherData(EnvDebugWeatherData data)",
      "string GetDebugMessage()",
      "int GetNextRoofCheck()",
      "float GetWaterLevel()",
      "bool IsNeutralTemperature(float temperature, float lowerLimit = GameConstants.ITEM_TEMPERATURE_NEUTRAL_ZONE_LOWER_LIMIT, float upperLimit = GameConstants.ITEM_TEMPERATURE_NEUTRAL_ZONE_UPPER_LIMIT)",
      "float NormalizedTemperature(float temperature, float lowerLimit = GameConstants.ENVIRO_LOW_TEMP_LIMIT, float upperLimit = GameConstants.ENVIRO_HIGH_TEMP_LIMIT)",
      "void LogDryWetProcess(string message, bool indented = false)",
      "void LogItemHeat(string message, bool indented = false)",
      "void Init(PlayerBase pPlayer)",
      "bool OverridenHeatComfort(out float value)",
      "void AddToEnvironmentTemperature(float pTemperature)",
      "void ProcessItemsHeat()",
      "void ProcessWetnessByRain()",
      "float GetTemperatureHeightCorrection()",
      "void BodyPartHeatProperties(array<int> pBodyPartIds, float pCoef, out float pHeatComfort, out float pHeat)",
      "void SetEnvironmentSnapshotData()",
      "void ProcessHeatBuffer(float heatComfortCloths)",
      "float WindEffectTemperatureValue(float temperatureInput)",
      "float GetDayOrNight()",
      "void Synch(Environment env, PlayerBase player)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Synch(Environment env)"
    ]
  },
  "Environment": {
    "parent": null,
    "methods": [
      "void Environment(PlayerBase pPlayer)",
      "void Init()",
      "void Update(float pDelta)",
      "bool IsTemperatureSet()",
      "float GetPlayerHeat()",
      "bool IsUnderRoof()",
      "bool IsWaterContact()",
      "bool IsInsideBuilding()",
      "bool IsInsideVehicle()",
      "bool IsChildOfType(array<typename> typenames)",
      "bool IsUnderRoofBuilding()",
      "bool IsRaining()",
      "bool IsSnowing()",
      "bool DetermineHeatcomfortBehavior()",
      "void CheckUnderRoof()",
      "void CheckWaterContact(out float pWaterLevel)",
      "float GetWindModifierPerSurface()",
      "float GetTemperature()",
      "float GetTargetHeatComfort()",
      "float GetEnvironmentTemperature()",
      "float GetWetDelta()",
      "void CollectAndSetPlayerData()",
      "void CollectAndSetEnvironmentData()",
      "void SetEnvironmentTemperature()",
      "void SetAreaGenericColdness()",
      "void ProcessWetnessByWaterLevel(float pWaterLevel)",
      "void ProcessItemsWetness(array<int> pSlotIds)",
      "void ProcessItemsDryness()",
      "void ApplyWetnessToItem(ItemBase pItem)",
      "void ApplyDrynessToItem(ItemBase pItem)",
      "void ApplyDrynessToItemEx(ItemBase pItem, EnvironmentDrynessData pDrynessData)",
      "void ProcessHeatComfort()",
      "void SetTargetHeatComfort(float value)",
      "void SetHeatcomfortDirectly()",
      "void ProcessHeatBuffer(EnvironmentSnapshotData data)",
      "float GetApplicableHeatbuffer()",
      "void ProcessItemsTemperature(array<int> pBodyPartIds)",
      "void ProcessItemsInHandsTemperature()",
      "void ProcessItemHierarchyRecursive(ItemBase item, float heatPermeabilityCoef = 1.0)",
      "void SetProcessedItemTemperature(ItemBase item, float heatPermeabilityCoef = 1.0)",
      "float EnvTempToCoef(float pTemp)",
      "void BodyPartHeatProperties(int pBodyPartId, float pCoef, out float pHeatComfort, out float pHeat)",
      "float NakedBodyPartHeatComfortPenalty(int pBodyPartSlotId, float pCoef)",
      "void GatherTemperatureSources()",
      "void SetItemHeatingCoef(float val)",
      "void ProcessTemperatureSources()",
      "void OnTemperatureSourcesEnter()",
      "void OnTemperatureSourcesLeft()",
      "float GetUniversalSourcesTemperageAverage()",
      "float CalcTemperatureFromTemperatureSource(notnull UTemperatureSource uts)",
      "void ShowEnvDebugPlayerInfo(bool enabled)",
      "static void DisplayEnvDebugPlayerInfo(bool enabled, EnvDebugData data)",
      "void FillDebugWeatherData(EnvDebugWeatherData data)",
      "string GetDebugMessage()",
      "int GetNextRoofCheck()",
      "float GetWaterLevel()",
      "bool IsNeutralTemperature(float temperature, float lowerLimit = GameConstants.ITEM_TEMPERATURE_NEUTRAL_ZONE_LOWER_LIMIT, float upperLimit = GameConstants.ITEM_TEMPERATURE_NEUTRAL_ZONE_UPPER_LIMIT)",
      "float NormalizedTemperature(float temperature, float lowerLimit = GameConstants.ENVIRO_LOW_TEMP_LIMIT, float upperLimit = GameConstants.ENVIRO_HIGH_TEMP_LIMIT)",
      "void LogDryWetProcess(string message, bool indented = false)",
      "void LogItemHeat(string message, bool indented = false)",
      "void Init(PlayerBase pPlayer)",
      "bool OverridenHeatComfort(out float value)",
      "void AddToEnvironmentTemperature(float pTemperature)",
      "void ProcessItemsHeat()",
      "void ProcessWetnessByRain()",
      "float GetTemperatureHeightCorrection()",
      "void BodyPartHeatProperties(array<int> pBodyPartIds, float pCoef, out float pHeatComfort, out float pHeat)",
      "void SetEnvironmentSnapshotData()",
      "void ProcessHeatBuffer(float heatComfortCloths)",
      "float WindEffectTemperatureValue(float temperatureInput)",
      "float GetDayOrNight()",
      "void Synch(Environment env, PlayerBase player)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Synch(Environment env)"
    ]
  },
  "EnvironmentDrynessData": {
    "parent": null,
    "methods": [
      "void Synch(Environment env, PlayerBase player)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Synch(Environment env)"
    ]
  },
  "EnvDebugPlayerData": {
    "parent": null,
    "methods": [
      "void Synch(Environment env, PlayerBase player)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Synch(Environment env)"
    ]
  },
  "EnvDebugMiscData": {
    "parent": null,
    "methods": [
      "void Synch(Environment env)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Synch(Environment env, PlayerBase player)"
    ]
  },
  "EnvDebugWeatherData": {
    "parent": null,
    "methods": [
      "void Synch(Environment env)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)",
      "void Synch(Environment env, PlayerBase player)"
    ]
  },
  "EnvDebugData": {
    "parent": null,
    "methods": [
      "void Synch(Environment env, PlayerBase player)",
      "bool Serialize(Serializer ctx)",
      "bool Deserializer(Serializer ctx)"
    ]
  },
  "FlashbangEffect": {
    "parent": null,
    "methods": [
      "void FlashbangEffect(PlayerBase player, bool visual = true)",
      "void SetupFlashbangValues(float progress_mult = 1.0, float visual_value_max = 1.0, float sound_value_max = 1.0)",
      "void PlaySound()",
      "void SetAttenuationFilter()",
      "void ResetAttenuationFilter()",
      "void StopSound()",
      "void ClearVisual()",
      "void SetVisual(float val)",
      "void Stop()",
      "void Update(float deltatime)"
    ]
  },
  "FoodStage": {
    "parent": null,
    "methods": [
      "void FoodStage( Edible_Base food_item )",
      "void SetupFoodStageMapping()",
      "void SetupFoodStageTransitionMapping()",
      "void SetFoodStageType( FoodStageType food_stage_type )",
      "int GetSelectionIndex()",
      "void SetSelectionIndex( int index )",
      "int GetTextureIndex()",
      "void SetTextureIndex( int index )",
      "int GetMaterialIndex()",
      "void SetMaterialIndex( int index )",
      "static float GetNutritionPropertyFromIndex( int index, FoodStageType stage_type, FoodStage stage, string classname )",
      "static float GetFullnessIndex(FoodStage stage, int stage_type = -1, string classname = )",
      "static float GetEnergy(FoodStage stage, int stage_type = -1, string classname = )",
      "static float GetWater(FoodStage stage, int stage_type = -1, string classname = )",
      "static float GetNutritionalIndex(FoodStage stage, int stage_type = -1, string classname = )",
      "static float GetToxicity(FoodStage stage, int stage_type = -1, string classname = )",
      "static int GetAgents(FoodStage stage, int stage_type = -1, string classname = )",
      "static float GetDigestibility(FoodStage stage, int stage_type = -1, string classname = )",
      "static float GetAgentsPerDigest(FoodStage stage, int stageType = -1, string className = )",
      "float GetCookingTime()",
      "void SetCookingTime( float time )",
      "static float GetCookingPropertyFromIndex( int index, FoodStageType stage_type, FoodStage stage, string classname )",
      "bool CanChangeToNewStage( CookingMethodType cooking_method )",
      "bool CanTransitionToFoodStageType(FoodStageType type)",
      "void ChangeFoodStage(FoodStageType new_stage_type)",
      "void OnFoodStageChange(FoodStageType stageOld, FoodStageType stageNew)",
      "void UpdateVisualsEx(bool forced = false)",
      "bool IsFoodInStage( FoodStageType food_stage_type )",
      "bool IsFoodRaw()",
      "bool IsFoodBaked()",
      "bool IsFoodBoiled()",
      "bool IsFoodDried()",
      "bool IsFoodBurned()",
      "bool IsFoodRotten()",
      "static string GetFoodStageName( FoodStageType food_stage_type )",
      "static int GetFoodStageNameHash( FoodStageType food_stage_type )",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void UpdateVisuals()"
    ]
  },
  "HitDirectionEffectArrow": {
    "parent": "HitDirectionEffectBase",
    "methods": [
      "void FinalizePositionCalculation()",
      "void SetIndicatorRotation(float timeslice = -1.0)"
    ]
  },
  "HitDirectionEffectBase": {
    "parent": null,
    "methods": [
      "void HitDirectionEffectBase()",
      "void Init(DayZPlayer player, float hit_direction, float intensity_max)",
      "bool DurationCheck()",
      "void Update( float timeslice )",
      "void CalculateArrowPosition(float timeslice = -1.0)",
      "void FinalizePositionCalculation()",
      "void SetIndicatorRotation(float timeslice = -1.0)",
      "void SetIndicatorPositon(float timeslice = -1.0)",
      "static void CheckValues()"
    ]
  },
  "HitDirectionEffectSpike": {
    "parent": "HitDirectionEffectBase",
    "methods": [
      "void FinalizePositionCalculation()",
      "void SetIndicatorRotation(float timeslice = -1.0)"
    ]
  },
  "HitDirectionEffectSplash": {
    "parent": "HitDirectionEffectBase",
    "methods": [
      "void FinalizePositionCalculation()",
      "void SetIndicatorRotation(float timeslice = -1.0)"
    ]
  },
  "PlantMaterialHealth": {
    "parent": null,
    "methods": [
      "void PlantMaterialHealth()"
    ]
  },
  "SyncedValue": {
    "parent": null,
    "methods": [
      "void SyncedValue( string name, float value, bool state, float val_norm )",
      "string GetName()",
      "float GetValue()",
      "float GetValueNorm()",
      "bool GetState()",
      "void SyncedValueLevel( string name, float value, float value2 )",
      "float GetValue2()",
      "void SyncedValueModifier( int id, string name, bool active, bool locked )",
      "int GetID()",
      "bool GetLocked()",
      "bool GetActive()",
      "void SyncedValueAgent(string name, string value, int id, float temporaryResistance)",
      "string GetValue()",
      "float GetTemporaryResistanceTime()"
    ]
  },
  "SyncedValueLevel": {
    "parent": null,
    "methods": [
      "void SyncedValueLevel( string name, float value, float value2 )",
      "string GetName()",
      "float GetValue()",
      "float GetValue2()",
      "void SyncedValueModifier( int id, string name, bool active, bool locked )",
      "int GetID()",
      "bool GetLocked()",
      "bool GetActive()",
      "void SyncedValueAgent(string name, string value, int id, float temporaryResistance)",
      "string GetValue()",
      "float GetTemporaryResistanceTime()"
    ]
  },
  "SyncedValueModifier": {
    "parent": null,
    "methods": [
      "void SyncedValueModifier( int id, string name, bool active, bool locked )",
      "string GetName()",
      "int GetID()",
      "bool GetLocked()",
      "bool GetActive()",
      "void SyncedValueAgent(string name, string value, int id, float temporaryResistance)",
      "string GetValue()",
      "float GetTemporaryResistanceTime()"
    ]
  },
  "SyncedValueAgent": {
    "parent": null,
    "methods": [
      "void SyncedValueAgent(string name, string value, int id, float temporaryResistance)",
      "string GetName()",
      "string GetValue()",
      "int GetID()",
      "float GetTemporaryResistanceTime()"
    ]
  },
  "PlayerSpawnDataInterpreted": {
    "parent": null,
    "methods": []
  },
  "PlayerSpawnJsonDataBase": {
    "parent": null,
    "methods": [
      "bool IsValid()",
      "string GetRandomCharacterType()",
      "bool HasAttachmentSlotSetsDefined()",
      "bool HasDiscreteUnsortedItemSetsDefined()",
      "bool TranslateAndValidateSlot(EntityAI parent, inout int slotID)",
      "int GetQuickbarIdx()"
    ]
  },
  "PlayerSpawnJsonData": {
    "parent": null,
    "methods": [
      "string GetRandomCharacterType()",
      "bool IsValid()",
      "bool HasAttachmentSlotSetsDefined()",
      "bool HasDiscreteUnsortedItemSetsDefined()",
      "bool TranslateAndValidateSlot(EntityAI parent, inout int slotID)",
      "int GetQuickbarIdx()"
    ]
  },
  "PlayerSpawnPreset": {
    "parent": null,
    "methods": [
      "string GetRandomCharacterType()",
      "bool IsValid()",
      "bool HasAttachmentSlotSetsDefined()",
      "bool HasDiscreteUnsortedItemSetsDefined()",
      "bool TranslateAndValidateSlot(EntityAI parent, inout int slotID)",
      "int GetQuickbarIdx()"
    ]
  },
  "PlayerSpawnPresetSlotData": {
    "parent": null,
    "methods": [
      "bool TranslateAndValidateSlot(EntityAI parent, inout int slotID)",
      "bool IsValid()",
      "int GetQuickbarIdx()"
    ]
  },
  "PlayerSpawnPresetItemSetBase": {
    "parent": null,
    "methods": [
      "int GetQuickbarIdx()",
      "bool IsValid()"
    ]
  },
  "PlayerSpawnPresetDiscreteItemSetBase": {
    "parent": null,
    "methods": [
      "bool IsValid()",
      "int GetQuickbarIdx()"
    ]
  },
  "PlayerSpawnPresetDiscreteItemSetSlotData": {
    "parent": null,
    "methods": [
      "bool IsValid()",
      "int GetQuickbarIdx()"
    ]
  },
  "PlayerSpawnPresetDiscreteCargoSetData": {
    "parent": null,
    "methods": [
      "bool IsValid()",
      "int GetQuickbarIdx()"
    ]
  },
  "PlayerSpawnPresetComplexChildrenType": {
    "parent": null,
    "methods": [
      "bool IsValid()",
      "int GetQuickbarIdx()"
    ]
  },
  "PlayerSpawnAttributesData": {
    "parent": null,
    "methods": []
  },
  "PlayerSpawnHandler": {
    "parent": null,
    "methods": [
      "static bool LoadData()",
      "static bool IsInitialized()",
      "static bool ProcessEquipmentData(PlayerBase player, PlayerSpawnPreset data)",
      "static void ProcessSlotsEquipment(PlayerBase player, PlayerSpawnPreset data)",
      "static bool SelectAndSpawnSlotEquipment(PlayerBase player, PlayerSpawnPresetSlotData slotData)",
      "static void ProcessCargoEquipment(PlayerBase player, PlayerSpawnPreset data)",
      "static bool SelectAndSpawnCargoSet(PlayerBase player, PlayerSpawnPreset data)",
      "static bool SpawnDiscreteCargoItemSet(PlayerBase player, PlayerSpawnPresetDiscreteCargoSetData csd)",
      "static bool SpawnDiscreteSlotItemSet(PlayerBase player, PlayerSpawnPresetDiscreteItemSetSlotData dis, int slotID)",
      "static bool SpawnComplexChildrenItems(EntityAI parent, notnull PlayerSpawnPresetItemSetBase data)",
      "static bool SpawnSimpleChildrenItems(EntityAI parent, PlayerSpawnPresetItemSetBase data)",
      "static void HandleNewItem(notnull ItemBase item, PlayerSpawnPresetItemSetBase data)",
      "static void ApplyAttributes(ItemBase item, PlayerSpawnAttributesData attributes)",
      "static bool IsWeaponAndMagazineType(EntityAI parent, string type)"
    ]
  },
  "ModifierBase": {
    "parent": null,
    "methods": [
      "void ModifierBase()",
      "void InitBase(PlayerBase player, ModifiersManager manager)",
      "void Init()",
      "bool IsPersistent()",
      "void MakeParamObjectPersistent(Param object)",
      "void ResetLastTickTime()",
      "string GetDebugText()",
      "string GetDebugTextSimple()",
      "void DisableActivateCheck()",
      "void DisableDeactivateCheck()",
      "void Tick(float delta_time)",
      "bool IsActive()",
      "void SetLock(bool state)",
      "bool IsLocked()",
      "bool IsTrackAttachedTime()",
      "float GetAttachedTime()",
      "void SetAttachedTime(float time)",
      "int GetModifierID()",
      "string GetName()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "void Activate()",
      "void ActivateRequest(EActivationType trigger)",
      "void Deactivate(bool trigger = true)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void OnTick(PlayerBase player, float deltaT)",
      "void AnalyticsRegisterStat(int modifierId, string keySuffix)",
      "void AnalyticsSetState(int modifierId, float value)"
    ]
  },
  "ModifierDebugObj": {
    "parent": null,
    "methods": [
      "void ModifierDebugObj(int id, string name, bool active, bool locked)",
      "string GetName()",
      "int GetID()",
      "bool IsActive()",
      "bool IsLocked()",
      "void ModifiersManager(PlayerBase player)",
      "void Init()",
      "void SetModifiers(bool enable)",
      "int GetStorageVersion()",
      "bool IsModifiersEnable()",
      "void AddModifier(ModifierBase modifier)",
      "bool IsModifierActive(eModifiers modifier_id)",
      "void OnScheduledTick(float delta_time)",
      "void DeactivateAllModifiers()",
      "void ActivateModifier(int modifier_id, bool triggerEvent = EActivationType.TRIGGER_EVENT_ON_ACTIVATION)",
      "void DeactivateModifier(int modifier_id, bool triggerEvent = true)",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void SetModifierLock(int modifier_id, bool state)",
      "bool GetModifierLock(int modifier_id)",
      "void DbgGetModifiers(array<ref ModifierDebugObj> modifiers)",
      "void ResetAll()"
    ]
  },
  "ModifiersManager": {
    "parent": null,
    "methods": [
      "void ModifiersManager(PlayerBase player)",
      "void Init()",
      "void SetModifiers(bool enable)",
      "int GetStorageVersion()",
      "bool IsModifiersEnable()",
      "void AddModifier(ModifierBase modifier)",
      "bool IsModifierActive(eModifiers modifier_id)",
      "void OnScheduledTick(float delta_time)",
      "void DeactivateAllModifiers()",
      "void ActivateModifier(int modifier_id, bool triggerEvent = EActivationType.TRIGGER_EVENT_ON_ACTIVATION)",
      "void DeactivateModifier(int modifier_id, bool triggerEvent = true)",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void SetModifierLock(int modifier_id, bool state)",
      "bool GetModifierLock(int modifier_id)",
      "void DbgGetModifiers(array<ref ModifierDebugObj> modifiers)",
      "void ResetAll()"
    ]
  },
  "NotifierBase": {
    "parent": null,
    "methods": [
      "void NotifierBase(NotifiersManager manager)",
      "bool IsTimeToTick(int current_time)",
      "int GetNotifierType()",
      "string GetName()",
      "bool IsActive()",
      "void SetActive(bool state)",
      "void DisplayTendency(float delta)",
      "void AddToCyclicBuffer(float value)",
      "float ReadFromCyclicBuffer(int index)",
      "float GetDeltaAvaraged()",
      "void SmoothOutFloatValues(array<float> values)",
      "void OnTick(float current_time)",
      "int CalculateTendency(float delta, float inctresholdlow, float inctresholdmed, float inctresholdhigh, float dectresholdlow, float dectresholdmed, float dectresholdhigh)",
      "void DisplayBadge()",
      "void HideBadge()",
      "float GetObservedValue()"
    ]
  },
  "NotifiersManager": {
    "parent": null,
    "methods": [
      "void NotifiersManager(PlayerBase player)",
      "void Init()",
      "void RegisterItself(int notifier_id, NotifierBase modifier)",
      "void ActivateByType(int notifier, bool triggerEvent = true)",
      "void DeactivateByType(int notifier, bool triggerEvent = true)",
      "void OnScheduledTick()",
      "void TickNotifiers()"
    ]
  },
  "PlayerStatBase": {
    "parent": null,
    "methods": [
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx)",
      "void OnRPC(ParamsReadContext ctx)",
      "void OnAfterStoreLoad()",
      "float Get()",
      "string GetLabel()",
      "void SetByFloat(float value)",
      "void SetByFloatEx(float value, string system =  )",
      "bool IsSynced()",
      "void Init(int id)",
      "void SerializeValue(array<ref StatDebugObject> objects, int flags)",
      "float GetNormalized()",
      "float GetMax()",
      "float GetMin()",
      "int GetType()",
      "void SetPlayer(Man player)",
      "void PlayerStat(T min, T max, T init, string label, int flags)",
      "void Set(T value, string system = )",
      "void SetByFloat(float value, string system = )",
      "void SetByFloatEx(float value, string system = )",
      "void Add( T value, string system =  )",
      "void CreateRecord(float value, string system)",
      "void OnStoreSave(ParamsWriteContext ctx)"
    ]
  },
  "PlayerStat": {
    "parent": null,
    "methods": [
      "void PlayerStat(T min, T max, T init, string label, int flags)",
      "void Init(int id)",
      "void SerializeValue(array<ref StatDebugObject> objects, int flags)",
      "bool IsSynced()",
      "void OnRPC(ParamsReadContext ctx)",
      "void Set(T value, string system = )",
      "void SetByFloat(float value, string system = )",
      "void SetByFloatEx(float value, string system = )",
      "void Add( T value, string system =  )",
      "float Get()",
      "string GetLabel()",
      "float GetMax()",
      "float GetMin()",
      "float GetNormalized()",
      "void CreateRecord(float value, string system)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad( ParamsReadContext ctx)",
      "void OnAfterStoreLoad()"
    ]
  },
  "PlayerStatRecord": {
    "parent": null,
    "methods": [
      "void PlayerStatRecord(float value, float time, string system)",
      "string GetStringOutput()"
    ]
  },
  "PlayerStats": {
    "parent": null,
    "methods": [
      "void PlayerStats(Man player)",
      "void Init(Man player)",
      "void SetAllowLogs(bool enable)",
      "bool GetAllowLogs()",
      "void GetDebugInfo( array<ref StatDebugObject> objects, int flags )",
      "void GatherAllRecords()",
      "void SaveStats( ParamsWriteContext ctx )",
      "bool LoadStats( ParamsReadContext ctx, int version )",
      "void ResetAllStats()",
      "void OnRPC(ParamsReadContext ctx)",
      "void OnAfterStoreLoad()"
    ]
  },
  "PCOHandlerStats": {
    "parent": null,
    "methods": [
      "void PCOHandlerStats(Man player)",
      "void RegisterPCO(PlayerStatsPCO_Base pco)",
      "void PlayerStatsPCO_Base()",
      "void Init()",
      "void SetPlayer(Man player)",
      "int GetVersion()",
      "void RegisterStat(int id, PlayerStatBase stat)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx)",
      "void ResetAllStats()",
      "void OnRPC(ParamsReadContext ctx)",
      "void OnAfterStoreLoad()",
      "void PlayerStatsPCO_v100()"
    ]
  },
  "PlayerStatsPCO_Base": {
    "parent": null,
    "methods": [
      "void PlayerStatsPCO_Base()",
      "void Init()",
      "void SetPlayer(Man player)",
      "int GetVersion()",
      "void RegisterStat(int id, PlayerStatBase stat)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx)",
      "void ResetAllStats()",
      "void OnRPC(ParamsReadContext ctx)",
      "void OnAfterStoreLoad()",
      "void PlayerStatsPCO_v100()"
    ]
  },
  "PlayerStatsPCO_v100": {
    "parent": "PlayerStatsPCO_Base",
    "methods": [
      "int GetVersion()",
      "void Init()",
      "void PlayerStatsPCO_v100()"
    ]
  },
  "PlayerStatsPCO_v101": {
    "parent": "PlayerStatsPCO_Base",
    "methods": [
      "int GetVersion()",
      "void Init()"
    ]
  },
  "PlayerStatsPCO_v106": {
    "parent": "PlayerStatsPCO_Base",
    "methods": [
      "int GetVersion()",
      "void Init()"
    ]
  },
  "PlayerStatsPCO_v115": {
    "parent": "PlayerStatsPCO_Base",
    "methods": [
      "int GetVersion()",
      "void Init()"
    ]
  },
  "PlayerStatsPCO_current": {
    "parent": "PlayerStatsPCO_v115",
    "methods": []
  },
  "StatDebugObject": {
    "parent": null,
    "methods": [
      "void StatDebugObject(string name, float value, eRemoteDebugType type)",
      "void Debug()",
      "string GetName()",
      "string GetValue()",
      "void SetType(eRemoteDebugType type)"
    ]
  },
  "SmptAnimMetaBase": {
    "parent": null,
    "methods": [
      "void SmptAnimMetaBase()",
      "void Init(ParamsReadContext ctx, SymptomManager manager, PlayerBase player)",
      "bool IsPlaying()",
      "bool IsDestroyReqested()",
      "void AnimFinished(eAnimFinishType type)",
      "void Update(HumanMovementState movement_state)"
    ]
  },
  "SmptAnimMetaFB": {
    "parent": "SmptAnimMetaBase",
    "methods": [
      "void Init(ParamsReadContext ctx, SymptomManager manager, PlayerBase player)",
      "void Update(HumanMovementState movement_state)"
    ]
  },
  "SmptAnimMetaADD": {
    "parent": "SmptAnimMetaBase",
    "methods": [
      "void Init(ParamsReadContext ctx, SymptomManager manager, PlayerBase player)",
      "void Update(HumanMovementState movement_state)"
    ]
  },
  "HeatComfortmMetaADD": {
    "parent": "SmptAnimMetaADD",
    "methods": [
      "void Update(HumanMovementState movement_state)"
    ]
  },
  "SymptomBase": {
    "parent": null,
    "methods": [
      "void SymptomBase()",
      "void Init(SymptomManager manager, PlayerBase player, int uid)",
      "int GetMaxCount()",
      "int GetUID()",
      "void OnOwnerKilled()",
      "bool CanBeInterupted()",
      "bool IsClientOnly()",
      "void SetDuration(float duration)",
      "float GetDuration()",
      "string GetName()",
      "int GetType()",
      "void SetParam(Param p)",
      "bool IsSyncToClient()",
      "bool IsSyncToRemotes()",
      "void GetPersistentParams(array<Param> params)",
      "void MakeParamObjectPersistent(Param object)",
      "bool IsPersistent()",
      "bool IsPrimary()",
      "bool AllowInUnconscious()",
      "int GetPriority()",
      "bool OnConstructed(SymptomManager manager)",
      "void OnDestructed()",
      "void Activate()",
      "void Deactivate()",
      "bool IsActivated()",
      "void Update(float deltatime)",
      "void PlayAnimationFB(int animation, int stance_mask, float running_time = -1)",
      "void PlayAnimationADD(int type)",
      "void PlaySound(EPlayerSoundEventID id)",
      "void SyncToClientActivated( int SYMPTOM_id, int uid )",
      "void SyncToClientDeactivated( int SYMPTOM_id, int uid )",
      "void CheckSoundFinished()",
      "void CheckDestroy()",
      "void RequestDestroy()",
      "void Destroy()",
      "void AnimationFinish()",
      "void AnimationPlayFailed()",
      "void AnimationStart()",
      "void OnAnimationFinish()",
      "void OnAnimationStart()",
      "void OnAnimationPlayFailed()",
      "void OnInit()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "bool CanActivate()",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "SymptomCB": {
    "parent": "HumanCommandActionCallback",
    "methods": [
      "void OnFinish(bool pCanceled)",
      "void Init(float run_time, PlayerBase player)",
      "bool CancelCondition()",
      "bool IsSymptomCallback()"
    ]
  },
  "SymptomManager": {
    "parent": null,
    "methods": [
      "void Init()",
      "int GetStorageVersion()",
      "void AutoactivateSymptoms()",
      "void SymptomManager(PlayerBase player)",
      "void OnPlayerKilled()",
      "void RegisterSymptom(SymptomBase Symptom)",
      "void OnAnimationFinished(eAnimFinishType type = eAnimFinishType.SUCCESS)",
      "void OnAnimationStarted()",
      "int CreateUniqueID()",
      "bool IsUIDUsed(int uid)",
      "string GetSymptomName(int symptom_id)",
      "void RequestSymptomExit(int SYMPTOM_uid)",
      "bool IsSymptomPrimary(int symptom_id)",
      "void OnInputUserDataReceived(ParamsReadContext ctx)",
      "int GetCurrentCommandID()",
      "void OnTick(float deltatime, int pCurrentCommandID, HumanMovementState movement_state)",
      "void SetAnimation(ParamsReadContext ctx)",
      "void UpdateActiveSymptoms(float deltatime)",
      "void OnSymptomExit(SymptomBase Symptom, int uid)",
      "int GetSymptomMaxCount(int symptom_id)",
      "int GetSymptomCount(int symptom_id)",
      "void IncreaseSymptomCount(int symptom_id)",
      "void DecreaseSymptomCount(int symptom_id)",
      "void CleanUpPrimaryQueue()",
      "void QueueUpSecondarySymptom(int symptom_id, int uid = -1)",
      "void RemoveSecondarySymptom(int symptom_id)",
      "int FindFirstAvailableSymptomIndex()",
      "int ComparePriority( int prio1, int prio2 )",
      "int GetSymptomPriority(int symptom_id)",
      "void OnRPC(int rpc_type, ParamsReadContext ctx)",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void OnRPCDebug(int rpc_type, ParamsReadContext ctx)",
      "void SendServerDebugToClient()",
      "void DebugRequestExitSymptom(int SYMPTOM_uid)",
      "void DisplayDebug1(string name, int y_offset, array<ref Param> Symptoms_primary, array<ref Param> Symptoms_secondary)",
      "void DisplayDebug2(string name, int y_offset, array<ref Param> Symptoms_primary, array<ref Param> Symptoms_secondary)",
      "void ShowAvailableSymptoms()",
      "void CleanAvailableSymptoms()",
      "void CleanDebug1(string name, int y_offset)",
      "void CleanDebug2(string name, int y_offset)",
      "void DebugRequestActivateSymptom(int symptom_id)"
    ]
  },
  "RecipeCacheData": {
    "parent": null,
    "methods": [
      "void RecipeCacheData(int mask)",
      "int GetMask()",
      "int GetBitCount()",
      "void SetMask(int mask)",
      "void CacheObject()",
      "bool AddRecipe(int recipe_id, int mask)",
      "void UpdateMask(int recipe_id, int mask)",
      "int GetNumberOfRecipes()",
      "bool IsContainRecipe(int recipe_id)",
      "int GetMaskByRecipeID(int recipe_id)",
      "int GetBitCountByRecipeID(int recipe_id)",
      "void DebugPrint()"
    ]
  },
  "CacheObject": {
    "parent": null,
    "methods": [
      "void CacheObject()",
      "bool AddRecipe(int recipe_id, int mask)",
      "void UpdateMask(int recipe_id, int mask)",
      "int GetNumberOfRecipes()",
      "bool IsContainRecipe(int recipe_id)",
      "int GetMaskByRecipeID(int recipe_id)",
      "int GetBitCountByRecipeID(int recipe_id)",
      "void DebugPrint()"
    ]
  },
  "RecipeBase": {
    "parent": null,
    "methods": [
      "void RecipeBase()",
      "void Init()",
      "void SetAnimation(DayZPlayerConstants uid)",
      "float GetLengthInSecs()",
      "float GetSpecialty()",
      "bool IsRecipeAnywhere()",
      "bool IsRepeatable()",
      "bool CheckIngredientMatch(ItemBase item1, ItemBase item2)",
      "void InsertIngredient(int index, string ingredient, DayZPlayerConstants uid = DayZPlayerConstants.CMD_ACTIONFB_CRAFTING)",
      "void InsertIngredientEx(int index, string ingredient, string soundCategory, DayZPlayerConstants uid = DayZPlayerConstants.CMD_ACTIONFB_CRAFTING)",
      "void RemoveIngredient(int index, string ingredient)",
      "void AddResult(string item)",
      "string GetName()",
      "bool IsInstaRecipe()",
      "void SpawnItems(ItemBase ingredients[], PlayerBase player, array<ItemBase> spawned_objects)",
      "void ApplyModificationsResults(ItemBase sorted[], array<ItemBase> results, ItemBase result, PlayerBase player)",
      "void DeleleIngredientsPass()",
      "void ApplyModificationsIngredients(ItemBase sorted[], PlayerBase player)",
      "bool CheckConditions(ItemBase sorted[])",
      "bool CheckRecipe(ItemBase item1, ItemBase item2, PlayerBase player)",
      "void CheckIngredientAnimOverride()",
      "void OnSelectedRecipe(ItemBase item1, ItemBase item2, PlayerBase player)",
      "void OnSelected(ItemBase item1, ItemBase item2, PlayerBase player)",
      "void PerformRecipe(ItemBase item1, ItemBase item2, PlayerBase player)",
      "void ApplySoftSkillsSpecialty(PlayerBase player)",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player, array<ItemBase> results, float specialty_weight)",
      "int GetID()",
      "void SetID(int id)",
      "void GetAllItems(array<string> items)",
      "string GetSoundCategory(int ingredientIndex, ItemBase item)",
      "bool IsItemInRecipe(string item)",
      "int GetIngredientMaskForItem(string item)",
      "int GetAnimationCommandUID()"
    ]
  },
  "RecoilBase": {
    "parent": null,
    "methods": [
      "void RecoilBase(Weapon_Base weapon)",
      "void Init()",
      "void PostInit(Weapon_Base weapon)",
      "void Destroy()",
      "void Update( SDayZPlayerAimingModel pModel, out float axis_mouse_x, out float axis_mouse_y, out float axis_hands_x, out float axis_hands_y, float pDt )",
      "void ApplyCamOffset(SDayZPlayerAimingModel pModel)",
      "void ApplyHandsOffset(float pDt, out float pRecResultX, out float pRecResultY)",
      "void ApplyMouseOffset(float pDt, out float pRecResultX, out float pRecResultY)"
    ]
  },
  "DamageData": {
    "parent": null,
    "methods": [
      "void DamageData(float value_global, float value_blood, float value_shock)",
      "float GetValueGlobal()",
      "float GetValueShock()",
      "float GetValueBlood()"
    ]
  },
  "RemotePlayerDamageDebug": {
    "parent": null,
    "methods": [
      "void RemotePlayerDamageDebug(PlayerBase player)",
      "void AddDamage(float value_global, float value_blood, float value_shock)",
      "void InsertDamageObject(DamageData damage_object)",
      "void Get(array<ref DamageData> damage_list)",
      "void GetReversed(array<ref DamageData> damage_list)",
      "void Serialize(array<ref RemotePlayerDamageDebug> list)",
      "void Debug()"
    ]
  },
  "RemotePlayerMeta": {
    "parent": null,
    "methods": [
      "void RemotePlayerMeta(PlayerBase player, eRemoteDebugType type )",
      "void SetDebugType(eRemoteDebugType type)",
      "void SetPlayer(PlayerBase player)"
    ]
  },
  "RemotePlayerStatDebug": {
    "parent": null,
    "methods": [
      "void RemotePlayerStatDebug(PlayerBase player)",
      "void Init()",
      "void UpdatePlayerStatsValues()",
      "void InjectDamageSystemValues()",
      "void SerializeNames(array<string> names, eRemoteDebugType type)",
      "void SerializeValues(array<string> values, eRemoteDebugType type)",
      "void Debug()"
    ]
  },
  "SceneData": {
    "parent": null,
    "methods": [
      "void SceneData()",
      "string GetNameScene()",
      "void SetNameScene(string name)",
      "string GetNameMission()",
      "void SetNameMission(string name)",
      "float GetInitTime()",
      "void SetInitTime(float time)",
      "int GetInitYear()",
      "void SetInitYear(int value)",
      "int GetInitMonth()",
      "void SetInitMonth(int value)",
      "int GetInitDay()",
      "void SetInitDay(int value)",
      "int GetInitHour()",
      "void SetInitHour(int value)",
      "int GetInitMinute()",
      "void SetInitMinute(int value)",
      "float GetInitOvercast()",
      "void SetInitOvercast(float value)",
      "float GetInitRain()",
      "void SetInitRain(float value)",
      "float GetInitFog()",
      "void SetInitFog(float value)",
      "float GetInitWindForce()",
      "void SetInitWindForce(float value)",
      "void Clear()",
      "void DeleteSceneObject(SceneObject scene_object)"
    ]
  },
  "SceneObject": {
    "parent": null,
    "methods": [
      "string GetName()",
      "bool IsPlayer()",
      "string GetInitScript()",
      "void SetInitScript(string init_script)",
      "void EditorShapeUpdatePos()",
      "void EditorShapeSetColor(int color)",
      "void EditorShapeSelect()",
      "void EditorShapeDeselect()",
      "void EditorShapeAdd()",
      "void EditorShapeRemove()",
      "void EditorLineRemove(SceneObject obj)",
      "void EditorLineAdd(SceneObject obj)",
      "void LinkEntityAI(EntityAI e)",
      "bool IsLinkedWithSceneObject(SceneObject scene_object)",
      "void LinkSceneObject(SceneObject scene_object, bool draw_line = true)",
      "void UnlinkSceneObject(SceneObject scene_object)",
      "void UnlinkAll()",
      "int GetLinkedSceneObjectsCount()",
      "string GetTypeName()",
      "void PlaceOnSurface()",
      "void SetPosition(vector pos)",
      "float GetHealth()",
      "float GetMaxHealth()",
      "void SetHealth(float value)",
      "string GetPositionAsString()",
      "void SetPositionAsString(string string_pos)",
      "float GetRotation()",
      "void SetRotation(float rot)",
      "void SceneObjectSynch(Param p)",
      "void AddRotation(float add_rot)",
      "void AddAttachment(string att_name)",
      "bool CanAttachment(EntityAI e)",
      "void RemoveAttachment(EntityAI e)"
    ]
  },
  "ScenePlayer": {
    "parent": "SceneObject",
    "methods": [
      "bool IsPlayer()"
    ]
  },
  "ShockDealtEffect": {
    "parent": null,
    "methods": [
      "void ShockDealtEffect(float intensity_max)",
      "void Update(float deltatime)"
    ]
  },
  "SoundEventBase": {
    "parent": null,
    "methods": [
      "bool IsSkipForControlled()",
      "void Tick()",
      "bool IsSoundCallbackExist()",
      "bool IsDestroyRequested()",
      "bool CanPlay()",
      "bool Play()",
      "void OnPlay(PlayerBase player)",
      "void Stop()",
      "int GetSoundEventID()",
      "int GetSoundEventType()",
      "static int GetSoundEventType(int id)",
      "bool PlayRequest(EPlayerSoundEventID id, bool sent_from_server = false)",
      "bool PlayRequestEx(EPlayerSoundEventID id, bool sent_from_server = false, int param = 0)",
      "int GetCurrentStateEventID()",
      "int GetCurrentStateEventType()"
    ]
  },
  "SoundEventHandler": {
    "parent": null,
    "methods": [
      "static int GetSoundEventType(int id)",
      "bool PlayRequest(EPlayerSoundEventID id, bool sent_from_server = false)",
      "bool PlayRequestEx(EPlayerSoundEventID id, bool sent_from_server = false, int param = 0)",
      "int GetCurrentStateEventID()",
      "int GetCurrentStateEventType()"
    ]
  },
  "HungerSoundHandlerBase": {
    "parent": "SoundHandlerBase",
    "methods": [
      "void Init()",
      "void Update()",
      "void ProcessSound()",
      "void PlaySound()"
    ]
  },
  "HungerSoundHandlerClient": {
    "parent": "HungerSoundHandlerBase",
    "methods": [
      "void Update()",
      "void ProcessSound()",
      "void PlaySound()"
    ]
  },
  "HungerSoundHandlerServer": {
    "parent": "HungerSoundHandlerBase",
    "methods": []
  },
  "InjurySoundHandlerBase": {
    "parent": "SoundHandlerBase",
    "methods": [
      "void Init()",
      "void Update()",
      "void ProcessSound(eInjurySoundZones zone)",
      "void PlaySound(eInjurySoundZones zone)"
    ]
  },
  "InjurySoundHandlerClient": {
    "parent": "InjurySoundHandlerBase",
    "methods": [
      "void Update()",
      "void ProcessSound(eInjurySoundZones zone)",
      "void PlaySound(eInjurySoundZones zone)"
    ]
  },
  "InjurySoundHandlerServer": {
    "parent": "InjurySoundHandlerBase",
    "methods": []
  },
  "SoundParameters": {
    "parent": null,
    "methods": [
      "void ItemSoundHandler(ItemBase parent)",
      "void Init()",
      "void PlayItemSoundClient(int id)",
      "void StopItemSoundClient(int id)",
      "void AddSound(int sound, string soundset, SoundParameters params = null)"
    ]
  },
  "ItemSoundHandler": {
    "parent": null,
    "methods": [
      "void ItemSoundHandler(ItemBase parent)",
      "void Init()",
      "void PlayItemSoundClient(int id)",
      "void StopItemSoundClient(int id)",
      "void AddSound(int sound, string soundset, SoundParameters params = null)"
    ]
  },
  "PlayerSoundManagerBase": {
    "parent": null,
    "methods": [
      "void PlayerSoundManagerBase(PlayerBase player)",
      "void RegisterHandler(SoundHandlerBase handler)",
      "void Init()",
      "void Update()",
      "void PlayerSoundManagerClient(PlayerBase player)",
      "void SetAllowUpdate(bool enable)",
      "void CheckAllowUpdate()"
    ]
  },
  "PlayerSoundManagerServer": {
    "parent": "PlayerSoundManagerBase",
    "methods": [
      "void Init()",
      "void Update()",
      "void PlayerSoundManagerClient(PlayerBase player)",
      "void SetAllowUpdate(bool enable)",
      "void CheckAllowUpdate()"
    ]
  },
  "PlayerSoundManagerClient": {
    "parent": "PlayerSoundManagerBase",
    "methods": [
      "void Init()",
      "void PlayerSoundManagerClient(PlayerBase player)",
      "void SetAllowUpdate(bool enable)",
      "void Update()",
      "void CheckAllowUpdate()"
    ]
  },
  "ThirstSoundHandlerBase": {
    "parent": "SoundHandlerBase",
    "methods": [
      "void Init()",
      "void Update()",
      "void ProcessSound()",
      "void PlaySound()"
    ]
  },
  "ThirstSoundHandlerClient": {
    "parent": "ThirstSoundHandlerBase",
    "methods": [
      "void Update()",
      "void ProcessSound()",
      "void PlaySound()"
    ]
  },
  "ThirstSoundHandlerServer": {
    "parent": "ThirstSoundHandlerBase",
    "methods": []
  },
  "ActionReciveData": {
    "parent": null,
    "methods": [
      "void ActionData()",
      "void ActionBase()",
      "bool IsLockTargetOnUse()",
      "void InitConditionMask()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "bool Post_SetupAction( ActionData action_data )",
      "void ActionCleanup( ActionData action_data )",
      "void SetInput( ActionInput  ai)",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool IsLocal()",
      "bool IsInstant()",
      "bool IsUsingProxies()",
      "bool RemoveForceTargetAfterUse()",
      "int GetActionCategory()",
      "bool IsEat()",
      "bool IsDrink()",
      "bool IsShaveSelf()",
      "string GetText()",
      "bool CanBePerformedFromQuickbar()",
      "bool CanBePerformedFromInventory()",
      "bool CanBeSetFromInventory()",
      "bool CanBeUsedInRestrain()",
      "bool CanBeUsedInVehicle()",
      "bool CanTargetBeInVehicle()",
      "bool CanBeUsedOnBack()",
      "bool CanBeUsedSwimming()",
      "bool CanBeUsedOnLadder()",
      "bool CanBeUsedRaised()",
      "bool CanBeUsedThrowing()",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedWithBrokenLegs()",
      "bool CanBeUsedInFreelook()",
      "bool IsDeploymentAction()",
      "bool UseMainItem()",
      "bool MainItemAlwaysInHands()",
      "bool DisplayTargetInActionText()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "string GetTargetName(PlayerBase player, ActionTarget target)",
      "void ApplyModifiers(ActionData action_data)",
      "int GetRefreshReservationTimerValue()",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "int GetStanceMaskEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "int GetStanceMask(PlayerBase player)",
      "int GetClosestPossibleStance(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsFullBodyEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsFullBody(PlayerBase player)",
      "bool HasProneException()",
      "void Start( ActionData action_data )",
      "void End( ActionData action_data )",
      "void Interrupt(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void EndInput(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)",
      "void EndRequest(ActionData action_data)",
      "bool CanReceiveAction(ActionTarget target)",
      "static int ComputeConditionMask( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool Can( PlayerBase player, ActionTarget target, ItemBase item, int condition_mask )",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanContinue( ActionData action_data )",
      "bool HasVariants()",
      "int GetVariantsCount()",
      "int GetVariants(out array<ref ActionBase> variants)",
      "void SetVariantID(int ID)",
      "int GetVariantID()",
      "void UpdateVariants(Object item, Object target, int componet_index)",
      "void OnItemLocationChanged(ItemBase item)",
      "bool InventoryReservation(ActionData action_data)",
      "void ClearInventoryReservationEx(ActionData action_data)",
      "void RefreshReservations(ActionData action_data)",
      "bool AddActionJuncture(ActionData action_data)",
      "void ClearActionJuncture(ActionData action_data)",
      "void RefreshActionJuncture(ActionData action_data)",
      "bool UseAcknowledgment()",
      "void InformPlayers( PlayerBase player, ActionTarget target, int state )",
      "void SendMessageToClient( Object reciever, string message )",
      "bool IsDamageDestroyed(ActionTarget target)",
      "bool IsBuilding(ActionTarget target)",
      "bool IsTransport(ActionTarget target)",
      "bool IsInReach(PlayerBase player, ActionTarget target, float maxDistance = 1.0)",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetSoundCategory(ActionData action_data)",
      "void OnUpdate(ActionData action_data)",
      "void OnUpdateClient(ActionData action_data)",
      "void OnUpdateServer(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnEndClient(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetSpecialtyWeight()",
      "int GetState( ActionData action_data )",
      "float GetProgress( ActionData action_data )",
      "float GetProgressWidgetMultiplier( ActionData action_data )",
      "void SetID(int actionId)",
      "int GetID()",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionOverrideData": {
    "parent": null,
    "methods": [
      "void ActionData()",
      "void ActionBase()",
      "bool IsLockTargetOnUse()",
      "void InitConditionMask()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "bool Post_SetupAction( ActionData action_data )",
      "void ActionCleanup( ActionData action_data )",
      "void SetInput( ActionInput  ai)",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool IsLocal()",
      "bool IsInstant()",
      "bool IsUsingProxies()",
      "bool RemoveForceTargetAfterUse()",
      "int GetActionCategory()",
      "bool IsEat()",
      "bool IsDrink()",
      "bool IsShaveSelf()",
      "string GetText()",
      "bool CanBePerformedFromQuickbar()",
      "bool CanBePerformedFromInventory()",
      "bool CanBeSetFromInventory()",
      "bool CanBeUsedInRestrain()",
      "bool CanBeUsedInVehicle()",
      "bool CanTargetBeInVehicle()",
      "bool CanBeUsedOnBack()",
      "bool CanBeUsedSwimming()",
      "bool CanBeUsedOnLadder()",
      "bool CanBeUsedRaised()",
      "bool CanBeUsedThrowing()",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedWithBrokenLegs()",
      "bool CanBeUsedInFreelook()",
      "bool IsDeploymentAction()",
      "bool UseMainItem()",
      "bool MainItemAlwaysInHands()",
      "bool DisplayTargetInActionText()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "string GetTargetName(PlayerBase player, ActionTarget target)",
      "void ApplyModifiers(ActionData action_data)",
      "int GetRefreshReservationTimerValue()",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "int GetStanceMaskEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "int GetStanceMask(PlayerBase player)",
      "int GetClosestPossibleStance(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsFullBodyEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsFullBody(PlayerBase player)",
      "bool HasProneException()",
      "void Start( ActionData action_data )",
      "void End( ActionData action_data )",
      "void Interrupt(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void EndInput(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)",
      "void EndRequest(ActionData action_data)",
      "bool CanReceiveAction(ActionTarget target)",
      "static int ComputeConditionMask( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool Can( PlayerBase player, ActionTarget target, ItemBase item, int condition_mask )",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanContinue( ActionData action_data )",
      "bool HasVariants()",
      "int GetVariantsCount()",
      "int GetVariants(out array<ref ActionBase> variants)",
      "void SetVariantID(int ID)",
      "int GetVariantID()",
      "void UpdateVariants(Object item, Object target, int componet_index)",
      "void OnItemLocationChanged(ItemBase item)",
      "bool InventoryReservation(ActionData action_data)",
      "void ClearInventoryReservationEx(ActionData action_data)",
      "void RefreshReservations(ActionData action_data)",
      "bool AddActionJuncture(ActionData action_data)",
      "void ClearActionJuncture(ActionData action_data)",
      "void RefreshActionJuncture(ActionData action_data)",
      "bool UseAcknowledgment()",
      "void InformPlayers( PlayerBase player, ActionTarget target, int state )",
      "void SendMessageToClient( Object reciever, string message )",
      "bool IsDamageDestroyed(ActionTarget target)",
      "bool IsBuilding(ActionTarget target)",
      "bool IsTransport(ActionTarget target)",
      "bool IsInReach(PlayerBase player, ActionTarget target, float maxDistance = 1.0)",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetSoundCategory(ActionData action_data)",
      "void OnUpdate(ActionData action_data)",
      "void OnUpdateClient(ActionData action_data)",
      "void OnUpdateServer(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnEndClient(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetSpecialtyWeight()",
      "int GetState( ActionData action_data )",
      "float GetProgress( ActionData action_data )",
      "float GetProgressWidgetMultiplier( ActionData action_data )",
      "void SetID(int actionId)",
      "int GetID()",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionData": {
    "parent": null,
    "methods": [
      "void ActionData()",
      "void ActionBase()",
      "bool IsLockTargetOnUse()",
      "void InitConditionMask()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "bool Post_SetupAction( ActionData action_data )",
      "void ActionCleanup( ActionData action_data )",
      "void SetInput( ActionInput  ai)",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool IsLocal()",
      "bool IsInstant()",
      "bool IsUsingProxies()",
      "bool RemoveForceTargetAfterUse()",
      "int GetActionCategory()",
      "bool IsEat()",
      "bool IsDrink()",
      "bool IsShaveSelf()",
      "string GetText()",
      "bool CanBePerformedFromQuickbar()",
      "bool CanBePerformedFromInventory()",
      "bool CanBeSetFromInventory()",
      "bool CanBeUsedInRestrain()",
      "bool CanBeUsedInVehicle()",
      "bool CanTargetBeInVehicle()",
      "bool CanBeUsedOnBack()",
      "bool CanBeUsedSwimming()",
      "bool CanBeUsedOnLadder()",
      "bool CanBeUsedRaised()",
      "bool CanBeUsedThrowing()",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedWithBrokenLegs()",
      "bool CanBeUsedInFreelook()",
      "bool IsDeploymentAction()",
      "bool UseMainItem()",
      "bool MainItemAlwaysInHands()",
      "bool DisplayTargetInActionText()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "string GetTargetName(PlayerBase player, ActionTarget target)",
      "void ApplyModifiers(ActionData action_data)",
      "int GetRefreshReservationTimerValue()",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "int GetStanceMaskEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "int GetStanceMask(PlayerBase player)",
      "int GetClosestPossibleStance(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsFullBodyEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsFullBody(PlayerBase player)",
      "bool HasProneException()",
      "void Start( ActionData action_data )",
      "void End( ActionData action_data )",
      "void Interrupt(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void EndInput(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)",
      "void EndRequest(ActionData action_data)",
      "bool CanReceiveAction(ActionTarget target)",
      "static int ComputeConditionMask( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool Can( PlayerBase player, ActionTarget target, ItemBase item, int condition_mask )",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanContinue( ActionData action_data )",
      "bool HasVariants()",
      "int GetVariantsCount()",
      "int GetVariants(out array<ref ActionBase> variants)",
      "void SetVariantID(int ID)",
      "int GetVariantID()",
      "void UpdateVariants(Object item, Object target, int componet_index)",
      "void OnItemLocationChanged(ItemBase item)",
      "bool InventoryReservation(ActionData action_data)",
      "void ClearInventoryReservationEx(ActionData action_data)",
      "void RefreshReservations(ActionData action_data)",
      "bool AddActionJuncture(ActionData action_data)",
      "void ClearActionJuncture(ActionData action_data)",
      "void RefreshActionJuncture(ActionData action_data)",
      "bool UseAcknowledgment()",
      "void InformPlayers( PlayerBase player, ActionTarget target, int state )",
      "void SendMessageToClient( Object reciever, string message )",
      "bool IsDamageDestroyed(ActionTarget target)",
      "bool IsBuilding(ActionTarget target)",
      "bool IsTransport(ActionTarget target)",
      "bool IsInReach(PlayerBase player, ActionTarget target, float maxDistance = 1.0)",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetSoundCategory(ActionData action_data)",
      "void OnUpdate(ActionData action_data)",
      "void OnUpdateClient(ActionData action_data)",
      "void OnUpdateServer(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnEndClient(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetSpecialtyWeight()",
      "int GetState( ActionData action_data )",
      "float GetProgress( ActionData action_data )",
      "float GetProgressWidgetMultiplier( ActionData action_data )",
      "void SetID(int actionId)",
      "int GetID()",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionBase": {
    "parent": null,
    "methods": [
      "void ActionBase()",
      "bool IsLockTargetOnUse()",
      "void InitConditionMask()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "bool Post_SetupAction( ActionData action_data )",
      "void ActionCleanup( ActionData action_data )",
      "void SetInput( ActionInput  ai)",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool IsLocal()",
      "bool IsInstant()",
      "bool IsUsingProxies()",
      "bool RemoveForceTargetAfterUse()",
      "int GetActionCategory()",
      "bool IsEat()",
      "bool IsDrink()",
      "bool IsShaveSelf()",
      "string GetText()",
      "bool CanBePerformedFromQuickbar()",
      "bool CanBePerformedFromInventory()",
      "bool CanBeSetFromInventory()",
      "bool CanBeUsedInRestrain()",
      "bool CanBeUsedInVehicle()",
      "bool CanTargetBeInVehicle()",
      "bool CanBeUsedOnBack()",
      "bool CanBeUsedSwimming()",
      "bool CanBeUsedOnLadder()",
      "bool CanBeUsedRaised()",
      "bool CanBeUsedThrowing()",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedWithBrokenLegs()",
      "bool CanBeUsedInFreelook()",
      "bool IsDeploymentAction()",
      "bool UseMainItem()",
      "bool MainItemAlwaysInHands()",
      "bool DisplayTargetInActionText()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "string GetTargetName(PlayerBase player, ActionTarget target)",
      "void ApplyModifiers(ActionData action_data)",
      "int GetRefreshReservationTimerValue()",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "int GetStanceMaskEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "int GetStanceMask(PlayerBase player)",
      "int GetClosestPossibleStance(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsFullBodyEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsFullBody(PlayerBase player)",
      "bool HasProneException()",
      "void Start( ActionData action_data )",
      "void End( ActionData action_data )",
      "void Interrupt(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void EndInput(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)",
      "void EndRequest(ActionData action_data)",
      "bool CanReceiveAction(ActionTarget target)",
      "static int ComputeConditionMask( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool Can( PlayerBase player, ActionTarget target, ItemBase item, int condition_mask )",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanContinue( ActionData action_data )",
      "bool HasVariants()",
      "int GetVariantsCount()",
      "int GetVariants(out array<ref ActionBase> variants)",
      "void SetVariantID(int ID)",
      "int GetVariantID()",
      "void UpdateVariants(Object item, Object target, int componet_index)",
      "void OnItemLocationChanged(ItemBase item)",
      "bool InventoryReservation(ActionData action_data)",
      "void ClearInventoryReservationEx(ActionData action_data)",
      "void RefreshReservations(ActionData action_data)",
      "bool AddActionJuncture(ActionData action_data)",
      "void ClearActionJuncture(ActionData action_data)",
      "void RefreshActionJuncture(ActionData action_data)",
      "bool UseAcknowledgment()",
      "void InformPlayers( PlayerBase player, ActionTarget target, int state )",
      "void SendMessageToClient( Object reciever, string message )",
      "bool IsDamageDestroyed(ActionTarget target)",
      "bool IsBuilding(ActionTarget target)",
      "bool IsTransport(ActionTarget target)",
      "bool IsInReach(PlayerBase player, ActionTarget target, float maxDistance = 1.0)",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetSoundCategory(ActionData action_data)",
      "void OnUpdate(ActionData action_data)",
      "void OnUpdateClient(ActionData action_data)",
      "void OnUpdateServer(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnEndClient(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetSpecialtyWeight()",
      "int GetState( ActionData action_data )",
      "float GetProgress( ActionData action_data )",
      "float GetProgressWidgetMultiplier( ActionData action_data )",
      "void SetID(int actionId)",
      "int GetID()",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionConstructor": {
    "parent": null,
    "methods": [
      "bool ConstructActions( out array<ref ActionBase> actionsArray, out map<typename, ActionBase> actionNameActionMap )",
      "void RegisterActions(TTypenameArray actions)"
    ]
  },
  "ForcedActionData": {
    "parent": null,
    "methods": [
      "void ActionInput()",
      "void Init(PlayerBase player, ActionManagerClient am)",
      "void SetEnablity(bool value)",
      "void SetInput(string input_name)",
      "int GetInputType()",
      "bool JustActivate()",
      "bool IsActive()",
      "bool WasEnded()",
      "void Update()",
      "void Reset()",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "int GetPossibleActionIndex()",
      "bool HasTarget()",
      "void OnActionStart()",
      "void OnActionEnd()",
      "void ActionsSelectReset()",
      "void ForceAction(ActionBase action, ActionTarget target, ItemBase item )",
      "void ForceActionTarget( ActionTarget target )",
      "void ClearForcedAction()",
      "void ClearForcedTarget()",
      "bool ForceActionCheck(PlayerBase player)",
      "void SelectNextAction()",
      "void SelectPrevAction()",
      "int GetPossibleActionsCount()",
      "bool HasInput()",
      "int GetPriority()",
      "void StandardActionInput(PlayerBase player)",
      "void _GetSelectedActions( Object action_source_object, out array<ActionBase> select_actions_all, out bool has_any_action_target)",
      "void ContinuousInteractActionInput(PlayerBase player)",
      "void InteractActionInput(PlayerBase player)",
      "void NoIndicationActionInputBase(PlayerBase player)",
      "void ContinuousDefaultActionInput(PlayerBase player)",
      "void DefaultActionInput(PlayerBase player)",
      "void DropActionInput(PlayerBase player)",
      "void CarHornShortActionInput(PlayerBase player)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "ActionInput": {
    "parent": null,
    "methods": [
      "void ActionInput()",
      "void Init(PlayerBase player, ActionManagerClient am)",
      "void SetEnablity(bool value)",
      "void SetInput(string input_name)",
      "int GetInputType()",
      "bool JustActivate()",
      "bool IsActive()",
      "bool WasEnded()",
      "void Update()",
      "void Reset()",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "int GetPossibleActionIndex()",
      "bool HasTarget()",
      "void OnActionStart()",
      "void OnActionEnd()",
      "void ActionsSelectReset()",
      "void ForceAction(ActionBase action, ActionTarget target, ItemBase item )",
      "void ForceActionTarget( ActionTarget target )",
      "void ClearForcedAction()",
      "void ClearForcedTarget()",
      "bool ForceActionCheck(PlayerBase player)",
      "void SelectNextAction()",
      "void SelectPrevAction()",
      "int GetPossibleActionsCount()",
      "bool HasInput()",
      "int GetPriority()",
      "void StandardActionInput(PlayerBase player)",
      "void _GetSelectedActions( Object action_source_object, out array<ActionBase> select_actions_all, out bool has_any_action_target)",
      "void ContinuousInteractActionInput(PlayerBase player)",
      "void InteractActionInput(PlayerBase player)",
      "void NoIndicationActionInputBase(PlayerBase player)",
      "void ContinuousDefaultActionInput(PlayerBase player)",
      "void DefaultActionInput(PlayerBase player)",
      "void DropActionInput(PlayerBase player)",
      "void CarHornShortActionInput(PlayerBase player)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "StandardActionInput": {
    "parent": null,
    "methods": [
      "void StandardActionInput(PlayerBase player)",
      "void ForceAction(ActionBase action, ActionTarget target, ItemBase item )",
      "void _GetSelectedActions( Object action_source_object, out array<ActionBase> select_actions_all, out bool has_any_action_target)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "int GetPossibleActionsCount()",
      "bool HasTarget()",
      "int GetPossibleActionIndex()",
      "void ActionsSelectReset()",
      "void SelectNextAction()",
      "void SelectPrevAction()",
      "void ContinuousInteractActionInput(PlayerBase player)",
      "void InteractActionInput(PlayerBase player)",
      "void OnActionStart()",
      "bool WasEnded()",
      "void NoIndicationActionInputBase(PlayerBase player)",
      "void ContinuousDefaultActionInput(PlayerBase player)",
      "void DefaultActionInput(PlayerBase player)",
      "void DropActionInput(PlayerBase player)",
      "void CarHornShortActionInput(PlayerBase player)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "ContinuousInteractActionInput": {
    "parent": null,
    "methods": [
      "void ContinuousInteractActionInput(PlayerBase player)",
      "void InteractActionInput(PlayerBase player)",
      "void OnActionStart()",
      "bool WasEnded()",
      "void NoIndicationActionInputBase(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void ContinuousDefaultActionInput(PlayerBase player)",
      "void ActionsSelectReset()",
      "void DefaultActionInput(PlayerBase player)",
      "void DropActionInput(PlayerBase player)",
      "void CarHornShortActionInput(PlayerBase player)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "InteractActionInput": {
    "parent": null,
    "methods": [
      "void InteractActionInput(PlayerBase player)",
      "void OnActionStart()",
      "bool WasEnded()",
      "void NoIndicationActionInputBase(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void ContinuousDefaultActionInput(PlayerBase player)",
      "void ActionsSelectReset()",
      "void DefaultActionInput(PlayerBase player)",
      "void DropActionInput(PlayerBase player)",
      "void CarHornShortActionInput(PlayerBase player)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "NoIndicationActionInputBase": {
    "parent": null,
    "methods": [
      "void NoIndicationActionInputBase(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void ContinuousDefaultActionInput(PlayerBase player)",
      "void ActionsSelectReset()",
      "void DefaultActionInput(PlayerBase player)",
      "void OnActionStart()",
      "bool WasEnded()",
      "void DropActionInput(PlayerBase player)",
      "void CarHornShortActionInput(PlayerBase player)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "ContinuousDefaultActionInput": {
    "parent": null,
    "methods": [
      "void ContinuousDefaultActionInput(PlayerBase player)",
      "void ActionsSelectReset()",
      "void DefaultActionInput(PlayerBase player)",
      "void OnActionStart()",
      "bool WasEnded()",
      "void DropActionInput(PlayerBase player)",
      "void CarHornShortActionInput(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "DefaultActionInput": {
    "parent": null,
    "methods": [
      "void DefaultActionInput(PlayerBase player)",
      "void OnActionStart()",
      "bool WasEnded()",
      "void DropActionInput(PlayerBase player)",
      "void CarHornShortActionInput(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "DropActionInput": {
    "parent": null,
    "methods": [
      "void DropActionInput(PlayerBase player)",
      "void CarHornShortActionInput(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "CarHornShortActionInput": {
    "parent": null,
    "methods": [
      "void CarHornShortActionInput(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "CarHornLongActionInput": {
    "parent": null,
    "methods": [
      "void CarHornLongActionInput(PlayerBase player)",
      "void ToggleLightsActionInput(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "ToggleLightsActionInput": {
    "parent": null,
    "methods": [
      "void ToggleLightsActionInput(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void ToggleNVGActionInput(PlayerBase player)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "ToggleNVGActionInput": {
    "parent": null,
    "methods": [
      "void ToggleNVGActionInput(PlayerBase player)",
      "void UpdatePossibleActions(PlayerBase player, ActionTarget target, ItemBase item, int action_condition_mask)",
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "ContinuousWeaponManipulationActionInput": {
    "parent": null,
    "methods": [
      "void ContinuousWeaponManipulationActionInput(PlayerBase player)",
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "WeaponManipulationActionInput": {
    "parent": null,
    "methods": [
      "void WeaponManipulationActionInput(PlayerBase player)",
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "ExternalControlledActionInput": {
    "parent": null,
    "methods": [
      "void ExternalControlledActionInput(PlayerBase player)",
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "InventoryOnlyActionInput": {
    "parent": null,
    "methods": [
      "void InventoryOnlyActionInput(PlayerBase player)"
    ]
  },
  "QuickaBarActionInput": {
    "parent": null,
    "methods": []
  },
  "TSelectableActionInfoArray": {
    "parent": "array",
    "methods": [
      "bool IsSameAs(TSelectableActionInfoArray other)",
      "void ActionManagerBase(PlayerBase player)",
      "void EnableActions(bool enable)",
      "void Update(int pCurrentCommandID)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void StartDeliveredAction()",
      "int GetSelectedActionIndex()",
      "void SelectFirstActionCategory()",
      "void SelectNextActionCategory()",
      "void SelectPrevActionCategory()",
      "void SelectNextAction()",
      "void SelectPrevAction()",
      "void RequestEndAction()",
      "void EndActionInput()",
      "bool IsSelectableActionsChanged()",
      "bool ActionPossibilityCheck(int pCurrentCommandID)",
      "void SetActionContext(ActionTarget target, ItemBase item)",
      "int GetActionState(ActionBase action)",
      "void OnContinuousStart()",
      "void OnContinuousCancel()",
      "void OnSingleUse()",
      "void InterruptNoSync()",
      "void Interrupt()",
      "void RequestInterruptAction()",
      "void LocalInterrupt()",
      "void OnInteractAction()",
      "void OnInstantAction(typename user_action_type, Param data = null)",
      "void OnActionEnd()",
      "void OnJumpStart()",
      "void EndOrInterruptCurrentAction()",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "float GetActionComponentProgress()",
      "float GetACProgressWidgetMultiplier()",
      "int GetActionState()"
    ]
  },
  "ActionManagerBase": {
    "parent": null,
    "methods": [
      "void ActionManagerBase(PlayerBase player)",
      "void EnableActions(bool enable)",
      "void Update(int pCurrentCommandID)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "void StartDeliveredAction()",
      "int GetSelectedActionIndex()",
      "void SelectFirstActionCategory()",
      "void SelectNextActionCategory()",
      "void SelectPrevActionCategory()",
      "void SelectNextAction()",
      "void SelectPrevAction()",
      "void RequestEndAction()",
      "void EndActionInput()",
      "bool IsSelectableActionsChanged()",
      "bool ActionPossibilityCheck(int pCurrentCommandID)",
      "void SetActionContext(ActionTarget target, ItemBase item)",
      "int GetActionState(ActionBase action)",
      "void OnContinuousStart()",
      "void OnContinuousCancel()",
      "void OnSingleUse()",
      "void InterruptNoSync()",
      "void Interrupt()",
      "void RequestInterruptAction()",
      "void LocalInterrupt()",
      "void OnInteractAction()",
      "void OnInstantAction(typename user_action_type, Param data = null)",
      "void OnActionEnd()",
      "void OnJumpStart()",
      "void EndOrInterruptCurrentAction()",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "float GetActionComponentProgress()",
      "float GetACProgressWidgetMultiplier()",
      "int GetActionState()"
    ]
  },
  "ActionManagerClient": {
    "parent": null,
    "methods": [
      "void ActionManagerClient(PlayerBase player)",
      "void Update(int pCurrentCommandID)",
      "void RegisterInputs(PlayerBase player)",
      "void SetActioninputOrder()",
      "void SetDefaultInputsOrder()",
      "void RequestEndAction()",
      "void EndActionInput()",
      "void InputsUpdate()",
      "void ProcessActionRequestEnd()",
      "void ProcessActionInputEnd()",
      "int GetPossibleActionIndex(typename inputType)",
      "int GetPossibleActionCount(typename inputType)",
      "void InjectAction(ActionBase action, ActionTarget target, ItemBase item)",
      "void InjectAction(typename actionType, ActionTarget target, ItemBase item)",
      "void EjectAction(ActionBase action)",
      "void EjectAction(typename actionType)",
      "void ForceTarget(Object targetObject)",
      "void ClearForceTarget()",
      "bool HasHandInventoryReservation()",
      "void FindContextualUserActions(int pCurrentCommandID)",
      "bool LockInventory(ActionData action_data)",
      "void UnlockInventory(ActionData action_data)",
      "void ActionStart(ActionBase action, ActionTarget target, ItemBase item, Param extra_data = NULL)",
      "void HandleInputsOnActionStart(ActionBase action)",
      "void HandleInputsOnActionEnd()",
      "void ResetInputsState()",
      "void ResetInputsActions()",
      "void OnJumpStart()",
      "void EndOrInterruptCurrentAction()",
      "void OnInstantAction(typename user_action_type, Param data = NULL)",
      "void PerformAction(int user_action_id, ActionTarget target, ItemBase item, Param extraData = NULL)",
      "void PerformActionStart(ActionBase action, ActionTarget target, ItemBase item, Param extra_data = NULL)",
      "void OnActionEnd()",
      "void SetInventoryAction(ActionBase action_name, ItemBase target_item, ItemBase main_item)",
      "void SetInventoryAction(ActionBase action_name, ActionTarget target, ItemBase main_item)",
      "void UnsetInventoryAction()",
      "void UpdateActionCategoryPriority()",
      "void SelectFirstActionCategory()",
      "void SelectNextActionCategory()",
      "void SelectPrevActionCategory()",
      "void SelectNextAction()",
      "void SelectPrevAction()",
      "bool CanPerformActionFromQuickbar(ItemBase mainItem, ItemBase targetItem)",
      "void PerformActionFromQuickbar(ItemBase mainItem, ItemBase targetItem)",
      "bool CanPerformActionFromInventory(ItemBase mainItem, ItemBase targetItem)",
      "void PerformActionFromInventory(ItemBase mainItem, ItemBase targetItem)",
      "bool CanSetActionFromInventory(ItemBase mainItem, ItemBase targetItem)",
      "void SetActionFromInventory(ItemBase mainItem, ItemBase targetItem)",
      "void SetIgnoreAutomaticInputEnd(bool state)",
      "void RequestInterruptAction()"
    ]
  },
  "ActionManagerServer": {
    "parent": null,
    "methods": [
      "void ActionManagerServer(PlayerBase player)",
      "void OnJumpStart()",
      "void EndOrInterruptCurrentAction()",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "void StartDeliveredAction()",
      "void OnActionEnd()",
      "void Update(int pCurrentCommandID)",
      "void RequestInterruptAction()"
    ]
  },
  "VicinityObjects": {
    "parent": null,
    "methods": [
      "void VicinityObjects()",
      "void StoreVicinityObject(Object object, Object parent = null)",
      "void TransformToVicinityObjects(array<Object> objects)",
      "void ClearVicinityObjects()",
      "int Count()",
      "void Remove(Object object)",
      "void Remove(array<Object> objects)",
      "void ActionTarget(Object object, Object parent, int componentIndex, vector cursorHitPos, float utility)",
      "bool IsProxy()",
      "int GetComponentIndex()",
      "float GetUtility()",
      "void SetCursorHitPos(vector cursor_position)",
      "void DbgPrintTargetDump()",
      "string DumpToString()",
      "void ActionTargets(PlayerBase player)",
      "void Clear()",
      "void Update()",
      "bool IsObstructed(Object object)",
      "bool IsObstructedEx(Object object, IsObjectObstructedCache cache)",
      "int GetTargetsCount()",
      "void StoreTarget(ActionTarget pActionTarget)",
      "int FindIndexForStoring(float value)",
      "float ComputeUtility(Object pTarget, vector pRayStart, vector pRayEnd, Object cursorTarget, vector hitPos)",
      "float DistSqrPoint2Line(vector pPoint, vector pL1, vector pL2)",
      "void FilterObstructedObjectsEx(Object cursor_target, array<Object> vicinityObjects)",
      "void FilterObstructedObjects(Object cursor_target)",
      "void ShowDebugActionTargets(bool enabled)",
      "void DrawDebugActionTargets(bool enabled)",
      "void DrawDebugCone(bool enabled)",
      "void DrawSelectionPos(bool enabled)",
      "void DrawDebugRay(bool enabled)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "ActionTarget": {
    "parent": null,
    "methods": [
      "void ActionTarget(Object object, Object parent, int componentIndex, vector cursorHitPos, float utility)",
      "bool IsProxy()",
      "int GetComponentIndex()",
      "float GetUtility()",
      "void SetCursorHitPos(vector cursor_position)",
      "void DbgPrintTargetDump()",
      "string DumpToString()",
      "void ActionTargets(PlayerBase player)",
      "void Clear()",
      "void Update()",
      "bool IsObstructed(Object object)",
      "bool IsObstructedEx(Object object, IsObjectObstructedCache cache)",
      "int GetTargetsCount()",
      "void StoreTarget(ActionTarget pActionTarget)",
      "int FindIndexForStoring(float value)",
      "float ComputeUtility(Object pTarget, vector pRayStart, vector pRayEnd, Object cursorTarget, vector hitPos)",
      "float DistSqrPoint2Line(vector pPoint, vector pL1, vector pL2)",
      "void FilterObstructedObjectsEx(Object cursor_target, array<Object> vicinityObjects)",
      "void FilterObstructedObjects(Object cursor_target)",
      "void ShowDebugActionTargets(bool enabled)",
      "void DrawDebugActionTargets(bool enabled)",
      "void DrawDebugCone(bool enabled)",
      "void DrawSelectionPos(bool enabled)",
      "void DrawDebugRay(bool enabled)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "ActionTargets": {
    "parent": null,
    "methods": [
      "void ActionTargets(PlayerBase player)",
      "void Clear()",
      "void Update()",
      "bool IsObstructed(Object object)",
      "bool IsObstructedEx(Object object, IsObjectObstructedCache cache)",
      "int GetTargetsCount()",
      "void StoreTarget(ActionTarget pActionTarget)",
      "int FindIndexForStoring(float value)",
      "float ComputeUtility(Object pTarget, vector pRayStart, vector pRayEnd, Object cursorTarget, vector hitPos)",
      "float DistSqrPoint2Line(vector pPoint, vector pL1, vector pL2)",
      "void FilterObstructedObjectsEx(Object cursor_target, array<Object> vicinityObjects)",
      "void FilterObstructedObjects(Object cursor_target)",
      "void ShowDebugActionTargets(bool enabled)",
      "void DrawDebugActionTargets(bool enabled)",
      "void DrawDebugCone(bool enabled)",
      "void DrawSelectionPos(bool enabled)",
      "void DrawDebugRay(bool enabled)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "ObjectGroup": {
    "parent": null,
    "methods": []
  },
  "ActionVariantManager": {
    "parent": null,
    "methods": [
      "void ActionVariantManager( typename type )",
      "void Clear()",
      "void SetActionVariantCount( int count )",
      "int GetActions( out array<ref ActionBase> variants_action)",
      "int GetActionsCount()",
      "void UpdateVariants( Object item, Object target, int componet_index )"
    ]
  },
  "ActionBaseCB": {
    "parent": null,
    "methods": [
      "void ActionBaseCB()",
      "int GetPossileStanceMask()",
      "void OnAnimationEvent(int pEventID)",
      "void OnFinish(bool pCanceled)",
      "void SetCommand( int command_uid )",
      "void CreateActionComponent()",
      "void InitActionComponent()",
      "void ProgressActionComponent()",
      "void EndActionComponent()",
      "void Interrupt()",
      "void SetActionData(ActionData action_data )",
      "bool IsUserActionCallback()",
      "float GetActionComponentProgress()",
      "int GetActionState()",
      "void AnimatedActionBase()",
      "void OnAlternativeEndServer( PlayerBase player )",
      "void OnAlternativeEndClient( PlayerBase player )",
      "void OnInterruptServer( PlayerBase player )",
      "void OnInterruptClient( PlayerBase player )",
      "void OnExecute( ActionData action_data )",
      "void OnExecuteServer( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )",
      "void OnAnimationEvent( ActionData action_data )",
      "bool HasMultipleExecution(ActionData action_data)",
      "void CheckAnimationEvent(ActionData action_data)",
      "void OnUpdate(ActionData action_data)",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "int GetStanceMaskEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "int GetActionCommandEx(ActionData actionData)",
      "int GetActionCommand(PlayerBase player)",
      "int GetCommandOverride(ActionData actionData)",
      "int GetStanceMaskOverride(ItemBase item)",
      "bool HasProneException()",
      "void CreateAndSetupActionCallback( ActionData action_data )",
      "void Start( ActionData action_data )",
      "void Interrupt( ActionData action_data )",
      "void OnJumpStart()",
      "void Do( ActionData action_data, int state )",
      "void End( ActionData action_data )",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetProgress( ActionData action_data )",
      "float GetProgressWidgetMultiplier( ActionData action_data )"
    ]
  },
  "AnimatedActionBase": {
    "parent": null,
    "methods": [
      "void AnimatedActionBase()",
      "void OnAlternativeEndServer( PlayerBase player )",
      "void OnAlternativeEndClient( PlayerBase player )",
      "void OnInterruptServer( PlayerBase player )",
      "void OnInterruptClient( PlayerBase player )",
      "void OnExecute( ActionData action_data )",
      "void OnExecuteServer( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )",
      "void OnAnimationEvent( ActionData action_data )",
      "bool HasMultipleExecution(ActionData action_data)",
      "void CheckAnimationEvent(ActionData action_data)",
      "void OnUpdate(ActionData action_data)",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "int GetStanceMaskEx(PlayerBase player, ActionTarget target, ItemBase item)",
      "int GetActionCommandEx(ActionData actionData)",
      "int GetActionCommand(PlayerBase player)",
      "int GetCommandOverride(ActionData actionData)",
      "int GetStanceMaskOverride(ItemBase item)",
      "bool HasProneException()",
      "void CreateAndSetupActionCallback( ActionData action_data )",
      "void Start( ActionData action_data )",
      "void Interrupt( ActionData action_data )",
      "void OnJumpStart()",
      "void Do( ActionData action_data, int state )",
      "void End( ActionData action_data )",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetProgress( ActionData action_data )",
      "float GetProgressWidgetMultiplier( ActionData action_data )"
    ]
  },
  "DisplayElementBadge": {
    "parent": "DisplayElementBase",
    "methods": [
      "void SetLevel(int level)",
      "void UpdateHUD()"
    ]
  },
  "DisplayElementBase": {
    "parent": "MessageReceiverBase",
    "methods": [
      "void DisplayElementBase(PlayerBase player)",
      "bool IsClientOnly()",
      "bool IsValueChanged()",
      "void UpdateHUD()",
      "int GetNumberOfBits()",
      "void SetValue(int value, int range = 0)",
      "int GetValue()",
      "int BitToDec(int mask, int index, int length)",
      "int GetCompareMask()",
      "int GetType()",
      "int TranslateLevelToStatus(int level)"
    ]
  },
  "DisplayElementTendency": {
    "parent": "DisplayElementBase",
    "methods": [
      "void DisplayElementTendency(PlayerBase player)",
      "void SetSeriousnessLevel( DSLevels level )",
      "void UpdateHUD()",
      "void SetTendency(int tendency)"
    ]
  },
  "VirtualHud": {
    "parent": null,
    "methods": [
      "void VirtualHud(PlayerBase player)",
      "void OnScheduledTick()",
      "void RegisterElement(DisplayElementBase element)",
      "void SerializeElements(array<int> mask_array)",
      "void DeserializeElements(array<int> mask_array)",
      "int BitToDec(int mask, int index, int compareMask)",
      "void PrintElements()",
      "void SendRPC()",
      "bool AreArraysSame( notnull array<int> array_a, notnull array<int> array_b )",
      "void ImmediateUpdate()",
      "void UpdateStatus()",
      "void OnRPC(ParamsReadContext ctx)",
      "void Debug()"
    ]
  },
  "WeaponManager": {
    "parent": null,
    "methods": [
      "void WeaponManager(PlayerBase player)",
      "bool CanFire(Weapon_Base wpn)",
      "bool CanAttachMagazine(Weapon_Base wpn, Magazine mag, bool reservationCheck = true )",
      "bool CanSwapMagazine(Weapon_Base wpn, Magazine mag, bool reservationCheck = true)",
      "bool CanDetachMagazine(Weapon_Base wpn, Magazine mag, bool reservationCheck = true)",
      "bool CanLoadBullet(Weapon_Base wpn, Magazine mag, bool reservationCheck = true)",
      "bool CanLoadMultipleBullet(Weapon_Base wpn, Magazine mag, bool reservationCheck = true)",
      "bool CanUnjam(Weapon_Base wpn, bool reservationCheck = true)",
      "bool CanEjectBullet(Weapon_Base wpn, bool reservationCheck = true)",
      "void SetEjectBulletTryTimestamp()",
      "bool InventoryReservation( Magazine mag, InventoryLocation invLoc)",
      "bool AttachMagazine( Magazine mag , ActionBase control_action = NULL )",
      "bool DetachMagazine( InventoryLocation invLoc, ActionBase control_action = NULL)",
      "bool SwapMagazine( Magazine mag, ActionBase control_action = NULL )",
      "bool SwapMagazineEx( Magazine mag, InventoryLocation invLoc, ActionBase control_action = NULL )",
      "bool LoadBullet( Magazine mag, ActionBase control_action = NULL )",
      "bool LoadMultiBullet( Magazine mag, ActionBase control_action = NULL )",
      "void LoadMultiBulletStop( )",
      "bool Unjam( ActionBase control_action = NULL )",
      "bool EjectBullet( ActionBase control_action = NULL )",
      "bool CanEjectBulletVerified()",
      "bool EjectBulletVerified( ActionBase control_action = NULL )",
      "bool SetNextMuzzleMode()",
      "void Fire(Weapon_Base wpn)",
      "int GetBurstOption()",
      "void SetBurstOption(int value)",
      "void Synchronize( )",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "bool StartAction(int action, Magazine mag, InventoryLocation il, ActionBase control_action = NULL)",
      "void StartPendingAction()",
      "bool IsRunning()",
      "void SetRunning( bool value)",
      "void Refresh()",
      "void Update( float deltaT )",
      "void OnWeaponActionEnd()",
      "void DelayedRefreshAnimationState(int delay)",
      "void RefreshAnimationState()",
      "bool WantContinue()",
      "void OnMagazineInventoryEnter(Magazine mag)",
      "void OnMagazineInventoryExit(Magazine mag)",
      "void OnMagazineAttach(Magazine mag)",
      "void OnMagazineDetach(Magazine mag)",
      "int CompareMagazinesSuitability( Magazine mag1, Magazine mag2 )",
      "void SortMagazineAfterLoad()",
      "void SetSutableMagazines()",
      "void OnLiftWeapon()",
      "string GetCurrentModeName()",
      "bool PrepareInventoryLocationForMagazineSwap( notnull Weapon_Base wpn, notnull Magazine new_mag, out InventoryLocation new_il )"
    ]
  },
  "ChernarusPlusData": {
    "parent": "WorldData",
    "methods": [
      "void Init()",
      "void SetupWeatherSettings()",
      "bool WeatherOnBeforeChange( EWeatherPhenomenon type, float actual, float change, float time )",
      "void CalculateWind(int newWeather, bool suddenChange, out float magnitude, out float direction)",
      "void CalculateVolFog(float lerpValue, float windMagnitude, float changeTime)",
      "bool LogWeatherData()"
    ]
  },
  "EnochData": {
    "parent": null,
    "methods": [
      "void Init()",
      "void InitYieldBank()",
      "void SetupWeatherSettings()",
      "void SetupLiquidTemperatures()",
      "bool WeatherOnBeforeChange( EWeatherPhenomenon type, float actual, float change, float time )",
      "void CalculateWind(int newWeather, bool suddenChange, out float magnitude, out float direction)",
      "void CalculateVolFog(float lerpValue, float windMagnitude, float changeTime)",
      "bool LogWeatherData()"
    ]
  },
  "MainMenuWorldData": {
    "parent": null,
    "methods": [
      "bool WeatherOnBeforeChange(EWeatherPhenomenon type, float actual, float change, float time)"
    ]
  },
  "SakhalData": {
    "parent": null,
    "methods": [
      "void Init()",
      "void InitYieldBank()",
      "void SetupWeatherSettings()",
      "void SetupLiquidTemperatures()",
      "bool WeatherOnBeforeChange( EWeatherPhenomenon type, float actual, float change, float time )",
      "void CalculateWind(int newWeather, bool suddenChange, out float magnitude, out float direction)",
      "void CalculateVolFog(float lerpValue, float windMagnitude, float changeTime)",
      "float GetAgentSpawnChance(eAgents agent)",
      "float GetColdAreaToolDamageModifier()",
      "bool LogWeatherData()"
    ]
  },
  "AdvancedCommunication": {
    "parent": "EntityAI",
    "methods": [
      "void AdvancedCommunication()",
      "void TurnOnTransmitter()",
      "void TurnOffTransmitter()",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "void SetActions()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)",
      "bool IsInventoryVisible()",
      "void SwitchOn(bool onOff)",
      "bool IsOn()",
      "void SetNextChannel()",
      "void SetPrevChannel()",
      "float GetTunedFrequency()",
      "void EnableBroadcast(bool state)",
      "void EnableReceive(bool state)",
      "bool IsBroadcasting()",
      "bool IsReceiving()",
      "int GetTunedFrequencyIndex()",
      "void SetFrequencyByIndex(int index)"
    ]
  },
  "PASReceiver": {
    "parent": "AdvancedCommunication",
    "methods": [
      "bool IsInventoryVisible()",
      "void SwitchOn(bool onOff)",
      "bool IsOn()",
      "void SetNextChannel()",
      "void SetPrevChannel()",
      "float GetTunedFrequency()",
      "void EnableBroadcast(bool state)",
      "void EnableReceive(bool state)",
      "bool IsBroadcasting()",
      "bool IsReceiving()",
      "int GetTunedFrequencyIndex()",
      "void SetFrequencyByIndex(int index)"
    ]
  },
  "PASBroadcaster": {
    "parent": "AdvancedCommunication",
    "methods": [
      "void SwitchOn(bool onOff)",
      "bool IsOn()",
      "void SetNextChannel()",
      "void SetPrevChannel()",
      "float GetTunedFrequency()",
      "void EnableBroadcast(bool state)",
      "void EnableReceive(bool state)",
      "bool IsBroadcasting()",
      "bool IsReceiving()",
      "int GetTunedFrequencyIndex()",
      "void SetFrequencyByIndex(int index)"
    ]
  },
  "StaticTransmitter": {
    "parent": "AdvancedCommunication",
    "methods": [
      "void SwitchOn(bool onOff)",
      "bool IsOn()",
      "void SetNextChannel()",
      "void SetPrevChannel()",
      "float GetTunedFrequency()",
      "void EnableBroadcast(bool state)",
      "void EnableReceive(bool state)",
      "bool IsBroadcasting()",
      "bool IsReceiving()",
      "int GetTunedFrequencyIndex()",
      "void SetFrequencyByIndex(int index)"
    ]
  },
  "Land_Lamp_City1_amp": {
    "parent": "PASReceiver",
    "methods": []
  },
  "Land_Power_Pole_Conc1_Amp": {
    "parent": "PASReceiver",
    "methods": []
  },
  "Land_Power_Pole_Conc4_Lamp_Amp": {
    "parent": "PASReceiver",
    "methods": []
  },
  "Land_Power_Pole_Wood1_Amp": {
    "parent": "PASReceiver",
    "methods": []
  },
  "Land_Power_Pole_Wood1_Lamp_Amp": {
    "parent": "PASReceiver",
    "methods": []
  },
  "Land_Radio_PanelBig": {
    "parent": null,
    "methods": [
      "bool DisableVicinityIcon()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "bool IsStaticTransmitter()",
      "void SetNextFrequency(PlayerBase player = null)",
      "void OnSwitchOn()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void SetActions()"
    ]
  },
  "Land_Radio_PanelPAS": {
    "parent": "PASBroadcaster",
    "methods": [
      "bool IsStaticTransmitter()",
      "bool DisableVicinityIcon()",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void SoundTurnedOnNoiseStart()",
      "void SoundTurnedOnNoiseStop()",
      "void SoundTurnOn()",
      "void SoundTurnOff()"
    ]
  },
  "BuildingWithFireplace": {
    "parent": null,
    "methods": [
      "void BuildingWithFireplace()",
      "string GetFireplaceType(int firePointIndex)"
    ]
  },
  "Land_Mil_ControlTower": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig1": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig1_NoIvy": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig1_Half": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig1_NoIvy_Half": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig2": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig2_NoIvy": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig2_Half": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig2_NoIvy_Half": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig3": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig3_NoIvy": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig3_Half": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseBig3_NoIvy_Half": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseSmall1": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseSmall1_NoIvy": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseSmall2": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_HouseSmall2_NoIvy": {
    "parent": null,
    "methods": []
  },
  "Land_House_1W13_Dam": {
    "parent": null,
    "methods": []
  },
  "Land_Ruin_Chimney": {
    "parent": null,
    "methods": []
  },
  "Land_Tenement_Small_Brick": {
    "parent": null,
    "methods": []
  },
  "Land_Tenement_Small_Brown": {
    "parent": null,
    "methods": []
  },
  "Land_Tenement_Small_Yellow": {
    "parent": null,
    "methods": []
  },
  "CrashBase": {
    "parent": "House",
    "methods": [
      "static bool Init()",
      "void EEOnCECreate()",
      "void RequestSoundEvent()",
      "string GetSoundSet()",
      "void EEInit()",
      "void EEDelete(EntityAI parent)"
    ]
  },
  "FuelStation": {
    "parent": "BuildingSuper",
    "methods": [
      "bool IsBuilding()",
      "bool IsFuelStation()",
      "float GetLiquidThroughputCoef()",
      "int GetLiquidSourceType()"
    ]
  },
  "OutdoorThermometerManager": {
    "parent": null,
    "methods": [
      "static void Init()",
      "static void Cleanup()",
      "static void Add(OutdoorThermometer thermometer)",
      "static void Remove(OutdoorThermometer thermometer)",
      "static void Update(float timeslice)",
      "void OutdoorThermometer()",
      "void UpdateTemperature()",
      "void LateInit()",
      "void Land_OutsideThermometer()",
      "void Land_OutsideThermometer_1()",
      "void Land_OutsideThermometer_2()"
    ]
  },
  "OutdoorThermometer": {
    "parent": null,
    "methods": [
      "void OutdoorThermometer()",
      "void UpdateTemperature()",
      "void LateInit()",
      "void Land_OutsideThermometer()",
      "void Land_OutsideThermometer_1()",
      "void Land_OutsideThermometer_2()"
    ]
  },
  "Land_OutsideThermometer": {
    "parent": null,
    "methods": [
      "void Land_OutsideThermometer()",
      "void Land_OutsideThermometer_1()",
      "void Land_OutsideThermometer_2()"
    ]
  },
  "Land_OutsideThermometer_1": {
    "parent": null,
    "methods": [
      "void Land_OutsideThermometer_1()",
      "void Land_OutsideThermometer_2()"
    ]
  },
  "Land_OutsideThermometer_2": {
    "parent": null,
    "methods": [
      "void Land_OutsideThermometer_2()"
    ]
  },
  "Land_OutsideThermometer_2_wall": {
    "parent": null,
    "methods": []
  },
  "Land_Bilboard_Base": {
    "parent": null,
    "methods": [
      "void Land_Bilboard_Base()"
    ]
  },
  "Well": {
    "parent": "BuildingSuper",
    "methods": [
      "bool IsBuilding()",
      "bool IsWell()",
      "float GetLiquidThroughputCoef()",
      "int GetLiquidSourceType()",
      "void SetActions()"
    ]
  },
  "EffectBoatWaterFront": {
    "parent": null,
    "methods": [
      "void EffectBoatWaterFront()",
      "void UpdateSpeedState(Particle ptc, float speed)",
      "void Update(float timeSlice = 0)",
      "void EffectBoatWaterBack()",
      "void EffectBoatWaterSide()",
      "void AttachTo(Object obj, vector local_pos = , vector local_ori = , bool force_rotation_to_world = false)",
      "void SetParticleState(int state)",
      "void EnableEmitor(Particle ptc, int id, bool enable)",
      "void UpdatePosToSeaLevel(float timeSlice = 0, float surfaceOffset = 0)"
    ]
  },
  "EffectBoatWaterBack": {
    "parent": null,
    "methods": [
      "void EffectBoatWaterBack()",
      "void UpdateSpeedState(Particle ptc, float speed)",
      "void Update(float timeSlice = 0)",
      "void EffectBoatWaterSide()",
      "void AttachTo(Object obj, vector local_pos = , vector local_ori = , bool force_rotation_to_world = false)",
      "void SetParticleState(int state)",
      "void EnableEmitor(Particle ptc, int id, bool enable)",
      "void UpdatePosToSeaLevel(float timeSlice = 0, float surfaceOffset = 0)"
    ]
  },
  "EffectBoatWaterSide": {
    "parent": null,
    "methods": [
      "void EffectBoatWaterSide()",
      "void UpdateSpeedState(Particle ptc, float speed)",
      "void Update(float timeSlice = 0)",
      "void AttachTo(Object obj, vector local_pos = , vector local_ori = , bool force_rotation_to_world = false)",
      "void SetParticleState(int state)",
      "void EnableEmitor(Particle ptc, int id, bool enable)",
      "void UpdatePosToSeaLevel(float timeSlice = 0, float surfaceOffset = 0)"
    ]
  },
  "EffectBoatWaterBase": {
    "parent": null,
    "methods": [
      "void AttachTo(Object obj, vector local_pos = , vector local_ori = , bool force_rotation_to_world = false)",
      "void SetParticleState(int state)",
      "void EnableEmitor(Particle ptc, int id, bool enable)",
      "void UpdateSpeedState(Particle ptc, float speed)",
      "void Update(float timeSlice = 0)",
      "void UpdatePosToSeaLevel(float timeSlice = 0, float surfaceOffset = 0)"
    ]
  },
  "EffWheelSmoke": {
    "parent": null,
    "methods": [
      "void EffWheelSmoke()",
      "void SetSurface(string surface)",
      "void SetParticleState( int state )"
    ]
  },
  "ClaymoreMine": {
    "parent": null,
    "methods": [
      "void ClaymoreMine()",
      "void EOnInit(IEntity other, int extra)",
      "void EEKilled(Object killer)",
      "void EEDelete(EntityAI parent)",
      "void InitiateExplosion()",
      "void AfterStoreLoad()",
      "void OnVariablesSynchronized()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void PairRemote(notnull EntityAI trigger)",
      "bool CanBeDisarmed()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void OnArmed()",
      "void OnDisarmed(bool pWithTool)",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "void UpdateVisuals()",
      "void UpdateLED(ERemoteDetonatorLEDState pState, bool pForced = false)",
      "bool IsTakeable()",
      "bool IsDeployable()",
      "void SetActions()",
      "int GetViewIndex()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "string GetArmSoundset()",
      "string GetDisarmSoundset()",
      "void OnDebugSpawn()",
      "string GetDebugText()",
      "void DrawDamageZone()",
      "void RemoveDebugVisuals()"
    ]
  },
  "ClaymoreMinePlacing": {
    "parent": null,
    "methods": []
  },
  "ImprovisedExplosive": {
    "parent": null,
    "methods": [
      "void ImprovisedExplosive()",
      "void EOnInit(IEntity other, int extra)",
      "bool HasLockedTriggerSlots()",
      "void LockTriggerSlots()",
      "void UnlockTriggerSlots()",
      "void LockExplosivesSlots()",
      "void UnlockExplosivesSlots()",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void OnVariablesSynchronized()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void PairRemote(notnull EntityAI trigger)",
      "bool CanBeArmed()",
      "bool CanBeDisarmed()",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanDisplayAttachmentSlot(int slot_id)",
      "bool IsTimerDetonable()",
      "bool IsTakeable()",
      "bool IsDeployable()",
      "void SetActions()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void InitiateExplosion()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void OnBeforeDisarm()",
      "void OnDisarmed(bool pWithTool)",
      "void UpdateLED(int pState)",
      "void OnTriggerAttached(EntityAI entity)",
      "void OnTriggerDetached(EntityAI entity)",
      "void UpdateVisuals(EntityAI entity)",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "string GetArmSoundset()",
      "string GetDisarmSoundset()",
      "string GetDebugText()"
    ]
  },
  "ImprovisedExplosivePlacing": {
    "parent": null,
    "methods": []
  },
  "Plastic_Explosive": {
    "parent": null,
    "methods": [
      "void Plastic_Explosive()",
      "void EOnInit(IEntity other, int extra)",
      "void EEKilled(Object killer)",
      "bool HasLockedTriggerSlots()",
      "void LockTriggerSlots()",
      "void UnlockTriggerSlots()",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void OnVariablesSynchronized()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanDisplayAttachmentSlot(int slot_id)",
      "bool IsTakeable()",
      "bool IsDeployable()",
      "void SetActions()",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool EEOnDamageCalculated(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void PairRemote(notnull EntityAI trigger)",
      "bool CanBeArmed()",
      "bool CanBeDisarmed()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void OnDisarmed(bool pWithTool)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void UpdateLED(int pState)",
      "void OnTriggerAttached(EntityAI entity)",
      "void OnTriggerDetached(EntityAI entity)",
      "void UpdateVisuals(EntityAI entity)",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "string GetArmSoundset()",
      "string GetDisarmSoundset()"
    ]
  },
  "Plastic_Explosive_Placing": {
    "parent": null,
    "methods": []
  },
  "RemoteDetonator": {
    "parent": null,
    "methods": [
      "bool IsKit()",
      "void UpdateLED(ERemoteDetonatorLEDState pState, bool pForced = false)",
      "void SetActions()",
      "void RemoteDetonatorTrigger()",
      "void OnVariablesSynchronized()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnCEUpdate()",
      "void PairRemote(notnull EntityAI trigger)",
      "void UnpairRemote()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void SetControlledDevice(EntityAI pDevice)",
      "bool IsConnected()",
      "void OnAnimationPhaseStarted(string animSource, float phase)",
      "string GetDebugText()",
      "void RemoteDetonatorReceiver()",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "void EEKilled(Object killer)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void SetPairDevice(EntityAI device)",
      "void OnSuccess(EntityAI new_item)",
      "void OnAbort()"
    ]
  },
  "RemoteDetonatorTrigger": {
    "parent": null,
    "methods": [
      "void RemoteDetonatorTrigger()",
      "bool IsKit()",
      "void OnVariablesSynchronized()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnCEUpdate()",
      "void PairRemote(notnull EntityAI trigger)",
      "void UnpairRemote()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void SetControlledDevice(EntityAI pDevice)",
      "bool IsConnected()",
      "void OnAnimationPhaseStarted(string animSource, float phase)",
      "void SetActions()",
      "string GetDebugText()",
      "void RemoteDetonatorReceiver()",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "void EEKilled(Object killer)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void SetPairDevice(EntityAI device)",
      "void OnSuccess(EntityAI new_item)",
      "void OnAbort()"
    ]
  },
  "RemoteDetonatorReceiver": {
    "parent": null,
    "methods": [
      "void RemoteDetonatorReceiver()",
      "bool IsKit()",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "void EEKilled(Object killer)",
      "void SetActions()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void SetPairDevice(EntityAI device)",
      "void OnSuccess(EntityAI new_item)",
      "void OnAbort()"
    ]
  },
  "ReplaceDetonatorItemLambda": {
    "parent": null,
    "methods": [
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void SetPairDevice(EntityAI device)",
      "void OnSuccess(EntityAI new_item)",
      "void OnAbort()"
    ]
  },
  "ReplaceDetonatorItemOnArmLambda": {
    "parent": null,
    "methods": [
      "void SetPairDevice(EntityAI device)",
      "void OnSuccess(EntityAI new_item)",
      "void OnAbort()"
    ]
  },
  "ReplaceDetonatorItemOnDisarmLambda": {
    "parent": null,
    "methods": [
      "void OnSuccess(EntityAI new_item)",
      "void OnAbort()"
    ]
  },
  "BAREM_CLO_BU0_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BAREM_CLO_BU1_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BAREM_CLO_BU1_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BAREM_CLO_BU0_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BAREM_CLO_BUF_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BAREM_CLO_BUF_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BAREM_JAM_BU1_MA0": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BAREM_JAM_BU1_MA1": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BoltActionRifle_ExternalMagazine_Base": {
    "parent": null,
    "methods": [
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BARIMEmptyDischarged": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BARIMLoadedCharged": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BARIMLoadedDischarged": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BARIMLoadedJammed": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BoltActionRifle_InnerMagazine_Base": {
    "parent": "BoltActionRifle_Base",
    "methods": [
      "void InitStateMachine()",
      "void SetActions()"
    ]
  },
  "BoltActionRifle_Base": {
    "parent": "Weapon_Base",
    "methods": [
      "float GetChanceToJam()"
    ]
  },
  "BoltRifle_Base": {
    "parent": "Weapon_Base",
    "methods": []
  },
  "CupidsBoltSimulation": {
    "parent": null,
    "methods": [
      "void OnFire(Entity entity)"
    ]
  },
  "DoubleBarrelLoadedLoaded": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void SetNextWeaponMode(int muzzleIndex)"
    ]
  },
  "DoubleBarrelLoadedEmpty": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void SetNextWeaponMode(int muzzleIndex)"
    ]
  },
  "DoubleBarrelEmptyLoaded": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void SetNextWeaponMode(int muzzleIndex)"
    ]
  },
  "DoubleBarrelFireoutLoaded": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void SetNextWeaponMode(int muzzleIndex)"
    ]
  },
  "DoubleBarrelFireoutFireout": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void SetNextWeaponMode(int muzzleIndex)"
    ]
  },
  "DoubleBarrelFireoutEmpty": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void SetNextWeaponMode(int muzzleIndex)"
    ]
  },
  "DoubleBarrelEmptyFireout": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void SetNextWeaponMode(int muzzleIndex)"
    ]
  },
  "DoubleBarrelEmptyEmpty": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void SetNextWeaponMode(int muzzleIndex)"
    ]
  },
  "DoubleBarrel_Base": {
    "parent": null,
    "methods": [
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void SetNextWeaponMode(int muzzleIndex)"
    ]
  },
  "FlareSimulation": {
    "parent": null,
    "methods": [
      "void FlareSimulation()",
      "void OnActivation(Entity flare)",
      "void OnTermination(Entity flare)",
      "void OnFire( Entity flare)",
      "void Simulate( Entity flare )",
      "void FlareParticleUpdate()",
      "void CastFlareAINoise( vector position )",
      "void TurnOffDistantLight()",
      "void FlareSimulation_Red()",
      "void FlareSimulation_Green()",
      "void FlareSimulation_Blue()"
    ]
  },
  "FlareSimulation_Red": {
    "parent": null,
    "methods": [
      "void FlareSimulation_Red()",
      "void FlareSimulation_Green()",
      "void FlareSimulation_Blue()"
    ]
  },
  "FlareSimulation_Green": {
    "parent": null,
    "methods": [
      "void FlareSimulation_Green()",
      "void FlareSimulation_Blue()"
    ]
  },
  "FlareSimulation_Blue": {
    "parent": null,
    "methods": [
      "void FlareSimulation_Blue()"
    ]
  },
  "PistolAlt_Base": {
    "parent": "Pistol_Base",
    "methods": []
  },
  "Pistol_CLO_DIS_BU0_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsDischarged()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_CLO_CHG_BU0_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "bool IsDischarged()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_CLO_CHG_BU1_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "bool IsDischarged()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_CLO_JAM_BU1_MA0": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsDischarged()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_OPE_DIS_BU0_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsDischarged()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_CLO_CHG_BU0_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_CLO_DIS_BU0_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_CLO_JAM_BU1_MA1": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_CLO_CHG_BU1_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_OPE_DIS_BU0_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "Pistol_Base": {
    "parent": "Weapon_Base",
    "methods": [
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void Pistol_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBF_CLO_BU0_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleBoltFree_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBF_CLO_BU1_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleBoltFree_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBF_CLO_BU1_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleBoltFree_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBF_CLO_BU0_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleBoltFree_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBF_JAM_BU1_MA0": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void RifleBoltFree_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBF_JAM_BU1_MA1": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void RifleBoltFree_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RifleBoltFree_Base": {
    "parent": "Rifle_Base",
    "methods": [
      "void RifleBoltFree_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBL_CLO_BU0_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleBoltLock_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBL_CLO_BU1_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleBoltLock_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBL_CLO_BU1_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleBoltLock_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBL_CLO_BU0_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleBoltLock_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBL_OPN_BU0_MA1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void RifleBoltLock_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBL_OPN_BU0_MA0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void RifleBoltLock_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBL_JAM_BU1_MA0": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void RifleBoltLock_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RBL_JAM_BU1_MA1": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void RifleBoltLock_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RifleBoltLock_Base": {
    "parent": "Rifle_Base",
    "methods": [
      "void RifleBoltLock_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void SetActions()"
    ]
  },
  "RifleSingleShotManual_Base": {
    "parent": "RifleSingleShot_Base",
    "methods": [
      "void RifleSingleShotManual_Base()",
      "void InitStateMachine()"
    ]
  },
  "RSSEmpty": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleSingleShot_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()"
    ]
  },
  "RSSFireout": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleSingleShot_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()"
    ]
  },
  "RSSLoaded": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void RifleSingleShot_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()"
    ]
  },
  "RSSJammed": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void RifleSingleShot_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()"
    ]
  },
  "RifleSingleShot_Base": {
    "parent": "Rifle_Base",
    "methods": [
      "void RifleSingleShot_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()"
    ]
  },
  "Rifle_Base": {
    "parent": "Weapon_Base",
    "methods": [
      "void Rifle_Base()",
      "void InitStateMachine()"
    ]
  },
  "SSPEmpty": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()"
    ]
  },
  "SSPFireout": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()"
    ]
  },
  "SSPLoaded": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()"
    ]
  },
  "SingleShotPistol_Base": {
    "parent": null,
    "methods": [
      "void InitStateMachine()"
    ]
  },
  "SmokeSimulation": {
    "parent": null,
    "methods": [
      "void SmokeSimulation()",
      "void OnFire( Entity flare)",
      "void SmokeSimulation_Black()",
      "void SmokeSimulation_White()",
      "void SmokeSimulation_Red()",
      "void SmokeSimulation_Green()"
    ]
  },
  "SmokeSimulation_Black": {
    "parent": null,
    "methods": [
      "void SmokeSimulation_Black()",
      "void SmokeSimulation_White()",
      "void SmokeSimulation_Red()",
      "void SmokeSimulation_Green()"
    ]
  },
  "SmokeSimulation_White": {
    "parent": null,
    "methods": [
      "void SmokeSimulation_White()",
      "void SmokeSimulation_Red()",
      "void SmokeSimulation_Green()"
    ]
  },
  "SmokeSimulation_Red": {
    "parent": null,
    "methods": [
      "void SmokeSimulation_Red()",
      "void SmokeSimulation_Green()"
    ]
  },
  "SmokeSimulation_Green": {
    "parent": null,
    "methods": [
      "void SmokeSimulation_Green()"
    ]
  },
  "WeaponFSM": {
    "parent": "HFSMBase",
    "methods": [
      "void SetInternalID(WeaponStateBase state)",
      "void AddTransition(FSMTransition<WeaponStateBase, WeaponEventBase, WeaponActionBase, WeaponGuardBase> t)",
      "bool LoadAndSetCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool LoadCurrentUnstableFSMState(ParamsWriteContext ctx, int version)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool SaveCurrentUnstableFSMState(ParamsWriteContext ctx)",
      "void ValidateAndRepair()",
      "bool Internal_ValidateAndRepair()",
      "bool ValidateAndRepairHelper(Weapon_Base weapon, string name, bool stateCondition, bool gunCondition, WeaponEventBase e1, WeaponEventBase e2, out WeaponStableState state)",
      "void OnFailThresholdBreached(Weapon weapon, string name, bool stateCondition, bool gunCondition)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "int GetCurrentStableStateID()",
      "int GetInternalStateID()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void RandomizeFSMState(bool hasBullet, bool hasMagazine, bool isJammed)",
      "void RandomizeFSMStateEx(array<MuzzleState> muzzleStates, bool hasMagazine, bool isJammed)"
    ]
  },
  "AbilityRecord": {
    "parent": null,
    "methods": [
      "void AbilityRecord(int a, int at)",
      "void Weapon_Base()",
      "void InitStateMachine()",
      "void EEInit()",
      "void SetInitialState(WeaponStableState initState)",
      "bool IsCharged()",
      "void SetCharged(bool value)",
      "bool IsWeaponOpen()",
      "void SetWeaponOpen(bool value)",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "void AssembleGun()",
      "bool CanProcessAction(int action, int actionType)",
      "bool HasActionAbility(int action, int actionType)",
      "int GetAbilityCount()",
      "bool CanProcessWeaponEvents()",
      "bool IsWaitingForActionFinish()",
      "bool IsIdle()",
      "bool ProcessWeaponEvent(WeaponEventBase e)",
      "bool ProcessWeaponAbortEvent(WeaponEventBase e)",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetWeaponAnimState(int state)",
      "void ResetWeaponAnimState()",
      "int GetWeaponAnimState()",
      "void EEFired(int muzzleType, int mode, string ammoType)",
      "bool JamCheck(int muzzleIndex )",
      "void ShowBullet(int muzzleIndex)",
      "void HideBullet(int muzzleIndex)",
      "bool IsJammed()",
      "bool CanEjectBullet()",
      "void SetJammed(bool value)",
      "float GetSyncChanceToJam()",
      "float GetChanceToJam()",
      "void SyncSelectionState(bool has_bullet, bool has_mag)",
      "void ForceSyncSelectionState()",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void AfterStoreLoad()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "int GetInternalStateID()",
      "int GetCurrentStableStateID()",
      "void RandomizeFSMState()",
      "bool SpawnAmmo( string magazineType = , int flags = WeaponWithAmmoFlags.CHAMBER )",
      "bool FillInnerMagazine( string ammoType = , int flags = WeaponWithAmmoFlags.CHAMBER )",
      "bool FillChamber( string ammoType = , int flags = WeaponWithAmmoFlags.CHAMBER )",
      "int GetSlotsCountCorrect()",
      "void OnFire(int muzzle_index)",
      "void OnFireModeChange(int fireMode)",
      "void DelayedValidateAndRepair()",
      "void ValidateAndRepair()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanRemoveFromHands(EntityAI parent)",
      "bool IsRemoteWeapon()",
      "void SyncEventToRemote(WeaponEventBase e)",
      "int GetWeaponSpecificCommand(int weaponAction, int subCommand)",
      "bool CanFire()",
      "bool CanEnterIronsights()",
      "bool InitDOFProperties(out array<float> temp_array)",
      "bool InitReliability(out array<float> reliability_array)",
      "bool InitWeaponLength()",
      "bool InitWeaponLiftCheckVerticalOffset()",
      "bool InitShoulderDistance()",
      "bool GetWasIronSight()",
      "void SetWasIronSight(bool state)",
      "bool LiftWeaponCheck(PlayerBase player)",
      "bool LiftWeaponRaycastResultCheck(notnull RaycastRVResult res)",
      "float GetEffectiveAttachmentLength()",
      "void SetSyncJammingChance( float jamming_chance )",
      "bool EjectCartridge(int muzzleIndex, out float ammoDamage, out string ammoTypeName)",
      "bool CopyWeaponStateFrom(notnull Weapon_Base src)",
      "void SetBayonetAttached(bool pState, int slot_idx = -1)",
      "bool HasBayonetAttached()",
      "int GetBayonetAttachmentIdx()",
      "void SetButtstockAttached(bool pState, int slot_idx = -1)",
      "bool HasButtstockAttached()",
      "int GetButtstockAttachmentIdx()",
      "void HideWeaponBarrel(bool state)",
      "void ShowMagazine()",
      "void HideMagazine()",
      "bool IsShowingChamberedBullet()",
      "int GetBurstCount()",
      "void ResetBurstCount()",
      "void SetActions()",
      "bool CanBeUsedForSuicide()",
      "void OnDebugSpawn()",
      "bool AddJunctureToAttachedMagazine(PlayerBase player, int timeoutMS)",
      "void ClearJunctureToAttachedMagazine(PlayerBase player)",
      "void SetNextWeaponMode(int muzzleIndex)",
      "void SetCoolDown( float coolDownTime )",
      "void UpdateCoolDown( float dt )",
      "bool IsCoolDown()"
    ]
  },
  "Weapon_Base": {
    "parent": "Weapon",
    "methods": [
      "void Weapon_Base()",
      "void InitStateMachine()",
      "void EEInit()",
      "void SetInitialState(WeaponStableState initState)",
      "bool IsCharged()",
      "void SetCharged(bool value)",
      "bool IsWeaponOpen()",
      "void SetWeaponOpen(bool value)",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "void AssembleGun()",
      "bool CanProcessAction(int action, int actionType)",
      "bool HasActionAbility(int action, int actionType)",
      "int GetAbilityCount()",
      "bool CanProcessWeaponEvents()",
      "bool IsWaitingForActionFinish()",
      "bool IsIdle()",
      "bool ProcessWeaponEvent(WeaponEventBase e)",
      "bool ProcessWeaponAbortEvent(WeaponEventBase e)",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetWeaponAnimState(int state)",
      "void ResetWeaponAnimState()",
      "int GetWeaponAnimState()",
      "void EEFired(int muzzleType, int mode, string ammoType)",
      "bool JamCheck(int muzzleIndex )",
      "void ShowBullet(int muzzleIndex)",
      "void HideBullet(int muzzleIndex)",
      "bool IsJammed()",
      "bool CanEjectBullet()",
      "void SetJammed(bool value)",
      "float GetSyncChanceToJam()",
      "float GetChanceToJam()",
      "void SyncSelectionState(bool has_bullet, bool has_mag)",
      "void ForceSyncSelectionState()",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void AfterStoreLoad()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "int GetInternalStateID()",
      "int GetCurrentStableStateID()",
      "void RandomizeFSMState()",
      "bool SpawnAmmo( string magazineType = , int flags = WeaponWithAmmoFlags.CHAMBER )",
      "bool FillInnerMagazine( string ammoType = , int flags = WeaponWithAmmoFlags.CHAMBER )",
      "bool FillChamber( string ammoType = , int flags = WeaponWithAmmoFlags.CHAMBER )",
      "int GetSlotsCountCorrect()",
      "void OnFire(int muzzle_index)",
      "void OnFireModeChange(int fireMode)",
      "void DelayedValidateAndRepair()",
      "void ValidateAndRepair()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanRemoveFromHands(EntityAI parent)",
      "bool IsRemoteWeapon()",
      "void SyncEventToRemote(WeaponEventBase e)",
      "int GetWeaponSpecificCommand(int weaponAction, int subCommand)",
      "bool CanFire()",
      "bool CanEnterIronsights()",
      "bool InitDOFProperties(out array<float> temp_array)",
      "bool InitReliability(out array<float> reliability_array)",
      "bool InitWeaponLength()",
      "bool InitWeaponLiftCheckVerticalOffset()",
      "bool InitShoulderDistance()",
      "bool GetWasIronSight()",
      "void SetWasIronSight(bool state)",
      "bool LiftWeaponCheck(PlayerBase player)",
      "bool LiftWeaponRaycastResultCheck(notnull RaycastRVResult res)",
      "float GetEffectiveAttachmentLength()",
      "void SetSyncJammingChance( float jamming_chance )",
      "bool EjectCartridge(int muzzleIndex, out float ammoDamage, out string ammoTypeName)",
      "bool CopyWeaponStateFrom(notnull Weapon_Base src)",
      "void SetBayonetAttached(bool pState, int slot_idx = -1)",
      "bool HasBayonetAttached()",
      "int GetBayonetAttachmentIdx()",
      "void SetButtstockAttached(bool pState, int slot_idx = -1)",
      "bool HasButtstockAttached()",
      "int GetButtstockAttachmentIdx()",
      "void HideWeaponBarrel(bool state)",
      "void ShowMagazine()",
      "void HideMagazine()",
      "bool IsShowingChamberedBullet()",
      "int GetBurstCount()",
      "void ResetBurstCount()",
      "void SetActions()",
      "bool CanBeUsedForSuicide()",
      "void OnDebugSpawn()",
      "bool AddJunctureToAttachedMagazine(PlayerBase player, int timeoutMS)",
      "void ClearJunctureToAttachedMagazine(PlayerBase player)",
      "void SetNextWeaponMode(int muzzleIndex)",
      "void SetCoolDown( float coolDownTime )",
      "void UpdateCoolDown( float dt )",
      "bool IsCoolDown()"
    ]
  },
  "GardenPlot": {
    "parent": "GardenBase",
    "methods": [
      "void GardenPlot()",
      "void EEInit()",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void EEDelete(EntityAI parent)",
      "bool IsInventoryVisible()",
      "int GetGardenSlotsCount()",
      "void RefreshSlots()",
      "void OnPlacementStarted( Man player )",
      "void OnHologramBeingPlaced( Man player )",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "bool CanBePlaced( Man player, vector position )",
      "bool IsTakeable()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanRemoveFromCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "void EOnInit(IEntity other, int extra)",
      "void SyncSlots()"
    ]
  },
  "GardenPlotPolytunnel": {
    "parent": null,
    "methods": [
      "int GetGardenSlotsCount()",
      "void RefreshSlots()",
      "void EOnInit(IEntity other, int extra)",
      "void SyncSlots()"
    ]
  },
  "GardenPlotGreenhouse": {
    "parent": null,
    "methods": [
      "void EOnInit(IEntity other, int extra)",
      "void RefreshSlots()",
      "void SyncSlots()"
    ]
  },
  "GardenPlotPlacing": {
    "parent": "GardenPlot",
    "methods": [
      "void EOnInit(IEntity other, int extra)",
      "void RefreshSlots()",
      "void SyncSlots()"
    ]
  },
  "PlantBase": {
    "parent": "ItemBase",
    "methods": [
      "void PlantBase()",
      "void Init( GardenBase garden_base, float fertility, float harvesting_efficiency, float water )",
      "void Tick()",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "string GetCropsType()",
      "bool OnStoreLoadCustom( ParamsReadContext ctx, int version )",
      "void OnStoreSaveCustom( ParamsWriteContext ctx )",
      "void PrintValues()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanRemoveFromHands( EntityAI parent )",
      "void ChangeInfestation( bool is_infested )",
      "void UpdatePlant()",
      "void GrowthTimerTick()",
      "void SetSpoiled()",
      "void SetDry()",
      "void SprayPlant( float consumed_quantity )",
      "string StopInfestation( float consumed_quantity )",
      "void RemovePlantEx( vector pos )",
      "void DestroyPlant()",
      "void Harvest( PlayerBase player )",
      "void SetPlantState(int state)",
      "int GetPlantStateIndex()",
      "float GetWater()",
      "float GetWaterMax()",
      "bool NeedsWater()",
      "float GetSprayQuantity()",
      "float GetSprayUsage()",
      "void RemoveSlot()",
      "void SetSlot(Slot slot)",
      "bool IsSprayable()",
      "bool IsHarvestable()",
      "bool HasCrops()",
      "void SetActions()",
      "void DebugSetTimes(int maturity, int spoil, int spoilRemove, int dryDelete)",
      "static void DebugSetGlobalTimes(int maturity, int spoil, int spoilRemove, int dryDelete)",
      "static void DebugSetTickSpeedMultiplier(float multiplier)",
      "void DeleteDryPlantTick()",
      "void SpoiledRemoveTimerTick()",
      "void InfestationTimerTick()",
      "void CheckWater()",
      "bool IsMature()",
      "bool IsSpoiled()",
      "bool IsDry()",
      "bool IsGrowing()",
      "bool NeedsSpraying()",
      "void RemovePlant()"
    ]
  },
  "Slot": {
    "parent": null,
    "methods": [
      "void Slot( float base_fertility )",
      "int GetSlotIndex()",
      "void SetSlotIndex(int index)",
      "int GetSlotId()",
      "void SetSlotId(int id)",
      "void SetGarden(GardenBase garden)",
      "void SetSeed(ItemBase seed)",
      "void SetPlant(PlantBase plant)",
      "void SetWater( int val )",
      "bool HasSeed()",
      "void GiveWater( float consumed_quantity )",
      "bool NeedsWater()",
      "bool CanBeWatered()",
      "float GetWater()",
      "float GetFertility()",
      "float GetFertilityMax()",
      "void SetFertility(float fertility)",
      "float GetFertilizerQuantity()",
      "void SetFertilizerQuantity(float fertility)",
      "float GetFertilizerQuantityMax()",
      "void SetFertilizerQuantityMax(float quantMax)",
      "string GetFertilityType()",
      "void SetFertilityType(string type)",
      "int GetFertilityState()",
      "void SetFertilityState( int newState )",
      "int GetWateredState()",
      "void SetWateredState( int newState )",
      "float GetWaterUsage()",
      "float GetWaterMax()",
      "int GetState()",
      "void SetState(int new_state)",
      "bool IsDigged()",
      "bool IsPlanted()",
      "void Init( float base_fertility )",
      "void SetSlotComponent(string component)",
      "string GetSlotComponent()",
      "bool OnStoreLoadCustom( ParamsReadContext ctx, int version )",
      "void OnStoreSaveCustom( ParamsWriteContext ctx )"
    ]
  },
  "FlashGrenade": {
    "parent": "Grenade_Base",
    "methods": [
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void FlashGrenade()",
      "void CreateLight()"
    ]
  },
  "Grenade_ChemGas": {
    "parent": null,
    "methods": [
      "void Grenade_ChemGas()",
      "void OnExplode()",
      "string GetExplosionSoundSet()",
      "void EOnContact(IEntity other, Contact extra)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Activate()"
    ]
  },
  "M18SmokeGrenade_ColorBase": {
    "parent": "SmokeGrenadeBase",
    "methods": [
      "void M18SmokeGrenade_ColorBase()",
      "void M18SmokeGrenade_Red()",
      "void OnWorkStop()",
      "void M18SmokeGrenade_Green()",
      "void M18SmokeGrenade_Yellow()",
      "void M18SmokeGrenade_Purple()",
      "void M18SmokeGrenade_White()"
    ]
  },
  "M18SmokeGrenade_Red": {
    "parent": "M18SmokeGrenade_ColorBase",
    "methods": [
      "void M18SmokeGrenade_Red()",
      "void OnWorkStop()",
      "void M18SmokeGrenade_Green()",
      "void M18SmokeGrenade_Yellow()",
      "void M18SmokeGrenade_Purple()",
      "void M18SmokeGrenade_White()"
    ]
  },
  "M18SmokeGrenade_Red_Contaminated": {
    "parent": "M18SmokeGrenade_Red",
    "methods": [
      "void OnWorkStop()",
      "void M18SmokeGrenade_Green()",
      "void M18SmokeGrenade_Yellow()",
      "void M18SmokeGrenade_Purple()",
      "void M18SmokeGrenade_White()"
    ]
  },
  "M18SmokeGrenade_Green": {
    "parent": "M18SmokeGrenade_ColorBase",
    "methods": [
      "void M18SmokeGrenade_Green()",
      "void M18SmokeGrenade_Yellow()",
      "void M18SmokeGrenade_Purple()",
      "void M18SmokeGrenade_White()"
    ]
  },
  "M18SmokeGrenade_Yellow": {
    "parent": "M18SmokeGrenade_ColorBase",
    "methods": [
      "void M18SmokeGrenade_Yellow()",
      "void M18SmokeGrenade_Purple()",
      "void M18SmokeGrenade_White()"
    ]
  },
  "M18SmokeGrenade_Purple": {
    "parent": "M18SmokeGrenade_ColorBase",
    "methods": [
      "void M18SmokeGrenade_Purple()",
      "void M18SmokeGrenade_White()"
    ]
  },
  "M18SmokeGrenade_White": {
    "parent": "M18SmokeGrenade_ColorBase",
    "methods": [
      "void M18SmokeGrenade_White()"
    ]
  },
  "M67Grenade": {
    "parent": "Grenade_Base",
    "methods": [
      "void M67Grenade()"
    ]
  },
  "RDG2SmokeGrenade_ColorBase": {
    "parent": "SmokeGrenadeBase",
    "methods": [
      "void RDG2SmokeGrenade_ColorBase()",
      "void RDG2SmokeGrenade_Black()",
      "void RDG2SmokeGrenade_White()"
    ]
  },
  "RDG2SmokeGrenade_Black": {
    "parent": "RDG2SmokeGrenade_ColorBase",
    "methods": [
      "void RDG2SmokeGrenade_Black()",
      "void RDG2SmokeGrenade_White()"
    ]
  },
  "RDG2SmokeGrenade_White": {
    "parent": "RDG2SmokeGrenade_ColorBase",
    "methods": [
      "void RDG2SmokeGrenade_White()"
    ]
  },
  "RGD5Grenade": {
    "parent": "Grenade_Base",
    "methods": [
      "void RGD5Grenade()"
    ]
  },
  "SmokeGrenadeBase": {
    "parent": "Grenade_Base",
    "methods": [
      "void SetParticleSmokeCurrent(int particle)",
      "void SetParticleSmokeStart(int particle)",
      "void SetParticleSmokeLoop(int particle)",
      "void SetParticleSmokeEnd(int particle)",
      "void SetSoundSmokeStart(string sound)",
      "void SetSoundSmokeLoop(string sound)",
      "void SetSoundSmokeEnd(string sound)",
      "void PlaySmokeParticle()",
      "void SoundSmokeStart()",
      "void SoundSmokeLoop()",
      "void SoundSmokeEnd()",
      "void SoundSmokeStop()",
      "void DestroySmokeGrenade()",
      "void RefreshParticlesAndSounds()",
      "void Unpin()",
      "void OnActivateFinished()",
      "void OnWorkStart()",
      "void OnWork(float consumed_energy)",
      "void OnWorkStop()",
      "bool CanPutInCargo( EntityAI parent )",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void SetActions()",
      "void OnVariablesSynchronized()",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "void EEDelete(EntityAI parent)",
      "void SetSmokeGrenadeState(ESmokeGrenadeState state)",
      "void SmokeGrenadeBase()"
    ]
  },
  "AmmoBox_556x45_20Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_556x45Tracer_20Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_308Win_20Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_762x54_20Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_762x54Tracer_20Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_762x39_20Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_762x39Tracer_20Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_22_50Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_357_20Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_45ACP_25rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_9x19_25rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_380_35rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_00buck_10rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_12gaSlug_10Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_545x39_20Rnd": {
    "parent": null,
    "methods": []
  },
  "AmmoBox_9x39_20Rnd": {
    "parent": null,
    "methods": []
  },
  "BandageDressing": {
    "parent": "ItemBase",
    "methods": [
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy( EntityAI igniter = NULL )",
      "bool CanIgniteItem( EntityAI ignite_target = NULL )",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedThis( EntityAI fire_source )",
      "bool IsThisIgnitionSuccessful( EntityAI item_source = NULL )",
      "void SetActions()",
      "float GetBandagingEffectivity()",
      "bool CanBeDisinfected()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "void OnCombine(ItemBase other_item)"
    ]
  },
  "BarbedBaseballBat": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "BarbedWire": {
    "parent": "ItemBase",
    "methods": [
      "void BarbedWire()",
      "void EEInit()",
      "bool IsMounted()",
      "bool GetSlotLockedState()",
      "void SetMountedState( bool is_mounted )",
      "void UpdateAttachmentSlot()",
      "void LockAttachmentSlot( bool lock_state )",
      "void Synchronize()",
      "void OnVariablesSynchronized()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void AfterStoreLoad()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void OnWork( float consumed_energy )",
      "void OnIsPlugged(EntityAI source_device)",
      "void OnIsUnplugged( EntityAI last_energy_source )",
      "void OnInventoryEnter(Man player)",
      "void CreateElectrifiedDamageTrigger()",
      "void CreateDamageTrigger()",
      "void DestroyDamageTrigger()",
      "void Spark()",
      "void SoundCut()",
      "void SoundSpark()",
      "void SoundBuzzLoopStart()",
      "void SoundBuzzLoopStop()",
      "void SoundElectricShock()",
      "void SoundCollision()",
      "void PreAreaDamageActions()",
      "void PostAreaDamageActions()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "void SetActions()",
      "void PlayDeployLoopSound()",
      "void StopDeployLoopSound()"
    ]
  },
  "Bark_ColorBase": {
    "parent": "ItemBase",
    "methods": [
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy( EntityAI igniter = NULL )",
      "bool CanIgniteItem( EntityAI ignite_target = NULL )",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedThis( EntityAI fire_source )",
      "bool IsThisIgnitionSuccessful( EntityAI item_source = NULL )",
      "void SetActions()"
    ]
  },
  "Barrel_ColorBase": {
    "parent": null,
    "methods": [
      "void InitItemVariables()",
      "int GetDamageSystemVersionChange()",
      "void EECargoIn(EntityAI item)",
      "void OnFreezeStateChangeServer()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "bool IsLocked()",
      "void Open()",
      "void OpenLoad()",
      "void Close()",
      "void CloseLoad()",
      "bool IsOpen()",
      "void OnWasAttached( EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "void UpdateVisualState()",
      "void OnVariablesSynchronized()",
      "void Lock(float actiontime)",
      "void Unlock()",
      "void DetermineAction( PlayerBase player )",
      "void ProduceFertilizer( ItemBase guts, ItemBase plant, PlayerBase player )",
      "void TanPelts( ItemBase lime, PlayerBase player )",
      "void ColourLeatherClothes( ItemBase color_source, PlayerBase player, string color )",
      "void BleachClothes( ItemBase bleach, PlayerBase player )",
      "void ColourClothes( ItemBase rci, ItemBase gci, ItemBase bci, PlayerBase player )",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "bool CanReleaseCargo( EntityAI cargo )",
      "bool CanDetachAttachment( EntityAI parent )",
      "void InitItemSounds()",
      "string GetDeploySoundset()",
      "string GetBarrelOpenSoundset()",
      "string GetBarrelCloseSoundset()",
      "float GetLiquidThroughputCoef()",
      "void SetActions()",
      "void OnDebugSpawn()",
      "void SoundBarrelOpenPlay()",
      "void SoundBarrelClosePlay()",
      "void ColourClothesLambda(EntityAI old_item, string new_item_type, PlayerBase player, int rr, int gg, int bb, int aa)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void TanLeatherLambda(EntityAI old_item, string new_item_type, PlayerBase player, int pelt_count)"
    ]
  },
  "Barrel_Green": {
    "parent": null,
    "methods": [
      "void ColourClothesLambda(EntityAI old_item, string new_item_type, PlayerBase player, int rr, int gg, int bb, int aa)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void TanLeatherLambda(EntityAI old_item, string new_item_type, PlayerBase player, int pelt_count)"
    ]
  },
  "Barrel_Blue": {
    "parent": null,
    "methods": [
      "void ColourClothesLambda(EntityAI old_item, string new_item_type, PlayerBase player, int rr, int gg, int bb, int aa)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void TanLeatherLambda(EntityAI old_item, string new_item_type, PlayerBase player, int pelt_count)"
    ]
  },
  "Barrel_Red": {
    "parent": null,
    "methods": [
      "void ColourClothesLambda(EntityAI old_item, string new_item_type, PlayerBase player, int rr, int gg, int bb, int aa)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void TanLeatherLambda(EntityAI old_item, string new_item_type, PlayerBase player, int pelt_count)"
    ]
  },
  "Barrel_Yellow": {
    "parent": null,
    "methods": [
      "void ColourClothesLambda(EntityAI old_item, string new_item_type, PlayerBase player, int rr, int gg, int bb, int aa)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void TanLeatherLambda(EntityAI old_item, string new_item_type, PlayerBase player, int pelt_count)"
    ]
  },
  "ColourClothesLambda": {
    "parent": null,
    "methods": [
      "void ColourClothesLambda(EntityAI old_item, string new_item_type, PlayerBase player, int rr, int gg, int bb, int aa)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void TanLeatherLambda(EntityAI old_item, string new_item_type, PlayerBase player, int pelt_count)"
    ]
  },
  "TanLeatherLambda": {
    "parent": null,
    "methods": [
      "void TanLeatherLambda(EntityAI old_item, string new_item_type, PlayerBase player, int pelt_count)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "BaseballBat": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "BaseBuildingBase": {
    "parent": "ItemBase",
    "methods": [
      "void BaseBuildingBase()",
      "void EEDelete(EntityAI parent)",
      "string GetInvulnerabilityTypeString()",
      "bool CanObstruct()",
      "int GetHideIconMask()",
      "void SynchronizeBaseState()",
      "void OnVariablesSynchronized()",
      "void OnSynchronizedClient()",
      "void RegisterPartForSync( int part_id )",
      "void UnregisterPartForSync( int part_id )",
      "bool IsPartBuildInSyncData( int part_id )",
      "void RegisterActionForSync( int part_id, int action_id )",
      "void ResetActionSyncData()",
      "void SetActionFromSyncData()",
      "void SetPartFromSyncData( ConstructionPart part )",
      "void SetPartsFromSyncData()",
      "bool HasBase()",
      "void SetBaseState( bool has_base )",
      "bool IsDeployable()",
      "bool IsOpened()",
      "void CreateConstructionKitInHands(notnull PlayerBase player)",
      "string GetConstructionKitType()",
      "void DestroyConstructionKit( ItemBase construction_kit )",
      "void DestroyConstruction()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void AfterStoreLoad()",
      "void SetPartsAfterStoreLoad()",
      "void OnCreatePhysics()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void EEOnAfterLoad()",
      "void EEInit()",
      "void EEItemAttached( EntityAI item, string slot_name )",
      "void EEItemDetached( EntityAI item, string slot_name )",
      "void OnSetSlotLock( int slotId, bool locked, bool was_locked )",
      "bool IgnoreOutOfReachCondition()",
      "void OnPartBuiltServer(notnull Man player, string part_name, int action_id)",
      "void OnPartBuiltClient(string part_name, int action_id)",
      "void OnPartDismantledServer(notnull Man player, string part_name, int action_id)",
      "void OnPartDismantledClient( string part_name, int action_id )",
      "void OnPartDestroyedServer(Man player, string part_name, int action_id, bool destroyed_by_connected_part = false)",
      "void OnPartDestroyedClient( string part_name, int action_id )",
      "void HandleItemFalling(ConstructionPart part)",
      "void ItemFall(vector min, vector max)",
      "void InitBaseState()",
      "void InitVisuals()",
      "void UpdateVisuals()",
      "void UpdateAttachmentVisuals(string slot_name, bool is_locked)",
      "void UpdatePhysics()",
      "void UpdateAttachmentPhysics( string slot_name, bool is_locked )",
      "void UpdateNavmesh()",
      "bool CanUseConstruction()",
      "bool CanUseConstructionBuild()",
      "bool IsAttachmentSlotLocked( EntityAI attachment )",
      "bool IsAttachmentSlotLocked( string slot_name )",
      "void GetAttachmentSlots( EntityAI entity, out array<string> attachment_slots )",
      "bool CheckSlotVerticalDistance( int slot_id, PlayerBase player )",
      "bool CheckMemoryPointVerticalDistance( float max_dist, string selection, PlayerBase player )",
      "bool CheckLevelVerticalDistance( float max_dist, string selection, PlayerBase player )",
      "void ConstructionInit()",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "bool HasAttachmentsBesidesBase()",
      "bool ShowZonesHealth()",
      "bool IsTakeable()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanRemoveFromCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool IsFacingPlayer( PlayerBase player, string selection )",
      "bool IsPlayerInside( PlayerBase player, string selection )",
      "bool MustBeBuiltFromOutside()",
      "bool IsFacingCamera( string selection )",
      "bool PerformRoofCheckForBase( string partName, PlayerBase player, out bool result )",
      "bool HasProperDistance( string selection, PlayerBase player )",
      "bool CanFoldBaseBuildingObject()",
      "void CreateAreaDamage( string slot_name, float rotation_angle = 0 )",
      "void CalcDamageAreaRotation( float angle_deg, out vector center, out vector orientation )",
      "void DestroyAreaDamage( string slot_name )",
      "bool IsIgnoredByConstruction()",
      "void SoundBuildStart( string part_name )",
      "void SoundDismantleStart( string part_name )",
      "void SoundDestroyStart( string part_name )",
      "string GetBuildSoundByMaterial( string part_name )",
      "string GetDismantleSoundByMaterial( string part_name )",
      "void CheckForHybridAttachments( EntityAI item, string slot_name )",
      "int GetDamageSystemVersionChange()",
      "void SetActions()",
      "void DebugCustomState()",
      "void OnDebugSpawn()",
      "void FullyBuild()",
      "void bsbDebugPrint(string s)",
      "void bsbDebugSpam(string s)"
    ]
  },
  "Battery9V": {
    "parent": null,
    "methods": [
      "void Battery9V()",
      "float GetEfficiency0To1()",
      "float GetEfficiencyDecayStart()",
      "void OnEnergyConsumed()",
      "void OnEnergyAdded()",
      "void SetActions()"
    ]
  },
  "BatteryCharger": {
    "parent": "ItemBase",
    "methods": [
      "void BatteryCharger()",
      "bool IsElectricAppliance()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void UpdateStatusLights()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "void OnOwnSocketTaken( EntityAI device )",
      "void OnOwnSocketReleased( EntityAI device )",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "bool CanLoadAttachment( EntityAI attachment)",
      "void HideAttachedClipsStates()",
      "void RedLightOn()",
      "void GreenLightOn()",
      "void YellowLightOn()",
      "void SwitchLightOn()",
      "void RedLightOff()",
      "void GreenLightOff()",
      "void YellowLightOff()",
      "void SwitchLightOff()",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void OnInventoryExit(Man player)",
      "void OnInventoryEnter(Man player)",
      "void RefreshPhysics()",
      "void OnPlacementStarted(Man player)",
      "bool IsDeployable()",
      "string GetDeploySoundset()",
      "void SetActions()"
    ]
  },
  "BinocularsBase": {
    "parent": "Weapon",
    "methods": [
      "int GetSlotsCountCorrect()"
    ]
  },
  "Blowtorch": {
    "parent": "ItemBase",
    "methods": [
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void RefreshFlameVisual(bool working = false)",
      "void SoundBurningStart()",
      "void SoundBurningStop()",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanRemoveFromCargo(EntityAI parent)",
      "bool IsIgnited()",
      "void OnIgnitedTarget(EntityAI target_item)",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "void SetActions()",
      "bool HasEnoughEnergyForRepair(float pTime)",
      "void OnDebugSpawn()"
    ]
  },
  "BoneKnife": {
    "parent": "ToolBase",
    "methods": [
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "BrassKnuckles_ColorBase": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "CableReel": {
    "parent": "ItemBase",
    "methods": [
      "void CableReel()",
      "bool IsElectricAppliance()",
      "void ForceIntoHandsNow(PlayerBase player)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanPutIntoHands(EntityAI parent)",
      "void OnInventoryEnter(Man player)",
      "bool CanRemoveFromHands(EntityAI parent)",
      "void OnPlacementStarted(Man player)",
      "string GetDeploySoundset()",
      "void SetActions()"
    ]
  },
  "CamoNet": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "CattleProd": {
    "parent": null,
    "methods": [
      "void CattleProd()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "int GetMeleeMode()",
      "int GetMeleeHeavyMode()",
      "int GetMeleeSprintMode()",
      "void SetActions()"
    ]
  },
  "Chemlight_ColorBase": {
    "parent": null,
    "methods": [
      "float GetEfficiency0To1()",
      "float GetEfficiencyDecayStart()",
      "void OnEnergyConsumed()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void Chemlight_ColorBase()",
      "void CreateLight()",
      "void OnWorkStart()",
      "void OnInventoryExit(Man player)",
      "void StandUp()",
      "void OnWorkStop()",
      "void OnWork(float consumed_energy)",
      "void SetActions()",
      "string GetMaterialForDamageState(bool glowing,int healthLevel = -1)"
    ]
  },
  "Chemlight_White": {
    "parent": null,
    "methods": []
  },
  "Chemlight_Red": {
    "parent": null,
    "methods": []
  },
  "Chemlight_Green": {
    "parent": null,
    "methods": []
  },
  "Chemlight_Blue": {
    "parent": null,
    "methods": []
  },
  "Chemlight_Yellow": {
    "parent": null,
    "methods": []
  },
  "ChernarusMap": {
    "parent": "ItemMap",
    "methods": [
      "void SetActions()",
      "bool GetActionWidgetOverride(out typename name)"
    ]
  },
  "ChernarusMap_Open": {
    "parent": "ItemMap",
    "methods": []
  },
  "Cleaver": {
    "parent": "ToolBase",
    "methods": [
      "void Cleaver()",
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "ClockBase": {
    "parent": null,
    "methods": [
      "void ClockBase()",
      "void Init()",
      "void SetActions()",
      "int GetAlarmInMin()",
      "static int ConvertAlarmHand01ToMins12h(float time01)",
      "static int ConvertAlarmHand01ToMins(float time01, int mins_max)",
      "static float ConvertMins12hToAlarmHand01(int mins)",
      "static int ConvertTimeToMins12h(int hour, int minute)",
      "static int GetTimeDiffInMins12h(int from_mins, int to_mins)",
      "string GetToggleSound()",
      "string GetRingingSound()",
      "string GetHitSound()",
      "string GetDestroyedSound()",
      "string GetWorkingSound()",
      "void EEKilled(Object killer)",
      "void EEHitByRemote(int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos)",
      "void OnDamageDestroyed(int oldLevel)",
      "void OnRingingStartServer()",
      "void OnRingingStartClient()",
      "void OnRingingStopServer()",
      "void OnRingingStopClient()",
      "void SetAlarmInXMins(int in_mins)",
      "float GetRingingDurationMax()",
      "void SetupTimerServer()",
      "void SetState(EAlarmClockState state)",
      "void Disarm()",
      "void Arm()",
      "void Activateparent()",
      "void MakeRingingStart()",
      "void MakeRingingStop()",
      "void TurnOnClient()",
      "void TurnOffClient()",
      "void OnVariablesSynchronized()",
      "bool IsRinging()",
      "bool IsAlarmOn()",
      "void TurnOn()",
      "void TurnOff()",
      "void SetAlarmTimeServer(float time01)"
    ]
  },
  "Clothing": {
    "parent": "Clothing_Base",
    "methods": [
      "bool IsClothing()",
      "bool CanHaveWetness()",
      "int GetGlassesEffectID()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutInCargoClothingConditions( EntityAI parent )",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "bool CanReceiveItemIntoCargoClothingConditions( EntityAI item )",
      "bool SmershException(EntityAI hierarchyparent)",
      "bool CanLoadItemIntoCargo(EntityAI item)",
      "bool CanLoadItemIntoCargoClothingConditions(EntityAI item)",
      "bool CanWearUnderMask(EntityAI parent)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void SwitchItemSelectionTextureEx(EItemManipulationContext context, Param par = null)",
      "void InitGlobalExclusionValues()"
    ]
  },
  "Belt_Base": {
    "parent": null,
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "Backpack_Base": {
    "parent": null,
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "Glasses_Base": {
    "parent": null,
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "Gloves_Base": {
    "parent": null,
    "methods": []
  },
  "HeadGear_Base": {
    "parent": null,
    "methods": []
  },
  "Mask_Base": {
    "parent": null,
    "methods": []
  },
  "Pants_Base": {
    "parent": null,
    "methods": []
  },
  "Shoes_Base": {
    "parent": null,
    "methods": []
  },
  "Top_Base": {
    "parent": null,
    "methods": []
  },
  "Vest_Base": {
    "parent": null,
    "methods": []
  },
  "CombatKnife": {
    "parent": "ToolBase",
    "methods": [
      "void CombatKnife()",
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "CombinationLock": {
    "parent": "ItemBase",
    "methods": [
      "void CombinationLock()",
      "void SetBaseLockValues()",
      "void EEInit()",
      "void SetInitialized()",
      "bool IsInitialized()",
      "void OnItemLocationChanged( EntityAI old_owner, EntityAI new_owner )",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void AfterStoreLoad()",
      "void Synchronize()",
      "void ResetActionVar()",
      "void OnVariablesSynchronized()",
      "void SetCombination( int combination )",
      "void SetCombinationLocked( int combination )",
      "int GetCombination()",
      "int GetLockDigits()",
      "void DialNextNumber()",
      "int GetDialIndex()",
      "void SetNextDial()",
      "void LockServer( EntityAI parent, bool ignore_combination = false )",
      "void UnlockServer( EntityAI player, EntityAI parent )",
      "void ShuffleLock()",
      "bool IsLocked()",
      "void CheckLockedStateServer()",
      "bool IsLockedOnGate()",
      "bool IsLockAttached()",
      "void DestroyLock()",
      "void UpdateVisuals()",
      "void UpdateSound()",
      "void ShowItem()",
      "void HideItem()",
      "void ShowAttached()",
      "void HideAttached()",
      "void SoundLockOpen()",
      "void SoundLockClose()",
      "void SoundLockChangeNumber()",
      "void SoundLockChangeDial()",
      "void SetActions()"
    ]
  },
  "CombinationLock4": {
    "parent": "CombinationLock",
    "methods": [
      "void SetBaseLockValues()"
    ]
  },
  "Compass": {
    "parent": null,
    "methods": [
      "void Compass()",
      "void Open()",
      "void Close()",
      "bool IsOpen()",
      "void UpdateVisualState()",
      "void OnVariablesSynchronized()",
      "void SetActions()"
    ]
  },
  "ContainerLockedBase": {
    "parent": null,
    "methods": [
      "void ContainerLockedBase()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void HandleDoorLoad()",
      "void OnDoorLocked(DoorLockParams params)",
      "void OnDoorUnlocked(DoorLockParams params)",
      "void OnDoorCloseStart(DoorStartParams params)",
      "void OnDoorOpenStart(DoorStartParams params)",
      "int GetLockCompatibilityType(int doorIdx)"
    ]
  },
  "Land_ContainerLocked_Blue_DE": {
    "parent": null,
    "methods": [
      "int GetLockCompatibilityType(int doorIdx)"
    ]
  },
  "Land_ContainerLocked_Yellow_DE": {
    "parent": null,
    "methods": [
      "int GetLockCompatibilityType(int doorIdx)"
    ]
  },
  "Land_ContainerLocked_Orange_DE": {
    "parent": null,
    "methods": [
      "int GetLockCompatibilityType(int doorIdx)"
    ]
  },
  "Land_ContainerLocked_Red_DE": {
    "parent": null,
    "methods": [
      "int GetLockCompatibilityType(int doorIdx)"
    ]
  },
  "Container_Base": {
    "parent": null,
    "methods": [
      "bool IsContainer()",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "void DeployableContainer_Base()",
      "string GetInvulnerabilityTypeString()",
      "void SetActions()",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanLoadAttachment(EntityAI attachment)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanLoadItemIntoCargo(EntityAI item)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)"
    ]
  },
  "DeployableContainer_Base": {
    "parent": null,
    "methods": [
      "void DeployableContainer_Base()",
      "string GetInvulnerabilityTypeString()",
      "void SetActions()",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanLoadAttachment(EntityAI attachment)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanLoadItemIntoCargo(EntityAI item)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)"
    ]
  },
  "CookingStand": {
    "parent": "TripodBase",
    "methods": []
  },
  "CrudeMachete": {
    "parent": "ToolBase",
    "methods": [
      "void Machete()",
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "Defibrillator": {
    "parent": "ItemBase",
    "methods": [
      "void Defibrillator()",
      "float GetTimeNeededToCharge()",
      "float GetEnergyNeededToCharge()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void OnIsCharged()",
      "void StopChargedAlarm()",
      "void StopChargingSound()",
      "void StopChargingTimer()",
      "bool IsCharged()",
      "void DischargeServer(PlayerBase victim)",
      "void DischargeClient(PlayerBase victim)",
      "void SetActions()"
    ]
  },
  "Edible_Base": {
    "parent": null,
    "methods": [
      "void Edible_Base()",
      "void EEInit()",
      "void EEDelete(EntityAI parent)",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void UpdateVisualsEx(bool forced = false)",
      "bool Consume(float amount, PlayerBase consumer)",
      "void OnConsume(float amount, PlayerBase consumer)",
      "int FilterAgents(int agentsIn)",
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "float GetTemperatureFreezeTime()",
      "float GetTemperatureThawTime()",
      "bool CanItemOverheat()",
      "void Synchronize()",
      "void OnVariablesSynchronized()",
      "void MakeSoundsOnClient(bool soundstate, CookingMethodType cookingMethod = CookingMethodType.NONE)",
      "void RefreshAudio()",
      "void RemoveAudio()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void AfterStoreLoad()",
      "bool IsMeat()",
      "bool IsCorpse()",
      "bool IsFruit()",
      "bool IsMushroom()",
      "static float GetFoodTotalVolume(ItemBase item, string classname = , int food_stage = 0)",
      "static float GetFoodEnergy(ItemBase item, string classname = , int food_stage = 0)",
      "static float GetFoodWater(ItemBase item, string classname = , int food_stage = 0)",
      "static float GetFoodNutritionalIndex(ItemBase item, string classname = , int food_stage = 0)",
      "static float GetFoodToxicity(ItemBase item, string classname = , int food_stage = 0)",
      "static int GetFoodAgents(ItemBase item, string classname = , int food_stage = 0)",
      "static float GetFoodDigestibility(ItemBase item, string classname = , int food_stage = 0)",
      "static float GetAgentsPerDigest(ItemBase item, string className = , int foodStage = 0)",
      "bool IsFoodRaw()",
      "bool IsFoodBaked()",
      "bool IsFoodBoiled()",
      "bool IsFoodDried()",
      "bool IsFoodBurned()",
      "bool IsFoodRotten()",
      "void ChangeFoodStage( FoodStageType new_food_stage_type )",
      "string GetFoodStageName( FoodStageType food_stage_type )",
      "bool CanChangeToNewStage( CookingMethodType cooking_method )",
      "void TransferFoodStage( notnull Edible_Base source )",
      "void OnFoodStageChange(FoodStageType stageOld, FoodStageType stageNew)",
      "void HandleFoodStageChangeAgents(FoodStageType stageOld, FoodStageType stageNew)",
      "float GetCookingTime()",
      "void SetCookingTime( float time )",
      "void ResetCookingTime()",
      "void ReplaceEdibleWithNew( string typeName )",
      "int GetConsumptionPenaltyContext()",
      "void SetActions()",
      "void SoundCookingStart(string sound_name)",
      "void SoundCookingStop()",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void ProcessDecay( float delta, bool hasRootAsPlayer )",
      "void UpdateVaporParticle()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "string GetDebugText()",
      "float GetBaitEffectivity()",
      "float GetDecayTimer()",
      "float GetDecayDelta()",
      "void PrintNutritionsData()",
      "void UpdateVisuals()",
      "void ReplaceEdibleWithNewLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ReplaceEdibleWithNewLambda": {
    "parent": null,
    "methods": [
      "void ReplaceEdibleWithNewLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "EyeMask_ColorBase": {
    "parent": null,
    "methods": [
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy(EntityAI igniter = null)",
      "bool CanIgniteItem(EntityAI ignite_target = null)",
      "void OnIgnitedTarget(EntityAI target_item)",
      "void OnIgnitedThis(EntityAI fire_source)",
      "bool IsThisIgnitionSuccessful(EntityAI item_source = null)",
      "void SetActions()"
    ]
  },
  "EyeMask_NewYears": {
    "parent": null,
    "methods": []
  },
  "EyeMask_Christmas": {
    "parent": null,
    "methods": []
  },
  "EyeMask_Dead": {
    "parent": null,
    "methods": []
  },
  "EyeMask_Yellow": {
    "parent": null,
    "methods": []
  },
  "EyeMask_Red": {
    "parent": null,
    "methods": []
  },
  "EyeMask_Blue": {
    "parent": null,
    "methods": []
  },
  "EyeMask_Black": {
    "parent": null,
    "methods": []
  },
  "EyeMask_Valentines": {
    "parent": null,
    "methods": []
  },
  "FangeKnife": {
    "parent": "ToolBase",
    "methods": [
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "FenceKit": {
    "parent": "KitBase",
    "methods": [
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "bool DoPlacingHeightCheck()",
      "float HeightCheckOverride()",
      "void DisassembleKit(ItemBase item)",
      "void OnDebugSpawn()"
    ]
  },
  "FieldShovel": {
    "parent": "ItemBase",
    "methods": [
      "bool CanMakeGardenplot()",
      "void SetActions()",
      "int GetOnDigWormsAmount()"
    ]
  },
  "FirefighterAxe": {
    "parent": "ToolBase",
    "methods": [
      "void FirefighterAxe()",
      "void SetActions()"
    ]
  },
  "FireplaceBase": {
    "parent": null,
    "methods": [
      "void FireplaceBase()",
      "void EEInit()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void OnAttachmentRuined(EntityAI attachment)",
      "void EEDelete(EntityAI parent)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void AfterStoreLoad()",
      "void Synchronize()",
      "void OnVariablesSynchronized()",
      "bool IsFireplace()",
      "bool IsBaseFireplace()",
      "bool IsBarrelWithHoles()",
      "bool IsFireplaceIndoor()",
      "bool IsIndoorOven()",
      "bool CanHaveWetness()",
      "bool CanHaveTemperature()",
      "bool GetCookingTargetTemperature(out float temperature)",
      "bool IsSelfAdjustingTemperature()",
      "void InitializeTemperatureSources()",
      "void SetCookingEquipment(ItemBase equipment)",
      "void ClearCookingEquipment(ItemBase pItem)",
      "void ClearCookingEquipment()",
      "bool DirectCookingSlotsInUse()",
      "bool SmokingSlotsInUse()",
      "void DestroyFireplace()",
      "bool IsPrepareToDelete()",
      "void OnChildItemRemoved(InventoryItem item)",
      "void CheckForDestroy()",
      "void RefreshFireplaceVisuals()",
      "void SetBurntFirewood()",
      "void RefreshFireplacePhysics()",
      "void RefreshFireParticlesAndSounds(bool force_refresh)",
      "void StopAllParticlesAndSounds()",
      "bool CanShowSmoke()",
      "void RefreshFireState()",
      "bool PlayParticle(out Particle particle, int particle_type, vector pos, bool worldpos = false)",
      "bool StopParticle(out Particle particle)",
      "void ParticleFireStartStart()",
      "void ParticleFireStartStop()",
      "void ParticleSmallFireStart()",
      "void ParticleSmallFireStop()",
      "void ParticleNormalFireStart()",
      "void ParticleNormalFireStop()",
      "void ParticleSmallSmokeStart()",
      "void ParticleSmallSmokeStop()",
      "void ParticleNormalSmokeStart()",
      "void ParticleNormalSmokeStop()",
      "void ParticleFireEndStart()",
      "void ParticleFireEndStop()",
      "void ParticleFireWindyNoIgniteStart()",
      "void ParticleSteamExtinguishingStart()",
      "void ParticleSteamExtinguishingStop()",
      "void ParticleSteamEndStart()",
      "void ParticleSteamEndStop()",
      "void ParticleWetNoIgniteStart()",
      "void ParticleWetNoIgniteStop()",
      "bool GetCeilingHeight(out float actual_height)",
      "float GetAirResistanceForSmokeParticles(float actual_height)",
      "void SoundFireLightStart()",
      "void SoundFireHeavyStart()",
      "void SoundFireNoFireStart()",
      "void SoundFireExtinguishedStart()",
      "void SoundFireWetNoIgniteStart()",
      "void SoundFireExtinguishingStart()",
      "void SoundFireWindyNoIgniteStart()",
      "void SoundFireStop()",
      "void AddToFireConsumables(ItemBase item)",
      "float GetFireConsumableTypeEnergy(ItemBase item)",
      "void RemoveFromFireConsumables(FireConsumable fire_consumable)",
      "void SpendFireConsumable(float amount)",
      "int GetKindlingCount()",
      "int GetFuelCount()",
      "bool IsKindling(ItemBase item)",
      "bool IsFuel(ItemBase item)",
      "bool IsItemTypeAttached(typename item_type)",
      "bool IsItemAttachedQuantity(typename item_type, float quantity)",
      "bool HasLastAttachment()",
      "bool HasLastFuelKindlingAttached()",
      "bool IsBurning()",
      "void SetBurningState(bool is_burning)",
      "bool HasAshes()",
      "void SetAshesState(bool has_ashes)",
      "bool IsOven()",
      "bool HasStoneCircle()",
      "bool HasStones()",
      "int GetAttachedStonesCount()",
      "void SetOvenState(bool is_oven)",
      "void SetStoneCircleState(bool has_stonecircle)",
      "float GetFuelBurnRateMP()",
      "void SetFuelBurnRateMP(float value)",
      "int GetFireState()",
      "void SetFireState(FireplaceFireState state)",
      "void SetExtinguishingState()",
      "void StartFire(bool force_start = false)",
      "void StartHeating()",
      "void Heating()",
      "void StopFire(FireplaceFireState fire_state = FireplaceFireState.END_FIRE)",
      "void StopHeating()",
      "void StartCooling()",
      "void Cooling()",
      "void StopCooling()",
      "void CookWithEquipment()",
      "void CookOnDirectSlot(ItemBase slot_item, float temp_equip, float temp_ext)",
      "void SmokeOnSmokingSlot(ItemBase slot_item, float temp_equip, float temp_ext)",
      "void BurnItemsInFireplace()",
      "void AddTemperatureToItemByFire(ItemBase item)",
      "void AddTemperatureToFireplace(float amount)",
      "void AddDamageToItemByFireEx(ItemBase item, bool can_be_ruined, bool pAttachment)",
      "void AddWetnessToItem(ItemBase item, float amount)",
      "void AddWetnessToFireplace(float amount)",
      "void TransferHeatToNearPlayers()",
      "void CreateAreaDamage()",
      "void DestroyAreaDamage()",
      "bool IsFacingFireplace(PlayerBase player)",
      "bool HasAnyKindling()",
      "static bool IsWindy()",
      "bool GetIgniteFailure()",
      "void SetIgniteFailure(bool failure)",
      "static bool IsEntityWet(notnull EntityAI entity_ai)",
      "bool IsWet()",
      "bool IsOpen()",
      "bool IsCeilingHighEnoughForSmoke()",
      "static bool IsRainingAboveEntity(notnull EntityAI entity_ai)",
      "bool IsRainingAbove()",
      "static bool IsEntityOnWaterSurface(notnull EntityAI entity_ai)",
      "float GetSurfaceWetnessOnHeatModifier(notnull EntityAI entity)",
      "bool IsOnWaterSurface()",
      "static bool IsEntityOnInteriorSurface(notnull EntityAI entity_ai)",
      "bool IsOnInteriorSurface()",
      "bool IsEmpty()",
      "bool IsCargoEmpty()",
      "bool HasCookingStand()",
      "bool IsInAnimPhase(string anim_phase)",
      "bool IsSpaceFor(vector size)",
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "bool CanBuildOven()",
      "bool IsSpaceForOven()",
      "bool CanBuildStoneCircle()",
      "bool IsSpaceForCircle()",
      "bool CanDismantleOven()",
      "bool CanDismantleStoneCircle()",
      "bool CanCookOnStick()",
      "bool CanExtinguishFire()",
      "void SetLightEntity(FireplaceLight light)",
      "bool CanBePlaced( Man player, vector position )",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "string GetDeploySoundset()",
      "void CalcAndSetTotalEnergy()",
      "void CalcAndSetQuantity()",
      "void OnAttachmentQuantityChanged(ItemBase item)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "void LockOvenAttachments(bool lock)",
      "bool DisassembleOnLastDetach()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void OnDebugSpawn()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "float GetTemperatureLossMP()",
      "void SetTemperatureLossMP(float value)",
      "void AddDamageToItemByFire(ItemBase item, bool can_be_ruined)"
    ]
  },
  "Firewood": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "FireworksBase": {
    "parent": null,
    "methods": [
      "void FireworksBase()",
      "void EEOnCECreate()",
      "void Init()",
      "void SetActions()",
      "bool HasFlammableMaterial()",
      "float GetMaxAllowedWetness()",
      "void SetState(EFireworksState state)",
      "void OnStateChangedServer(EFireworksState currentState)",
      "void OnStateChangedClient(EFireworksState currentState)",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void StandUp()",
      "void OnIgnitedThis( EntityAI fire_source)",
      "bool CanBeIgnitedBy(EntityAI igniter = NULL)",
      "void OnEventServer(int type)",
      "float GetEventDelay()",
      "void OnVariablesSynchronized()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "FishingRod_Base_New": {
    "parent": null,
    "methods": [
      "void FishingRod_Base_New()",
      "void SetActions()",
      "bool GetActionWidgetOverride(out typename name)",
      "bool IsOpen()",
      "void AnimateFishingRodEx(float phase, bool instant = false)",
      "void OnDebugSpawn()",
      "float GetFishingEffectivityBonus()",
      "void AnimateFishingRod(bool state)",
      "void FishingRod_Base()",
      "void Init()",
      "bool IsFishingActive()",
      "void ActivateFishing()",
      "void DeactivateFishing()",
      "void FishPull()",
      "void Catching()",
      "void Pulling()",
      "void End( int result )",
      "void AddPull(float delta)",
      "void DisplayState()",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "FishingRod_Base": {
    "parent": null,
    "methods": [
      "void FishingRod_Base()",
      "void Init()",
      "bool IsFishingActive()",
      "void ActivateFishing()",
      "void DeactivateFishing()",
      "void FishPull()",
      "void Catching()",
      "void Pulling()",
      "void End( int result )",
      "void AddPull(float delta)",
      "void DisplayState()",
      "bool CanPutInCargo( EntityAI parent )",
      "void SetActions()",
      "float GetFishingEffectivityBonus()"
    ]
  },
  "Flag_Base": {
    "parent": "ItemBase",
    "methods": [
      "void Flag_Base()",
      "void Synchronize()",
      "void OnVariablesSynchronized()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void AfterStoreLoad()",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "int GetViewIndex()",
      "void SetActions()"
    ]
  },
  "Flag_Chernarus": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Chedaki": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_NAPA": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_CDF": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Livonia": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Altis": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_SSahrani": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_NSahrani": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_DayZ": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_LivoniaArmy": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_White": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Bohemia": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_APA": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_UEC": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Pirates": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Cannibals": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Bear": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Wolf": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_BabyDeer": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Rooster": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_LivoniaPolice": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_CMC": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_TEC": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_CHEL": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Zenit": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_HunterZ": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_BrainZ": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Refuge": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_RSTA": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Snake": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Rex": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Zagorky": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flag_Crook": {
    "parent": "Flag_Base",
    "methods": []
  },
  "Flashlight": {
    "parent": "ItemBase",
    "methods": [
      "void OnWorkStart()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStop()",
      "void OnInventoryExit(Man player)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "GiftBox_Base": {
    "parent": "Container_Base",
    "methods": [
      "void GiftBox_Base()",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "void Open()",
      "void Close()",
      "bool IsOpen()",
      "void SetActions()",
      "void OnDebugSpawn()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)"
    ]
  },
  "GiftBox_Small": {
    "parent": "GiftBox_Base",
    "methods": []
  },
  "GiftBox_Medium": {
    "parent": "GiftBox_Base",
    "methods": []
  },
  "GiftBox_Large": {
    "parent": "GiftBox_Base",
    "methods": []
  },
  "GiftWrapPaper": {
    "parent": "ItemBase",
    "methods": [
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy( EntityAI igniter = NULL )",
      "bool CanIgniteItem( EntityAI ignite_target = NULL )",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedThis( EntityAI fire_source )",
      "bool IsThisIgnitionSuccessful( EntityAI item_source = NULL )",
      "void SetActions()"
    ]
  },
  "GrenadeLight": {
    "parent": null,
    "methods": [
      "void FlashGrenadeLight()",
      "void Pin()",
      "void Unpin()",
      "void OnActivatedByTripWire()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "bool IsPinned()",
      "bool IsPinnable()",
      "void ActivateImmediate()",
      "void ActivateRandomTime()",
      "void SetPinnable(bool state)",
      "void SetFuseDelay(float delay)",
      "void SetGrenadeType(EGrenadeType type)",
      "void Activate()",
      "void Deactivate()",
      "void InitiateExplosion()",
      "void ExplodeGrenade(EGrenadeType grenade_type)",
      "void OnPin()",
      "void OnUnpin()",
      "void OnActivateStarted()",
      "void OnActivateFinished()",
      "void OnActivateImmediate()",
      "void OnDeactivate()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "bool CanBeArmed()",
      "bool CanBeDisarmed()",
      "bool CanExplodeInFire()",
      "void SetActions()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void Grenade_Base()",
      "void InitSpecificsExplosionEffectForSurface()"
    ]
  },
  "FlashGrenadeLight": {
    "parent": null,
    "methods": [
      "void FlashGrenadeLight()",
      "void Pin()",
      "void Unpin()",
      "void OnActivatedByTripWire()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "bool IsPinned()",
      "bool IsPinnable()",
      "void ActivateImmediate()",
      "void ActivateRandomTime()",
      "void SetPinnable(bool state)",
      "void SetFuseDelay(float delay)",
      "void SetGrenadeType(EGrenadeType type)",
      "void Activate()",
      "void Deactivate()",
      "void InitiateExplosion()",
      "void ExplodeGrenade(EGrenadeType grenade_type)",
      "void OnPin()",
      "void OnUnpin()",
      "void OnActivateStarted()",
      "void OnActivateFinished()",
      "void OnActivateImmediate()",
      "void OnDeactivate()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "bool CanBeArmed()",
      "bool CanBeDisarmed()",
      "bool CanExplodeInFire()",
      "void SetActions()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void Grenade_Base()",
      "void InitSpecificsExplosionEffectForSurface()"
    ]
  },
  "Grenade_Base": {
    "parent": null,
    "methods": [
      "void Pin()",
      "void Unpin()",
      "void OnActivatedByTripWire()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "bool IsPinned()",
      "bool IsPinnable()",
      "void ActivateImmediate()",
      "void ActivateRandomTime()",
      "void SetPinnable(bool state)",
      "void SetFuseDelay(float delay)",
      "void SetGrenadeType(EGrenadeType type)",
      "void Activate()",
      "void Deactivate()",
      "void InitiateExplosion()",
      "void ExplodeGrenade(EGrenadeType grenade_type)",
      "void OnPin()",
      "void OnUnpin()",
      "void OnActivateStarted()",
      "void OnActivateFinished()",
      "void OnActivateImmediate()",
      "void OnDeactivate()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "bool CanBeArmed()",
      "bool CanBeDisarmed()",
      "bool CanExplodeInFire()",
      "void SetActions()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void Grenade_Base()",
      "void InitSpecificsExplosionEffectForSurface()"
    ]
  },
  "Hacksaw": {
    "parent": "ToolBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "Hammer": {
    "parent": "Inventory_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "RestrainingToolLocked": {
    "parent": "ItemBase",
    "methods": [
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EEKilled(Object killer)",
      "void SetActions()"
    ]
  },
  "HandcuffsLocked": {
    "parent": "RestrainingToolLocked",
    "methods": []
  },
  "RopeLocked": {
    "parent": "RestrainingToolLocked",
    "methods": []
  },
  "DuctTapeLocked": {
    "parent": "RestrainingToolLocked",
    "methods": []
  },
  "MetalWireLocked": {
    "parent": "RestrainingToolLocked",
    "methods": []
  },
  "BarbedWireLocked": {
    "parent": "RestrainingToolLocked",
    "methods": []
  },
  "HandDrillKit": {
    "parent": "ItemBase",
    "methods": [
      "bool CanIgniteItem( EntityAI ignite_target = NULL )",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedTargetFailed( EntityAI target_item )",
      "void SetActions()"
    ]
  },
  "Hatchet": {
    "parent": "ToolBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "Head": {
    "parent": null,
    "methods": []
  },
  "Heatpack": {
    "parent": null,
    "methods": [
      "bool CanHaveTemperature()",
      "void OnWorkStart()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStop()",
      "void SetActions()",
      "float GetQuantityNormalizedScripted()",
      "bool IsSelfAdjustingTemperature()"
    ]
  },
  "HescoBox": {
    "parent": "Inventory_Base",
    "methods": [
      "void HescoBox()",
      "bool HasProxyParts()",
      "bool CanPutIntoHands( EntityAI parent )",
      "void Synchronize()",
      "void OnVariablesSynchronized()",
      "void RefreshVisuals()",
      "int GetState()",
      "void SetState( int state )",
      "bool CanBeFilledAtPosition( vector position )",
      "bool CanBeManipulated()",
      "void Fold()",
      "void Unfold()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void RefreshPhysics()",
      "void Fill()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "bool IsDeployable()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "void SetActions()",
      "void PlayDeployLoopSound()",
      "void StopDeployLoopSound()"
    ]
  },
  "HuntingKnife": {
    "parent": "ToolBase",
    "methods": [
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "Inventory_Base": {
    "parent": "ItemBase",
    "methods": []
  },
  "ItemBook": {
    "parent": "InventoryItemSuper",
    "methods": [
      "bool OnUseFromInventory(Man owner)",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy( EntityAI igniter = NULL )",
      "bool CanIgniteItem( EntityAI ignite_target = NULL )",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedThis( EntityAI fire_source )",
      "bool IsThisIgnitionSuccessful( EntityAI item_source = NULL )"
    ]
  },
  "KitBase": {
    "parent": "ItemBase",
    "methods": [
      "bool IsBasebuildingKit()",
      "bool HasProxyParts()",
      "bool CanProxyObstruct()",
      "void EEInit()",
      "bool DisassembleOnLastDetach()",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void OnItemLocationChanged( EntityAI old_owner, EntityAI new_owner )",
      "void OnEndPlacement()",
      "void OnPlacementCancelled( Man player )",
      "bool IsDeployable()",
      "bool CanAssignAttachmentsToQuickbar()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "void RefreshPhysics()",
      "void UpdateVisuals()",
      "void UpdatePhysics()",
      "void AssembleKit()",
      "void DisassembleKit(ItemBase item)",
      "void CreateRope(Rope rope)",
      "void SetActions()",
      "void PlayDeployLoopSound()",
      "void StopDeployLoopSound()"
    ]
  },
  "KitchenKnife": {
    "parent": "ToolBase",
    "methods": [
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "KukriKnife": {
    "parent": "ToolBase",
    "methods": [
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "LargeGasCannister": {
    "parent": "ItemBase",
    "methods": [
      "bool CanExplodeInFire()"
    ]
  },
  "LongTorch": {
    "parent": null,
    "methods": [
      "void LongTorch()",
      "void SetActions()"
    ]
  },
  "Machete": {
    "parent": "ToolBase",
    "methods": [
      "void Machete()",
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "MapNavigationBehaviour": {
    "parent": null,
    "methods": [
      "void MapNavigationBehaviour(PlayerBase pPlayer, EMapNavigationType pNavigationType = EMapNavigationType.BASIC)",
      "void SetNavigationType(EMapNavigationType pType)",
      "void UnsetNavigationType(EMapNavigationType pType)",
      "void OnItemInPlayerPossession(EntityAI item)",
      "void OnItemNotInPlayerPossession(EntityAI item)",
      "void RandomizePosition()",
      "float RandomizedDeviation()",
      "static bool IsOutOfMap(EntityAI pEntity)"
    ]
  },
  "Matchbox": {
    "parent": "ItemBase",
    "methods": [
      "void InitItemVariables()",
      "bool CanIgniteItem( EntityAI ignite_target = NULL )",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedTargetFailed( EntityAI target_item )",
      "void SetActions()"
    ]
  },
  "MediumGasCannister": {
    "parent": "ItemBase",
    "methods": [
      "bool CanExplodeInFire()"
    ]
  },
  "Megaphone": {
    "parent": "ItemMegaphone",
    "methods": [
      "bool IsTransmitter()",
      "void OnSwitchOn()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void SetActions()"
    ]
  },
  "MetalPlate": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "MetalWire": {
    "parent": "ItemBase",
    "methods": [
      "void MetalWire()",
      "bool CanPutAsAttachment( EntityAI parent )",
      "void UpdateAllSelections()",
      "void OnInventoryEnter( Man player )",
      "void OnIsPlugged(EntityAI source_device)",
      "void OnIsUnplugged(EntityAI last_energy_source)",
      "void OnOwnSocketTaken( EntityAI device )",
      "void OnOwnSocketReleased( EntityAI device )",
      "void SetActions()"
    ]
  },
  "Nail": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "NailedBaseballBat": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "NVGoggles": {
    "parent": "PoweredOptic_Base",
    "methods": [
      "void NVGoggles()",
      "void SetActions()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void OnWork( float consumed_energy )",
      "void LoweredCheck()",
      "void RotateGoggles(bool state)",
      "void SwitchOnNVGCheck()",
      "int GetCurrentNVType()",
      "bool IsNVG()"
    ]
  },
  "OpenableBehaviour": {
    "parent": null,
    "methods": [
      "void OpenableBehaviour(bool bState = true)",
      "void Open()",
      "void Close()",
      "bool IsOpened()",
      "void SetState(bool bState)",
      "bool GetState()"
    ]
  },
  "OrientalMachete": {
    "parent": "ToolBase",
    "methods": [
      "void Machete()",
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "Paper": {
    "parent": "ItemBase",
    "methods": [
      "void Paper()",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy(EntityAI igniter = null)",
      "bool CanIgniteItem(EntityAI ignite_target = null)",
      "void OnIgnitedTarget(EntityAI target_item)",
      "void OnIgnitedThis(EntityAI fire_source)",
      "bool IsThisIgnitionSuccessful(EntityAI item_source = null)",
      "void SetActions()"
    ]
  },
  "ParticleTest": {
    "parent": "ItemBase",
    "methods": [
      "void ParticleTest()",
      "void EEDelete(EntityAI parent)"
    ]
  },
  "Pelt_Base": {
    "parent": "ItemBase",
    "methods": [
      "bool IsPeltBase()",
      "void SetActions()"
    ]
  },
  "WildboarPelt": {
    "parent": null,
    "methods": []
  },
  "RabbitPelt": {
    "parent": null,
    "methods": []
  },
  "CowPelt": {
    "parent": null,
    "methods": []
  },
  "PigPelt": {
    "parent": null,
    "methods": []
  },
  "DeerPelt": {
    "parent": null,
    "methods": []
  },
  "ReindeerPelt": {
    "parent": null,
    "methods": []
  },
  "GoatPelt": {
    "parent": null,
    "methods": []
  },
  "BearPelt": {
    "parent": null,
    "methods": []
  },
  "WolfPelt": {
    "parent": null,
    "methods": []
  },
  "SheepPelt": {
    "parent": null,
    "methods": []
  },
  "MouflonPelt": {
    "parent": null,
    "methods": []
  },
  "FoxPelt": {
    "parent": null,
    "methods": []
  },
  "PetrolLighter": {
    "parent": "ItemBase",
    "methods": [
      "bool CanIgniteItem( EntityAI ignite_target = NULL )",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedTargetFailed( EntityAI target_item )",
      "void SetActions()"
    ]
  },
  "Pickaxe": {
    "parent": "ItemBase",
    "methods": [
      "bool CanMakeGardenplot()",
      "void SetActions()",
      "void SetActionAnimOverrides()",
      "int GetOnDigWormsAmount()"
    ]
  },
  "PileOfWoodenPlanks": {
    "parent": "ItemBase",
    "methods": [
      "void PileOfWoodenPlanks()",
      "void UpdateSelections()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "int RemovePlanks( int needed_planks )",
      "bool SetQuantity(float value, bool destroy_config = true, bool destroy_forced = false, bool allow_client = false, bool clamp_to_stack_max = true)",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanPutInCargo(EntityAI parent)"
    ]
  },
  "Pipe": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "PipeWrench": {
    "parent": "Inventory_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Pitchfork": {
    "parent": "ItemBase",
    "methods": [
      "void Pitchfork()",
      "void SetActions()"
    ]
  },
  "Pliers": {
    "parent": "ToolBase",
    "methods": [
      "void Pliers()",
      "void SetActions()"
    ]
  },
  "PortableGasLamp": {
    "parent": "ItemBase",
    "methods": [
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void SoundBurningStart()",
      "void SoundBurningStop()",
      "void SoundTurnOn()",
      "void SoundTurnOff()",
      "void SetActions()"
    ]
  },
  "PortableGasStove": {
    "parent": "ItemBase",
    "methods": [
      "void SetCookingEquipment(ItemBase equipment)",
      "void ClearCookingEquipment(ItemBase pItem)",
      "void DestroyFireplace()",
      "void EEInit()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void OnWork(float consumed_energy)",
      "void CookWithEquipment()",
      "bool GetCookingTargetTemperature(out float temperature)",
      "void RefreshFlameVisual(bool working = false, bool hasAttachment = false)",
      "void RemoveCookingAudioVisuals()",
      "void SoundBurningStart()",
      "void SoundBurningStop()",
      "void SoundTurnOn()",
      "void SoundTurnOff()",
      "bool IsSelfAdjustingTemperature()",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanRemoveFromCargo(EntityAI parent)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanLoadAttachment(EntityAI attachment)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool IsIgnited()",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "PoweredOptic_Base": {
    "parent": "ItemOptics",
    "methods": [
      "void SetPlayer( PlayerBase player )",
      "void StartWorkServer()",
      "void StopWorkServer()"
    ]
  },
  "PowerGeneratorBase": {
    "parent": "ItemBase",
    "methods": [
      "void PowerGeneratorBase()",
      "void EEInit()",
      "void EOnInit(IEntity other, int extra)",
      "float GetLiquidThroughputCoef()",
      "void StartLoopSound()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanManipulate()",
      "void OnInitEnergy()",
      "void OnWorkStart()",
      "void OnWork(float consumed_energy)",
      "void OnWorkStop()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void SetLowEnergyState(bool state)",
      "void UpdateFuelMeter()",
      "void SetFuel(float fuel_amount)",
      "float AddFuel(float available_fuel)",
      "bool CanAddFuel(ItemBase container)",
      "float GetFuel()",
      "float GetMaxFuel()",
      "float GetFuelPercentage()",
      "bool HasSparkplug()",
      "void OnVariablesSynchronized()",
      "string GetDeploySoundset()",
      "void SetActions()",
      "void OnDebugSpawn()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "PowerGenerator": {
    "parent": "PowerGeneratorBase",
    "methods": []
  },
  "PumpkinHelmet": {
    "parent": null,
    "methods": [
      "void PumpkinHelmet()",
      "void OnMovedInsideCargo(EntityAI container)",
      "void OnMovedWithinCargo(EntityAI container)",
      "void OnRemovedFromCargo(EntityAI container)",
      "void EOnInit( IEntity other, int extra)",
      "void OnItemLocationChanged( EntityAI old_owner, EntityAI new_owner)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void UpdateGlowState()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)"
    ]
  },
  "PunchedCard": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void OnUse()"
    ]
  },
  "Radio": {
    "parent": "ItemRadio",
    "methods": [
      "bool IsTransmitter()",
      "bool CanOperate()",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void OnWorkStop()",
      "void TuneNextStation()",
      "void TunePreviousStation()",
      "void SetActions()"
    ]
  },
  "Rag": {
    "parent": "ItemBase",
    "methods": [
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "bool CanPutAsAttachment(EntityAI parent)",
      "bool CanBeSplit()",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy(EntityAI igniter = null)",
      "bool CanIgniteItem(EntityAI ignite_target = null)",
      "bool CanBeCombined(EntityAI other_item, bool reservation_check = true, bool stack_max_limit = false)",
      "void OnIgnitedThis(EntityAI fire_source)",
      "bool IsThisIgnitionSuccessful(EntityAI item_source = null)",
      "bool CanAssignToQuickbar()",
      "bool CanBeDisinfected()",
      "void SetActions()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "void OnCombine(ItemBase other_item)"
    ]
  },
  "Rangefinder": {
    "parent": "PoweredOptic_Base",
    "methods": [
      "void Rangefinder()",
      "float GetMeasurementUpdateInterval()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void StartPeriodicMeasurement()",
      "void StopPeriodicMeasurement()",
      "void DoMeasurement()",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "Raycaster": {
    "parent": "ItemBase",
    "methods": [
      "void OnWorkStart()",
      "void StartPeriodicMeasurement()",
      "void PrepareMeasurement()",
      "void DoMeasurement()",
      "void StopPeriodicMeasurement()",
      "void OnWorkStop()",
      "void SetActions()"
    ]
  },
  "Refridgerator": {
    "parent": "ItemBase",
    "methods": [
      "bool IsElectricAppliance()",
      "void OnInitEnergy()",
      "void OnWorkStart()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStop()",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "string GetDeploySoundset()",
      "void SetActions()"
    ]
  },
  "Roadflare": {
    "parent": null,
    "methods": [
      "void Roadflare()",
      "void SetModelState(int enum_state)",
      "void EEDelete(EntityAI parent)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void UpdateModelSelections()",
      "void OnWorkStart()",
      "void SetBurningState(int state_number)",
      "void SetBurningStateSynchronized(int state_number)",
      "void OnWork(float consumed_energy)",
      "void OnWorkStop()",
      "void UpdateActiveParticles()",
      "void DestroyParticle( Particle p )",
      "void DestroyParticleEx( out Particle p )",
      "void DestroyAllParticles()",
      "void StopSmoking()",
      "void OnInventoryExit(Man player)",
      "bool CanPutInCargo( EntityAI parent )",
      "void OnInventoryEnter(Man player)",
      "void OnActivatedByItem(notnull ItemBase item)",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "void OnVariablesSynchronized()",
      "void SetActions()"
    ]
  },
  "ScientificBriefcase": {
    "parent": null,
    "methods": [
      "void InitItemVariables()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool IsOpen()",
      "void Open()",
      "void Close()"
    ]
  },
  "ScientificBriefcaseKeys": {
    "parent": null,
    "methods": []
  },
  "Screwdriver": {
    "parent": "ToolBase",
    "methods": [
      "void Screwdriver()",
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "SeedPackBase": {
    "parent": "Inventory_Base",
    "methods": [
      "void SeedPackBase()",
      "void EmptySeedPack(PlayerBase player)",
      "void SetActions()",
      "void EmptySeedsPackLambda(EntityAI old_item, string new_item_type, PlayerBase player, int count)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "EmptySeedsPackLambda": {
    "parent": null,
    "methods": [
      "void EmptySeedsPackLambda(EntityAI old_item, string new_item_type, PlayerBase player, int count)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "ShelterKit": {
    "parent": "KitBase",
    "methods": [
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "bool DoPlacingHeightCheck()",
      "float HeightCheckOverride()",
      "string GetPlaceSoundset()",
      "string GetDeploySoundset()",
      "void DisassembleKit(ItemBase item)",
      "void OnDebugSpawn()"
    ]
  },
  "ShippingContainerKeys_ColorBase": {
    "parent": null,
    "methods": [
      "void InitItemSounds()",
      "void DestroyKeyServer()",
      "void SetActions()",
      "int GetKeyCompatibilityType()"
    ]
  },
  "ShippingContainerKeys_Blue": {
    "parent": null,
    "methods": [
      "int GetKeyCompatibilityType()"
    ]
  },
  "ShippingContainerKeys_Yellow": {
    "parent": null,
    "methods": [
      "int GetKeyCompatibilityType()"
    ]
  },
  "ShippingContainerKeys_Orange": {
    "parent": null,
    "methods": [
      "int GetKeyCompatibilityType()"
    ]
  },
  "ShippingContainerKeys_Red": {
    "parent": null,
    "methods": [
      "int GetKeyCompatibilityType()"
    ]
  },
  "Shovel": {
    "parent": "ItemBase",
    "methods": [
      "bool CanMakeGardenplot()",
      "void SetActions()",
      "void SetActionAnimOverrides()",
      "int GetOnDigWormsAmount()"
    ]
  },
  "Sickle": {
    "parent": "ToolBase",
    "methods": [
      "void Sickle()",
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "SledgeHammer": {
    "parent": "Inventory_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "SmallGasCannister": {
    "parent": "ItemBase",
    "methods": [
      "bool CanExplodeInFire()"
    ]
  },
  "SodaCan_Empty": {
    "parent": "ItemBase",
    "methods": []
  },
  "Spotlight": {
    "parent": "ItemBase",
    "methods": [
      "void Spotlight()",
      "bool IsElectricAppliance()",
      "void OnInitEnergy()",
      "void EOnInit(IEntity other, int extra)",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void OnIsPlugged(EntityAI source_device)",
      "void UpdateAllSelections()",
      "void OnIsUnplugged(EntityAI last_energy_source)",
      "void Fold(bool keep_connected = false)",
      "void Unfold()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool IsFolded()",
      "void SoundTurnOn()",
      "void SoundTurnOff()",
      "void OnPlacementStarted(Man player)",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "void OnPlacementCancelled(Man player)",
      "bool IsDeployable()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "int GetViewIndex()",
      "void SetActions()",
      "void PlayDeployLoopSound()",
      "void StopDeployLoopSound()"
    ]
  },
  "SteakKnife": {
    "parent": "ToolBase",
    "methods": [
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "Stone": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "StoneKnife": {
    "parent": "ToolBase",
    "methods": [
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "StunBaton": {
    "parent": null,
    "methods": [
      "void StunBaton()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "int GetMeleeMode()",
      "int GetMeleeHeavyMode()",
      "int GetMeleeSprintMode()",
      "void SetActions()"
    ]
  },
  "SuppresorBase": {
    "parent": "ItemBase",
    "methods": []
  },
  "SurrenderDummyItem": {
    "parent": "DummyItem",
    "methods": [
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)"
    ]
  },
  "Switchable_Base": {
    "parent": "ItemBase",
    "methods": [
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)"
    ]
  },
  "Sword": {
    "parent": "ToolBase",
    "methods": [
      "void Sword()",
      "bool IsMeleeFinisher()",
      "void SetActions()"
    ]
  },
  "TelescopicBaton": {
    "parent": null,
    "methods": [
      "void TelescopicBaton()",
      "void Open()",
      "void Close()",
      "bool IsOpen()",
      "void UpdateVisualState()",
      "int GetMeleeMode()",
      "int GetMeleeHeavyMode()",
      "int GetMeleeSprintMode()",
      "void OnVariablesSynchronized()",
      "void SetActions()"
    ]
  },
  "TentBase": {
    "parent": "ItemBase",
    "methods": [
      "void TentBase()",
      "string GetInvulnerabilityTypeString()",
      "bool HasProxyParts()",
      "bool CanProxyObstructSelf()",
      "bool IsItemTent()",
      "bool CanBeRepairedByCrafting()",
      "int GetMeleeTargetType()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void RefreshPhysics()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void OnVariablesSynchronized()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void HideAllAnimationsAndProxyPhysics(bool hide_animations = true, bool hide_physics = true)",
      "bool ConditionIntoInventory(EntityAI player)",
      "bool IsTakeable()",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanRemoveFromCargo(EntityAI parent)",
      "bool CanRemoveFromHands(EntityAI parent)",
      "bool ConditionOutOfHands(EntityAI player)",
      "bool CanBeRepairedToPristine()",
      "void RefreshAttachements()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "int GetViewIndex()",
      "int GetState()",
      "int GetStateLocal()",
      "bool CanBePacked()",
      "bool CanBeManipulated()",
      "bool CanAttach(ItemBase item)",
      "bool IsIgnoredByConstruction()",
      "void Pack(bool update_navmesh, bool init = false)",
      "void Pitch(bool update_navmesh, bool init = false)",
      "void TryPitch(bool update_navmesh, bool init = false)",
      "void UpdateVisuals()",
      "void UpdatePhysics()",
      "void Refresh()",
      "bool CanToggleAnimations(string selection)",
      "void ResetToggle()",
      "void ManipulateEntrance()",
      "void ManipulateWindow()",
      "bool IsManipulatedEntrance()",
      "bool IsManipulatedWindow()",
      "void ToggleAnimation(string selection)",
      "void HandleCamoNetAttachment(bool hide)",
      "void AnimateCamonetToggle(ToggleAnimations toggle)",
      "void AnimateCamonetByOpeningSelection(string opening_selection)",
      "string GetSoundOpen()",
      "string GetSoundClose()",
      "string GetSoundOpenWindow()",
      "string GetSoundCloseWindow()",
      "void RegenerateNavmesh()",
      "bool HasClutterCutter()",
      "string GetClutterCutter()",
      "void DestroyClutterCutter()",
      "bool IsDeployable()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "void InitItemSounds()",
      "void SetActions()",
      "void HandleOpeningsVisuals()",
      "void HandleOpeningsPhysics()",
      "int GetDamageSystemVersionChange()",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanLoadItemIntoCargo(EntityAI item)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanLoadAttachment(EntityAI attachment)",
      "bool CanBePlaced(Man player, vector position)",
      "void SetIsBeingPacked(bool isBeingPacked)",
      "void PlayDeployLoopSound()",
      "void StopDeployLoopSound()",
      "void SoundTentOpenPlay()",
      "void SoundTentClosePlay()",
      "void SoundTentOpenWindowPlay()",
      "void SoundTentCloseWindowPlay()"
    ]
  },
  "Thermometer": {
    "parent": "ItemBase",
    "methods": [
      "float GetTemperatureValue(PlayerBase player)",
      "void SetActions()"
    ]
  },
  "ToolBase": {
    "parent": "ItemBase",
    "methods": [
      "void ToolBase()",
      "int GetKeyCompatibilityType()",
      "int GetDisarmRate()",
      "void OnRPC(PlayerIdentity sender, int rpc_type,ParamsReadContext  ctx)"
    ]
  },
  "FlammableBase": {
    "parent": null,
    "methods": [
      "void FlammableBase()",
      "void DeferredInit()",
      "void Init()",
      "void EEInit()",
      "void EEDelete(EntityAI parent)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanRemoveFromCargo(EntityAI parent)",
      "bool CanPutAsAttachment(EntityAI parent)",
      "bool CanBeTakenAsCargo()",
      "bool IsIgnited()",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy(EntityAI igniter = NULL)",
      "bool IsRagDryEnough(ItemBase rag)",
      "void UpdateCheckForReceivingUpgrade()",
      "void OnIgnitedThis(EntityAI fire_source)",
      "void OnSwitchOn()",
      "void OnSwitchOff()",
      "void SetTorchDecraftResult(string type)",
      "bool ConsumeRag()",
      "void ConsumeLard(Lard lard)",
      "void Upgrade(ItemBase source)",
      "void ConsumeFuelFromBottle(ItemBase vessel)",
      "void ConsumeFuelFromGasStation()",
      "void RuinRags()",
      "void OnInventoryExit(Man player)",
      "bool StandUp()",
      "void CalculateQuantity()",
      "bool CanReceiveUpgrade()",
      "void CraftingInit(float quantity)",
      "void EEItemAttached( EntityAI item, string slot_name )",
      "void EEItemDetached( EntityAI item, string slot_name )",
      "bool CanTransformIntoStick()",
      "void TryTransformIntoStick()",
      "void OnWorkStart()",
      "void StopAllParticles()",
      "void LockRags(bool do_lock)",
      "void UpdateLight()",
      "void OnItemInHandsPlayerSwimStart(PlayerBase player)",
      "void OnWork( float consumed_energy )",
      "string GetSoundName()",
      "void UpdateParticle()",
      "void OnWorkStop()",
      "int GetMeleeMode()",
      "int GetMeleeHeavyMode()",
      "int GetMeleeSprintMode()",
      "void SetActions()",
      "void OnAttachmentQuantityChangedEx(ItemBase item, float delta)",
      "bool DisassembleOnLastDetach()",
      "void OnDebugSpawn()",
      "int GetRagQuantity()",
      "string GetBurningMaterial()",
      "string GetBurntMaterial()",
      "void UpdateMaterial()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void ApplyResultModifications(ItemBase result)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "string GetDebugText()",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "Torch": {
    "parent": null,
    "methods": [
      "void Init()",
      "void SetActions()",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "TorchLambda": {
    "parent": null,
    "methods": [
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "Torch_Video": {
    "parent": null,
    "methods": [
      "void SetEnablePtc()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void SetActions()"
    ]
  },
  "TerritoryFlagKit": {
    "parent": "KitBase",
    "methods": [
      "bool PlacementCanBeRotated()",
      "bool DoPlacingHeightCheck()",
      "float HeightCheckOverride()",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "void DisassembleKit(ItemBase item)",
      "void OnDebugSpawn()"
    ]
  },
  "TransmitterBase": {
    "parent": "ItemTransmitter",
    "methods": [
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "bool IsTransmitter()",
      "void SetNextFrequency( PlayerBase player = NULL )",
      "void OnSwitchOn()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void SoundTurnedOnNoiseStart()",
      "void SoundTurnedOnNoiseStop()",
      "void SetActions()"
    ]
  },
  "TrapBase": {
    "parent": "ItemBase",
    "methods": [
      "void TrapBase()",
      "void OnUpdate(EntityAI victim)",
      "void OnVariablesSynchronized()",
      "void EEDelete(EntityAI parent)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "bool IsActive()",
      "bool IsInactive()",
      "bool IsTakeable()",
      "bool IsActivable()",
      "bool IsPlaceable()",
      "bool IsPlaceableAtPosition( vector position )",
      "void Disarm()",
      "void OnDisarm()",
      "void SnapOnObject(EntityAI victim)",
      "void RemoveFromObject(EntityAI victim)",
      "void OnSteppedOn(EntityAI victim)",
      "void OnSteppedOut(EntityAI victim)",
      "void Synch(EntityAI victim)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void RefreshState()",
      "void SetupTrap()",
      "void SetupTrapPlayer( PlayerBase player, bool set_position = true )",
      "void AddDefect()",
      "void SetActive()",
      "void OnActivate()",
      "void StartActivate(PlayerBase player)",
      "void StartDeactivate(PlayerBase player)",
      "void SetInactive(bool stop_timer = true)",
      "void CreateTrigger()",
      "void DeleteTrigger()",
      "void DeferredEnableTrigger()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanRemoveFromHands( EntityAI parent )",
      "bool CanBePlaced( Man player, vector position )",
      "bool CanBeClapped()",
      "bool CanBeDisarmed()",
      "void SetDisarmed( bool disarmed )",
      "bool GetDisarmed()",
      "void SetActions()",
      "void DamageClothing(PlayerBase player)",
      "void PlayDeployLoopSound()",
      "void StopDeployLoopSound()"
    ]
  },
  "TrapSpawnBase": {
    "parent": "ItemBase",
    "methods": [
      "void TrapSpawnBase()",
      "void InitTrapValues()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void OnVariablesSynchronized()",
      "bool IsActive()",
      "bool IsDeployed()",
      "void SetDeployed( bool newState )",
      "bool IsTakeable()",
      "bool IsPlaceableAtPosition( vector position )",
      "void SetupTrap()",
      "void SetupTrapPlayer( PlayerBase player, bool set_position = true )",
      "void UpdatePreyPos()",
      "void Fold()",
      "void AddDefect()",
      "void StartActivate( PlayerBase player )",
      "bool CanBeTaken()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "void ResetActiveProgress()",
      "void ResetRunningTimerProgress()",
      "void RunTrappingTimer(float duration, string fnName)",
      "void SetActive()",
      "void SetInactive()",
      "void SetUsed()",
      "void IncreaseElapsedTime()",
      "void AdjustDetectionRange()",
      "void EvaluateCatch()",
      "bool IsPlayerInVicinity()",
      "void TrySpawnCatch()",
      "void SpawnCatch()",
      "void SetCatchSuccessful(bool successful)",
      "void OnCatchSpawnServer()",
      "void OnCatchSpawnClient()",
      "void PlayCatchEffectsServer()",
      "void PlayCatchEffectsClient()",
      "void PlayCatchSound(YieldItemBase yItem)",
      "void PlayCatchNoise(YieldItemBase yItem)",
      "void PlayCatchParticleSynced(YieldItemBase yItem)",
      "bool SetCanCatch( out EntityAI bait )",
      "void OnItemLocationChanged( EntityAI old_owner, EntityAI new_owner )",
      "bool IsSurfaceWater(vector position)",
      "bool CanDisplayAttachmentSlot( int slot_id )",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "void EEItemAttached( EntityAI item, string slot_name )",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void InitCatchingComponent()",
      "void ClearCatchingComponent()",
      "void UpdateTrapEnviroMask()",
      "void SetTrapEnviroMask(int value)",
      "void HandleBaitLoss()",
      "void DetachAllAttachments()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "bool IsPlaceable()",
      "bool CanBePlaced( Man player, vector position )",
      "void SetActions()",
      "bool CanPutInInventory(EntityAI  player)",
      "void AlignCatch(ItemBase obj, string catch_name)",
      "void CatchSetQuant(ItemBase catch)",
      "void PlayDeployLoopSound()",
      "void StopDeployLoopSound()"
    ]
  },
  "TripodBase": {
    "parent": null,
    "methods": [
      "bool HasProxyParts()",
      "bool CanDetachAttachment( EntityAI parent )",
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "void OnDebugSpawn()",
      "void SetActions()",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )"
    ]
  },
  "Tripod": {
    "parent": null,
    "methods": []
  },
  "VehicleBattery": {
    "parent": null,
    "methods": [
      "bool CanPutAsAttachment(EntityAI parent)",
      "bool CanDetachAttachment(EntityAI parent)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanPutInCargo(EntityAI parent)",
      "void OnInventoryEnter(Man player)",
      "void OnMovedInsideCargo(EntityAI container)",
      "bool CanDisplayAttachmentSlot(int slot_id)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void VehicleBattery()",
      "float GetEfficiency0To1()",
      "float GetEfficiencyDecayStart()",
      "void OnEnergyConsumed()",
      "void OnEnergyAdded()"
    ]
  },
  "WatchtowerKit": {
    "parent": "KitBase",
    "methods": [
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "bool DoPlacingHeightCheck()",
      "float HeightCheckOverride()",
      "void DisassembleKit(ItemBase item)",
      "void OnDebugSpawn()"
    ]
  },
  "WoodAxe": {
    "parent": "ToolBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "WoodenLog": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "WoodenPlank": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "WoodenStick": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "WorldContainer_Base": {
    "parent": "ItemBase",
    "methods": []
  },
  "XmasBaseballBat": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "XmasLights": {
    "parent": "Inventory_Base",
    "methods": [
      "void XmasLights()",
      "bool IsElectricAppliance()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void AttachToObject(ItemBase parent)",
      "void DetachFromObject(ItemBase parent)",
      "void TurnOnItem(ItemBase item)",
      "void TurnOffItem(ItemBase item)",
      "void HideOnItem(ItemBase item)",
      "void SetActions()"
    ]
  },
  "LightAIBase": {
    "parent": "LightAI",
    "methods": []
  },
  "PlayerBase": {
    "parent": "ManBase",
    "methods": [
      "void PlayerBase()",
      "void Init()",
      "void AddMedicalDrugsInUse(EMedicalDrugsType drugType)",
      "void RemoveMedicalDrugsInUse(EMedicalDrugsType drugType)",
      "bool IsChelationActive()",
      "bool IsAntibioticsActive()",
      "void SetSoundCategoryHash(int hash)",
      "void SetPerformedActionID(int id)",
      "int GetPerformedActionID()",
      "void SetActivePrimarySymptomID(SymptomIDs id)",
      "void RequestTriggerEffect(EffectTrigger trigger, int ppeIdx = -1, int aroundId = ParticleList.CONTAMINATED_AREA_GAS_AROUND, int tinyId = ParticleList.CONTAMINATED_AREA_GAS_TINY,  string soundset = ,  bool partDynaUpdate = false, int newBirthRate = 0, bool forceUpdate = false)",
      "void RemoveCurrentEffectTrigger()",
      "void IncreaseContaminatedAreaCount()",
      "void DecreaseContaminatedAreaCount()",
      "void IncreaseEffectAreaCount()",
      "void DecreaseEffectAreaCount()",
      "void SetInEffectAreaTypeFlag(EEffectAreaType flag)",
      "void UnsetInEffectAreaTypeFlag(EEffectAreaType flag)",
      "bool IsInEffectArea(EEffectAreaType area)",
      "void OnUpdateEffectAreaServer(float timeSlice)",
      "void OnContaminatedAreaEnterServer()",
      "void OnContaminatedAreaExitServer()",
      "void OnPlayerIsNowInsideEffectAreaBeginServer()",
      "void OnPlayerIsNowInsideEffectAreaEndServer()",
      "void OnPlayerIsNowInsideEffectAreaBeginClient()",
      "void OnPlayerIsNowInsideEffectAreaEndClient()",
      "int GetQuickBarBonus()",
      "bool CanDropEntity(notnull EntityAI item)",
      "int GetBreathVapourLevel()",
      "void UnsetMixedSoundState(eMixedSoundStates state)",
      "void SetMixedSoundState(eMixedSoundStates state)",
      "bool IsPlayer()",
      "bool IsBleeding()",
      "void SetBleedingBits(int bits)",
      "int GetBleedingBits()",
      "void IncreaseDiseaseCount()",
      "void DecreaseDiseaseCount()",
      "void IncreaseHealingsCount()",
      "void DecreaseHealingsCount()",
      "bool HasHealings()",
      "bool HasDisease()",
      "void SetPulseType(EPulseType pulse_type)",
      "void QueueAddEffectWidget(array<int> effects)",
      "void QueueRemoveEffectWidget(array<int> effects)",
      "void QueueAddGlassesEffect(int id)",
      "void QueueRemoveGlassesEffect(int id)",
      "void SpawnDamageDealtEffect()",
      "void SpawnDamageDealtEffect2(Param param1 = null, Param param2 = null)",
      "void SpawnFlashbangEffect(PlayerBase player, bool visual)",
      "void SpawnShockEffect(float intensity_max)",
      "void EEKilled(Object killer)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void EEHitByRemote(int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos)",
      "void EEDelete(EntityAI parent)",
      "float ConvertNonlethalDamage(float damage, DamageType damageType)",
      "void OnReceivedHit(ImpactEffectsData hitData)",
      "void OnPlayerRecievedHit()",
      "void OnPlayerReceiveFlashbangHitStart(bool visual)",
      "void OnPlayerReceiveFlashbangHitEnd()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "void AddPossibleCoverFaceForShave()",
      "void RemovePossibleCoverFaceForShave()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void UpdateShoulderProxyVisibility(EntityAI item, string slot_name)",
      "void SwitchItemSelectionTexture(EntityAI item, string slot_name)",
      "void RemoveAllItems()",
      "bool GetHitPPEEnabled()",
      "void SetHitPPEEnabled(bool enabled)",
      "bool IsMale()",
      "int GetVoiceType()",
      "void KillUndergroundHandler()",
      "void SetActions(out TInputActionMap InputActionMap)",
      "void SetActions()",
      "void SetActionsRemoteTarget(out TInputActionMap InputActionMap)",
      "void SetActionsRemoteTarget()",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "void AddAction(typename actionName, out TInputActionMap InputActionMap)",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName, out TInputActionMap InputActionMap)",
      "void RemoveAction(typename actionName)",
      "int GetCurrentRecipe()",
      "void SetNextRecipe()",
      "void SetFirstRecipe()",
      "void OnLadder(float delta_time, HumanMovementState pState)",
      "void ProcessHandDamage(float delta_time, HumanMovementState pState)",
      "void ProcessFeetDamageServer(int pUserInt)",
      "float GetFeetDamageMoveModifier()",
      "void SetStamina(int value, int range)",
      "void SetStaminaDisabled(bool value)",
      "void SetQuickRestrain(bool enable)",
      "void SetQuickFishing(bool enable)",
      "bool IsQuickRestrain()",
      "bool IsQuickFishing()",
      "bool CanBeRestrained()",
      "void SetRestrainStarted(bool restrain_started)",
      "bool IsRestrainStarted()",
      "void SetRestrainPrelocked(bool restrain_prelock)",
      "bool IsRestrainPrelocked()",
      "void SetRestrained(bool\tis_restrained)",
      "bool IsRestrained()",
      "void OnRestrainStartedChangeClient()",
      "void OnRestrainChangeClient()",
      "bool IsInventoryVisible()",
      "bool CanManipulateInventory()",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanReleaseCargo(EntityAI cargo)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanSwapItemInCargo(EntityAI child_entity, EntityAI new_entity)",
      "bool CanReceiveItemIntoHands(EntityAI item_to_hands)",
      "bool CanSaveItemInHands(EntityAI item_in_hands)",
      "bool CanReleaseFromHands(EntityAI handheld)",
      "int GetCraftingRecipeID()",
      "void SetCraftingRecipeID(int recipeID)",
      "void ResetConstructionActionData()",
      "float GetLastFirePointRot()",
      "int GetLastFirePointIndex()",
      "void SetLastFirePoint(vector last_fire_point)",
      "void SetLastFirePointRot(float last_fire_point_rot)",
      "void SetLastFirePointIndex(int last_fire_point_index)",
      "void RemoveQuickBarEntityShortcut(EntityAI entity)",
      "void SetEnableQuickBarEntityShortcut(EntityAI entity, bool value)",
      "int FindQuickBarEntityIndex(EntityAI entity)",
      "int GetQuickBarSize()",
      "void UpdateQuickBarEntityVisibility(EntityAI entity)",
      "void SetQuickBarEntityShortcut(EntityAI entity, int index, bool force = false)",
      "void OnQuickbarSetEntityRequest(ParamsReadContext ctx)",
      "void ApplySplint()",
      "void ProcessDrowning(float dT)",
      "void SpawnDrowningBubbles()",
      "void ProcessHoldBreath(float dT)",
      "void OnHoldBreathStart()",
      "void OnHoldBreathExhausted()",
      "void OnHoldBreathEnd()",
      "bool IsHoldingBreath()",
      "bool IsRefresherSignalingViable()",
      "bool IsSelfAdjustingTemperature()",
      "void InitEditor()",
      "void OnPlayerLoaded()",
      "void SetPlayerDisconnected(bool state)",
      "bool IsPlayerDisconnected()",
      "void PlacingStartServer(ItemBase item)",
      "void PlacingStartLocal(ItemBase item)",
      "void PlacingCancelServer()",
      "void LockHandsUntilItemHeld()",
      "void PlacingCancelLocal()",
      "void PlacingCompleteServer()",
      "void PlacingCompleteLocal()",
      "bool IsPlacingServer()",
      "bool IsPlacingLocal()",
      "void SetDrowning(bool enable)",
      "void OnDrowningStart()",
      "void OnDrowningEnd()",
      "bool TogglePlacingServer(int userDataType, ParamsReadContext ctx)",
      "void RequestResetADSSync()",
      "void ProcessADSSyncResetRequest()",
      "bool ResetADSPlayerSync(int userDataType, ParamsReadContext ctx)",
      "bool CanPlaceItem(EntityAI item)",
      "void SetUnderground(EUndergroundPresence presence)",
      "void TogglePlacingLocal(ItemBase item = null)",
      "void SetLocalProjectionPosition(vector local_position)",
      "void SetLocalProjectionOrientation(vector local_orientation)",
      "void SetInColdArea(bool state)",
      "bool GetInColdArea()",
      "void SetInWater(bool pState)",
      "bool IsInWater()",
      "void OnCameraChanged(DayZPlayerCameraBase new_camera)",
      "bool IsCurrentCameraAimedAtGround()",
      "void OnScheduledTick(float deltaTime)",
      "void OnCommandHandlerTick(float delta_time, int pCurrentCommandID)",
      "void UpdateMovementInertia()",
      "void OnTick()",
      "void EEItemIntoHands(EntityAI item)",
      "void EEItemOutOfHands(EntityAI item)",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void SetGetInVehicleDebug(EntityAI ent)",
      "void TryGetInVehicleDebug()",
      "void CloseMap()",
      "void CloseMapEx(bool cancelled)",
      "void SetMapOpen(bool state)",
      "bool IsMapOpen()",
      "void SetMapClosingSyncSet(bool state)",
      "bool GetMapClosingSyncSent()",
      "bool IsMapCallbackCancelInput()",
      "bool IsMapCallbackEndInput()",
      "void MapNavigationItemInPossession(EntityAI item)",
      "void MapNavigationItemNotInPossession(EntityAI item)",
      "void SetCheckMeleeItem(ItemBase item = null)",
      "void SetShakesForced(int value)",
      "void FreezeCheck()",
      "bool IsLanded(int pCurrentCommandID)",
      "bool OnLand(int pCurrentCommandID, FallDamageData fallDamageData)",
      "bool IsAlreadyInFallingCommand(int pCurrentCommandID)",
      "void OnUnconsciousStart()",
      "void OnUnconsciousStop(int pCurrentCommandID)",
      "void OnUnconsciousUpdate(float pDt, int last_command)",
      "int SimplifyShock()",
      "float GetSimplifiedShockNormalized()",
      "bool IsUnconscious()",
      "bool IsUnconsciousStateOnly()",
      "bool CanBeTargetedByAI(EntityAI ai)",
      "void GiveShock(float shock)",
      "void OnRestrainStart()",
      "void ShockRefill(float pDt)",
      "void SetBrokenLegs(int stateId)",
      "void UpdateBrokenLegs(int stateId)",
      "void BreakLegSound()",
      "void BrokenLegForceProne(bool forceOverride = false)",
      "void BrokenLegWalkShock()",
      "void MovingShock(float legHealth, float highShock, float midShock, float lowShock)",
      "void DealShock(float dmg)",
      "bool CanPickupHeavyItem(notnull EntityAI item)",
      "void SetLegHealth()",
      "void DropHeavyItem()",
      "bool IsWearingSplint()",
      "void OnCommandSwimStart()",
      "void OnCommandSwimFinish()",
      "void OnCommandLadderStart()",
      "void OnCommandLadderFinish()",
      "void OnCommandFallStart()",
      "void OnCommandFallFinish()",
      "void OnCommandClimbStart()",
      "void OnCommandClimbFinish()",
      "void OnCommandVehicleStart()",
      "void OnCommandVehicleFinish()",
      "void OnCommandMelee2Start()",
      "void OnCommandMelee2Finish()",
      "void OnCommandDeathStart()",
      "void OnJumpStart()",
      "void OnJumpEnd(int pLandType = 0)",
      "bool IsStance(int stance, int stanceMask)",
      "void OnStanceChange(int previousStance, int newStance)",
      "bool CanChangeStance(int previousStance, int newStance)",
      "void OnCommandMoveStart()",
      "bool CanRoll()",
      "void OnRollStart(bool isToTheRight)",
      "void OnRollFinish()",
      "void OnJumpOutVehicleFinish(float carSpeed)",
      "void OnVehicleSwitchSeat(int seatIndex)",
      "void OnVehicleSeatDriverEnter()",
      "void OnVehicleSeatDriverLeft()",
      "void OnThrowingModeChange(bool change_to_enabled)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void EOnPostFrame(IEntity other, int extra)",
      "void DiagOnPostFrame(IEntity other, int extra)",
      "void OnEnterTrigger(ScriptedEntity trigger)",
      "void OnLeaveTrigger(ScriptedEntity trigger)",
      "void StaminaHUDNotifier(bool show)",
      "void DepleteStamina(EStaminaModifiers modifier, float dT = -1)",
      "bool CanConsumeStamina(EStaminaConsumers consumer)",
      "bool CanStartConsumingStamina(EStaminaConsumers consumer)",
      "bool CanClimb(int climbType, SHumanCommandClimbResult climbRes)",
      "bool CanJump()",
      "bool IsJumpInProgress()",
      "bool IsTargetInActiveRefresherRange(EntityAI target)",
      "void RequestHandAnimationStateRefresh()",
      "void RefreshHandAnimationState(int delay = 0)",
      "bool IsFacingTarget(Object target)",
      "void OnQuickBarSingleUse(int slotClicked)",
      "void OnQuickBarContinuousUseStart(int slotClicked)",
      "void OnQuickBarContinuousUseEnd(int slotClicked)",
      "void SetActionEndInput(ActionBase action)",
      "bool IsQBControl()",
      "void ResetActionEndInput()",
      "void RadialQuickBarSingleUse(int slotClicked)",
      "void RadialQuickBarCombine(int slotClicked)",
      "void QuickReloadWeapon(EntityAI weapon)",
      "void ReloadWeapon(EntityAI weapon, EntityAI magazine)",
      "void OnSpawnedFromConsole()",
      "bool GetLiquidTendencyDrain()",
      "void SetLiquidTendencyDrain(bool state)",
      "bool GetFlagTendencyRaise()",
      "void SetFlagTendencyRaise(bool state)",
      "float GetPlayerLoad()",
      "bool IsOverloaded()",
      "void SetPlayerLoad(float load)",
      "void AddPlayerLoad(float addedload)",
      "bool IsItemInInventory(EntityAI entity)",
      "bool NeedInventoryJunctureFromServer(notnull EntityAI item, EntityAI currparent, EntityAI newparent)",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "void CalculateVisibilityForAI()",
      "void SetVisibilityCoef(float pVisibility)",
      "float GetVisibilityCoef()",
      "int GetShakeLevel()",
      "float GetBordersImmunity()",
      "float GetStatBordersHealth()",
      "float GetStatBordersToxicity()",
      "float GetStatBordersBlood()",
      "float GetStatBordersEnergy()",
      "float GetStatBordersWater()",
      "float GetStatLevelBorders(float stat_value, float critical, float low, float normal, float high, float max)",
      "void SetImmunityBoosted(bool boosted)",
      "float GetImmunity()",
      "bool IsSprinting()",
      "bool CanSprint()",
      "bool IsInProne()",
      "bool IsInRasedProne()",
      "bool IsLeaning()",
      "bool IsRolling()",
      "bool IsClimbing()",
      "bool IsFalling()",
      "bool IsFighting()",
      "bool IsEmotePlaying()",
      "bool IsIgnoredByConstruction()",
      "bool AnimCommandCheck(HumanMoveCommandID mask)",
      "void RunFightBlendTimer()",
      "void EndFighting()",
      "bool CheckMeleeItemDamage(ItemBase item)",
      "void PlayAttachmentDropSound()",
      "void RPC(int rpc_type, array<ref Param> params, bool guaranteed, PlayerIdentity recipient = NULL)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void OnGameplayDataHandlerSync()",
      "void UpdateLighting()",
      "void SetContaminatedEffectEx(bool enable, int ppeIdx = -1, int aroundId = ParticleList.CONTAMINATED_AREA_GAS_AROUND, int tinyId = ParticleList.CONTAMINATED_AREA_GAS_TINY,  string soundset = ,  bool partDynaUpdate = false, int newBirthRate = 0)",
      "void SetContaminatedEffect(bool enable, int ppeIdx = -1, int aroundId = ParticleList.CONTAMINATED_AREA_GAS_AROUND, int tinyId = ParticleList.CONTAMINATED_AREA_GAS_TINY, bool partDynaUpdate = false, int newBirthRate = 0)",
      "void UpdateCorpseState()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void OnVariablesSynchronized()",
      "bool IsSyncedModifierActive(eModifierSyncIDs modifier)",
      "void HandleBrokenLegsSync()",
      "void FixAllInventoryItems()",
      "void OnInventoryMenuOpen()",
      "void OnInventoryMenuClose()",
      "void OnSelectPlayer()",
      "void SimulateDeath(bool state)",
      "void SetNewCharName()",
      "void CheckForBurlap()",
      "void CheckForGag()",
      "void UpdateMaskBreathWidget(notnull MaskBase mask, bool is_start = false)",
      "void OnVoiceEvent(PlayerSoundEventBase voice_event)",
      "void OnVoiceEventPlayback(PlayerSoundEventBase voice_event, AbstractWave callback, float playback_time)",
      "bool OnInputUserDataProcess(int userDataType, ParamsReadContext ctx)",
      "float GetHealthRegenSpeed()",
      "bool HandleRemoteItemManipulation(int userDataType, ParamsReadContext ctx)",
      "bool DropItem(ItemBase item)",
      "void Message(string text, string style)",
      "void MessageStatus(string text)",
      "void MessageAction(string text)",
      "void MessageFriendly(string text)",
      "void MessageImportant(string text)",
      "void CloseInventoryMenu()",
      "void ClearInventory()",
      "void DropAllItems()",
      "string GetPlayerClass()",
      "void ShavePlayer()",
      "bool CanShave()",
      "void OnParticleEvent(string pEventType, string pUserString, int pUserInt)",
      "bool CanSpawnBreathVaporEffect()",
      "void ProcessADDModifier()",
      "void SpawnBreathVaporEffect()",
      "bool GetDrowningWaterLevelCheck()",
      "void SetLifeSpanStateVisible(int show_state)",
      "int GetLifeSpanState()",
      "int GetLastShavedSeconds()",
      "void SetLastShavedSeconds(int last_shaved_seconds)",
      "bool HasCoveredFaceForShave()",
      "bool HasBloodyHands()",
      "void SetBloodyHands(bool show)",
      "void SetBloodyHandsEx(eBloodyHandsTypes type)",
      "void SetBloodyHandsBase(int type)",
      "int GetBloodyHandsPenaltyAgents()",
      "float GetBloodyHandsPenaltyChancePerAgent(eAgents type)",
      "void SetBloodyHandsPenaltyChancePerAgent(eAgents type, float amount)",
      "void ClearBloodyHandsPenaltyChancePerAgent(eAgents type)",
      "bool HasBloodTypeVisible()",
      "void SetBloodTypeVisible(bool show)",
      "int GetBloodType()",
      "void SetBloodType(int blood_type)",
      "void CheckDeath()",
      "int GetNoisePresenceInAI()",
      "bool IsPersistentFlag(PersistentFlag bit)",
      "void SetPersistentFlag(PersistentFlag bit, bool enable)",
      "int GetStoreLoadVersion()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void SaveAreaPersistenceFlag(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void AfterStoreLoad()",
      "void OnStoreSaveLifespan(ParamsWriteContext ctx)",
      "bool OnStoreLoadLifespan(ParamsReadContext ctx, int version)",
      "void UpdatePlayerMeasures()",
      "void OnConnect()",
      "void OnReconnect()",
      "void OnDisconnect()",
      "void SetModifiers(bool enable)",
      "bool Consume(PlayerConsumeData data)",
      "void ShowUnconsciousScreen(bool show)",
      "void RequestSoundEventEx(EPlayerSoundEventID id, bool from_server_and_client = false, int param = 0)",
      "void RequestSoundEvent(EPlayerSoundEventID id, bool from_server_and_client = false)",
      "void SendSoundEvent(EPlayerSoundEventID id)",
      "void SendSoundEventEx(EPlayerSoundEventID id, int param = 0)",
      "void CheckZeroSoundEvent()",
      "void CheckSendSoundEvent()",
      "bool PlaySoundEventType(ESoundEventType soundType, int soundEventID, int param = 0)",
      "bool PlaySoundEvent(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false)",
      "bool PlaySoundEventEx(EPlayerSoundEventID id, bool from_anim_system = false, bool is_from_server = false, int param = 0)",
      "void OnBleedingBegin()",
      "void OnBleedingEnd()",
      "void OnBleedingSourceAdded()",
      "void OnBleedingSourceRemoved()",
      "void OnBleedingSourceRemovedEx(ItemBase item)",
      "int GetBleedingSourceCount()",
      "void ResetPlayer(bool set_max)",
      "void CheckSoundEvent()",
      "void TestSend()",
      "void SetStaminaState(eStaminaState state)",
      "int GetStaminaState()",
      "void UpdateQuickBarExtraSlots()",
      "bool Save()",
      "void SpreadAgentsEx(float distance = 3,float chance = 0.25)",
      "void SpreadAgents()",
      "int GetAgents()",
      "void RemoveAgent(int agent_id)",
      "void RemoveAllAgents()",
      "void InsertAgent(int agent, float count = 1)",
      "int GetSingleAgentCount(int agent_id)",
      "float GetSingleAgentCountNormalized(int agent_id)",
      "float GetTotalAgentCount()",
      "void PrintAgents()",
      "void ImmuneSystemTick(float value, float deltaT)",
      "void AntibioticsAttack(float value)",
      "void SetTemporaryResistanceToAgent(int agent, float time)",
      "float GetTemporaryResistanceToAgent(int agent)",
      "bool CanEatAndDrink()",
      "bool CanConsumeFood(ConsumeConditionData data = null)",
      "void SetHeatBufferDynamicMax(float value)",
      "float GetHeatBufferDynamicMax()",
      "void ToggleHeatBufferVisibility(bool show)",
      "void ToggleHeatBufferVisibility(int heatbufferStage)",
      "string GetLastUAMessage()",
      "void SetLastUAMessage(string pMsg)",
      "void ClearLastUAMessage()",
      "void ForceUpdateInjuredState()",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "void OnSyncJuncture(int pJunctureID, ParamsReadContext pCtx)",
      "bool IsItemsToDelete()",
      "void SetToDelete(ParamsReadContext pCtx)",
      "void AddItemToDelete(EntityAI item)",
      "bool CanDeleteItems()",
      "void JunctureDeleteItem(EntityAI item)",
      "void UpdateDelete()",
      "bool HeadingModel(float pDt, SDayZPlayerHeadingModel pModel)",
      "bool IsInventorySoftLocked()",
      "void SetInventorySoftLock(bool status)",
      "void SetLoadedQuickBarItemBind(EntityAI entity, int index)",
      "bool IsLiftWeapon()",
      "bool ReadLiftWeaponRequest(int userDataType, ParamsReadContext ctx)",
      "void SetLiftWeapon(int pJunctureID, ParamsReadContext ctx)",
      "void SetLiftWeapon(bool state)",
      "void SendLiftWeaponSync(bool state)",
      "void CheckLiftWeapon()",
      "void ProcessLiftWeapon()",
      "void HideClothing(ItemOptics optic, bool state)",
      "void RequestUnconsciousness(bool enable)",
      "void SetDeathDarknessLevel(float duration, float tick_time)",
      "bool IsInFBEmoteState()",
      "void EndSurrenderRequest(SurrenderData data = null)",
      "bool IsSurrendered()",
      "bool IsPlayerLoaded()",
      "void CheckAnimationOverrides()",
      "bool CanRedirectToWeaponManager(notnull EntityAI item, out bool isActionPossible)",
      "bool PredictiveTakeEntityToTargetInventory(notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToInventory(FindInventoryLocationType flags, notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetAttachment(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetAttachmentEx(notnull EntityAI target, notnull EntityAI item, int slot)",
      "bool PredictiveTakeEntityToTargetCargo(notnull EntityAI target, notnull EntityAI item)",
      "bool PredictiveTakeEntityToTargetCargoEx(notnull CargoBase cargo, notnull EntityAI item, int row, int col)",
      "bool PredictiveDropEntity(notnull EntityAI item)",
      "bool PredictiveSwapEntities(notnull EntityAI item1, notnull EntityAI item2)",
      "bool PredictiveForceSwapEntities(notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "void PredictiveTakeEntityToHands(EntityAI item)",
      "bool PredictiveTakeToDst(notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool IsSwapBetweenHandsAndGroundLargeItem(notnull EntityAI item1, notnull EntityAI item2, out EntityAI item_hands, out EntityAI item_ground)",
      "void SetHairLevelToHide(int level, bool state, bool was_debug = false)",
      "void HideHairSelections(ItemBase item, bool state)",
      "void UpdateHairSelectionVisibility(bool was_debug = false)",
      "void UpdateTranslatedSelections(SelectionTranslation stt)",
      "void CheckHairClippingOnCharacterLoad()",
      "bool IsNVGWorking()",
      "bool IsNVGLowered()",
      "int GetNVType()",
      "void SetNVGWorking(bool state)",
      "void SetNVGLowered(bool state)",
      "void AddActiveNV(int type)",
      "void RemoveActiveNV(int type)",
      "void ResetActiveNV()",
      "string GetDebugText()",
      "void DEBUGRotateNVG()",
      "void AdjustBandana(EntityAI item, string slot_name)",
      "void AdjustShemag(EntityAI item, string slot_name)",
      "void UpdateCorpseStateVisual()",
      "void SetDecayEffects(int effect = -1)",
      "void PreloadDecayTexture()",
      "void SetLastMapInfo(float scale, vector pos)",
      "bool GetLastMapInfo(out float scale, out vector pos)",
      "bool PhysicalPredictiveDropItem(EntityAI entity, bool heavy_item_only = true)",
      "void SetProcessUIWarning(bool state)",
      "void dmgDebugPrint(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void DamageAllLegs(float inputDmg)",
      "void TryHideItemInHands(bool hide, bool force = false)",
      "bool CheckAndExecuteStackSplit(FindInventoryLocationType flags, notnull EntityAI item, notnull EntityAI target)",
      "bool CheckAndExecuteStackSplitToInventoryLocation(InventoryLocation il, notnull EntityAI item)",
      "bool TakeEntityToInventoryImpl(InventoryMode mode, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool TakeEntityToCargoImpl(InventoryMode mode, notnull EntityAI item)",
      "bool TakeEntityAsAttachmentImpl(InventoryMode mode, notnull EntityAI item)",
      "void TakeEntityToHandsImpl(InventoryMode mode, EntityAI item)",
      "bool TakeEntityToTargetInventoryImpl(InventoryMode mode, notnull EntityAI target, FindInventoryLocationType flags, notnull EntityAI item)",
      "bool TakeEntityToTargetCargoImpl(InventoryMode mode, notnull EntityAI target, notnull EntityAI item)",
      "bool TakeEntityToTargetAttachmentImpl(InventoryMode mode, notnull EntityAI target, notnull EntityAI item)",
      "bool TakeToDstImpl(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "void ContaminatedParticleAdjustment()",
      "void HandleGlassesEffect()",
      "void AddArrow(Object arrow, int componentIndex, vector closeBonePosWS, vector closeBoneRotWS)",
      "bool IsManagingArrows()",
      "string GetCachedName()",
      "string GetCachedID()",
      "void OnFreezeStateChangeClient()",
      "bool HasHeatBuffer()",
      "int GetHeatBufferStage()",
      "void SwitchItemTypeAttach(EntityAI item, string slot)",
      "void SwitchItemTypeDetach(EntityAI item, string slot)",
      "void AddToEnvironmentTemperature(float pTemperature)",
      "void IncreaseAntibioticsCount()",
      "void DecreaseAntibioticsCount()",
      "bool Consume(ItemBase source, float amount, EConsumeType consume_type)",
      "bool HasStaminaRemaining()",
      "void SetBloodyHandsPenalty()"
    ]
  },
  "PlayerBaseClient": {
    "parent": "PlayerBase",
    "methods": [
      "static void CreatePersonalLight()",
      "void OnGameplayDataHandlerSync()",
      "static void SwitchPersonalLight(bool state)",
      "static void UpdatePersonalLight()",
      "static void UpdateHitDirectionValues()"
    ]
  },
  "PointLightBase": {
    "parent": "ScriptedLightBase",
    "methods": [
      "void PointLightBase()"
    ]
  },
  "SpotLightBase": {
    "parent": "ScriptedLightBase",
    "methods": [
      "void SpotLightBase()"
    ]
  },
  "BoatScriptOwnerState": {
    "parent": null,
    "methods": [
      "void BoatScript()",
      "void EEDelete(EntityAI parent)",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "bool DisableVicinityIcon()",
      "string GetVehicleType()",
      "bool IsInventoryVisible()",
      "float GetTransportCameraDistance()",
      "int GetAnimInstance()",
      "int Get3rdPersonCameraType()",
      "bool CrewCanGetThrough(int posIdx)",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "bool CanReachSeatFromDoors(string pSeatSelection, vector pFromPos, float pDistance = 1.0)",
      "bool CanReachDoorsFromSeat(string pDoorsSelection, int pCurrentSeat)",
      "bool IsAreaAtDoorFree(int currentSeat, float maxAllowedObjHeight, inout vector extents, out vector transform[4])",
      "bool OnBeforeEngineStart()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EEOnCECreate()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void EOnSimulate(IEntity other, float dt)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void EOnContact(IEntity other, Contact extra)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void OnVariablesSynchronized()",
      "bool DetectFlipped(VehicleFlippedContext ctx)",
      "float OnSound(BoatSoundCtrl ctrl, float oldValue)",
      "void HandleByCrewMemberState(ECrewMemberState state)",
      "void DecayHealthTick()",
      "bool IsInFlagRange()",
      "bool CheckOperationalState()",
      "void OnVehicleJumpOutServer(GetOutTransportActionData data)",
      "void HandleEngineSound(EBoatEngineSoundState state)",
      "void PlaySound(string soundset, inout EffectSound sound, vector position = vector.Zero)",
      "void HandleBoatSplashSound()",
      "void SyncSoundImpactLight()",
      "void SyncSoundImpactHeavy()",
      "void SyncSoundPushBoat(bool play)",
      "void FadeEngineSound(bool fadeIn)",
      "void FlipVehicle()",
      "void CheckContactCache()",
      "void SetActions()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)",
      "void UpdateParticles(float timeSlice = 0)",
      "void StopParticleUpdate()",
      "void ClearWaterEffects()",
      "void CleanupEffects()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void FixEntity()"
    ]
  },
  "BoatScriptMove": {
    "parent": null,
    "methods": [
      "void BoatScript()",
      "void EEDelete(EntityAI parent)",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "bool DisableVicinityIcon()",
      "string GetVehicleType()",
      "bool IsInventoryVisible()",
      "float GetTransportCameraDistance()",
      "int GetAnimInstance()",
      "int Get3rdPersonCameraType()",
      "bool CrewCanGetThrough(int posIdx)",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "bool CanReachSeatFromDoors(string pSeatSelection, vector pFromPos, float pDistance = 1.0)",
      "bool CanReachDoorsFromSeat(string pDoorsSelection, int pCurrentSeat)",
      "bool IsAreaAtDoorFree(int currentSeat, float maxAllowedObjHeight, inout vector extents, out vector transform[4])",
      "bool OnBeforeEngineStart()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EEOnCECreate()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void EOnSimulate(IEntity other, float dt)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void EOnContact(IEntity other, Contact extra)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void OnVariablesSynchronized()",
      "bool DetectFlipped(VehicleFlippedContext ctx)",
      "float OnSound(BoatSoundCtrl ctrl, float oldValue)",
      "void HandleByCrewMemberState(ECrewMemberState state)",
      "void DecayHealthTick()",
      "bool IsInFlagRange()",
      "bool CheckOperationalState()",
      "void OnVehicleJumpOutServer(GetOutTransportActionData data)",
      "void HandleEngineSound(EBoatEngineSoundState state)",
      "void PlaySound(string soundset, inout EffectSound sound, vector position = vector.Zero)",
      "void HandleBoatSplashSound()",
      "void SyncSoundImpactLight()",
      "void SyncSoundImpactHeavy()",
      "void SyncSoundPushBoat(bool play)",
      "void FadeEngineSound(bool fadeIn)",
      "void FlipVehicle()",
      "void CheckContactCache()",
      "void SetActions()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)",
      "void UpdateParticles(float timeSlice = 0)",
      "void StopParticleUpdate()",
      "void ClearWaterEffects()",
      "void CleanupEffects()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void FixEntity()"
    ]
  },
  "BoatScript": {
    "parent": null,
    "methods": [
      "void BoatScript()",
      "void EEDelete(EntityAI parent)",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "bool DisableVicinityIcon()",
      "string GetVehicleType()",
      "bool IsInventoryVisible()",
      "float GetTransportCameraDistance()",
      "int GetAnimInstance()",
      "int Get3rdPersonCameraType()",
      "bool CrewCanGetThrough(int posIdx)",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "bool CanReachSeatFromDoors(string pSeatSelection, vector pFromPos, float pDistance = 1.0)",
      "bool CanReachDoorsFromSeat(string pDoorsSelection, int pCurrentSeat)",
      "bool IsAreaAtDoorFree(int currentSeat, float maxAllowedObjHeight, inout vector extents, out vector transform[4])",
      "bool OnBeforeEngineStart()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EEOnCECreate()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void EOnSimulate(IEntity other, float dt)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void EOnContact(IEntity other, Contact extra)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void OnVariablesSynchronized()",
      "bool DetectFlipped(VehicleFlippedContext ctx)",
      "float OnSound(BoatSoundCtrl ctrl, float oldValue)",
      "void HandleByCrewMemberState(ECrewMemberState state)",
      "void DecayHealthTick()",
      "bool IsInFlagRange()",
      "bool CheckOperationalState()",
      "void OnVehicleJumpOutServer(GetOutTransportActionData data)",
      "void HandleEngineSound(EBoatEngineSoundState state)",
      "void PlaySound(string soundset, inout EffectSound sound, vector position = vector.Zero)",
      "void HandleBoatSplashSound()",
      "void SyncSoundImpactLight()",
      "void SyncSoundImpactHeavy()",
      "void SyncSoundPushBoat(bool play)",
      "void FadeEngineSound(bool fadeIn)",
      "void FlipVehicle()",
      "void CheckContactCache()",
      "void SetActions()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)",
      "void UpdateParticles(float timeSlice = 0)",
      "void StopParticleUpdate()",
      "void ClearWaterEffects()",
      "void CleanupEffects()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void FixEntity()"
    ]
  },
  "CrashDebugData": {
    "parent": null,
    "methods": [
      "static void SendData(PlayerBase player)",
      "static void DumpDataArray(array<ref CrashDebugData> dataArray)",
      "static void DumpData(CrashDebugData data)",
      "void CarContactData(vector _localPos, IEntity _other, float _impulse)",
      "void CarScript()",
      "void EEInit()",
      "void FixEntity()",
      "string GetVehicleType()",
      "float GetLiquidThroughputCoef()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void EEDelete(EntityAI parent)",
      "void CleanupEffects()",
      "void CleanupSound(EffectSound sound)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void OnVariablesSynchronized()",
      "void CreateCarDestroyedEffect()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void UpdateHeadlightState()",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void OnAttachmentRuined(EntityAI attachment)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanManipulateSpareWheel(string slotSelectionName)",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void OnBrakesPressed()",
      "void OnBrakesReleased()",
      "void OnVehicleJumpOutServer(GetOutTransportActionData gotActionData)",
      "bool DetectFlipped(VehicleFlippedContext ctx)",
      "void OnUpdate( float dt )",
      "void EEKilled(Object killer)",
      "void OnContact( string zoneName, vector localPos, IEntity other, Contact data )",
      "void CheckContactCache()",
      "void DamageCrew(float dmg)",
      "float OnSound( CarSoundCtrl ctrl, float oldValue )",
      "void OnAnimationPhaseStarted(string animSource, float phase)",
      "void HandleDoorsSound(string animSource, float phase)",
      "void HandleSeatAdjustmentSound(string animSource, float phase)",
      "void HandleCarHornSound(ECarHornState pState)",
      "void HandleEngineSound(CarEngineSoundState state)",
      "void HandleByCrewMemberState(ECrewMemberState state)",
      "float GetEnviroHeatComfortOverride()",
      "void OnFluidChanged(CarFluid fluid, float newValue, float oldValue)",
      "bool OnBeforeEngineStart()",
      "bool CheckOperationalState()",
      "void OnGearChanged(int newGear, int oldGear)",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "bool OnBeforeSwitchLights( bool toOn )",
      "bool IsScriptedLightsOn()",
      "void ToggleHeadlights()",
      "void UpdateLights(int new_gear = -1)",
      "void UpdateLightsClient(int newGear = -1)",
      "void UpdateLightsServer(int newGear = -1)",
      "void BrakesRearLight()",
      "void ReverseRearLight()",
      "void BrakeAndReverseRearLight()",
      "void NoRearLight()",
      "void LeftFrontLightShineOn()",
      "void RightFrontLightShineOn()",
      "void LeftFrontLightShineOff()",
      "void RightFrontLightShineOff()",
      "void ReverseLightsShineOn()",
      "void ReverseLightsShineOff()",
      "void BrakeLightsShineOn()",
      "void BrakeLightsShineOff()",
      "void TailLightsShineOn()",
      "void TailLightsShineOff()",
      "void DashboardShineOn()",
      "void DashboardShineOff()",
      "void CheckVitalItem( bool isVital, string itemName )",
      "void LeakFluid(CarFluid fluid)",
      "void CarPartsHealthCheck()",
      "bool GetCrashLightSound()",
      "void SynchCrashLightSound(bool play)",
      "void PlayCrashLightSound()",
      "bool GetCrashHeavySound()",
      "void SynchCrashHeavySound(bool play)",
      "void PlayCrashHeavySound()",
      "void PlaySoundEx(string soundset, EffectSound sound, out bool soundbool)",
      "void PlaySound(string soundset, EffectSound sound, out bool soundbool)",
      "string GetAnimSourceFromSelection( string selection )",
      "string GetDoorConditionPointFromSelection( string selection )",
      "string GetDoorSelectionNameFromSeatPos(int posIdx)",
      "string GetDoorInvSlotNameFromSeatPos(int posIdx)",
      "int GetCrewIndex( string selection )",
      "bool CanReachSeatFromDoors( string pSeatSelection, vector pFromPos, float pDistance = 1.0 )",
      "bool IsVitalCarBattery()",
      "bool IsVitalTruckBattery()",
      "bool IsVitalGlowPlug()",
      "bool IsVitalEngineBelt()",
      "bool IsVitalRadiator()",
      "bool IsVitalFuelTank()",
      "bool HasRadiator()",
      "bool IsMoving()",
      "bool IsHandbrakeActive()",
      "int Get3rdPersonCameraType()",
      "void SetEngineStarted(bool started)",
      "int GetCarDoorsState(string slotType)",
      "string GetActionCompNameCoolant()",
      "float GetActionDistanceCoolant()",
      "string GetActionCompNameOil()",
      "float GetActionDistanceOil()",
      "string GetActionCompNameBrakes()",
      "float GetActionDistanceBrakes()",
      "bool CanPutIntoHands(EntityAI parent)",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "void SetActions()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)",
      "bool IsInventoryVisible()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void EEOnCECreate()",
      "void ForceUpdateLightsStart()",
      "void ForceUpdateLightsEnd()",
      "float GetBatteryConsumption()",
      "float GetBatteryRuntimeConsumption()",
      "float GetBatteryRechargeRate()",
      "void SetCarHornState(int pState)",
      "void SetCarEngineSoundState(CarEngineSoundState pState)",
      "void GenerateCarHornAINoise(int pState)",
      "float GetPushForceCoefficientMultiplier()",
      "string GetDebugText()",
      "void SpawnUniversalParts()",
      "void SpawnAdditionalItems()",
      "void FillUpCarFluids()"
    ]
  },
  "CarContactData": {
    "parent": null,
    "methods": [
      "void CarContactData(vector _localPos, IEntity _other, float _impulse)",
      "void CarScript()",
      "void EEInit()",
      "void FixEntity()",
      "string GetVehicleType()",
      "float GetLiquidThroughputCoef()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void EEDelete(EntityAI parent)",
      "void CleanupEffects()",
      "void CleanupSound(EffectSound sound)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void OnVariablesSynchronized()",
      "void CreateCarDestroyedEffect()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void UpdateHeadlightState()",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void OnAttachmentRuined(EntityAI attachment)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanManipulateSpareWheel(string slotSelectionName)",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void OnBrakesPressed()",
      "void OnBrakesReleased()",
      "void OnVehicleJumpOutServer(GetOutTransportActionData gotActionData)",
      "bool DetectFlipped(VehicleFlippedContext ctx)",
      "void OnUpdate( float dt )",
      "void EEKilled(Object killer)",
      "void OnContact( string zoneName, vector localPos, IEntity other, Contact data )",
      "void CheckContactCache()",
      "void DamageCrew(float dmg)",
      "float OnSound( CarSoundCtrl ctrl, float oldValue )",
      "void OnAnimationPhaseStarted(string animSource, float phase)",
      "void HandleDoorsSound(string animSource, float phase)",
      "void HandleSeatAdjustmentSound(string animSource, float phase)",
      "void HandleCarHornSound(ECarHornState pState)",
      "void HandleEngineSound(CarEngineSoundState state)",
      "void HandleByCrewMemberState(ECrewMemberState state)",
      "float GetEnviroHeatComfortOverride()",
      "void OnFluidChanged(CarFluid fluid, float newValue, float oldValue)",
      "bool OnBeforeEngineStart()",
      "bool CheckOperationalState()",
      "void OnGearChanged(int newGear, int oldGear)",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "bool OnBeforeSwitchLights( bool toOn )",
      "bool IsScriptedLightsOn()",
      "void ToggleHeadlights()",
      "void UpdateLights(int new_gear = -1)",
      "void UpdateLightsClient(int newGear = -1)",
      "void UpdateLightsServer(int newGear = -1)",
      "void BrakesRearLight()",
      "void ReverseRearLight()",
      "void BrakeAndReverseRearLight()",
      "void NoRearLight()",
      "void LeftFrontLightShineOn()",
      "void RightFrontLightShineOn()",
      "void LeftFrontLightShineOff()",
      "void RightFrontLightShineOff()",
      "void ReverseLightsShineOn()",
      "void ReverseLightsShineOff()",
      "void BrakeLightsShineOn()",
      "void BrakeLightsShineOff()",
      "void TailLightsShineOn()",
      "void TailLightsShineOff()",
      "void DashboardShineOn()",
      "void DashboardShineOff()",
      "void CheckVitalItem( bool isVital, string itemName )",
      "void LeakFluid(CarFluid fluid)",
      "void CarPartsHealthCheck()",
      "bool GetCrashLightSound()",
      "void SynchCrashLightSound(bool play)",
      "void PlayCrashLightSound()",
      "bool GetCrashHeavySound()",
      "void SynchCrashHeavySound(bool play)",
      "void PlayCrashHeavySound()",
      "void PlaySoundEx(string soundset, EffectSound sound, out bool soundbool)",
      "void PlaySound(string soundset, EffectSound sound, out bool soundbool)",
      "string GetAnimSourceFromSelection( string selection )",
      "string GetDoorConditionPointFromSelection( string selection )",
      "string GetDoorSelectionNameFromSeatPos(int posIdx)",
      "string GetDoorInvSlotNameFromSeatPos(int posIdx)",
      "int GetCrewIndex( string selection )",
      "bool CanReachSeatFromDoors( string pSeatSelection, vector pFromPos, float pDistance = 1.0 )",
      "bool IsVitalCarBattery()",
      "bool IsVitalTruckBattery()",
      "bool IsVitalGlowPlug()",
      "bool IsVitalEngineBelt()",
      "bool IsVitalRadiator()",
      "bool IsVitalFuelTank()",
      "bool HasRadiator()",
      "bool IsMoving()",
      "bool IsHandbrakeActive()",
      "int Get3rdPersonCameraType()",
      "void SetEngineStarted(bool started)",
      "int GetCarDoorsState(string slotType)",
      "string GetActionCompNameCoolant()",
      "float GetActionDistanceCoolant()",
      "string GetActionCompNameOil()",
      "float GetActionDistanceOil()",
      "string GetActionCompNameBrakes()",
      "float GetActionDistanceBrakes()",
      "bool CanPutIntoHands(EntityAI parent)",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "void SetActions()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)",
      "bool IsInventoryVisible()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void EEOnCECreate()",
      "void ForceUpdateLightsStart()",
      "void ForceUpdateLightsEnd()",
      "float GetBatteryConsumption()",
      "float GetBatteryRuntimeConsumption()",
      "float GetBatteryRechargeRate()",
      "void SetCarHornState(int pState)",
      "void SetCarEngineSoundState(CarEngineSoundState pState)",
      "void GenerateCarHornAINoise(int pState)",
      "float GetPushForceCoefficientMultiplier()",
      "string GetDebugText()",
      "void SpawnUniversalParts()",
      "void SpawnAdditionalItems()",
      "void FillUpCarFluids()"
    ]
  },
  "CarScript": {
    "parent": "Car",
    "methods": [
      "void CarScript()",
      "void EEInit()",
      "void FixEntity()",
      "string GetVehicleType()",
      "float GetLiquidThroughputCoef()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void EEDelete(EntityAI parent)",
      "void CleanupEffects()",
      "void CleanupSound(EffectSound sound)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void OnVariablesSynchronized()",
      "void CreateCarDestroyedEffect()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void UpdateHeadlightState()",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void OnAttachmentRuined(EntityAI attachment)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanManipulateSpareWheel(string slotSelectionName)",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void OnBrakesPressed()",
      "void OnBrakesReleased()",
      "void OnVehicleJumpOutServer(GetOutTransportActionData gotActionData)",
      "bool DetectFlipped(VehicleFlippedContext ctx)",
      "void OnUpdate( float dt )",
      "void EEKilled(Object killer)",
      "void OnContact( string zoneName, vector localPos, IEntity other, Contact data )",
      "void CheckContactCache()",
      "void DamageCrew(float dmg)",
      "float OnSound( CarSoundCtrl ctrl, float oldValue )",
      "void OnAnimationPhaseStarted(string animSource, float phase)",
      "void HandleDoorsSound(string animSource, float phase)",
      "void HandleSeatAdjustmentSound(string animSource, float phase)",
      "void HandleCarHornSound(ECarHornState pState)",
      "void HandleEngineSound(CarEngineSoundState state)",
      "void HandleByCrewMemberState(ECrewMemberState state)",
      "float GetEnviroHeatComfortOverride()",
      "void OnFluidChanged(CarFluid fluid, float newValue, float oldValue)",
      "bool OnBeforeEngineStart()",
      "bool CheckOperationalState()",
      "void OnGearChanged(int newGear, int oldGear)",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "bool OnBeforeSwitchLights( bool toOn )",
      "bool IsScriptedLightsOn()",
      "void ToggleHeadlights()",
      "void UpdateLights(int new_gear = -1)",
      "void UpdateLightsClient(int newGear = -1)",
      "void UpdateLightsServer(int newGear = -1)",
      "void BrakesRearLight()",
      "void ReverseRearLight()",
      "void BrakeAndReverseRearLight()",
      "void NoRearLight()",
      "void LeftFrontLightShineOn()",
      "void RightFrontLightShineOn()",
      "void LeftFrontLightShineOff()",
      "void RightFrontLightShineOff()",
      "void ReverseLightsShineOn()",
      "void ReverseLightsShineOff()",
      "void BrakeLightsShineOn()",
      "void BrakeLightsShineOff()",
      "void TailLightsShineOn()",
      "void TailLightsShineOff()",
      "void DashboardShineOn()",
      "void DashboardShineOff()",
      "void CheckVitalItem( bool isVital, string itemName )",
      "void LeakFluid(CarFluid fluid)",
      "void CarPartsHealthCheck()",
      "bool GetCrashLightSound()",
      "void SynchCrashLightSound(bool play)",
      "void PlayCrashLightSound()",
      "bool GetCrashHeavySound()",
      "void SynchCrashHeavySound(bool play)",
      "void PlayCrashHeavySound()",
      "void PlaySoundEx(string soundset, EffectSound sound, out bool soundbool)",
      "void PlaySound(string soundset, EffectSound sound, out bool soundbool)",
      "string GetAnimSourceFromSelection( string selection )",
      "string GetDoorConditionPointFromSelection( string selection )",
      "string GetDoorSelectionNameFromSeatPos(int posIdx)",
      "string GetDoorInvSlotNameFromSeatPos(int posIdx)",
      "int GetCrewIndex( string selection )",
      "bool CanReachSeatFromDoors( string pSeatSelection, vector pFromPos, float pDistance = 1.0 )",
      "bool IsVitalCarBattery()",
      "bool IsVitalTruckBattery()",
      "bool IsVitalGlowPlug()",
      "bool IsVitalEngineBelt()",
      "bool IsVitalRadiator()",
      "bool IsVitalFuelTank()",
      "bool HasRadiator()",
      "bool IsMoving()",
      "bool IsHandbrakeActive()",
      "int Get3rdPersonCameraType()",
      "void SetEngineStarted(bool started)",
      "int GetCarDoorsState(string slotType)",
      "string GetActionCompNameCoolant()",
      "float GetActionDistanceCoolant()",
      "string GetActionCompNameOil()",
      "float GetActionDistanceOil()",
      "string GetActionCompNameBrakes()",
      "float GetActionDistanceBrakes()",
      "bool CanPutIntoHands(EntityAI parent)",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "void SetActions()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)",
      "bool IsInventoryVisible()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void EEOnCECreate()",
      "void ForceUpdateLightsStart()",
      "void ForceUpdateLightsEnd()",
      "float GetBatteryConsumption()",
      "float GetBatteryRuntimeConsumption()",
      "float GetBatteryRechargeRate()",
      "void SetCarHornState(int pState)",
      "void SetCarEngineSoundState(CarEngineSoundState pState)",
      "void GenerateCarHornAINoise(int pState)",
      "float GetPushForceCoefficientMultiplier()",
      "string GetDebugText()",
      "void SpawnUniversalParts()",
      "void SpawnAdditionalItems()",
      "void FillUpCarFluids()"
    ]
  },
  "HelicopterScript": {
    "parent": "HelicopterAuto",
    "methods": [
      "void HelicopterScript()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "bool OnBeforeEngineStart()",
      "void OnEngineStart()",
      "void OnEngineStop()"
    ]
  },
  "BushSoft_b_betulaHumilis_1s": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_corylusAvellana_1f": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_crataegusLaevigata_1s": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_PiceaAbies_1f": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_quercusRobur_1f": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_rosaCanina_1s": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_rosaCanina_2s": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_sambucusNigra_1s": {
    "parent": null,
    "methods": []
  },
  "BushSoft_t_PinusSylvestris_1s": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_betulaNana_1s_summer": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_corylusHeterophylla_1s_summer": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_FagusSylvatica_1f_summer": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_rosaCanina_1s_summer": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_rosaCanina_2s_summer": {
    "parent": null,
    "methods": []
  },
  "BushSoft_b_PiceaAbies_1f_summer": {
    "parent": null,
    "methods": []
  },
  "BushSoft_t_PinusSylvestris_1s_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_BetulaPendula_1f": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_corylusAvellana_2s": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_crataegusLaevigata_2s": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_naked_2s": {
    "parent": null,
    "methods": []
  },
  "BushHard_t_quercusRobur_1fb": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_caraganaArborescens_2s_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_corylusHeterophylla_2s_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_prunusSpinosa_1s": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_prunusSpinosa_2s": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_prunusSpinosa_1s_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_prunusSpinosa_2s_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_sambucusNigra_2s": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_sambucusNigra_2s_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_PiceaAbies_1fb": {
    "parent": null,
    "methods": []
  },
  "BushHard_t_PiceaAbies_1s": {
    "parent": null,
    "methods": []
  },
  "BushHard_t_PiceaAbies_1sb": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_PiceaAbies_1fb_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_t_PiceaAbies_1sb_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_t_PiceaAbies_1s_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_t_PinusSylvestris_1f": {
    "parent": null,
    "methods": []
  },
  "BushHard_t_PinusSylvestris_1f_summer": {
    "parent": null,
    "methods": []
  },
  "BushHard_b_FagusSylvatica_1f": {
    "parent": null,
    "methods": []
  },
  "BushHard_t_FagusSylvatica_1fb": {
    "parent": null,
    "methods": []
  },
  "BushHard_t_FagusSylvatica_1fb_summer": {
    "parent": null,
    "methods": []
  },
  "ChristmasTree": {
    "parent": "House",
    "methods": [
      "void ChristmasTree()",
      "void EEInit()",
      "void EEDelete(EntityAI parent)"
    ]
  },
  "ChristmasTree_Green": {
    "parent": "ChristmasTree",
    "methods": []
  },
  "TreeHard_BetulaPendula": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_BetulaPendula_Base": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendula_1f": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendula_1fb": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendula_1s": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendula_2f": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendula_2fb": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendula_2fc": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendula_2w": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_1f": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_1fc": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_1fd": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_1s": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb_Trail_B": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb_Trail_G": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb_Trail_R": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb_Trail_Y": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FraxinusExcelsior_2w": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_malusDomestica_1s": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_malusDomestica_2s": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_malusDomestica_3s": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_PiceaAbies_1f": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_PiceaAbies_2sb": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_populusAlba_1f": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_pyrusCommunis_2s": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_quercusRobur_1f": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_quercusRobur_1fc": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_quercusRobur_1fd": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_quercusRobur_1s": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_quercusRobur_2fb": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_quercusRobur_2fc": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_robiniaPseudoacacia_1f": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_town_1s": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_town_1sb": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_LarixDecidua_1f": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_LarixDecidua_1s": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendulaE_1s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendulaE_2f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_BetulaPendulaE_2w_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_1fc_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_1fd_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_1f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_1s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb_Trail_B_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb_Trail_G_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb_Trail_R_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_FagusSylvatica_2sb_Trail_Y_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_malusDomestica_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_malusDomestica_3s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_PiceaAbies_1f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_PiceaAbies_2sb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_pyrusCommunis_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_LarixDecidua_1f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeSoft_t_LarixDecidua_1s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_BetulaPendula_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_BetulaPendula_3f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_BetulaPendula_3fb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_BetulaPendula_3fc": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_BetulaPendula_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_carpinus_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_1fe": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2d": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2fb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2fc": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_3d": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_3f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_3fb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FraxinusExcelsior_2f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FraxinusExcelsior_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FraxinusExcelsior_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_juglansRegia_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_juglansRegia_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_2f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_2fb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_3f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_3fb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_naked_1s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_naked_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_piceaabies_2d": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_2f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_2fb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_piceaabies_3d": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f_Trail_B": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f_Trail_G": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f_Trail_R": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f_Trail_Y": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_2f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_2fb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_2sb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3d": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3fb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3fc": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_populusAlba_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_populusAlba_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_populusNigra_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_prunusDomestica_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_pyrusCommunis_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_pyrusCommunis_3sb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_2d": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_2f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_2sb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_2sc": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_3d": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_3f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_3fb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_3s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_quercusRobur_3sb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_robiniaPseudoacacia_2f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_robiniaPseudoacacia_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_robiniaPseudoacacia_3f": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_salixAlba_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_salixAlba_2sb": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_salixAlba_2sb_swamp": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_sorbus_2s": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_acer_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_BetulaPendulaE_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_BetulaPendulaE_3f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_BetulaPendulaE_3s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvaticaE_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvaticaE_3f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_3f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_1fe_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2d_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2fb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2fc_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_3d_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_3fb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_FagusSylvatica_3s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_juglansRegia_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_juglansRegia_3s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_2fb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_2f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f_Trail_B_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f_Trail_G_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f_Trail_R_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3f_Trail_Y_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PiceaAbies_3s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_2f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_2fb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_2sb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3d_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3fb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3fc_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_PinusSylvestris_3s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_populusNigra_3sb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_pyrusCommunis_3s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_salixAlba_2sb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_sorbus_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_2f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_2fb_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_2s_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_3f_summer": {
    "parent": null,
    "methods": []
  },
  "TreeHard_t_LarixDecidua_3fb_summer": {
    "parent": null,
    "methods": []
  },
  "PluginAdminLog": {
    "parent": "PluginBase",
    "methods": [
      "static int GetPlayerListTimer()",
      "void PluginAdminLog()",
      "void LogPrint( string message )",
      "string GetPlayerPrefix( PlayerBase player, PlayerIdentity identity )",
      "string GetHitMessage( TotalDamageResult damageResult, int component, string zone, string ammo)",
      "void PlayerKilled( PlayerBase player, Object source )",
      "void PlayerKilledByDrowningUncon(PlayerBase player)",
      "void PlayerKilledByRespawn(PlayerBase player)",
      "void PlayerKilledByDisconnect(PlayerBase player)",
      "void PlayerHitBy( TotalDamageResult damageResult, int damageType, PlayerBase player, EntityAI source, int component, string dmgZone, string ammo )",
      "void UnconStart( PlayerBase player )",
      "void UnconStop( PlayerBase player )",
      "void OnPlacementComplete( Man player, ItemBase item )",
      "void OnContinouousAction( ActionData action_data )",
      "void OnEmote(PlayerBase player, EmoteBase emote)",
      "void Suicide( PlayerBase player )",
      "void BleedingOut( PlayerBase player )",
      "void TotemFlagChange(bool top, notnull PlayerBase player, notnull EntityAI totem)",
      "void PlayerList()",
      "void PlayerTeleportedLog(notnull PlayerBase player, vector startPos, vector targetPos, string reason)",
      "void DirectAdminLogPrint(string str)"
    ]
  },
  "PluginCameraTools": {
    "parent": "PluginBase",
    "methods": [
      "void OnInit()",
      "void ToggleCameraTools()",
      "void CursorHide()",
      "void CursorShow()",
      "void Save()",
      "void PlayPause()",
      "void AddKeyframe()",
      "void DeleteKeyframe()"
    ]
  },
  "PluginConfigViewer": {
    "parent": "PluginBase",
    "methods": [
      "void PluginConfigViewer()",
      "string MakeTabs( int count, bool inheritance = false )",
      "string GetOnlyChildPath( string config_class_path, string class_path )",
      "string GetBaseClassPath( string config_class_path, string class_path, string config_class )",
      "string GetBaseClassPathCombined( string child_path, string base_class )",
      "string GetBaseClassPathRecursive( string config_class_path, string class_path, string config_class )",
      "bool ContainsFirstClass( string config_class_path, string class_path )",
      "string GetBaseClasses(string path, string item)"
    ]
  },
  "DayZCreatureAnimScriptDebug": {
    "parent": null,
    "methods": [
      "void SetCreature(DayZCreature creature)",
      "int GetVariableCount()",
      "string GetVariableName(int index)",
      "int GetVariableType(int index)",
      "int GetVariableInt(int index)",
      "float GetVariableFloat(int index)",
      "bool GetVariableBool(int index)",
      "int SetVariableInt(int index, int value)",
      "float SetVariableFloat(int index, float value)",
      "bool SetVariableBool(int index, bool value)",
      "int GetCommandCount()",
      "string GetCommandName(int index)",
      "int GetCommandID(int index)",
      "void ActivateCommand(int index, int userInt, float userFloat)",
      "void OnAnimationEventsStart()",
      "void OnAnimationEvent(string evType, int userInt, string userString)",
      "void OnAnimationPrediction(string predName)",
      "void OnAnimationTag(string tagName)",
      "void PluginDayZCreatureAIDebug()",
      "void OnInit()",
      "void OnDestroy()",
      "void CheckShowMode()",
      "void OnUpdate(float delta_time)",
      "string GetStrValue(int index)",
      "string GetStrValueType(int index)",
      "void InitDebugObject(Object obj)",
      "void ReleaseDebugObject()",
      "void SetValueInt(int index, int value)",
      "void SetValueFloat(int index, float value)",
      "void SetValueBool(int index, bool value)",
      "void ActivateCommand(int commandIdx, int userInt, float userFloat)",
      "void EnableAI(bool enable)",
      "void OnGUI_Variables()",
      "void OnGUI_VariablesEdit()",
      "void OnGUI_CommandsEdit()",
      "void OnGUI_AIControlEdit()",
      "void OnGUI_BulkSet()",
      "void OnGUI_AnimEvents()",
      "void OnGUI(bool show)",
      "void OnGUITimer()",
      "void SetDebugShowMode(int mode)",
      "void Show()",
      "void Hide()",
      "void Event_OnClick()",
      "void GUIAction_InitDebugObject(Object obj)",
      "void GUIAction_CreateShadow()",
      "void GUIAction_UpdateSimulationPrecision(int simLOD)",
      "void GUIAction_ReleaseDebugObject()",
      "void GUIAction_SetValue(int index, string strVal)",
      "void GUIAction_ActivateCommand(int commandIdx, int userInt, float userFloat)",
      "void GUIAction_EnableAI(bool enable)",
      "void SendSyncMessages()",
      "void OnRpc(PlayerBase player, int rpc_type, ParamsReadContext ctx)",
      "void SyncReceiveMessage(ParamsReadContext ctx)",
      "void SyncInitDebugObject(Object obj)",
      "void SyncReceiveInitDebugObject(ParamsReadContext ctx)",
      "void SyncReleaseDebugObject()",
      "void SyncReceiveReleaseDebugObject(ParamsReadContext ctx)",
      "void SyncSetValueInt(int index, int value)",
      "void SyncReceiveValueInt(ParamsReadContext ctx)",
      "void SyncSetValueFloat(int index, float value)",
      "void SyncReceiveValueFloat(ParamsReadContext ctx)",
      "void SyncSetValueBool(int index, bool value)",
      "void SyncReceiveValueBool(ParamsReadContext ctx)",
      "void SyncActivateCommand(int commandIdx, int userInt, float userFloat)",
      "void SyncReceiveActivateCommand(ParamsReadContext ctx)",
      "void SyncEnableAI(bool enable)",
      "void SyncReceiveEnableAI(ParamsReadContext ctx)",
      "void SyncReceiveDisableAI(ParamsReadContext ctx)"
    ]
  },
  "PluginDayZCreatureAIDebug": {
    "parent": "PluginBase",
    "methods": [
      "void PluginDayZCreatureAIDebug()",
      "void OnInit()",
      "void OnDestroy()",
      "void CheckShowMode()",
      "void OnUpdate(float delta_time)",
      "string GetStrValue(int index)",
      "string GetStrValueType(int index)",
      "void InitDebugObject(Object obj)",
      "void ReleaseDebugObject()",
      "void SetValueInt(int index, int value)",
      "void SetValueFloat(int index, float value)",
      "void SetValueBool(int index, bool value)",
      "void ActivateCommand(int commandIdx, int userInt, float userFloat)",
      "void EnableAI(bool enable)",
      "void OnGUI_Variables()",
      "void OnGUI_VariablesEdit()",
      "void OnGUI_CommandsEdit()",
      "void OnGUI_AIControlEdit()",
      "void OnGUI_BulkSet()",
      "void OnGUI_AnimEvents()",
      "void OnGUI(bool show)",
      "void OnGUITimer()",
      "void SetDebugShowMode(int mode)",
      "void Show()",
      "void Hide()",
      "void Event_OnClick()",
      "void GUIAction_InitDebugObject(Object obj)",
      "void GUIAction_CreateShadow()",
      "void GUIAction_UpdateSimulationPrecision(int simLOD)",
      "void GUIAction_ReleaseDebugObject()",
      "void GUIAction_SetValue(int index, string strVal)",
      "void GUIAction_ActivateCommand(int commandIdx, int userInt, float userFloat)",
      "void GUIAction_EnableAI(bool enable)",
      "void SendSyncMessages()",
      "void OnRpc(PlayerBase player, int rpc_type, ParamsReadContext ctx)",
      "void SyncReceiveMessage(ParamsReadContext ctx)",
      "void SyncInitDebugObject(Object obj)",
      "void SyncReceiveInitDebugObject(ParamsReadContext ctx)",
      "void SyncReleaseDebugObject()",
      "void SyncReceiveReleaseDebugObject(ParamsReadContext ctx)",
      "void SyncSetValueInt(int index, int value)",
      "void SyncReceiveValueInt(ParamsReadContext ctx)",
      "void SyncSetValueFloat(int index, float value)",
      "void SyncReceiveValueFloat(ParamsReadContext ctx)",
      "void SyncSetValueBool(int index, bool value)",
      "void SyncReceiveValueBool(ParamsReadContext ctx)",
      "void SyncActivateCommand(int commandIdx, int userInt, float userFloat)",
      "void SyncReceiveActivateCommand(ParamsReadContext ctx)",
      "void SyncEnableAI(bool enable)",
      "void SyncReceiveEnableAI(ParamsReadContext ctx)",
      "void SyncReceiveDisableAI(ParamsReadContext ctx)"
    ]
  },
  "PluginDayZInfectedDebugUIHandler": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void PluginDayZInfectedDebugAttackDesc(string pName, int pValue)",
      "void PluginDayZInfectedDebug()",
      "void ToggleDebugWindowEvent()",
      "void ToggleDebugWindowSetMode(int pMode)",
      "void CaptureFocus()",
      "void ReleaseFocus()",
      "void Show()",
      "void Hide()",
      "void ShowWidgets(bool show)",
      "void OnUpdate(float delta_time)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void ShowCard(int pCard)",
      "void ResetValues()",
      "void SpawnNewInfectedEntity()",
      "void PossesInfected()",
      "void CommandHandler(DayZInfected infected)",
      "void Tick()",
      "void InitAttacks()",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "PluginDayZInfectedDebugAttackDesc": {
    "parent": null,
    "methods": [
      "void PluginDayZInfectedDebugAttackDesc(string pName, int pValue)",
      "void PluginDayZInfectedDebug()",
      "void ToggleDebugWindowEvent()",
      "void ToggleDebugWindowSetMode(int pMode)",
      "void CaptureFocus()",
      "void ReleaseFocus()",
      "void Show()",
      "void Hide()",
      "void ShowWidgets(bool show)",
      "void OnUpdate(float delta_time)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void ShowCard(int pCard)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void ResetValues()",
      "void SpawnNewInfectedEntity()",
      "void PossesInfected()",
      "void CommandHandler(DayZInfected infected)",
      "void Tick()",
      "void InitAttacks()",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "PluginDayZInfectedDebug": {
    "parent": "PluginBase",
    "methods": [
      "void PluginDayZInfectedDebug()",
      "void ToggleDebugWindowEvent()",
      "void ToggleDebugWindowSetMode(int pMode)",
      "void CaptureFocus()",
      "void ReleaseFocus()",
      "void Show()",
      "void Hide()",
      "void ShowWidgets(bool show)",
      "void OnUpdate(float delta_time)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void ShowCard(int pCard)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void ResetValues()",
      "void SpawnNewInfectedEntity()",
      "void PossesInfected()",
      "void CommandHandler(DayZInfected infected)",
      "void Tick()",
      "void InitAttacks()",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "PluginDayzPlayerDebugUserData": {
    "parent": null,
    "methods": [
      "void PluginDayzPlayerDebugUserData(string name, int category, int pUserData, bool pFullBody, int pStanceMask = -1)",
      "int GetInt()",
      "bool IsFullBody()",
      "int GetStanceMask()",
      "int GetCategory()",
      "string GetName()",
      "string GetNameUnique()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void PluginDayzPlayerActionCallback()",
      "void OnFinish(bool pCanceled)",
      "bool CancelCondition()",
      "void OnAnimationEvent(int pEventID)",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void PluginDayzPlayerDebug()",
      "void CreateTypeNameMapping()",
      "void RegisterDebugItem(ItemBase item, PlayerBase player)",
      "bool IsActive()",
      "void ShowWidgets(bool show)",
      "void Show()",
      "void Hide()",
      "void CaptureFocus()",
      "void ReleaseFocus()",
      "void ToggleDebugWindowEvent()",
      "void ToggleDebugWindowEventOld()",
      "void ToggleDebugWindowEventP()",
      "void ToggleDebugWindowSetMode(int pMode)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void ShowCard(int pCard)",
      "void Tick()",
      "void UpdatePlayerStatus(DayZPlayer pPlayer)",
      "void DbgShowBoneName(DayZPlayer pPlayer)",
      "void UpdateCommandModifiers(DayZPlayer pPlayer)",
      "void DisplayActions(int pType)",
      "void Actions_Start()",
      "void Actions_DoInternalCommand(int pCommandId)",
      "void Actions_DoCancel()",
      "void Actions_UpdateGlobals(DayZPlayer pPlayer)",
      "void PlayerSyncCreate()",
      "void PlayerSyncDelete()",
      "void UpdateItemAccessor(DayZPlayer pPlayer)",
      "bool IsWeaponChange(out string pNewWeapon, out int pHideSlot, out int pShowSlot)",
      "void CommandHandler()",
      "void RegisterAnimation(string name, int category, int pUserData, bool pFullBody, int pStanceMask = -1)",
      "void RegisterAnimations()"
    ]
  },
  "PluginDayzPlayerDebugUIHandler": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void PluginDayzPlayerActionCallback()",
      "void OnFinish(bool pCanceled)",
      "bool CancelCondition()",
      "void OnAnimationEvent(int pEventID)",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void PluginDayzPlayerDebug()",
      "void CreateTypeNameMapping()",
      "void RegisterDebugItem(ItemBase item, PlayerBase player)",
      "bool IsActive()",
      "void ShowWidgets(bool show)",
      "void Show()",
      "void Hide()",
      "void CaptureFocus()",
      "void ReleaseFocus()",
      "void ToggleDebugWindowEvent()",
      "void ToggleDebugWindowEventOld()",
      "void ToggleDebugWindowEventP()",
      "void ToggleDebugWindowSetMode(int pMode)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void ShowCard(int pCard)",
      "void Tick()",
      "void UpdatePlayerStatus(DayZPlayer pPlayer)",
      "void DbgShowBoneName(DayZPlayer pPlayer)",
      "void UpdateCommandModifiers(DayZPlayer pPlayer)",
      "void DisplayActions(int pType)",
      "void Actions_Start()",
      "void Actions_DoInternalCommand(int pCommandId)",
      "void Actions_DoCancel()",
      "void Actions_UpdateGlobals(DayZPlayer pPlayer)",
      "void PlayerSyncCreate()",
      "void PlayerSyncDelete()",
      "void UpdateItemAccessor(DayZPlayer pPlayer)",
      "bool IsWeaponChange(out string pNewWeapon, out int pHideSlot, out int pShowSlot)",
      "void CommandHandler()",
      "void RegisterAnimation(string name, int category, int pUserData, bool pFullBody, int pStanceMask = -1)",
      "void RegisterAnimations()"
    ]
  },
  "PluginDayzPlayerActionCallback": {
    "parent": "HumanCommandActionCallback",
    "methods": [
      "void PluginDayzPlayerActionCallback()",
      "void OnFinish(bool pCanceled)",
      "bool CancelCondition()",
      "void OnAnimationEvent(int pEventID)",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void PluginDayzPlayerDebug()",
      "void CreateTypeNameMapping()",
      "void RegisterDebugItem(ItemBase item, PlayerBase player)",
      "bool IsActive()",
      "void ShowWidgets(bool show)",
      "void Show()",
      "void Hide()",
      "void CaptureFocus()",
      "void ReleaseFocus()",
      "void ToggleDebugWindowEvent()",
      "void ToggleDebugWindowEventOld()",
      "void ToggleDebugWindowEventP()",
      "void ToggleDebugWindowSetMode(int pMode)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void ShowCard(int pCard)",
      "void Tick()",
      "void UpdatePlayerStatus(DayZPlayer pPlayer)",
      "void DbgShowBoneName(DayZPlayer pPlayer)",
      "void UpdateCommandModifiers(DayZPlayer pPlayer)",
      "void DisplayActions(int pType)",
      "void Actions_Start()",
      "void Actions_DoInternalCommand(int pCommandId)",
      "void Actions_DoCancel()",
      "void Actions_UpdateGlobals(DayZPlayer pPlayer)",
      "void PlayerSyncCreate()",
      "void PlayerSyncDelete()",
      "void UpdateItemAccessor(DayZPlayer pPlayer)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool IsWeaponChange(out string pNewWeapon, out int pHideSlot, out int pShowSlot)",
      "void CommandHandler()",
      "void RegisterAnimation(string name, int category, int pUserData, bool pFullBody, int pStanceMask = -1)",
      "void RegisterAnimations()"
    ]
  },
  "PluginDayzPlayerDebug": {
    "parent": "PluginBase",
    "methods": [
      "void PluginDayzPlayerDebug()",
      "void CreateTypeNameMapping()",
      "void RegisterDebugItem(ItemBase item, PlayerBase player)",
      "bool IsActive()",
      "void ShowWidgets(bool show)",
      "void Show()",
      "void Hide()",
      "void CaptureFocus()",
      "void ReleaseFocus()",
      "void ToggleDebugWindowEvent()",
      "void ToggleDebugWindowEventOld()",
      "void ToggleDebugWindowEventP()",
      "void ToggleDebugWindowSetMode(int pMode)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void ShowCard(int pCard)",
      "void Tick()",
      "void UpdatePlayerStatus(DayZPlayer pPlayer)",
      "void DbgShowBoneName(DayZPlayer pPlayer)",
      "void UpdateCommandModifiers(DayZPlayer pPlayer)",
      "void DisplayActions(int pType)",
      "void Actions_Start()",
      "void Actions_DoInternalCommand(int pCommandId)",
      "void Actions_DoCancel()",
      "void Actions_UpdateGlobals(DayZPlayer pPlayer)",
      "void PlayerSyncCreate()",
      "void PlayerSyncDelete()",
      "void UpdateItemAccessor(DayZPlayer pPlayer)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool IsWeaponChange(out string pNewWeapon, out int pHideSlot, out int pShowSlot)",
      "void CommandHandler()",
      "void RegisterAnimation(string name, int category, int pUserData, bool pFullBody, int pStanceMask = -1)",
      "void RegisterAnimations()"
    ]
  },
  "PluginDayzPlayerDebug_Ctrl": {
    "parent": null,
    "methods": [
      "void PluginDayzPlayerDebug_Ctrl(Widget pMainWnd)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void CommandHandler()"
    ]
  },
  "PluginDayzPlayerDebug_OtherCmds": {
    "parent": null,
    "methods": [
      "void PluginDayzPlayerDebug_OtherCmds(Widget pMainWnd)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void CommandHandler()",
      "void Death_Start()",
      "void Hit_Start()",
      "void Uncon_Start()",
      "void Uncon_End()"
    ]
  },
  "PluginDayzPlayerWeaponsDebugUserData": {
    "parent": null,
    "methods": [
      "void PluginDayzPlayerWeaponsDebugUserData(int pAction, int pActionType)",
      "int GetAction()",
      "int GetActionType()",
      "void PluginDayzPlayerDebug_AbilityConfig(string pName, int pAction, int pActionT)",
      "int FindAbilityConfig(int pAction, int pActionT)",
      "void PluginDayzPlayerDebug_Weapons(Widget pMainWnd)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void Tick()",
      "void WeaponsInit(Weapon_Base w)",
      "void WeaponsStartAction()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool IsWeaponChange(out string pNewWeapon, out int pHideSlot, out int pShowSlot)",
      "void CommandHandler()"
    ]
  },
  "PluginDayzPlayerDebug_AbilityConfig": {
    "parent": null,
    "methods": [
      "void PluginDayzPlayerDebug_AbilityConfig(string pName, int pAction, int pActionT)",
      "int FindAbilityConfig(int pAction, int pActionT)",
      "void PluginDayzPlayerDebug_Weapons(Widget pMainWnd)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void Tick()",
      "void WeaponsInit(Weapon_Base w)",
      "void WeaponsStartAction()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool IsWeaponChange(out string pNewWeapon, out int pHideSlot, out int pShowSlot)",
      "void CommandHandler()"
    ]
  },
  "PluginDayzPlayerDebug_Weapons": {
    "parent": null,
    "methods": [
      "int FindAbilityConfig(int pAction, int pActionT)",
      "void PluginDayzPlayerDebug_Weapons(Widget pMainWnd)",
      "void CreateModuleWidgets()",
      "void DestroyModuleWidgets()",
      "void Tick()",
      "void WeaponsInit(Weapon_Base w)",
      "void WeaponsStartAction()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool IsWeaponChange(out string pNewWeapon, out int pHideSlot, out int pShowSlot)",
      "void CommandHandler()"
    ]
  },
  "PluginDeveloper": {
    "parent": "PluginBase",
    "methods": [
      "void TeleportAtCursor()",
      "void Teleport(PlayerBase player, vector position)",
      "void SetDirection(PlayerBase player, vector direction)",
      "void ToggleFreeCameraBackPos()",
      "void ToggleFreeCamera()",
      "bool IsEnabledFreeCamera()",
      "void PluginDeveloper()",
      "void OnInit()",
      "void OnRPC(PlayerBase player, int rpc_type, ParamsReadContext ctx)",
      "void PrintLogClient(string msg_log)",
      "void SendServerLogToClient(string msg)",
      "void OnRPCSyncSceneObject( ParamsReadContext ctx )",
      "void OnRPCPluginDayzCreatureDebug(PlayerBase player, int rpc_type, ParamsReadContext ctx)",
      "void HandleSetTime(PlayerBase player, ParamsReadContext ctx)",
      "void HandlePresetSpawn(PlayerBase player, string presetName, EntityAI target)",
      "void OnRPCServerLogRecieved(ParamsReadContext ctx)",
      "void OnRPCClearInventory(PlayerBase player)",
      "void OnRPCSpawnEntityOnCursorDir(PlayerBase player, ParamsReadContext ctx)",
      "void OnRPCSpawnEntityOnGround(PlayerBase player, ParamsReadContext ctx)",
      "void OnRPCSpawnEntityOnGroundPatternGrid(PlayerBase player, ParamsReadContext ctx)",
      "void OnRPCSpawnEntity(PlayerBase player, ParamsReadContext ctx)",
      "void OnSetFreeCameraEvent( PlayerBase player, FreeDebugCamera camera )",
      "void OnSpawnErrorReport(string name)",
      "void SetupSpawnedEntity(PlayerBase player, EntityAI entity, float health, float quantity = -1, bool special = false, string presetName = )",
      "void SpawnEntityOnGroundPatternGrid( PlayerBase player, string item_name, int count, float health, float quantity, int rows, int columns, float gapRow = 1, float gapColumn = 1, bool special= false, bool withPhysics = false)",
      "void SpawnItemOnCrosshair(notnull PlayerBase player, string itemName, float health, float quantity, float maxDist = 100, bool allowFreeflight = false, bool special = false, bool withPhysics = false)",
      "void ClearInventory(EntityAI entity)",
      "void ToggleHelpScreen()",
      "void ToggleScriptConsole()",
      "void ToggleMissionLoader()",
      "void ScriptHistoryNext()",
      "void ScriptHistoryBack()",
      "bool IsIngame()",
      "bool IsInConsole()",
      "int QuickSortPartition( TStringArray arr, int left, int right )",
      "void QuickSort( TStringArray arr, int left, int right )",
      "void SortStringArray( TStringArray arr )",
      "void ResetGUI()",
      "static void SetDeveloperItemClientEx(notnull Object entity, bool getFocus = false)",
      "void SetDeveloperItemClient()"
    ]
  },
  "RegisterPlayerData": {
    "parent": null,
    "methods": [
      "void RegisterPlayerData()",
      "void PluginDeveloperSync()",
      "void OnInit()",
      "void EnableUpdate( bool enable, int type, PlayerBase player )",
      "void Update()",
      "void SetSystemInBitmask( PlayerBase player, int system_bit, bool state)",
      "bool IsSetSystemInBitmask( PlayerBase player, int system_bit)",
      "void RegisterPlayer( PlayerBase player )",
      "bool IsPlayerRegistered( PlayerBase player )",
      "void OnRPC( PlayerBase player, int rpc_type, ParamsReadContext ctx )",
      "bool GetRPCUpdateState( ParamsReadContext ctx )",
      "int GetRPCModifierID( ParamsReadContext ctx )",
      "void GetRPCModifierLock( ParamsReadContext ctx, out int id, out bool lock )",
      "void SendRPCStats( PlayerBase player )",
      "void OnRPCStats( ParamsReadContext ctx )",
      "void UpdateStatsLocal()",
      "void OnRPCStatSet( ParamsReadContext ctx , PlayerBase player)",
      "bool GetIsTargetChanged()",
      "void SetTargetChanged(bool state)",
      "void SendRPCHealth(PlayerBase player)",
      "void OnRPCHealth(ParamsReadContext ctx , PlayerBase player)",
      "void SetupZoneValues(inout array<ref Param> rpc_params, DamageZoneMap dmgZones, EntityAI target, string healthType, int typeID)",
      "void OnRPCHealthSet( ParamsReadContext ctx , PlayerBase player)",
      "void OnRPCHorticultUpdate( ParamsReadContext ctx , PlayerBase player)",
      "void OnRPCHorticultureSpeed(ParamsReadContext ctx , PlayerBase player)",
      "void SendRPCLevels( PlayerBase player )",
      "void OnRPCLevels( ParamsReadContext ctx )",
      "void SendRPCMods( PlayerBase player )",
      "void SendRPCModsDetail( PlayerBase player )",
      "void OnRPCMods( ParamsReadContext ctx )",
      "void OnRPCModsDetailed( ParamsReadContext ctx )",
      "void RequestDetailedInfo( int id, notnull PlayerBase player)",
      "void ActivateModifier( int id, PlayerBase player = NULL )",
      "void DeactivateModifier( int id, PlayerBase player = NULL )",
      "void LockModifier( int id, bool lock, PlayerBase player = NULL )",
      "bool IsModifierLocked( int id, PlayerBase player = NULL )",
      "void SendRPCTemp( PlayerBase player )",
      "void OnRPCTemp( ParamsReadContext ctx , PlayerBase player)",
      "void SendRPCAgents( PlayerBase player )",
      "void OnRPCAgents(ParamsReadContext ctx)",
      "void SendRPCStomach( PlayerBase player )",
      "void OnRPCStomach( ParamsReadContext ctx )",
      "void CaptureFocus()",
      "void ReleaseFocus()",
      "void ToggleFocus()"
    ]
  },
  "PluginDeveloperSync": {
    "parent": "PluginBase",
    "methods": [
      "void PluginDeveloperSync()",
      "void OnInit()",
      "void EnableUpdate( bool enable, int type, PlayerBase player )",
      "void Update()",
      "void SetSystemInBitmask( PlayerBase player, int system_bit, bool state)",
      "bool IsSetSystemInBitmask( PlayerBase player, int system_bit)",
      "void RegisterPlayer( PlayerBase player )",
      "bool IsPlayerRegistered( PlayerBase player )",
      "void OnRPC( PlayerBase player, int rpc_type, ParamsReadContext ctx )",
      "bool GetRPCUpdateState( ParamsReadContext ctx )",
      "int GetRPCModifierID( ParamsReadContext ctx )",
      "void GetRPCModifierLock( ParamsReadContext ctx, out int id, out bool lock )",
      "void SendRPCStats( PlayerBase player )",
      "void OnRPCStats( ParamsReadContext ctx )",
      "void UpdateStatsLocal()",
      "void OnRPCStatSet( ParamsReadContext ctx , PlayerBase player)",
      "bool GetIsTargetChanged()",
      "void SetTargetChanged(bool state)",
      "void SendRPCHealth(PlayerBase player)",
      "void OnRPCHealth(ParamsReadContext ctx , PlayerBase player)",
      "void SetupZoneValues(inout array<ref Param> rpc_params, DamageZoneMap dmgZones, EntityAI target, string healthType, int typeID)",
      "void OnRPCHealthSet( ParamsReadContext ctx , PlayerBase player)",
      "void OnRPCHorticultUpdate( ParamsReadContext ctx , PlayerBase player)",
      "void OnRPCHorticultureSpeed(ParamsReadContext ctx , PlayerBase player)",
      "void SendRPCLevels( PlayerBase player )",
      "void OnRPCLevels( ParamsReadContext ctx )",
      "void SendRPCMods( PlayerBase player )",
      "void SendRPCModsDetail( PlayerBase player )",
      "void OnRPCMods( ParamsReadContext ctx )",
      "void OnRPCModsDetailed( ParamsReadContext ctx )",
      "void RequestDetailedInfo( int id, notnull PlayerBase player)",
      "void ActivateModifier( int id, PlayerBase player = NULL )",
      "void DeactivateModifier( int id, PlayerBase player = NULL )",
      "void LockModifier( int id, bool lock, PlayerBase player = NULL )",
      "bool IsModifierLocked( int id, PlayerBase player = NULL )",
      "void SendRPCTemp( PlayerBase player )",
      "void OnRPCTemp( ParamsReadContext ctx , PlayerBase player)",
      "void SendRPCAgents( PlayerBase player )",
      "void OnRPCAgents(ParamsReadContext ctx)",
      "void SendRPCStomach( PlayerBase player )",
      "void OnRPCStomach( ParamsReadContext ctx )",
      "void CaptureFocus()",
      "void ReleaseFocus()",
      "void ToggleFocus()"
    ]
  },
  "PluginFileHandler": {
    "parent": "PluginBase",
    "methods": [
      "static bool FileDuplicate(string source_name, string dest_name)",
      "static bool FileDelete(string file)",
      "static void FileRename(string source_name, string dest_name)",
      "void PluginFileHandler()",
      "void OnInit()",
      "string GetFileName()",
      "string GetSubFolderName()",
      "void ClearFileNoSave()",
      "bool LoadFile()",
      "bool SaveFile()",
      "bool IsReadOnly()",
      "void AddText(string text)",
      "void AddNewLineNoSave(string text)"
    ]
  },
  "PluginHorticulture": {
    "parent": "PluginBase",
    "methods": [
      "void PluginHorticulture()",
      "void LoadFromCfg()",
      "string GetPlantType( Object obj )",
      "float GetSurfaceFertility( string surface_type )",
      "bool GiveWormsToPlayer( PlayerBase player, float chance )"
    ]
  },
  "PluginItemDiagnosticEventHandler": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "void PluginItemDiagnostic()",
      "void OnInit()",
      "void SetDragging(bool enable)",
      "void OnDraggingStart()",
      "void OnDraggingEnd()",
      "void RegisterDebugItem(Object item, PlayerBase player)",
      "bool IsActive()",
      "void OnScriptMenuOpened(bool opened)",
      "void ShowWidgets(bool show)",
      "void OnSelectAction(EntityAI ent, int actionId)",
      "void ReleaseFocus()",
      "void ToggleDebugWindowEvent()",
      "void ClearWidgets()",
      "void Tick()",
      "void ClearProperties()",
      "void GeneratePropertiesObject(EntityAI item)",
      "void SendRPC(Object item, PlayerBase player)",
      "void StopWatchRequest(PlayerBase player)",
      "void OnRPC(Object entity, ParamsReadContext ctx)",
      "void FillServerFinalVars(int count, ParamsReadContext ctx, array<ref Param> params )",
      "void InitializeWidgets()",
      "void OnUpdate(float delta_time)",
      "void DisplayAll(EntityAI item, array<ref Param> vars_server, array<ref Param> vars_client, string debug_text_server)",
      "void FillAgentArray(ParamsReadContext ctx, int agents_count)",
      "void UpdateAgentWidget()",
      "void UpdateNumericalVarsWidget(array<ref Param> vars_server, array<ref Param> vars_client)",
      "void PrintOut()",
      "void GetLocalProperties(EntityAI entity, array<ref Param> properties, bool client = false)",
      "int FillWithAgents(ItemBase item, array<ref Param> properties)"
    ]
  },
  "PluginItemDiagnostic": {
    "parent": "PluginDeveloper",
    "methods": [
      "void PluginItemDiagnostic()",
      "void OnInit()",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "void SetDragging(bool enable)",
      "void OnDraggingStart()",
      "void OnDraggingEnd()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "void RegisterDebugItem(Object item, PlayerBase player)",
      "bool IsActive()",
      "void OnScriptMenuOpened(bool opened)",
      "void ShowWidgets(bool show)",
      "void OnSelectAction(EntityAI ent, int actionId)",
      "void ReleaseFocus()",
      "void ToggleDebugWindowEvent()",
      "void ClearWidgets()",
      "void Tick()",
      "void ClearProperties()",
      "void GeneratePropertiesObject(EntityAI item)",
      "void SendRPC(Object item, PlayerBase player)",
      "void StopWatchRequest(PlayerBase player)",
      "void OnRPC(Object entity, ParamsReadContext ctx)",
      "void FillServerFinalVars(int count, ParamsReadContext ctx, array<ref Param> params )",
      "void InitializeWidgets()",
      "void OnUpdate(float delta_time)",
      "void DisplayAll(EntityAI item, array<ref Param> vars_server, array<ref Param> vars_client, string debug_text_server)",
      "void FillAgentArray(ParamsReadContext ctx, int agents_count)",
      "void UpdateAgentWidget()",
      "void UpdateNumericalVarsWidget(array<ref Param> vars_server, array<ref Param> vars_client)",
      "void PrintOut()",
      "void GetLocalProperties(EntityAI entity, array<ref Param> properties, bool client = false)",
      "int FillWithAgents(ItemBase item, array<ref Param> properties)"
    ]
  },
  "PluginKeyBinding": {
    "parent": "PluginBase",
    "methods": [
      "void PluginKeyBinding()",
      "void OnInit()",
      "void OnDestroy()",
      "void OnKeyPress(int key)",
      "void OnKeyRelease(int key)",
      "void OnMouseButtonPress(int button)",
      "void OnMouseButtonRelease(int button)",
      "void OnFrame()",
      "void RegisterKeyBind( int ui_id, int key_code1, int key_code2, string plugin_name, string fnc_name, string info_shortcut, string info_description )",
      "void RegisterMouseBind( int ui_id, int mouse_button, int mouse_event, string plugin_name, string fnc_name, string info_shortcut, string info_description )",
      "bool IsCurrentUIPageValid( int ui_page_request )",
      "bool CheckMask( int source_mask, int target_mask )",
      "void OnMouse( int event_id, int button )",
      "bool IsKeyPressed(int key)"
    ]
  },
  "PluginLifespan": {
    "parent": "PluginBase",
    "methods": [
      "void PluginLifespan()",
      "void LoadFromCfg()",
      "void SynchLifespanVisual( PlayerBase player, int beard_state_visible, bool bloody_hands_visible, bool blood_type_visible, int blood_type )",
      "void ChangeFakePlaytime( PlayerBase player, int change )",
      "void UpdateLifespan(PlayerBase player, bool force_update = false)",
      "void UpdateLifespanLevel( PlayerBase player, float player_beard, bool force_update = false )",
      "void SetPlayerLifespanLevel( PlayerBase player, LifespanLevel level )",
      "void SynchBeardVisual( PlayerBase player, int state )",
      "void UpdateBloodyHandsVisibilityEx( PlayerBase player, eBloodyHandsTypes type )",
      "void UpdateBloodyHandsVisibility( PlayerBase player, bool show )",
      "void SynchBloodyHandsVisual( PlayerBase player, bool has_bloody_hands )",
      "void SetBloodyHandsEx( PlayerBase player, eBloodyHandsTypes type )",
      "void SetBloodyHands( PlayerBase player, bool show )",
      "void SetHandsMaterial( PlayerBase player, int material_type )",
      "bool CanMakeHandsBloody( PlayerBase player )",
      "void UpdateBloodTypeVisibility( PlayerBase player, bool show )",
      "void UpdateBloodType( PlayerBase player, int blood_type )",
      "void SynchShowBloodTypeVisual( PlayerBase player, bool show )",
      "void SynchShowBloodType( PlayerBase player, int blood_type )",
      "string GetCurrentHeadTexture(PlayerBase player)",
      "string GetCurrentHeadMaterial(PlayerBase player)"
    ]
  },
  "PluginMessageManager": {
    "parent": "PluginBase",
    "methods": [
      "void PluginMessageManager()",
      "void Broadcast(int index)",
      "void BroadcastInt(int index, int value)",
      "void BroadcastFloat(int index, float value)",
      "void BroadcastString(int index, string value)",
      "void BroadcastParam(int index, Param params)",
      "void Subscribe(MessageReceiverBase receiver, int index)",
      "void Unsubscribe(MessageReceiverBase receiver, int index)",
      "void UnsubscribeAll(MessageReceiverBase receiver)"
    ]
  },
  "PluginObjectsInteractionManager": {
    "parent": "PluginBase",
    "methods": [
      "void PluginObjectsInteractionManager()",
      "bool IsFree(Object target)",
      "void Lock(Object target)",
      "void Release(Object target)",
      "void Decay()"
    ]
  },
  "PluginPermanentCrossHair": {
    "parent": "PluginBase",
    "methods": [
      "void SwitchPermanentCrossHair(bool state)"
    ]
  },
  "PluginPlayerStatus": {
    "parent": "PluginBase",
    "methods": [
      "void PluginPlayerStatus()",
      "void SetNotifier( int key, int index = 9, string label = , int color =  0xFFFFFFFF )",
      "void DisplayTendency( int key, int tendency, int status = 1 )",
      "void SetBadge( int key, int value )",
      "void SetStamina( int value , int range )",
      "void SetStance( int value  )"
    ]
  },
  "PresenceNotifierNoiseEvent": {
    "parent": null,
    "methods": [
      "void PresenceNotifierNoiseEvent(float pValue, float pLength)",
      "float GetTimerLength()",
      "int GetValue()",
      "void PresenceNotifierNoiseEvents()",
      "void RegisterEvent(EPresenceNotifierNoiseEventType pEventType, int pValue, float pLength)",
      "void ProcessEvent(EPresenceNotifierNoiseEventType pEventType)",
      "void ResetEvent()",
      "void PluginPresenceNotifier()",
      "void Init(PlayerBase player)",
      "void EnableDebug(bool pEnabled)",
      "void ShowCoefsDbg(bool pEnabled)",
      "int GetNoisePresence()",
      "int GetVisualPresence()",
      "int ProcessVisualComponents()",
      "int ProcessNoiseComponents()",
      "float GetMovementSpeedVisualCoef()",
      "float GetMovementStanceVisualCoef()",
      "int GetMovementSpeedNoiseComponent()",
      "int GetBootsNoiseComponent()",
      "int GetSurfaceNoiseComponent()",
      "int GetExternalNoiseEventsComponent()"
    ]
  },
  "PresenceNotifierNoiseEvents": {
    "parent": null,
    "methods": [
      "void PresenceNotifierNoiseEvents()",
      "void RegisterEvent(EPresenceNotifierNoiseEventType pEventType, int pValue, float pLength)",
      "void ProcessEvent(EPresenceNotifierNoiseEventType pEventType)",
      "int GetValue()",
      "void ResetEvent()",
      "void PluginPresenceNotifier()",
      "void Init(PlayerBase player)",
      "void EnableDebug(bool pEnabled)",
      "void ShowCoefsDbg(bool pEnabled)",
      "int GetNoisePresence()",
      "int GetVisualPresence()",
      "int ProcessVisualComponents()",
      "int ProcessNoiseComponents()",
      "float GetMovementSpeedVisualCoef()",
      "float GetMovementStanceVisualCoef()",
      "int GetMovementSpeedNoiseComponent()",
      "int GetBootsNoiseComponent()",
      "int GetSurfaceNoiseComponent()",
      "int GetExternalNoiseEventsComponent()"
    ]
  },
  "PluginPresenceNotifier": {
    "parent": null,
    "methods": [
      "void PluginPresenceNotifier()",
      "void Init(PlayerBase player)",
      "void EnableDebug(bool pEnabled)",
      "void ShowCoefsDbg(bool pEnabled)",
      "int GetNoisePresence()",
      "int GetVisualPresence()",
      "void ProcessEvent(EPresenceNotifierNoiseEventType pEventType)",
      "int ProcessVisualComponents()",
      "int ProcessNoiseComponents()",
      "float GetMovementSpeedVisualCoef()",
      "float GetMovementStanceVisualCoef()",
      "int GetMovementSpeedNoiseComponent()",
      "int GetBootsNoiseComponent()",
      "int GetSurfaceNoiseComponent()",
      "int GetExternalNoiseEventsComponent()"
    ]
  },
  "PluginRecipesManager": {
    "parent": "PluginRecipesManagerBase",
    "methods": [
      "static int GetMaxNumberOfRecipes()",
      "void PluginRecipesManager()",
      "bool IsEnableDebugCrafting()",
      "void SetEnableDebugCrafting(bool enable)",
      "string GetRecipeName(int recipe_id)",
      "int GetValidRecipes(ItemBase item1, ItemBase item2, array<int> ids, PlayerBase player)",
      "int GetValidRecipesProper(int num_of_items, ItemBase items[], array<int> ids, PlayerBase player)",
      "float GetRecipeLengthInSecs(int recipe_id)",
      "float GetRecipeSpecialty(int recipe_id)",
      "bool GetIsInstaRecipe(int recipe_id)",
      "bool GetIsRepeatable(int recipe_id)",
      "void OnInit()",
      "void CallbackGenerateCache()",
      "void GenerateRecipeCache()",
      "void WalkRecipes()",
      "void MatchItems(TStringArray full_path)",
      "bool IsRecipePossibleToPerform(int id, ItemBase itemA, ItemBase itemB, PlayerBase player)",
      "void PerformRecipeServer(int id, ItemBase item_a,ItemBase item_b ,PlayerBase player)",
      "void GenerateHumanReadableRecipeList()",
      "bool RecipeSanityCheck(int num_of_ingredients, InventoryItemBase items[], PlayerBase player)",
      "void RegisterRecipe(RecipeBase recipe)",
      "void UnregisterRecipe(string clasname)",
      "static int RecipeIDFromClassname(string classname)",
      "bool CheckRecipe(int id, ItemBase item1, ItemBase item2, PlayerBase player)",
      "void PrintCache()",
      "bool SortIngredientsInRecipe(int id, int num_of_ingredients, ItemBase ingredients_unsorted[], ItemBase ingredients_sorted[] )",
      "void ClearResults()",
      "bool ResolveIngredients(int num_of_ingredients, int passes = 0)",
      "void PrintResultMasks(int num)",
      "int GetRecipeIntersection(int num_of_ingredients, ItemBase items[])",
      "int SortIngredients(int num_of_ingredients, ItemBase items_unsorted[], int resolved_recipes[])",
      "void CreateAllRecipes()",
      "string GetSoundCategory(int recipeID, ItemBase item1, ItemBase item2)",
      "int GetAnimationCommandUID(int recipeID)"
    ]
  },
  "PluginRepairing": {
    "parent": "PluginBase",
    "methods": [
      "bool Repair(PlayerBase player, ItemBase repair_kit, Object item, float specialty_weight, string damage_zone = , bool use_kit_qty = true)",
      "void CalculateHealth(PlayerBase player, ItemBase kit, Object item, float specialty_weight, string damage_zone = , bool use_kit_qty = true)",
      "bool CanRepair(ItemBase repair_kit, Object item, string damage_zone = )",
      "bool IsRepairValid(int repair_kit_type, int repairable_with_type)",
      "bool CanRepairToPristine(PlayerBase player)",
      "bool CanBeRepairedToPristine(Object item)",
      "float GetKitRepairCost(ItemBase repair_kit, Object item)"
    ]
  },
  "PluginSceneManager": {
    "parent": "PluginBase",
    "methods": [
      "void PluginSceneManager()",
      "void OnInit()",
      "void OnDestroy()",
      "void OnMouseWheel(int wheel)",
      "void OnUIEditorOpened()",
      "void OnUIEditorClosed()",
      "void Event_OnClick()",
      "void Event_OnClickMiddle()",
      "void Event_OnDrag()",
      "void InitLoad()",
      "void RestoreSceneObjectsLinks()",
      "void ExecuteInitScripts()",
      "void EditorToggle()",
      "bool IsOpened()",
      "void SelectClassName(string class_name)",
      "void FreeCameraControlEnable()",
      "void FreeCameraControlDisable()",
      "void DeleteSelectedObject()",
      "void SelectObject(SceneObject obj)",
      "void SelectedObjectDuplicate()",
      "void SelectedObjectSetRot(float dir)",
      "void SelectedObjectSetPosX(float value)",
      "void SelectedObjectSetPosY(float value)",
      "void SelectedObjectSetPosZ(float value)",
      "void SelectedObjectSetDamage(float value)",
      "void SelectedObjectFocus()",
      "void SelectedObjectAddAttachment(string att_name)",
      "void SelectedObjectRemoveAttachment(EntityAI e)",
      "void LinkSceneObjects(SceneObject scene_object1, SceneObject scene_object2)",
      "void UnlinkSceneObjects(SceneObject scene_object1, SceneObject scene_object2)",
      "bool AreSceneObjectsLinked(SceneObject scene_object1, SceneObject scene_object2)",
      "void SetDrawSelection(bool draw)",
      "bool GetDrawSelection()",
      "void SetLoadPlayerPos(bool save)",
      "bool GetLoadPlayerPos()",
      "void SetRotationAngle(int angle)",
      "int GetRotationAngle()",
      "void SceneLoad(string scene_name)",
      "void SceneUnload()",
      "void SceneSave()",
      "bool SceneCanDelete(string scene_name)",
      "bool SceneDelete(string scene_name)",
      "void SceneDuplicate(string scene_name)",
      "void SceneRename(string scene_name, string new_name)",
      "string SceneGetName()",
      "void SetWeather(float overcast, float rain, float fog, float wind_force)",
      "void SetDate( int year, int month, int day, int hour, int minute )",
      "void SelectAndFocusPlayerObject()",
      "void ExecuteEnforceScript( int index, SceneObject scene_object, string script )",
      "void RulerToggle()",
      "bool IsRulerActivated()",
      "void RulerAddPoint()",
      "void RulerClearVisuals()",
      "void RulerDelete()",
      "int GetSelectedSceneObjectIndex()",
      "void DeleteSceneObject(SceneObject obj)",
      "void DeselectObject()",
      "void EditorUpdate()",
      "void SceneEditorMenuCmdRefresh()",
      "void SceneEditorMenuCmdPopup(string message)",
      "void SceneEditorMenuCmdSave()",
      "bool IsMouseInScene()",
      "void EditorUpdateRuler()"
    ]
  },
  "PluginSoundDebug": {
    "parent": "PluginBase",
    "methods": [
      "void OnInit()",
      "void OnUpdate(float delta_time)",
      "void OnDestroy()",
      "void Show()",
      "void Hide()",
      "void OnGUITimer()"
    ]
  },
  "PluginTransmissionAgents": {
    "parent": "PluginBase",
    "methods": [
      "void PluginTransmissionAgents()",
      "void RegisterAgent(AgentBase agent)",
      "void ConstructSimpleAgentList()",
      "static string GetNameByID(int agent_id)",
      "void RemoveAllAgents(EntityAI target)",
      "static void RemoveAgent(EntityAI target, int agent_id )",
      "float GetAgentTransferabilityIn( int agent_id )",
      "bool GrowDuringMedicalDrugsAttack(int agentId, EMedicalDrugsType drugType, PlayerBase player)",
      "float GetAgentDieOffSpeedEx(int agent_id, PlayerBase player)",
      "float GetAgentInvasibilityEx(int agent_id, PlayerBase player)",
      "float GetAgentAntiboticsResistance( int agent_id )",
      "float GetAgentAntiboticsResistanceEx( int agent_id , PlayerBase player)",
      "float GetAgentTransferabilityOut( int agent_id )",
      "float GetAgentTransferabilityAirOut( int agent_id )",
      "float GetAgentInvasibility( int agent_id )",
      "float GetAgentDigestibilityEx(int agent_id, PlayerBase player)",
      "float GetAgentDigestibility( int agent_id )",
      "float GetDieOffSpeed( int agent_id )",
      "static int GetAgentMaxCount( int agent_id )",
      "float TransmitAgentsEx(EntityAI source, EntityAI target, int pathway, int dose_size = 1000, int agents = 0)",
      "void TransmitAgents(EntityAI source, EntityAI target, int pathway, int dose_size = 1000)",
      "void InjectAgentsWithoutPlayer(EntityAI target, int agents)",
      "void InjectAgentsWithPlayer(EntityAI target, int agents,float protection, int dose_size, int inject_type)",
      "void InjectAgentsWithPlayerCount(EntityAI target, int agents,float protection, int dose_size, int inject_type)",
      "float InjectAgentWithPlayerDose(EntityAI target, int agent, float protection, float dose_size, int inject_type)",
      "static void BuildAgentArray(int agents, array<int> agents_out)",
      "static float GetProtectionLevelEx(int type, int slot, Man player, bool consider_filter = true, int system = 0)",
      "float GetProtectionLevel(int type, int slot, Man player)",
      "float CalculateAgentsToTransmit(int agent_id, float protection, int dose_size, int inject_type)",
      "bool DetermineChanceToTransmit(int agent_id, float protection, int inject_type)",
      "bool GrowDuringAntibioticsAttack(int agent_id, PlayerBase player)"
    ]
  },
  "PluginVariables": {
    "parent": "PluginBase",
    "methods": [
      "void PluginVariables()",
      "void RegisterVariable(string name)",
      "string GetName(int id)",
      "int GetID(string name)"
    ]
  },
  "CatchingResultBase": {
    "parent": null,
    "methods": [
      "float RollChanceSeeded()"
    ]
  },
  "BotTrigger": {
    "parent": null,
    "methods": [
      "bool CheckTrigger()",
      "void MyBotTrigger(PlayerBase p)",
      "void Bot(PlayerBase ow)",
      "void SetInstanceType(DayZPlayerInstanceType t)",
      "void Start()",
      "void Stop()",
      "void StartAction(int action)",
      "void OnUpdate(float dt)",
      "void AddTransition(BotStateBase state, int id)",
      "void InitFSM()",
      "bool ProcessEvent(BotEventBase e)",
      "void botDebugPrint(string s)",
      "void botDebugSpam(string s)"
    ]
  },
  "MyBotTrigger": {
    "parent": null,
    "methods": [
      "void MyBotTrigger(PlayerBase p)",
      "bool CheckTrigger()",
      "void Bot(PlayerBase ow)",
      "void SetInstanceType(DayZPlayerInstanceType t)",
      "void Start()",
      "void Stop()",
      "void StartAction(int action)",
      "void OnUpdate(float dt)",
      "void AddTransition(BotStateBase state, int id)",
      "void InitFSM()",
      "bool ProcessEvent(BotEventBase e)",
      "void botDebugPrint(string s)",
      "void botDebugSpam(string s)"
    ]
  },
  "Bot": {
    "parent": null,
    "methods": [
      "void Bot(PlayerBase ow)",
      "void SetInstanceType(DayZPlayerInstanceType t)",
      "void Start()",
      "void Stop()",
      "void StartAction(int action)",
      "void OnUpdate(float dt)",
      "void AddTransition(BotStateBase state, int id)",
      "void InitFSM()",
      "bool ProcessEvent(BotEventBase e)",
      "void botDebugPrint(string s)",
      "void botDebugSpam(string s)"
    ]
  },
  "BotActionBase": {
    "parent": null,
    "methods": [
      "void Action(BotEventBase e)"
    ]
  },
  "BotEventBase": {
    "parent": null,
    "methods": [
      "void BotEventBase(PlayerBase p = NULL, EntityAI e = NULL)",
      "string DumpToString()",
      "void BotEventStartDebug(PlayerBase p = NULL, EntityAI e = NULL, int id = 0)"
    ]
  },
  "BotEventStart": {
    "parent": null,
    "methods": [
      "void BotEventStartDebug(PlayerBase p = NULL, EntityAI e = NULL, int id = 0)",
      "string DumpToString()"
    ]
  },
  "BotEventStop": {
    "parent": null,
    "methods": [
      "void BotEventStartDebug(PlayerBase p = NULL, EntityAI e = NULL, int id = 0)",
      "string DumpToString()"
    ]
  },
  "BotEventEndOK": {
    "parent": null,
    "methods": [
      "void BotEventStartDebug(PlayerBase p = NULL, EntityAI e = NULL, int id = 0)",
      "string DumpToString()"
    ]
  },
  "BotEventEndFail": {
    "parent": null,
    "methods": [
      "void BotEventStartDebug(PlayerBase p = NULL, EntityAI e = NULL, int id = 0)",
      "string DumpToString()"
    ]
  },
  "BotEventEndTimeout": {
    "parent": null,
    "methods": [
      "void BotEventStartDebug(PlayerBase p = NULL, EntityAI e = NULL, int id = 0)",
      "string DumpToString()"
    ]
  },
  "BotEventOnItemInHandsChanged": {
    "parent": null,
    "methods": [
      "void BotEventStartDebug(PlayerBase p = NULL, EntityAI e = NULL, int id = 0)",
      "string DumpToString()"
    ]
  },
  "BotEventStartDebug": {
    "parent": null,
    "methods": [
      "void BotEventStartDebug(PlayerBase p = NULL, EntityAI e = NULL, int id = 0)",
      "string DumpToString()"
    ]
  },
  "BotFSM": {
    "parent": "HFSMBase",
    "methods": []
  },
  "BotGuardBase": {
    "parent": null,
    "methods": [
      "bool GuardCondition(BotEventBase e)",
      "void BotGuardAnd(BotGuardBase arg0 = NULL, BotGuardBase arg1 = NULL)",
      "void BotGuardNot(BotGuardBase arg0 = NULL)",
      "void BotGuardOr(BotGuardBase arg0 = NULL, BotGuardBase arg1 = NULL)",
      "void BotGuardHasItemInHands(Man p = NULL)",
      "bool GuardCondition(HandEventBase e)",
      "void BotGuardDebugEventMatches(BotEventStartDebug e = NULL)"
    ]
  },
  "BotGuardAnd": {
    "parent": "BotGuardBase",
    "methods": [
      "void BotGuardAnd(BotGuardBase arg0 = NULL, BotGuardBase arg1 = NULL)",
      "bool GuardCondition(BotEventBase e)",
      "void BotGuardNot(BotGuardBase arg0 = NULL)",
      "void BotGuardOr(BotGuardBase arg0 = NULL, BotGuardBase arg1 = NULL)",
      "void BotGuardHasItemInHands(Man p = NULL)",
      "bool GuardCondition(HandEventBase e)",
      "void BotGuardDebugEventMatches(BotEventStartDebug e = NULL)"
    ]
  },
  "BotGuardNot": {
    "parent": "BotGuardBase",
    "methods": [
      "void BotGuardNot(BotGuardBase arg0 = NULL)",
      "bool GuardCondition(BotEventBase e)",
      "void BotGuardOr(BotGuardBase arg0 = NULL, BotGuardBase arg1 = NULL)",
      "void BotGuardHasItemInHands(Man p = NULL)",
      "bool GuardCondition(HandEventBase e)",
      "void BotGuardDebugEventMatches(BotEventStartDebug e = NULL)"
    ]
  },
  "BotGuardOr": {
    "parent": "BotGuardBase",
    "methods": [
      "void BotGuardOr(BotGuardBase arg0 = NULL, BotGuardBase arg1 = NULL)",
      "bool GuardCondition(BotEventBase e)",
      "void BotGuardHasItemInHands(Man p = NULL)",
      "bool GuardCondition(HandEventBase e)",
      "void BotGuardDebugEventMatches(BotEventStartDebug e = NULL)"
    ]
  },
  "BotGuardHasItemInHands": {
    "parent": "HandGuardBase",
    "methods": [
      "void BotGuardHasItemInHands(Man p = NULL)",
      "bool GuardCondition(HandEventBase e)",
      "void BotGuardDebugEventMatches(BotEventStartDebug e = NULL)",
      "bool GuardCondition(BotEventBase e)"
    ]
  },
  "BotGuardDebugEventMatches": {
    "parent": "BotGuardBase",
    "methods": [
      "void BotGuardDebugEventMatches(BotEventStartDebug e = NULL)",
      "bool GuardCondition(BotEventBase e)"
    ]
  },
  "BotStateBase": {
    "parent": null,
    "methods": [
      "void BotStateBase(Bot bot = NULL, BotStateBase parent = NULL)",
      "void SetparentState(BotStateBase parent)",
      "bool HasFSM()",
      "bool ProcessEvent(BotEventBase e)",
      "void AddTransition(FSMTransition<BotStateBase, BotEventBase, BotActionBase, BotGuardBase> t)",
      "void OnEntry(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "bool IsWaitingForActionFinish()",
      "bool IsIdle()",
      "void OnSubMachineChanged(BotStateBase src, BotStateBase dst)",
      "void OnStateChanged(BotStateBase src, BotStateBase dst)",
      "void BotStateIdle(Bot bot = NULL, BotStateBase parent = NULL)"
    ]
  },
  "BotStateIdle": {
    "parent": null,
    "methods": [
      "void BotStateIdle(Bot bot = NULL, BotStateBase parent = NULL)",
      "bool IsIdle()"
    ]
  },
  "BotEventHuntedTargetInSight": {
    "parent": null,
    "methods": [
      "void BotHunt(Bot bot = NULL, BotStateBase parent = NULL)",
      "void SelectTarget()",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotEventHuntedTargetLost": {
    "parent": null,
    "methods": [
      "void BotHunt(Bot bot = NULL, BotStateBase parent = NULL)",
      "void SelectTarget()",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotHunt": {
    "parent": "BotStateBase",
    "methods": [
      "void BotHunt(Bot bot = NULL, BotStateBase parent = NULL)",
      "void SelectTarget()",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotHunt_Tracking": {
    "parent": "BotStateBase",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotHunt_Hunting": {
    "parent": "BotStateBase",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotStanceRandomizer": {
    "parent": "BotStateBase",
    "methods": [
      "void BotStanceRandomizer(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotEventEntityAttached": {
    "parent": null,
    "methods": [
      "void BotTestAttachAndDropCycle(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotEventEntityDetached": {
    "parent": null,
    "methods": [
      "void BotTestAttachAndDropCycle(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotTestAttachAndDropCycle": {
    "parent": "BotStateBase",
    "methods": [
      "void BotTestAttachAndDropCycle(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotTestAttachAndDropCycle_Detaching": {
    "parent": "BotStateBase",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotTestAttachAndDropCycle_Attaching": {
    "parent": "BotStateBase",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotTestItemMoveBackAndForth": {
    "parent": "BotStateBase",
    "methods": [
      "void BotTestItemMoveBackAndForth(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)",
      "int GetNextSlot(int curr)"
    ]
  },
  "BotTestItemMoveBackAndForth_MoveFromSlotToSlot": {
    "parent": "BotStateBase",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "int GetNextSlot(int curr)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotTestSwapWithCorpse": {
    "parent": null,
    "methods": [
      "void BotTestSwapInternal(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void BotTestSwapInternalC2H(Bot bot = NULL, BotStateBase parent = NULL)",
      "void BotTestSwapG2H(Bot bot = NULL, BotStateBase parent = NULL)"
    ]
  },
  "BotTestSwapInternal": {
    "parent": null,
    "methods": [
      "void BotTestSwapInternal(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void BotTestSwapInternalC2H(Bot bot = NULL, BotStateBase parent = NULL)",
      "void BotTestSwapG2H(Bot bot = NULL, BotStateBase parent = NULL)"
    ]
  },
  "BotTestSwapInternalC2H": {
    "parent": null,
    "methods": [
      "void BotTestSwapInternalC2H(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void BotTestSwapG2H(Bot bot = NULL, BotStateBase parent = NULL)"
    ]
  },
  "BotTestSwapG2H": {
    "parent": null,
    "methods": [
      "void BotTestSwapG2H(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotTestSpamUserActions_Start": {
    "parent": null,
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnTimeout()",
      "void BotTestSpamUserActions(Bot bot = NULL, BotStateBase parent = NULL)"
    ]
  },
  "BotTestSpamUserActions_GetEntityFromSlot": {
    "parent": null,
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnTimeout()",
      "void BotTestSpamUserActions(Bot bot = NULL, BotStateBase parent = NULL)"
    ]
  },
  "BotTestSpamUserActions": {
    "parent": null,
    "methods": [
      "void BotTestSpamUserActions(Bot bot = NULL, BotStateBase parent = NULL)",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotEventEntityInHands": {
    "parent": null,
    "methods": [
      "void BotSpawnEntityInHands(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)",
      "void Bot_TestSpawnOpen(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "BotSpawnEntityInHands": {
    "parent": "BotStateBase",
    "methods": [
      "void BotSpawnEntityInHands(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)",
      "void Bot_TestSpawnOpen(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "BotEventEntityInHandsOpened": {
    "parent": null,
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpen(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "BotOpenEntityInHands": {
    "parent": "BotStateBase",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpen(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "Bot_TestSpawnOpen": {
    "parent": "BotStateBase",
    "methods": [
      "void Bot_TestSpawnOpen(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(BotEventBase e)",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "BotEventHandsEmpty": {
    "parent": null,
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "BotWaitForEmptyHands": {
    "parent": "BotStateBase",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "BotWaitForChangeInHands": {
    "parent": "BotStateBase",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "BotDropEntityInHands": {
    "parent": "BotWaitForChangeInHands",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "BotEatEntityInHands": {
    "parent": "BotWaitForChangeInHands",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "BotDestroyEntityInHands": {
    "parent": "BotWaitForChangeInHands",
    "methods": [
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "Bot_TestSpawnOpenDrop": {
    "parent": "Bot_TestSpawnOpen",
    "methods": [
      "void Bot_TestSpawnOpenDrop(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "Bot_TestSpawnOpenDestroy": {
    "parent": "Bot_TestSpawnOpen",
    "methods": [
      "void Bot_TestSpawnOpenDestroy(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )"
    ]
  },
  "Bot_TestSpawnOpenEat": {
    "parent": "Bot_TestSpawnOpen",
    "methods": [
      "void Bot_TestSpawnOpenEat(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotEventEntitySpawned": {
    "parent": null,
    "methods": [
      "void BotSpawnDead(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnEntry(BotEventBase e)",
      "void Bot_TestSpawnDeadSelectBury(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void SelectTarget()",
      "void BotPerformAction(Bot bot = NULL, BotStateBase parent = NULL, int action = AT_EAT)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotSpawnDead": {
    "parent": "BotStateBase",
    "methods": [
      "void BotSpawnDead(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnEntry(BotEventBase e)",
      "void Bot_TestSpawnDeadSelectBury(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void SelectTarget()",
      "void BotPerformAction(Bot bot = NULL, BotStateBase parent = NULL, int action = AT_EAT)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "Bot_TestSpawnDeadSelectBury": {
    "parent": "BotStateBase",
    "methods": [
      "void Bot_TestSpawnDeadSelectBury(Bot bot = NULL, BotStateBase parent = NULL, string new_type = )",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void SelectTarget()",
      "void BotPerformAction(Bot bot = NULL, BotStateBase parent = NULL, int action = AT_EAT)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotEventSelectedTarget": {
    "parent": null,
    "methods": [
      "void SelectTarget()",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void BotPerformAction(Bot bot = NULL, BotStateBase parent = NULL, int action = AT_EAT)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotSelectZombieTarget": {
    "parent": "BotStateBase",
    "methods": [
      "void SelectTarget()",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void BotPerformAction(Bot bot = NULL, BotStateBase parent = NULL, int action = AT_EAT)",
      "void OnAbort(BotEventBase e)"
    ]
  },
  "BotPerformAction": {
    "parent": "BotStateBase",
    "methods": [
      "void BotPerformAction(Bot bot = NULL, BotStateBase parent = NULL, int action = AT_EAT)",
      "void OnEntry(BotEventBase e)",
      "void OnAbort(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)"
    ]
  },
  "BotEventWaitTimeout": {
    "parent": null,
    "methods": [
      "void BotTimedWait(Bot bot = NULL, BotStateBase parent = NULL, float timeout = 3.0)",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnTimeout()"
    ]
  },
  "BotTimedWait": {
    "parent": "BotStateBase",
    "methods": [
      "void BotTimedWait(Bot bot = NULL, BotStateBase parent = NULL, float timeout = 3.0)",
      "void OnEntry(BotEventBase e)",
      "void OnExit(BotEventBase e)",
      "void OnUpdate(float dt)",
      "void OnTimeout()"
    ]
  },
  "AttachmentsOutOfReach": {
    "parent": null,
    "methods": [
      "static bool IsAttachmentReachable(EntityAI e, string att_slot_name = , int slot_id = -1, float range = 1.5)"
    ]
  },
  "DeferredEvent": {
    "parent": null,
    "methods": [
      "bool ReserveInventory(HumanInventory inventory)",
      "void ClearInventoryReservation(HumanInventory inventory)",
      "void DeferredTakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "void DeferredSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void DeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void DeferredHandEvent(InventoryMode mode, HandEventBase e)",
      "void DayZPlayerInventory()",
      "bool IsAuthoritative()",
      "bool IsOwner()",
      "bool IsProxy()",
      "void Init()",
      "void CancelHandEvent()",
      "void CancelWeaponEvent()",
      "void AbortWeaponEvent()",
      "void PostWeaponEvent(WeaponEventBase e)",
      "void DeferredWeaponFailed()",
      "void HandleWeaponEvents(float dt, out bool exitIronSights)",
      "void HandleInventory(float dt)",
      "bool OnInventoryJunctureFromServer(ParamsReadContext ctx)",
      "bool OnInventoryJunctureRepairFromServer(ParamsReadContext ctx)",
      "void OnInventoryJunctureFailureFromServer(ParamsReadContext ctx)",
      "void OnInventoryFailure(InventoryCommandType type, InventoryValidationReason reason, InventoryLocation src, InventoryLocation dst)",
      "void OnHandleStoredJunctureData(ParamsReadContext ctx)",
      "void StoreJunctureData(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(ParamsReadContext ctx)",
      "void OnHandleStoredInputUserData(ParamsReadContext ctx)",
      "void StoreInputUserData(ParamsReadContext ctx)",
      "void OnInputUserDataForRemote(ParamsReadContext ctx)",
      "void OnServerInventoryCommand(ParamsReadContext ctx)",
      "bool ValidateSyncMove(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateHandEvent(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateSwap(inout Serializer ctx, InventoryValidation validation)",
      "bool ProcessInputData(ParamsReadContext ctx, bool isJuncture, bool isRemote)",
      "void RemoveMovableOverride(EntityAI item)",
      "void EnableMovableOverride(EntityAI item)",
      "void CheckForRope(InventoryLocation src, InventoryLocation dst)",
      "bool IsServerOrLocalPlayer()",
      "bool StoreInputForRemotes(bool handling_juncture, bool remote, ParamsReadContext ctx)",
      "bool TakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PostDeferredEventTakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "void HandleTakeToDst( DeferredEvent deferred_event )",
      "bool SwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool PostDeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void HandleSwapEntities( DeferredEvent deferred_event )",
      "bool ForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "void HandleForceSwapEntities( DeferredEvent deferred_event )",
      "static void SendServerHandEventViaJuncture(notnull DayZPlayer player, HandEventBase e)",
      "void NetSyncCurrentStateID(int id)",
      "void OnAfterStoreLoad()",
      "bool OnEventForRemoteWeapon(ParamsReadContext ctx)",
      "bool OnHandEventForRemote(ParamsReadContext ctx)",
      "void SyncHandEventToRemote(HandEventBase e)",
      "void OnHandsExitedStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsEnteredStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsStateChanged(HandStateBase src, HandStateBase dst)",
      "bool HandEvent(InventoryMode mode, HandEventBase e)",
      "void HandleHandEvent(DeferredEvent deferred_event)",
      "void HandleInventoryManipulation()",
      "bool IsProcessing()",
      "bool PlayerCheckRequestSrc( notnull InventoryLocation src, float radius )",
      "bool PlayerCheckRequestDst( notnull InventoryLocation src, notnull InventoryLocation dst, float radius )",
      "bool PlayerCheckSwapItemsRequest( notnull InventoryLocation src1,  notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, float radius)",
      "bool PlayerCheckDropRequest( notnull InventoryLocation src, float radius )",
      "bool MoveCheckExclusionMaskLocal( notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool SwapCheckExclusionMaskLocal( notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ValidateDestroy(inout Serializer ctx, InventoryValidation validation)"
    ]
  },
  "DeferredTakeToDst": {
    "parent": null,
    "methods": [
      "void DeferredTakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool ReserveInventory(HumanInventory inventory)",
      "void ClearInventoryReservation(HumanInventory inventory)",
      "void DeferredSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void DeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void DeferredHandEvent(InventoryMode mode, HandEventBase e)",
      "void DayZPlayerInventory()",
      "bool IsAuthoritative()",
      "bool IsOwner()",
      "bool IsProxy()",
      "void Init()",
      "void CancelHandEvent()",
      "void CancelWeaponEvent()",
      "void AbortWeaponEvent()",
      "void PostWeaponEvent(WeaponEventBase e)",
      "void DeferredWeaponFailed()",
      "void HandleWeaponEvents(float dt, out bool exitIronSights)",
      "void HandleInventory(float dt)",
      "bool OnInventoryJunctureFromServer(ParamsReadContext ctx)",
      "bool OnInventoryJunctureRepairFromServer(ParamsReadContext ctx)",
      "void OnInventoryJunctureFailureFromServer(ParamsReadContext ctx)",
      "void OnInventoryFailure(InventoryCommandType type, InventoryValidationReason reason, InventoryLocation src, InventoryLocation dst)",
      "void OnHandleStoredJunctureData(ParamsReadContext ctx)",
      "void StoreJunctureData(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(ParamsReadContext ctx)",
      "void OnHandleStoredInputUserData(ParamsReadContext ctx)",
      "void StoreInputUserData(ParamsReadContext ctx)",
      "void OnInputUserDataForRemote(ParamsReadContext ctx)",
      "void OnServerInventoryCommand(ParamsReadContext ctx)",
      "bool ValidateSyncMove(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateHandEvent(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateSwap(inout Serializer ctx, InventoryValidation validation)",
      "bool ProcessInputData(ParamsReadContext ctx, bool isJuncture, bool isRemote)",
      "void RemoveMovableOverride(EntityAI item)",
      "void EnableMovableOverride(EntityAI item)",
      "void CheckForRope(InventoryLocation src, InventoryLocation dst)",
      "bool IsServerOrLocalPlayer()",
      "bool StoreInputForRemotes(bool handling_juncture, bool remote, ParamsReadContext ctx)",
      "bool TakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PostDeferredEventTakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "void HandleTakeToDst( DeferredEvent deferred_event )",
      "bool SwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool PostDeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void HandleSwapEntities( DeferredEvent deferred_event )",
      "bool ForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "void HandleForceSwapEntities( DeferredEvent deferred_event )",
      "static void SendServerHandEventViaJuncture(notnull DayZPlayer player, HandEventBase e)",
      "void NetSyncCurrentStateID(int id)",
      "void OnAfterStoreLoad()",
      "bool OnEventForRemoteWeapon(ParamsReadContext ctx)",
      "bool OnHandEventForRemote(ParamsReadContext ctx)",
      "void SyncHandEventToRemote(HandEventBase e)",
      "void OnHandsExitedStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsEnteredStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsStateChanged(HandStateBase src, HandStateBase dst)",
      "bool HandEvent(InventoryMode mode, HandEventBase e)",
      "void HandleHandEvent(DeferredEvent deferred_event)",
      "void HandleInventoryManipulation()",
      "bool IsProcessing()",
      "bool PlayerCheckRequestSrc( notnull InventoryLocation src, float radius )",
      "bool PlayerCheckRequestDst( notnull InventoryLocation src, notnull InventoryLocation dst, float radius )",
      "bool PlayerCheckSwapItemsRequest( notnull InventoryLocation src1,  notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, float radius)",
      "bool PlayerCheckDropRequest( notnull InventoryLocation src, float radius )",
      "bool MoveCheckExclusionMaskLocal( notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool SwapCheckExclusionMaskLocal( notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ValidateDestroy(inout Serializer ctx, InventoryValidation validation)"
    ]
  },
  "DeferredSwapEntities": {
    "parent": null,
    "methods": [
      "void DeferredSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ReserveInventory(HumanInventory inventory)",
      "void ClearInventoryReservation(HumanInventory inventory)",
      "void DeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void DeferredHandEvent(InventoryMode mode, HandEventBase e)",
      "void DayZPlayerInventory()",
      "bool IsAuthoritative()",
      "bool IsOwner()",
      "bool IsProxy()",
      "void Init()",
      "void CancelHandEvent()",
      "void CancelWeaponEvent()",
      "void AbortWeaponEvent()",
      "void PostWeaponEvent(WeaponEventBase e)",
      "void DeferredWeaponFailed()",
      "void HandleWeaponEvents(float dt, out bool exitIronSights)",
      "void HandleInventory(float dt)",
      "bool OnInventoryJunctureFromServer(ParamsReadContext ctx)",
      "bool OnInventoryJunctureRepairFromServer(ParamsReadContext ctx)",
      "void OnInventoryJunctureFailureFromServer(ParamsReadContext ctx)",
      "void OnInventoryFailure(InventoryCommandType type, InventoryValidationReason reason, InventoryLocation src, InventoryLocation dst)",
      "void OnHandleStoredJunctureData(ParamsReadContext ctx)",
      "void StoreJunctureData(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(ParamsReadContext ctx)",
      "void OnHandleStoredInputUserData(ParamsReadContext ctx)",
      "void StoreInputUserData(ParamsReadContext ctx)",
      "void OnInputUserDataForRemote(ParamsReadContext ctx)",
      "void OnServerInventoryCommand(ParamsReadContext ctx)",
      "bool ValidateSyncMove(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateHandEvent(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateSwap(inout Serializer ctx, InventoryValidation validation)",
      "bool ProcessInputData(ParamsReadContext ctx, bool isJuncture, bool isRemote)",
      "void RemoveMovableOverride(EntityAI item)",
      "void EnableMovableOverride(EntityAI item)",
      "void CheckForRope(InventoryLocation src, InventoryLocation dst)",
      "bool IsServerOrLocalPlayer()",
      "bool StoreInputForRemotes(bool handling_juncture, bool remote, ParamsReadContext ctx)",
      "bool TakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PostDeferredEventTakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "void HandleTakeToDst( DeferredEvent deferred_event )",
      "bool SwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool PostDeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void HandleSwapEntities( DeferredEvent deferred_event )",
      "bool ForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "void HandleForceSwapEntities( DeferredEvent deferred_event )",
      "static void SendServerHandEventViaJuncture(notnull DayZPlayer player, HandEventBase e)",
      "void NetSyncCurrentStateID(int id)",
      "void OnAfterStoreLoad()",
      "bool OnEventForRemoteWeapon(ParamsReadContext ctx)",
      "bool OnHandEventForRemote(ParamsReadContext ctx)",
      "void SyncHandEventToRemote(HandEventBase e)",
      "void OnHandsExitedStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsEnteredStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsStateChanged(HandStateBase src, HandStateBase dst)",
      "bool HandEvent(InventoryMode mode, HandEventBase e)",
      "void HandleHandEvent(DeferredEvent deferred_event)",
      "void HandleInventoryManipulation()",
      "bool IsProcessing()",
      "bool PlayerCheckRequestSrc( notnull InventoryLocation src, float radius )",
      "bool PlayerCheckRequestDst( notnull InventoryLocation src, notnull InventoryLocation dst, float radius )",
      "bool PlayerCheckSwapItemsRequest( notnull InventoryLocation src1,  notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, float radius)",
      "bool PlayerCheckDropRequest( notnull InventoryLocation src, float radius )",
      "bool MoveCheckExclusionMaskLocal( notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool SwapCheckExclusionMaskLocal( notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ValidateDestroy(inout Serializer ctx, InventoryValidation validation)"
    ]
  },
  "DeferredForceSwapEntities": {
    "parent": null,
    "methods": [
      "void DeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ReserveInventory(HumanInventory inventory)",
      "void ClearInventoryReservation(HumanInventory inventory)",
      "void DeferredHandEvent(InventoryMode mode, HandEventBase e)",
      "void DayZPlayerInventory()",
      "bool IsAuthoritative()",
      "bool IsOwner()",
      "bool IsProxy()",
      "void Init()",
      "void CancelHandEvent()",
      "void CancelWeaponEvent()",
      "void AbortWeaponEvent()",
      "void PostWeaponEvent(WeaponEventBase e)",
      "void DeferredWeaponFailed()",
      "void HandleWeaponEvents(float dt, out bool exitIronSights)",
      "void HandleInventory(float dt)",
      "bool OnInventoryJunctureFromServer(ParamsReadContext ctx)",
      "bool OnInventoryJunctureRepairFromServer(ParamsReadContext ctx)",
      "void OnInventoryJunctureFailureFromServer(ParamsReadContext ctx)",
      "void OnInventoryFailure(InventoryCommandType type, InventoryValidationReason reason, InventoryLocation src, InventoryLocation dst)",
      "void OnHandleStoredJunctureData(ParamsReadContext ctx)",
      "void StoreJunctureData(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(ParamsReadContext ctx)",
      "void OnHandleStoredInputUserData(ParamsReadContext ctx)",
      "void StoreInputUserData(ParamsReadContext ctx)",
      "void OnInputUserDataForRemote(ParamsReadContext ctx)",
      "void OnServerInventoryCommand(ParamsReadContext ctx)",
      "bool ValidateSyncMove(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateHandEvent(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateSwap(inout Serializer ctx, InventoryValidation validation)",
      "bool ProcessInputData(ParamsReadContext ctx, bool isJuncture, bool isRemote)",
      "void RemoveMovableOverride(EntityAI item)",
      "void EnableMovableOverride(EntityAI item)",
      "void CheckForRope(InventoryLocation src, InventoryLocation dst)",
      "bool IsServerOrLocalPlayer()",
      "bool StoreInputForRemotes(bool handling_juncture, bool remote, ParamsReadContext ctx)",
      "bool TakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PostDeferredEventTakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "void HandleTakeToDst( DeferredEvent deferred_event )",
      "bool SwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool PostDeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void HandleSwapEntities( DeferredEvent deferred_event )",
      "bool ForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "void HandleForceSwapEntities( DeferredEvent deferred_event )",
      "static void SendServerHandEventViaJuncture(notnull DayZPlayer player, HandEventBase e)",
      "void NetSyncCurrentStateID(int id)",
      "void OnAfterStoreLoad()",
      "bool OnEventForRemoteWeapon(ParamsReadContext ctx)",
      "bool OnHandEventForRemote(ParamsReadContext ctx)",
      "void SyncHandEventToRemote(HandEventBase e)",
      "void OnHandsExitedStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsEnteredStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsStateChanged(HandStateBase src, HandStateBase dst)",
      "bool HandEvent(InventoryMode mode, HandEventBase e)",
      "void HandleHandEvent(DeferredEvent deferred_event)",
      "void HandleInventoryManipulation()",
      "bool IsProcessing()",
      "bool PlayerCheckRequestSrc( notnull InventoryLocation src, float radius )",
      "bool PlayerCheckRequestDst( notnull InventoryLocation src, notnull InventoryLocation dst, float radius )",
      "bool PlayerCheckSwapItemsRequest( notnull InventoryLocation src1,  notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, float radius)",
      "bool PlayerCheckDropRequest( notnull InventoryLocation src, float radius )",
      "bool MoveCheckExclusionMaskLocal( notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool SwapCheckExclusionMaskLocal( notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ValidateDestroy(inout Serializer ctx, InventoryValidation validation)"
    ]
  },
  "DeferredHandEvent": {
    "parent": null,
    "methods": [
      "void DeferredHandEvent(InventoryMode mode, HandEventBase e)",
      "bool ReserveInventory(HumanInventory inventory)",
      "void ClearInventoryReservation(HumanInventory inventory)",
      "void DayZPlayerInventory()",
      "bool IsAuthoritative()",
      "bool IsOwner()",
      "bool IsProxy()",
      "void Init()",
      "void CancelHandEvent()",
      "void CancelWeaponEvent()",
      "void AbortWeaponEvent()",
      "void PostWeaponEvent(WeaponEventBase e)",
      "void DeferredWeaponFailed()",
      "void HandleWeaponEvents(float dt, out bool exitIronSights)",
      "void HandleInventory(float dt)",
      "bool OnInventoryJunctureFromServer(ParamsReadContext ctx)",
      "bool OnInventoryJunctureRepairFromServer(ParamsReadContext ctx)",
      "void OnInventoryJunctureFailureFromServer(ParamsReadContext ctx)",
      "void OnInventoryFailure(InventoryCommandType type, InventoryValidationReason reason, InventoryLocation src, InventoryLocation dst)",
      "void OnHandleStoredJunctureData(ParamsReadContext ctx)",
      "void StoreJunctureData(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(ParamsReadContext ctx)",
      "void OnHandleStoredInputUserData(ParamsReadContext ctx)",
      "void StoreInputUserData(ParamsReadContext ctx)",
      "void OnInputUserDataForRemote(ParamsReadContext ctx)",
      "void OnServerInventoryCommand(ParamsReadContext ctx)",
      "bool ValidateSyncMove(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateHandEvent(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateSwap(inout Serializer ctx, InventoryValidation validation)",
      "bool ProcessInputData(ParamsReadContext ctx, bool isJuncture, bool isRemote)",
      "void RemoveMovableOverride(EntityAI item)",
      "void EnableMovableOverride(EntityAI item)",
      "void CheckForRope(InventoryLocation src, InventoryLocation dst)",
      "bool IsServerOrLocalPlayer()",
      "bool StoreInputForRemotes(bool handling_juncture, bool remote, ParamsReadContext ctx)",
      "bool TakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PostDeferredEventTakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "void HandleTakeToDst( DeferredEvent deferred_event )",
      "bool SwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool PostDeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void HandleSwapEntities( DeferredEvent deferred_event )",
      "bool ForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "void HandleForceSwapEntities( DeferredEvent deferred_event )",
      "static void SendServerHandEventViaJuncture(notnull DayZPlayer player, HandEventBase e)",
      "void NetSyncCurrentStateID(int id)",
      "void OnAfterStoreLoad()",
      "bool OnEventForRemoteWeapon(ParamsReadContext ctx)",
      "bool OnHandEventForRemote(ParamsReadContext ctx)",
      "void SyncHandEventToRemote(HandEventBase e)",
      "void OnHandsExitedStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsEnteredStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsStateChanged(HandStateBase src, HandStateBase dst)",
      "bool HandEvent(InventoryMode mode, HandEventBase e)",
      "void HandleHandEvent(DeferredEvent deferred_event)",
      "void HandleInventoryManipulation()",
      "bool IsProcessing()",
      "bool PlayerCheckRequestSrc( notnull InventoryLocation src, float radius )",
      "bool PlayerCheckRequestDst( notnull InventoryLocation src, notnull InventoryLocation dst, float radius )",
      "bool PlayerCheckSwapItemsRequest( notnull InventoryLocation src1,  notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, float radius)",
      "bool PlayerCheckDropRequest( notnull InventoryLocation src, float radius )",
      "bool MoveCheckExclusionMaskLocal( notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool SwapCheckExclusionMaskLocal( notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ValidateDestroy(inout Serializer ctx, InventoryValidation validation)"
    ]
  },
  "DayZPlayerInventory": {
    "parent": null,
    "methods": [
      "void DayZPlayerInventory()",
      "bool IsAuthoritative()",
      "bool IsOwner()",
      "bool IsProxy()",
      "void Init()",
      "void CancelHandEvent()",
      "void CancelWeaponEvent()",
      "void AbortWeaponEvent()",
      "void PostWeaponEvent(WeaponEventBase e)",
      "void DeferredWeaponFailed()",
      "void HandleWeaponEvents(float dt, out bool exitIronSights)",
      "void HandleInventory(float dt)",
      "bool OnInventoryJunctureFromServer(ParamsReadContext ctx)",
      "bool OnInventoryJunctureRepairFromServer(ParamsReadContext ctx)",
      "void OnInventoryJunctureFailureFromServer(ParamsReadContext ctx)",
      "void OnInventoryFailure(InventoryCommandType type, InventoryValidationReason reason, InventoryLocation src, InventoryLocation dst)",
      "void OnHandleStoredJunctureData(ParamsReadContext ctx)",
      "void StoreJunctureData(ParamsReadContext ctx)",
      "bool OnInputUserDataProcess(ParamsReadContext ctx)",
      "void OnHandleStoredInputUserData(ParamsReadContext ctx)",
      "void StoreInputUserData(ParamsReadContext ctx)",
      "void OnInputUserDataForRemote(ParamsReadContext ctx)",
      "void OnServerInventoryCommand(ParamsReadContext ctx)",
      "bool ValidateSyncMove(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateHandEvent(inout Serializer ctx, InventoryValidation validation)",
      "bool ValidateSwap(inout Serializer ctx, InventoryValidation validation)",
      "bool ProcessInputData(ParamsReadContext ctx, bool isJuncture, bool isRemote)",
      "void RemoveMovableOverride(EntityAI item)",
      "void EnableMovableOverride(EntityAI item)",
      "void CheckForRope(InventoryLocation src, InventoryLocation dst)",
      "bool IsServerOrLocalPlayer()",
      "bool StoreInputForRemotes(bool handling_juncture, bool remote, ParamsReadContext ctx)",
      "bool TakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool PostDeferredEventTakeToDst(InventoryMode mode, notnull InventoryLocation src, notnull InventoryLocation dst)",
      "void HandleTakeToDst( DeferredEvent deferred_event )",
      "bool SwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2)",
      "bool PostDeferredForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "void HandleSwapEntities( DeferredEvent deferred_event )",
      "bool ForceSwapEntities(InventoryMode mode, notnull EntityAI item1, notnull EntityAI item2, notnull InventoryLocation item2_dst)",
      "void HandleForceSwapEntities( DeferredEvent deferred_event )",
      "static void SendServerHandEventViaJuncture(notnull DayZPlayer player, HandEventBase e)",
      "void NetSyncCurrentStateID(int id)",
      "void OnAfterStoreLoad()",
      "bool OnEventForRemoteWeapon(ParamsReadContext ctx)",
      "bool OnHandEventForRemote(ParamsReadContext ctx)",
      "void SyncHandEventToRemote(HandEventBase e)",
      "void OnHandsExitedStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsEnteredStableState(HandStateBase src, HandStateBase dst)",
      "void OnHandsStateChanged(HandStateBase src, HandStateBase dst)",
      "bool HandEvent(InventoryMode mode, HandEventBase e)",
      "void HandleHandEvent(DeferredEvent deferred_event)",
      "void HandleInventoryManipulation()",
      "bool IsProcessing()",
      "bool PlayerCheckRequestSrc( notnull InventoryLocation src, float radius )",
      "bool PlayerCheckRequestDst( notnull InventoryLocation src, notnull InventoryLocation dst, float radius )",
      "bool PlayerCheckSwapItemsRequest( notnull InventoryLocation src1,  notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2, float radius)",
      "bool PlayerCheckDropRequest( notnull InventoryLocation src, float radius )",
      "bool MoveCheckExclusionMaskLocal( notnull InventoryLocation src, notnull InventoryLocation dst)",
      "bool SwapCheckExclusionMaskLocal( notnull InventoryLocation src1, notnull InventoryLocation src2, notnull InventoryLocation dst1, notnull InventoryLocation dst2)",
      "bool ValidateDestroy(inout Serializer ctx, InventoryValidation validation)"
    ]
  },
  "EntityPlacementCallback": {
    "parent": null,
    "methods": [
      "void EntityPlacementCallback()",
      "void ClearDebugShapes()",
      "void OnSetup()",
      "void OnDebug(vector p0, vector p1, bool hasHit, bool found)",
      "bool OnFirstContact(Object other)",
      "bool OnQuery(Object other)",
      "bool OnCollide(Object other)"
    ]
  },
  "ReplaceItemWithNewLambda": {
    "parent": null,
    "methods": [
      "void ReplaceItemWithNewLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "UniversalTemperatureSourceLambdaBaseImpl": {
    "parent": null,
    "methods": [
      "void DryItemsInVicinity(UniversalTemperatureSourceSettings pSettings, vector position, out notnull array<Object> nearestObjects)",
      "void WarmAndCoolItemsInVicinity(UniversalTemperatureSourceSettings pSettings, vector position, out notnull array<Object> nearestObjects)",
      "void UpdateVicinityTemperatureRecursive(EntityAI ent, TemperatureData dta, float heatPermeabilityCoef = 1.0)",
      "void Execute(UniversalTemperatureSourceSettings pSettings, UniversalTemperatureSourceResult resultValues)",
      "void DryItemsInVicinity(UniversalTemperatureSourceSettings pSettings)",
      "void UniversalTemperatureSourceLambdaEngine()"
    ]
  },
  "UniversalTemperatureSourceLambdaConstant": {
    "parent": null,
    "methods": [
      "void UniversalTemperatureSourceLambdaEngine()"
    ]
  },
  "UniversalTemperatureSourceLambdaEngine": {
    "parent": null,
    "methods": [
      "void UniversalTemperatureSourceLambdaEngine()"
    ]
  },
  "UniversalTemperatureSourceLambdaFireplace": {
    "parent": null,
    "methods": [
      "void UniversalTemperatureSourceLambdaFireplace()",
      "void SetNormalFireplaceTemperatureMax(int value)",
      "void UpdateFireplaceTemperature(UniversalTemperatureSourceSettings pSettings)",
      "void SetSmallFireplaceTemperatureMax(int value)",
      "void SetFuelCount(int value)",
      "void SetCurrentTemperature(float temperature)"
    ]
  },
  "CameraToolsMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void CameraToolsMenu()",
      "void OnShow()",
      "void OnHide()",
      "void SelectKeyframe( CTKeyframe kf )",
      "void SelectEvent(CTEvent ev)",
      "void SelectActor(CTActor ac)",
      "static void PlayAnimOnActor( int actor, int anim )",
      "void LoadData()",
      "void SaveData()",
      "void ResetAll()",
      "float GetTotalTime( int index )",
      "void AddKeyframe()",
      "void SaveKeyframe()",
      "void DeleteKeyframe()",
      "void ViewKeyframe()",
      "void AddActor( string actor_type )",
      "void AddEvent( int actor_index )",
      "void AddItem( string id, string type )",
      "void AddHandsItem( string id, string type )",
      "void SaveEvent()",
      "void DeleteEvent()",
      "void ViewEvent()",
      "void Play()",
      "void Stop()",
      "void Update( float timeslice )",
      "float SetCameraData( Param6<vector, vector, float, float, float,int> transform1, Param6<vector, vector, float, float, float, int> transform2 )",
      "void SetBlurValue( float blur )",
      "float GetBlurValue()",
      "bool OnMouseButtonDown( Widget w, int x, int y, int button )",
      "bool OnMouseButtonUp( Widget w, int x, int y, int button )",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool OnMouseLeave( Widget w, Widget enterW, int x, int y )",
      "bool OnFocus( Widget w, int x, int y )",
      "bool OnFocusLost( Widget w, int x, int y )",
      "bool IsFocusable( Widget w )",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "void ColorRed( Widget w )",
      "void ColorWhite( Widget w, Widget enterW )"
    ]
  },
  "CTActor": {
    "parent": "CTObjectFollower",
    "methods": [
      "void CTActor( int index, vector pos, vector orient, string type, array<string> items, string hands_item, CameraToolsMenu parent )",
      "string GetActorType()",
      "void AddItem( string item )",
      "void SetItems( array<string> items )",
      "void SetHandsItem( string item )",
      "string GetHandsItem()",
      "void Reset()"
    ]
  },
  "CTEvent": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void CTEvent( int index, int actor, Widget root, bool walk, CameraToolsMenu parent )",
      "void Play()",
      "void Stop()",
      "bool IsTime( float start_time, float end_time )",
      "void SetEventTime( float time )",
      "void SetEventType( int type )",
      "float GetEventTime()",
      "int GetEventType()",
      "int GetEventActor()",
      "bool GetEventWalk()",
      "void Select()",
      "void Unselect()"
    ]
  },
  "CTKeyframe": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void CTKeyframe( int index, vector pos, vector orient, float int_value, float fov, float dof, int pin, float time_before, Widget root, CameraToolsMenu parent )",
      "float GetInterpTime()",
      "void SetPin( int pin )",
      "int GetPin()",
      "void SetFOV( float fov )",
      "float GetFOV()",
      "void SetDOF( float dof )",
      "float GetDOF()",
      "void SetPosition( vector pos )",
      "void SetOrientation( vector orient )",
      "void SetTimeBefore( float time )",
      "void SetInterpTime( float time )",
      "void Select()",
      "void Unselect()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnFocus( Widget w, int x, int y )",
      "bool IsFocusable( Widget w )"
    ]
  },
  "CTObjectFollower": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void CreateFollowedObject( string type )",
      "void DestroyFollowedObject()",
      "void Update( float timeslice )",
      "void SetPosition( vector position )",
      "void SetRotation( vector dir )",
      "void UpdatePos()",
      "void Show()",
      "void Hide()",
      "void Fade( bool fade )",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnDoubleClick( Widget w, int x, int y, int button )",
      "bool OnMouseButtonDown( Widget w, int x, int y, int button )",
      "bool OnMouseButtonUp( Widget w, int x, int y, int button )"
    ]
  },
  "CTSaveStructure": {
    "parent": null,
    "methods": [
      "void CTSaveStructure()"
    ]
  },
  "Chat": {
    "parent": null,
    "methods": [
      "void Chat()",
      "void Init(Widget root_widget)",
      "void Destroy()",
      "void Clear()",
      "void Add(ChatMessageEventParams params)",
      "void AddInternal(ChatMessageEventParams params)"
    ]
  },
  "ChatInputMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void ChatInputMenu()",
      "bool UseKeyboard()",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void OnShow()",
      "void OnHide()",
      "void Refresh()",
      "void Update(float timeslice)",
      "void UpdateChannel()",
      "static string GetChannelName(ChatChannel channel)"
    ]
  },
  "ChatLine": {
    "parent": null,
    "methods": [
      "void ChatLine(Widget root_widget)",
      "void Set(ChatMessageEventParams params)",
      "void SetColour(int colour)",
      "void SetColorByParam(string pParamValue, int pFallback)",
      "void Clear()",
      "int ColorNameToColor(string pColorName)"
    ]
  },
  "PlayerListEntryScriptedWidget": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void PlayerListEntryScriptedWidget( Widget parent, string name, string uid, bool show_permissions, PlayerListScriptedWidget tab )",
      "void LoadPermissions( BiosPrivacyPermissionResultArray results )",
      "string GetUID()",
      "bool IsMuted()",
      "bool IsGloballyMuted()",
      "void SetMute( bool mute )",
      "void ToggleMute()",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool OnMouseLeave( Widget w, Widget enterW, int x, int y )",
      "void Focus()",
      "bool OnFocus( Widget w, int x, int y )",
      "bool OnFocusLost( Widget w, int x, int y )",
      "bool OnDoubleClick( Widget w, int x, int y, int button )",
      "bool OnMouseButtonUp( Widget w, int x, int y, int button )",
      "bool IsLocalPlayer()",
      "void Select( bool notify = true )",
      "void Deselect()"
    ]
  },
  "PlayerListScriptedWidget": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void PlayerListScriptedWidget( Widget parent, string header_text =  )",
      "void FocusFirst()",
      "void Reload( SyncPlayerList player_list )",
      "bool IsEmpty()",
      "void OnLoadServersAsync( GetServersResult result_list, EBiosError error, string response )",
      "void Reload( BiosFriendInfoArray player_list )",
      "void Reload( BiosPrivacyUidResultArray player_list )",
      "void ReloadLocal( map<string, bool> player_list )",
      "string FindPlayerByWidget( Widget button )",
      "void AddPlayer( string name, string UID, bool show_permissions )",
      "void RemovePlayer(string UID)",
      "bool IsMuted( string UID )",
      "bool IsGloballyMuted( string UID )",
      "void SetMute( string UID, bool mute )",
      "void ToggleMute( string UID )",
      "void SelectPlayer(PlayerListEntryScriptedWidget entry)",
      "void ScrollToEntry( PlayerListEntryScriptedWidget entry )"
    ]
  },
  "InventoryCombinationFlags": {
    "parent": null,
    "methods": []
  },
  "InventoryManipulationFlags": {
    "parent": null,
    "methods": []
  },
  "InventoryQuickbar": {
    "parent": "InventoryGridController",
    "methods": [
      "void InventoryQuickbar(Widget quickbarGridWidget)",
      "void UpdateItems( Widget quickbarGridWidget )",
      "void Remove(InventoryItem itemToRemove)",
      "void OnItemEnter(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemLeave(InventoryGrid grid, Widget w)",
      "void OnItemDraggingOver(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemDropReceived(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemDrop(InventoryGrid grid, Widget w, int row, int col)",
      "void OnItemDrag(InventoryGrid grid, Widget w, int row, int col)",
      "int GetQuickbarItemColor( InventoryGrid grid, InventoryItem item )",
      "int HasItemQuantity( InventoryItem item )",
      "string GetItemQuantityText( InventoryItem item )",
      "float GetItemQuantity( InventoryItem item )",
      "int GetItemQuantityMax( InventoryItem item )",
      "int GetItemCount( InventoryItem item )",
      "bool CanAddItemInHandToInventory()"
    ]
  },
  "Attachments": {
    "parent": null,
    "methods": [
      "void Attachments( Container parent, EntityAI entity )",
      "bool IsEmpty()",
      "bool IsItemActive()",
      "bool IsItemWithQuantityActive()",
      "void UnfocusAll()",
      "void SetDefaultFocus( bool while_micromanagment_mode = false )",
      "void SetLastActive()",
      "void SetActive( bool active )",
      "void SelFirstActive()",
      "int GetFocusedSlot()",
      "bool SelectItem()",
      "bool Select()",
      "int GetRecipeCount( bool recipe_anywhere, EntityAI entity1, EntityAI entity2 )",
      "bool CanCombine()",
      "bool CanCombineAmmo()",
      "bool CanEquip()",
      "bool Combine()",
      "bool SplitItem()",
      "bool EquipItem()",
      "bool TransferItem()",
      "bool InspectItem()",
      "bool TransferItemToVicinity()",
      "bool IsActive()",
      "int GetAttachmentHeight()",
      "void UpdateInterval()",
      "void AttachmentAdded(EntityAI item, string slot, EntityAI parent)",
      "void AttachmentRemoved(EntityAI item, string slot, EntityAI parent)",
      "void OnAttachmentReservationSet( EntityAI item, int slot_id )",
      "void OnAttachmentReservationRelease( EntityAI item, int slot_id )",
      "void InitAttachmentGrid( int att_row_index )",
      "void ShowFalseAttachmentsHeader(bool show)",
      "void SetFalseAttachmentsHeaderText(string text)",
      "void SetAttachmentSlotID(int slotID)",
      "int GetAttachmentSlotID()"
    ]
  },
  "ColorManager": {
    "parent": null,
    "methods": [
      "void ColorManager()",
      "void SetColor( Widget w, int color )",
      "int GetItemColor( ItemBase item )"
    ]
  },
  "Inventory": {
    "parent": null,
    "methods": [
      "void Inventory(LayoutHolder parent)",
      "void InitInputWrapperData()",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void Serialize()",
      "void Deserialize()",
      "static int GetPlayerAttachmentIndex(string slot_name)",
      "static int GetPlayerAttachmentIndex(int slot_id)",
      "void LoadPlayerAttachmentIndexes()",
      "static void MoveAttachmentUp(int slot_id)",
      "static void MoveAttachmentDown(int slot_id)",
      "int GetProperControllerStickAngle(int angle)",
      "int AngleToDirection(int angle)",
      "void TimerEnd()",
      "bool Controller(Widget w, int control, int value)",
      "void DraggingOverHandsPanel(Widget w, int x, int y, Widget receiver)",
      "void OnHandsPanelDropReceived(Widget w, int x, int y, Widget receiver)",
      "void OnLeftPanelDropReceived(Widget w, int x, int y, Widget receiver)",
      "void OnRightPanelDropReceived(Widget w, int x, int y, Widget receiver)",
      "void OnCenterPanelDropReceived(Widget w, int x, int y, Widget receiver)",
      "void DraggingOverLeftPanel(Widget w, int x, int y, Widget receiver)",
      "void DraggingOverRightPanel(Widget w, int x, int y, Widget receiver)",
      "void DraggingOverCenterPanel(Widget w, int x, int y, Widget receiver)",
      "void Update(float timeslice)",
      "void UpdateInterval()",
      "void AddQuickbarItem(InventoryItem item, int index)",
      "void EnableMicromanagement()",
      "void DisableMicromanagement()",
      "void SetLayoutName()",
      "void Init()",
      "void Reset()",
      "void ResetFocusedContainers()",
      "void OnShow()",
      "void OnHide()",
      "void Refresh()",
      "void RefreshQuickbar()",
      "string GetConsoleToolbarText(int mask)",
      "void UpdateConsoleToolbarCheck()",
      "void UpdateConsoleToolbar()",
      "string GetStringVariant(string pInputAction, notnull array<string> variants)",
      "void MoveFocusByContainer(int direction)",
      "void MoveFocusByArea(int direction)",
      "void InventoryMovementButtonTickHandler(float timeslice)",
      "void UpdateSpecialtyMeter()"
    ]
  },
  "ItemManager": {
    "parent": null,
    "methods": [
      "void ItemManager( Widget root )",
      "void SetItemMicromanagmentMode( bool item_micromanagment_mode )",
      "bool IsMicromanagmentMode()",
      "void SetHandsPreview( HandsPreview hansd_preview )",
      "void SetSelectedItem( EntityAI selected_item, Container selected_container, Widget selected_widget, SlotsIcon selected_icon )",
      "void SetSelectedItemEx( EntityAI selected_item, Container selected_container, LayoutHolder selected_icon )",
      "void ClearDefaultOpenStates()",
      "void ClearDefaultHeaderOpenStates()",
      "void SetDefaultOpenState( string type, bool is_opened )",
      "void SetDefaultHeaderOpenState( string type, bool is_opened )",
      "void SetDefaultOpenStateHands( bool is_opened )",
      "bool GetDefaultOpenStateHands( )",
      "void SerializeDefaultHeaderOpenStates()",
      "void DeserializeDefaultHeaderOpenStates()",
      "void SerializeDefaultOpenStates()",
      "void DeserializeDefaultOpenStates()",
      "bool GetDefaultOpenState( string type )",
      "bool GetDefaultHeaderOpenState( string type )",
      "void HideDropzones()",
      "void ShowSourceDropzone( EntityAI item )",
      "void SetDraggedItem( EntityAI dragged_item )",
      "void SetDraggedIcon( Icon dragged_icon )",
      "void SetIsDragging( bool is_dragging )",
      "bool IsDragging()",
      "void HideTooltip()",
      "void HideTooltipSlot()",
      "static int GetItemHealthColor(int pHealthLevel)",
      "static int GetItemHealthColor(EntityAI item, string zone = )",
      "static int ColorFromFloat( float fraction )",
      "void SetTemperature(EntityAI item, Widget item_w)",
      "void SetIconTemperature(EntityAI item, Widget item_w)",
      "void PrepareTooltip(EntityAI item, int x = 0, int y = 0)",
      "void PrepareSlotsTooltip(string name, string desc, int x = 0, int y = 0)",
      "void CalculateTooltipSlotPosition(int x = 0, int y = 0)",
      "void UpdateTooltipSlotPosition()",
      "void SetTooltipWidget(Widget w)",
      "bool EvaluateContainerDragabilityDefault(EntityAI entity)",
      "void SetWidgetDraggable( Widget w, bool draggable )",
      "void ShowTooltip()",
      "void ShowTooltipSlot()",
      "static int GetChosenCombinationFlag( EntityAI selectedEntity, EntityAI targetEntity, int relevantFlags, out InventoryLocation dst = null)",
      "static int GetCombinationFlags( EntityAI entity1, EntityAI entity2 )",
      "static int GetRecipeCount(bool recipe_anywhere, EntityAI entity1, EntityAI entity2)"
    ]
  },
  "LayoutHolder": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void UpdateInterval()",
      "void SetLayoutName()",
      "void SetImmedUpdate()",
      "void OnSelectAction(ItemBase item, int actionId)",
      "void OnSelectActionEx(EntityAI item, int actionId)",
      "void ShowActionMenu(InventoryItem item)",
      "void LayoutHolder( LayoutHolder parent )",
      "void SetparentWidget()",
      "void SetActive(bool active)",
      "void SetLastActive()",
      "void SetFirstActive()",
      "bool IsActive()",
      "bool IsDisplayable()",
      "bool IsVisible()",
      "void OnShow()",
      "void OnHide()",
      "void Refresh()",
      "void InspectItem( EntityAI item )",
      "void UpdateSelectionIcons()",
      "void PrepareOwnedTooltip(EntityAI item, int x = 0, int y = 0)",
      "void PrepareOwnedSlotsTooltip(Widget w, string name, string desc, int x = 0, int y = 0)",
      "void HideOwnedTooltip()",
      "void HideOwnedSlotsTooltip()"
    ]
  },
  "PlayerPreview": {
    "parent": null,
    "methods": [
      "void PlayerPreview( LayoutHolder parent )",
      "void RefreshPlayerPreview()",
      "void UpdateRotation( int mouse_x, int mouse_y, bool is_dragging )",
      "void UpdateScale()",
      "bool MouseButtonDown(Widget w, int x, int y, int button)",
      "bool MouseWheel(Widget w, int x, int y, int wheel)",
      "void UpdateInterval()"
    ]
  },
  "SplitItemUtils": {
    "parent": null,
    "methods": [
      "static void TakeOrSplitToInventory( notnull PlayerBase player, notnull EntityAI target, notnull EntityAI item)",
      "static void TakeOrSplitToInventoryLocation( notnull PlayerBase player, notnull InventoryLocation dst)"
    ]
  },
  "VicinityItemManager": {
    "parent": null,
    "methods": [
      "void Init()",
      "void AddVicinityItems(Object object)",
      "void AddVicinityCargos(CargoBase object)",
      "void ResetRefreshCounter()",
      "void Update(float delta_time)",
      "bool ExcludeFromContainer_Phase1(Object actor_in_radius)",
      "bool ExcludeFromContainer_Phase2(Object object_in_radius)",
      "bool ExcludeFromContainer_Phase3(Object object_in_cone)",
      "bool CanIgnoreDistanceCheck(EntityAI entity_ai)",
      "void RefreshVicinityItems()",
      "float GetFixedHeadHeightAdjustment(PlayerBase player)",
      "bool IsObstructed(Object filtered_object)",
      "void DebugActorsSphereDraw(float radius)",
      "void DebugObjectsSphereDraw(float radius)",
      "void DebugRaycastDraw(vector start, vector end)",
      "void DebugConeDraw(vector start, float cone_angle)",
      "void CleanupDebugShapes(array<Shape> shapesArr)"
    ]
  },
  "ConsoleToolbarWidgetHandlerBase": {
    "parent": null,
    "methods": [
      "void OnWidgetScriptInit(Widget w)",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void UpdateControlsElements(EInputDeviceType pInputDeviceType = EInputDeviceType.UNKNOWN)"
    ]
  },
  "PasswordMenuToolbarHandler": {
    "parent": null,
    "methods": [
      "void UpdateControlsElements(EInputDeviceType pInputDeviceType = EInputDeviceType.UNKNOWN)"
    ]
  },
  "OptionSelector": {
    "parent": "OptionSelectorBase",
    "methods": [
      "void OptionSelector(Widget parent, int current_index, ScriptedWidgetEventHandler parent_c, bool disabled)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void Reset()",
      "void SetNextOption()",
      "void SetPrevOption()",
      "bool IsSet()",
      "bool IsEnabled()",
      "bool IsSelectorEnabled()",
      "string GetStringValue()",
      "void SetStringOption(string option, bool fire_event = true)",
      "void ColorOption()",
      "bool IsFocusable(Widget w)",
      "void Enable()",
      "void Disable()",
      "void ColorNormalConsole(Widget w)",
      "void ColorDisabledConsole(Widget w)"
    ]
  },
  "OptionSelectorBase": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "bool IsFocusable(Widget w)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "void Focus()",
      "void Enable()",
      "void Disable()",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ColorDisabled(Widget w)",
      "void ButtonSetColor(Widget w, int color)",
      "void ColorHighlightConsole(Widget w)",
      "void ColorNormalConsole(Widget w)",
      "void ColorDisabledConsole(Widget w)",
      "void ButtonSetColorConsole(Widget w, int color)",
      "void ButtonSetAlphaAnimConsole(Widget w)",
      "void ButtonSetTextColorConsole(Widget w, int color)"
    ]
  },
  "OptionSelectorEditbox": {
    "parent": "OptionSelectorBase",
    "methods": [
      "void OptionSelectorEditbox(Widget parent, string value, ScriptedWidgetEventHandler parent_menu, bool disabled)",
      "void Enable()",
      "void Disable()",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool IsFocusable(Widget w)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "void SetValue(string value, bool update = true)",
      "string GetValue()",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)"
    ]
  },
  "OptionSelectorLevelMarker": {
    "parent": "OptionSelectorSliderSetup",
    "methods": [
      "void OptionSelectorLevelMarker(Widget parent, float value, ScriptedWidgetEventHandler parentMenu, bool disabled, float min, float max)",
      "void Enable()",
      "void Disable()",
      "void SetSlider2Value(float value)",
      "bool OnUpdate(Widget w)"
    ]
  },
  "OptionSelectorMultistate": {
    "parent": "OptionSelector",
    "methods": [
      "void OptionSelectorMultistate(Widget parent, int current_index, ScriptedWidgetEventHandler parent_c, bool disabled, notnull array<string> options)",
      "void LoadNewValues(notnull array<string> options, int current_index)",
      "void SetNextOption()",
      "void SetPrevOption()",
      "void PerformSetOption(int index)",
      "void SetCanSwitch(bool value)",
      "bool CanSwitch()",
      "void SetValue(int value, bool fire_event = true)",
      "void SetValue(string value, bool fire_event = true)",
      "void SetRandomValue()",
      "int GetValue()",
      "void SetStringOption(string option, bool fire_event = true)",
      "void OptionSelectorMultistateCharacterMenu(Widget parent, int current_index, ScriptedWidgetEventHandler parent_c, bool disabled, notnull array<string> options)",
      "void SetDisplayNameText(string value, string appendix)",
      "void SetTextSmart(string value)",
      "bool InheritsFrom(string value, string baseclass)"
    ]
  },
  "OptionSelectorMultistateCharacterMenu": {
    "parent": "OptionSelectorMultistate",
    "methods": [
      "void OptionSelectorMultistateCharacterMenu(Widget parent, int current_index, ScriptedWidgetEventHandler parent_c, bool disabled, notnull array<string> options)",
      "void SetDisplayNameText(string value, string appendix)",
      "void SetTextSmart(string value)",
      "bool InheritsFrom(string value, string baseclass)",
      "void SetNextOption()",
      "void SetPrevOption()",
      "void SetValue(int value, bool fire_event = true)",
      "void SetValue(string value, bool fire_event = true)",
      "void SetRandomValue()",
      "void SetStringOption(string option, bool fire_event = true)"
    ]
  },
  "OptionSelectorSlider": {
    "parent": "OptionSelectorSliderSetup",
    "methods": [
      "void OptionSelectorSlider(Widget parent, float value, ScriptedWidgetEventHandler parent_menu, bool disabled, float min, float max, bool showEditbox = false)",
      "void SetValueText()",
      "void Refresh(float defaultValue = -1)",
      "float GetRangePercantageByValue()",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool Changed()",
      "bool IsValidEditboxValue(string text)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsFocusable(Widget w)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void SetActiveOption()",
      "void UpdateActiveOption()",
      "void Update()",
      "bool IsValueTextVisible()"
    ]
  },
  "OptionSelectorSliderSetup": {
    "parent": "OptionSelectorBase",
    "methods": [
      "void Enable()",
      "void Disable()",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool IsFocusable(Widget w)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "float NormalizeInput(float value)",
      "void SetStep(float step)",
      "void SetValue(float value, bool update = true)",
      "float GetValue()",
      "void SetMax(float max)",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)"
    ]
  },
  "VideoPlayer": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void VideoPlayer(Widget parent)",
      "void Show(bool show)",
      "void Init()",
      "void InitVideoLoading()",
      "void CreateVideoLoadingEntry(string entryName)",
      "void UpdateCurrentTime()",
      "void UpdateTotalTime()",
      "void UpdateTime(TextWidget widget, int time)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void OnPlaybackStart()",
      "void OnPlaybackStop()",
      "void OnBufferingStart()",
      "void OnBufferingEnd()",
      "void ToggleVideoSelection()",
      "void LoadVideo(string videoPath)",
      "void PlayVideo()",
      "void PauseVideo()",
      "void StopVideo()",
      "void OnceVideo()",
      "void RepeatVideo()",
      "void KillVideo()"
    ]
  },
  "UIPopupScript": {
    "parent": null,
    "methods": [
      "void UIPopupScript(Widget wgt)",
      "void OnOpen(Param param)",
      "void OnClose()",
      "void Show(bool show)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)"
    ]
  },
  "UIPropertyAttachment": {
    "parent": null,
    "methods": [
      "void UIPropertyAttachment(Widget root)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SetPos(float x, float y)",
      "void SetSize(float width, float height)",
      "void Show(EntityAI e, string slot_name, TStringArray att_items)",
      "void Hide()",
      "bool IsVisible()"
    ]
  },
  "ScriptConsoleAddLocation": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void ScriptConsoleAddLocation()",
      "void SetPosition(vector pos)",
      "bool OnClick(Widget w, int x, int y, int button)"
    ]
  },
  "ScriptConsoleNewPresetDialog": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void ScriptConsoleNewPresetDialog()",
      "bool OnClick(Widget w, int x, int y, int button)"
    ]
  },
  "ScriptConsoleRenamePresetDialog": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void ScriptConsoleRenamePresetDialog()",
      "bool OnClick(Widget w, int x, int y, int button)"
    ]
  },
  "ScriptConsoleUniversalInfoDialog": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void ScriptConsoleUniversalInfoDialog()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SetLabel(string label)",
      "void SetContent(string content)"
    ]
  },
  "JsonMissionLoaderData": {
    "parent": null,
    "methods": [
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnKeyDown(Widget w, int x, int y, int key)"
    ]
  },
  "MissionLoader": {
    "parent": null,
    "methods": [
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnKeyDown(Widget w, int x, int y, int key)"
    ]
  },
  "HudDebugWinBase": {
    "parent": null,
    "methods": [
      "void HudDebugWinBase( Widget widget_root )",
      "int GetType()",
      "void Init( Widget widget_root )",
      "void SetUpdate( bool state )",
      "void Update()",
      "void SetRPCSent()",
      "void Show()",
      "void Hide()",
      "bool IsVisible()",
      "void FitWindowByContent( TextListboxWidget wgt )",
      "void SetValueListSize( int x, int y, TextListboxWidget wgt )"
    ]
  },
  "DebugAgentData": {
    "parent": null,
    "methods": [
      "void DebugAgentData( string name, int id )",
      "string GetName()",
      "int GetID()",
      "float GetTemporaryResistance()",
      "void HudDebugWinCharAgents( Widget widget_root )",
      "int GetType()",
      "void SetUpdate( bool state )",
      "void Update()",
      "void Show()",
      "void Hide()",
      "void SetAgents()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "void DebugGrowAgentsRequest(int agent_id, bool should_grow)",
      "void DebugRemoveAgentsRequest()",
      "void AddAgent(string title, string value, int id, float temporaryResistance)",
      "void ClearAgents()",
      "void FitWindow()"
    ]
  },
  "HudDebugWinCharAgents": {
    "parent": "HudDebugWinBase",
    "methods": [
      "void HudDebugWinCharAgents( Widget widget_root )",
      "int GetType()",
      "void SetUpdate( bool state )",
      "void Update()",
      "void Show()",
      "void Hide()",
      "void SetAgents()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "void DebugGrowAgentsRequest(int agent_id, bool should_grow)",
      "void DebugRemoveAgentsRequest()",
      "void AddAgent(string title, string value, int id, float temporaryResistance)",
      "void ClearAgents()",
      "void FitWindow()"
    ]
  },
  "HudDebugWinCharDebug": {
    "parent": "HudDebugWinBase",
    "methods": [
      "void HudDebugWinCharDebug(Widget widget_root)",
      "void Update()",
      "int GetType()"
    ]
  },
  "HudDebugWinCharLevels": {
    "parent": "HudDebugWinBase",
    "methods": [
      "void HudDebugWinCharLevels(Widget widget_root)",
      "int GetType()",
      "void Show()",
      "void Hide()",
      "void SetUpdate( bool state )",
      "void Update()",
      "void SetValues()",
      "void AddValue( string title, string value, string value2 )",
      "void ClearValues()",
      "void FitWindow()"
    ]
  },
  "DebugModifierData": {
    "parent": null,
    "methods": [
      "void DebugModifierData( string name, int id )",
      "string GetName()",
      "int GetID()",
      "void HudDebugWinCharModifiers( Widget widget_root )",
      "int GetType()",
      "void SetUpdate( bool state )",
      "void Update()",
      "void Show()",
      "void Hide()",
      "void Refresh()",
      "void FitWindow()",
      "void SetModifiers()",
      "void AddModifier( string name, int id, bool active, bool locked )",
      "void ClearModifiers()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "void ResetModifiers()",
      "void RequestDetailedInfo( int id )",
      "void ActivateModifier( int id )",
      "void DeactivateModifier( int id )",
      "void LockModifier( int id, bool state )"
    ]
  },
  "HudDebugWinCharModifiers": {
    "parent": "HudDebugWinBase",
    "methods": [
      "void HudDebugWinCharModifiers( Widget widget_root )",
      "int GetType()",
      "void SetUpdate( bool state )",
      "void Update()",
      "void Show()",
      "void Hide()",
      "void Refresh()",
      "void FitWindow()",
      "void SetModifiers()",
      "void AddModifier( string name, int id, bool active, bool locked )",
      "void ClearModifiers()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "void ResetModifiers()",
      "void RequestDetailedInfo( int id )",
      "void ActivateModifier( int id )",
      "void DeactivateModifier( int id )",
      "void LockModifier( int id, bool state )"
    ]
  },
  "HudDebugWinCharStats": {
    "parent": "HudDebugWinBase",
    "methods": [
      "void HudDebugWinCharStats(Widget widget_root)",
      "int GetType()",
      "void Show()",
      "void Hide()",
      "void SetUpdate( bool state )",
      "void Update()",
      "void SetupValues()",
      "void UpdateValues()",
      "void AddValue(string title, string value)",
      "void ClearValues()",
      "void FitWindow()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void ResetStats()",
      "void RPCChangeStat(string stat, float value)"
    ]
  },
  "HudDebugWinCharStomach": {
    "parent": "HudDebugWinBase",
    "methods": [
      "void HudDebugWinCharStomach(Widget widget_root)",
      "int GetType()",
      "void Show()",
      "void Hide()",
      "void SetUpdate( bool state )",
      "void Update()",
      "void SetContentValues()",
      "void AddValue( string classname, int food_stage, int agents, float amount, float temperature)",
      "void ClearValues()",
      "void FitWindow()"
    ]
  },
  "HudDebugWinHealthEntry": {
    "parent": null,
    "methods": [
      "void HudDebugWinHealth(Widget widget_root)",
      "void Update()",
      "int GetType()",
      "void Show()",
      "void Hide()",
      "void SetUpdate( bool state )",
      "void InitDebug()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "void RunRPC(HudDebugWinHealthEntry entry, int buttonID)",
      "void HandleTargetState(bool button)",
      "void InitEntityEntries()",
      "void InitEntry(SyncedValue data)",
      "void UpdateZones()",
      "void CleanupEntries()"
    ]
  },
  "HudDebugWinHealth": {
    "parent": null,
    "methods": [
      "void HudDebugWinHealth(Widget widget_root)",
      "void Update()",
      "int GetType()",
      "void Show()",
      "void Hide()",
      "void SetUpdate( bool state )",
      "void InitDebug()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "void RunRPC(HudDebugWinHealthEntry entry, int buttonID)",
      "void HandleTargetState(bool button)",
      "void InitEntityEntries()",
      "void InitEntry(SyncedValue data)",
      "void UpdateZones()",
      "void CleanupEntries()"
    ]
  },
  "HudDebugWinHorticulture": {
    "parent": null,
    "methods": [
      "void HudDebugWinHorticulture(Widget widget_root)",
      "int GetType()",
      "void Show()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "void SendRPCSpeed(float multiplier)",
      "void SendRPCUpdate(bool isTarget)"
    ]
  },
  "HudDebugWinTemperature": {
    "parent": "HudDebugWinBase",
    "methods": [
      "void HudDebugWinTemperature(Widget widget_root)",
      "void SetUpdate( bool state )",
      "void Show()",
      "void Hide()",
      "void Update()",
      "int GetType()"
    ]
  },
  "HudDebugWinVersion": {
    "parent": "HudDebugWinBase",
    "methods": [
      "void HudDebugWinVersion(Widget widget_root)",
      "void Update()",
      "int GetType()"
    ]
  },
  "BoatHud": {
    "parent": null,
    "methods": [
      "void Init(Widget vehicleHudPanels)",
      "void ShowVehicleInfo(PlayerBase player)",
      "void HideVehicleInfo()",
      "void RefreshVehicleHud(float timeslice)",
      "void UpdateEngineIcon(int level)",
      "void UpdateFuelIcon(float level)",
      "void UpdateSpeedPointer()",
      "void UpdateGear()",
      "void UpdateEngineBlink(float timeSlice)",
      "float GetSpeedometer()"
    ]
  },
  "CarHud": {
    "parent": null,
    "methods": [
      "void Init(Widget vehicleHudPanels)",
      "void ShowVehicleInfo(PlayerBase player)",
      "void HideVehicleInfo()",
      "void RefreshVehicleHud(float timeslice)"
    ]
  },
  "VehicleHudBase": {
    "parent": null,
    "methods": [
      "void VehicleHudBase()",
      "void Init(Widget vehicleHudPanels)",
      "void ShowVehicleInfo(PlayerBase player)",
      "void HideVehicleInfo()",
      "void ShowPanel()",
      "void HidePanel()",
      "void RefreshVehicleHud(float timeslice)"
    ]
  },
  "GameplayEffectWidgets": {
    "parent": "GameplayEffectWidgets_base",
    "methods": [
      "void GameplayEffectWidgets()",
      "void RegisterLayouts(string path, array<int> types)",
      "void PairIDToTypes()",
      "void RegisterGameplayEffectData(int id, Param p)",
      "void InitWidgetSet(int type, bool updating = false, int user_id_override = -1)",
      "bool CreateHandledClass(typename handled_type, array<ref Widget> input, int type, int user_override)",
      "void UpdateVisibility()",
      "void AddActiveEffects(array<int> effects)",
      "void RemoveActiveEffects(array<int> effects)",
      "void StopAllEffects()",
      "bool IsAnyEffectRunning()",
      "void AddSuspendRequest(int request_id)",
      "void RemoveSuspendRequest(int request_id)",
      "void ClearSuspendRequests()",
      "int GetSuspendRequestCount()",
      "void UpdateWidgets(int type = -1, float timeSlice = 0, Param p = null, int handle = -1)",
      "void CalculateValues(int type = -1, float timeSlice = 0, Param p = null, int handle = -1)",
      "void ProcessWidgetUpdate(Widget w, int type, float timeSlice = 0, Param p = null, int handle = -1)",
      "void CalculateBreathEffect(float timeSlice = 0, int type = -1, Param p = null)",
      "void UpdateBreathEffect(ImageWidget w)",
      "void CalculateOccluderEffect(int type, float timeSlice, Param p, int handle)",
      "void UpdateOccluderEffect(ImageWidget w, int type, float timeSlice, Param p, int handle)",
      "void CalculateFlashbangEffect(int type, float timeSlice, Param p, int handle)",
      "void UpdateFlashbangEffect(ImageWidget w)",
      "void HandleWidgetRoot(float timeSlice = 0, Param p = null, int handle = -1)",
      "void Update(float timeSlice)",
      "void OnVoiceEvent(float breathing_resistance01)"
    ]
  },
  "GameplayEffectsData": {
    "parent": "Managed",
    "methods": [
      "void GameplayEffectsData(array<ref Widget> input, int type, int user_override = -1)",
      "void Init(array<ref Widget> input, int type, Widget layout_root, int user_override = -1)",
      "int GetWidgetSetType()",
      "int GetWidgetSetID()",
      "bool HasDefinedHandle()",
      "bool DataInitialized()",
      "void UpdateVisibility(bool state)",
      "void RegisterData(Param p)",
      "void Update(float timeSlice = 0, Param p = null, int handle = -1)",
      "void ForceStop()",
      "void GameplayEffectsDataImage(array<ref Widget> input, int type, int user_override = -1)",
      "void SetSaturationMultiplier(float value)",
      "float GetSaturationMultiplier()"
    ]
  },
  "GameplayEffectsDataImage": {
    "parent": "GameplayEffectsData",
    "methods": [
      "void GameplayEffectsDataImage(array<ref Widget> input, int type, int user_override = -1)",
      "void SetSaturationMultiplier(float value)",
      "float GetSaturationMultiplier()"
    ]
  },
  "GameplayEffectsDataBleeding": {
    "parent": "GameplayEffectsData",
    "methods": [
      "void GameplayEffectsDataBleeding(array<ref Widget> input, int type, int user_override = -1)",
      "void Init(array<ref Widget> input, int type, Widget layout_root, int user_override = -1)",
      "bool HasDefinedHandle()",
      "bool DataInitialized()",
      "void RegisterData(Param p)",
      "void RegisterBleedingIndicatorInstance(int bit, float flow_modifier)",
      "void SpawnBleedingIndicator(int source_ID, vector position)",
      "int CalculateSeverity(float flow_modifier)",
      "void StopBleedingIndicator(int source_ID, bool instant = false)",
      "void UpdateBleedingIndicators(float timeSlice)",
      "void CleanupBleedingIndicators()",
      "void Update(float timeSlice = 0, Param p = null, int handle = -1)",
      "void UpdateVisibility(bool state)",
      "void ForceStop()",
      "void BuildProbabilityData(int severity, float frequency)",
      "void BuildPositioningData()"
    ]
  },
  "Hit_Concrete": {
    "parent": null,
    "methods": [
      "void Hit_Concrete()"
    ]
  },
  "Hit_Dirt": {
    "parent": null,
    "methods": [
      "void Hit_Dirt()"
    ]
  },
  "Hit_ErrorNoMaterial": {
    "parent": null,
    "methods": [
      "void Hit_ErrorNoMaterial()"
    ]
  },
  "Hit_Foliage": {
    "parent": null,
    "methods": [
      "void Hit_Foliage()",
      "float CalculateStoppingForce(float in_speedf, float out_speedf, string ammoType, float weight)"
    ]
  },
  "Hit_Glass": {
    "parent": null,
    "methods": [
      "void Hit_Glass()"
    ]
  },
  "Hit_Glass_Thin": {
    "parent": null,
    "methods": [
      "void Hit_Glass_Thin()"
    ]
  },
  "Hit_Grass": {
    "parent": null,
    "methods": [
      "void Hit_Grass()"
    ]
  },
  "Hit_Gravel": {
    "parent": null,
    "methods": [
      "void Hit_Gravel()"
    ]
  },
  "Hit_Ice": {
    "parent": null,
    "methods": [
      "void Hit_Ice()"
    ]
  },
  "Hit_MeatBones": {
    "parent": null,
    "methods": [
      "void Hit_MeatBones()",
      "float CalculateStoppingForce(float in_speedf, float out_speedf, string ammoType, float weight)",
      "void Event_OnStarted()",
      "void BloodSplatGround( vector start_pos, vector speed_vector, float decay_coef )",
      "void BloodSplatWall()",
      "void OnEnterCalculations( Particle p )",
      "void OnExitCalculations(Particle p, float outSpeedf)"
    ]
  },
  "Hit_Metal": {
    "parent": null,
    "methods": [
      "void Hit_Metal()"
    ]
  },
  "Hit_Plaster": {
    "parent": null,
    "methods": [
      "void Hit_Plaster()"
    ]
  },
  "Hit_Plastic": {
    "parent": null,
    "methods": [
      "void Hit_Plastic()"
    ]
  },
  "Hit_Rubber": {
    "parent": null,
    "methods": [
      "void Hit_Rubber()"
    ]
  },
  "Hit_Sand": {
    "parent": null,
    "methods": [
      "void Hit_Sand()"
    ]
  },
  "Hit_Snow": {
    "parent": null,
    "methods": [
      "void Hit_Snow()"
    ]
  },
  "Hit_Textile": {
    "parent": null,
    "methods": [
      "void Hit_Textile()"
    ]
  },
  "Hit_Undefined": {
    "parent": null,
    "methods": [
      "void Hit_Undefined()"
    ]
  },
  "Hit_Water": {
    "parent": null,
    "methods": [
      "void Hit_Water()",
      "void EvaluateEffect(Object directHit, int componentIndex, vector pos, int impact_type, vector surfNormal, vector exitPos, vector inSpeed, vector outSpeed, string ammoType)",
      "float CalculateStoppingForce(float in_speedf, float out_speedf, string ammoType, float weight)",
      "void OnEnterCalculations( Particle p )",
      "void OnExitCalculations(Particle p, float outSpeedf)",
      "void OnRicochetCalculations(Particle p, float outspeedf)",
      "void OnEnterAngledCalculations(Particle p)"
    ]
  },
  "Hit_Wood": {
    "parent": null,
    "methods": [
      "void Hit_Wood()",
      "void OnEnterCalculations( Particle p )",
      "void OnExitCalculations(Particle p, float outSpeedf)"
    ]
  },
  "EffBreathVapourHeavy": {
    "parent": null,
    "methods": [
      "void EffBreathVapourHeavy()"
    ]
  },
  "EffBreathVapourLight": {
    "parent": null,
    "methods": [
      "void EffBreathVapourLight()"
    ]
  },
  "EffBreathVapourMedium": {
    "parent": null,
    "methods": [
      "void EffBreathVapourMedium()"
    ]
  },
  "EffCoolantSteam": {
    "parent": null,
    "methods": [
      "void SetParticleStateLight()",
      "void SetParticleStateHeavy()",
      "void UpdateParticle()"
    ]
  },
  "EffEngineSmoke": {
    "parent": null,
    "methods": [
      "void EffEngineSmoke()",
      "void SetParticleStateLight()",
      "void SetParticleStateHeavy()",
      "void Event_OnFrameUpdate(float time_delta)"
    ]
  },
  "EffExhaustSmoke": {
    "parent": null,
    "methods": [
      "void SetParticleStateLight()"
    ]
  },
  "PPEChromAber": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEColorGrading": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEColors": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEDepthOfField": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEDistort": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEDynamicBlur": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEFilmGrain": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEFXAA": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEGaussFilter": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEGhost": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEGlow": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEGodRays": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEHBAO": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEMedian": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPENone": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()"
    ]
  },
  "PPERadialBlur": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPERain": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPERotBlur": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPESMAA": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPESnowfall": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPESSAO": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPESunMask": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()"
    ]
  },
  "PPEUnderWater": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEWetDistort": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "string GetDefaultMaterialPath()",
      "void RegisterMaterialParameters()"
    ]
  },
  "PPEMatClassParameterBool": {
    "parent": "PPEMatClassParameterCommandData",
    "methods": [
      "void PPEMatClassParameterBool(int mat_idx, int parameter_idx, PPEClassBase parent)",
      "void InitDefaults()",
      "void InitCuttent()",
      "int GetParameterVarType()",
      "void Update(float timeslice, out Param p_total, out bool setting_defaults, int order)",
      "void PrepareLayerInfo(int layer, bool value, int operator)",
      "void SetParameterValueDefault(inout Param p_total)"
    ]
  },
  "ColorValuesData": {
    "parent": null,
    "methods": [
      "void ColorValuesData(array<float> values, int operator)",
      "void SetValues(array<float> values)",
      "void SetOperator(int operator)",
      "int GetOperator()",
      "void PPEMatClassParameterColor(int mat_idx, int parameter_idx, PPEClassBase parent)",
      "void InitDefaults()",
      "void InitCuttent()",
      "int GetParameterVarType()",
      "void Update(float timeslice, out Param p_total, out bool setting_defaults, int order)",
      "void PrepareLayerInfo(int layer, array<float> values, int operator)",
      "void SetParameterValueDefault(inout Param p_total)",
      "void ModifyResultValues(inout Param result_values)"
    ]
  },
  "PPEMatClassParameterColor": {
    "parent": "PPEMatClassParameterCommandData",
    "methods": [
      "void PPEMatClassParameterColor(int mat_idx, int parameter_idx, PPEClassBase parent)",
      "void InitDefaults()",
      "void InitCuttent()",
      "int GetParameterVarType()",
      "void Update(float timeslice, out Param p_total, out bool setting_defaults, int order)",
      "void PrepareLayerInfo(int layer, array<float> values, int operator)",
      "void SetParameterValueDefault(inout Param p_total)",
      "void ModifyResultValues(inout Param result_values)"
    ]
  },
  "PPEMatClassParameterColorColorization": {
    "parent": "PPEMatClassParameterColor",
    "methods": [
      "void ModifyResultValues(inout Param result_values)"
    ]
  },
  "PPEMatClassParameterCommandData": {
    "parent": null,
    "methods": [
      "void PPEMatClassParameterCommandData(int mat_idx, int parameter_idx, PPEClassBase parent)",
      "int GetParameterVarType()",
      "void SetMaterialIndex(int value)",
      "void SetParameterIndex(int value)",
      "void Setparent(PPEClassBase parent)",
      "void InsertRequestData(PPERequestParamDataBase request_data)",
      "void Update(float timeslice, out Param p_total, out bool setting_defaults, int order)",
      "void ModifyResultValues(inout Param result_values)",
      "void AddPriorityInfo(int priority)",
      "void RemovePriorityInfo(int priority)",
      "void RegisterDefaults(Param p)",
      "void InitDefaults()",
      "void InitCuttent()",
      "void SetParameterValueDefault(inout Param p_total)",
      "void DbgPrnt(string text)"
    ]
  },
  "PPEMatClassParameterFloat": {
    "parent": "PPEMatClassParameterCommandData",
    "methods": [
      "void PPEMatClassParameterFloat(int mat_idx, int parameter_idx, PPEClassBase parent)",
      "void InitDefaults()",
      "void InitCuttent()",
      "int GetParameterVarType()",
      "void Update(float timeslice, out Param p_total, out bool setting_defaults, int order)",
      "void PrepareLayerInfo(int layer, float value, int operator)",
      "void SetParameterValueDefault(inout Param p_total)",
      "void PPEMatClassParameterFloatSaturation(int mat_idx, int parameter_idx, PPEClassBase parent)"
    ]
  },
  "PPEMatClassParameterFloatSaturation": {
    "parent": "PPEMatClassParameterFloat",
    "methods": [
      "void PPEMatClassParameterFloatSaturation(int mat_idx, int parameter_idx, PPEClassBase parent)"
    ]
  },
  "PPEMatClassParameterInt": {
    "parent": "PPEMatClassParameterCommandData",
    "methods": [
      "void PPEMatClassParameterInt(int mat_idx, int parameter_idx, PPEClassBase parent)",
      "void InitDefaults()",
      "void InitCuttent()",
      "int GetParameterVarType()",
      "void Update(float timeslice, out Param p_total, out bool setting_defaults, int order)",
      "void PrepareLayerInfo(int layer, int value, int operator)",
      "void SetParameterValueDefault(inout Param p_total)"
    ]
  },
  "PPEMatClassParameterResource": {
    "parent": "PPEMatClassParameterCommandData",
    "methods": [
      "int GetParameterVarType()"
    ]
  },
  "PPEMatClassParameterTexture": {
    "parent": "PPEMatClassParameterCommandData",
    "methods": [
      "int GetParameterVarType()"
    ]
  },
  "PPEMatClassParameterVector": {
    "parent": "PPEMatClassParameterCommandData",
    "methods": [
      "int GetParameterVarType()"
    ]
  },
  "AreaDamageEvents": {
    "parent": null,
    "methods": [
      "void OnTriggerCreated()",
      "void OnTriggerDestroyed()",
      "void OnEnterBeginEvent(TriggerInsider insider)",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnEnterEndEvent(TriggerInsider insider)",
      "void OnStayStartBeginEvent(int nrOfInsiders)",
      "void OnStayStartServerEvent(int nrOfInsiders)",
      "void OnStayStartClientEvent(int nrOfInsiders)",
      "void OnStayStartEndEvent(int nrOfInsiders)",
      "void OnStayBeginEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayEndEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayFinishBeginEvent()",
      "void OnStayFinishServerEvent()",
      "void OnStayFinishClientEvent()",
      "void OnStayFinishEndEvent()",
      "void OnLeaveBeginEvent(TriggerInsider insider)",
      "void OnLeaveServerEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)",
      "void OnLeaveEndEvent(TriggerInsider insider)",
      "bool OnEvaluateDamage(TriggerInsider insider, float damageCoef)",
      "void PreDamageActions()",
      "void PostDamageActions()"
    ]
  },
  "AreaDamageLooped": {
    "parent": null,
    "methods": [
      "void AreaDamageLooped(EntityAI parent, bool loopByObject = true)",
      "void OnTriggerCreated()",
      "void SetLoopInterval( float time )",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnStayStartServerEvent(int nrOfInsiders)",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayFinishServerEvent()",
      "float CalculateDamageScale(TriggerInsider insider, float deltaTime)"
    ]
  },
  "AreaDamageLoopedDeferred": {
    "parent": null,
    "methods": [
      "void SetDeferDuration(float time)",
      "float CalculateDamageScale(TriggerInsider insider, float deltaTime)"
    ]
  },
  "AreaDamageLoopedDeferred_NoVehicle": {
    "parent": null,
    "methods": [
      "bool OnEvaluateDamageEx( TriggerInsider insider, float deltaTime )"
    ]
  },
  "AreaDamageComponentTypes": {
    "parent": null,
    "methods": [
      "void AreaDamageManager(EntityAI parent)",
      "void SetDamageComponentType(int type)",
      "void Spawn()",
      "void Destroy()",
      "void OnTriggerCreated()",
      "void OnTriggerDestroyed()",
      "void OnEnterBeginEvent(TriggerInsider insider)",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnEnterEndEvent(TriggerInsider insider)",
      "void OnStayStartBeginEvent(int nrOfInsiders)",
      "void OnStayStartServerEvent(int nrOfInsiders)",
      "void OnStayStartClientEvent(int nrOfInsiders)",
      "void OnStayStartEndEvent(int nrOfInsiders)",
      "void OnStayBeginEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayEndEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayFinishBeginEvent()",
      "void OnStayFinishServerEvent()",
      "void OnStayFinishClientEvent()",
      "void OnStayFinishEndEvent()",
      "void OnLeaveBeginEvent(TriggerInsider insider)",
      "void OnLeaveServerEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)",
      "void OnLeaveEndEvent(TriggerInsider insider)",
      "bool OnEvaluateDamage(TriggerInsider insider, float damageCoef)",
      "void PreDamageActions()",
      "void PostDamageActions()",
      "bool OnEvaluateDamageEx(TriggerInsider insider, float deltaTime)",
      "float CalculateDamageScale(TriggerInsider insider, float deltaTime)",
      "void SetExtents( vector mins, vector maxs )",
      "void GetExtents( out vector mins, out vector maxs )",
      "void GetWorldExtents( out vector mins, out vector maxs )",
      "void SetAmmoName( string ammo_name )",
      "string GetAmmoName()",
      "void SetDamageType( int pDamageType )",
      "int GetDamageType()",
      "void SetparentObject( EntityAI obj )",
      "void SetAreaPosition( vector position )",
      "void SetAreaOrientation( vector orientation )",
      "void SetDamageableTypes(array<typename> damageableTypes)",
      "void AddDamageableType(typename damageableType)",
      "void RemoveAddDamageableType(typename damageableType)",
      "void SetLoopInterval( float time )",
      "void SetDeferDuration( float time )",
      "void SetHitZones( array<string> hitzones )",
      "void SetRaycastSources( array<string> raycast_sources )",
      "void SetRaycastSourcesVector( array<vector> raycast_sources )",
      "bool CreateDamageTriggerEx()",
      "void CreateDamageTrigger()",
      "bool DestroyDamageTriggerEx()",
      "void DestroyDamageTrigger()"
    ]
  },
  "AreaDamageManager": {
    "parent": null,
    "methods": [
      "void AreaDamageManager(EntityAI parent)",
      "void SetDamageComponentType(int type)",
      "void Spawn()",
      "void Destroy()",
      "void OnTriggerCreated()",
      "void OnTriggerDestroyed()",
      "void OnEnterBeginEvent(TriggerInsider insider)",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnEnterEndEvent(TriggerInsider insider)",
      "void OnStayStartBeginEvent(int nrOfInsiders)",
      "void OnStayStartServerEvent(int nrOfInsiders)",
      "void OnStayStartClientEvent(int nrOfInsiders)",
      "void OnStayStartEndEvent(int nrOfInsiders)",
      "void OnStayBeginEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayEndEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayFinishBeginEvent()",
      "void OnStayFinishServerEvent()",
      "void OnStayFinishClientEvent()",
      "void OnStayFinishEndEvent()",
      "void OnLeaveBeginEvent(TriggerInsider insider)",
      "void OnLeaveServerEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)",
      "void OnLeaveEndEvent(TriggerInsider insider)",
      "bool OnEvaluateDamage(TriggerInsider insider, float damageCoef)",
      "void PreDamageActions()",
      "void PostDamageActions()",
      "bool OnEvaluateDamageEx(TriggerInsider insider, float deltaTime)",
      "float CalculateDamageScale(TriggerInsider insider, float deltaTime)",
      "void SetExtents( vector mins, vector maxs )",
      "void GetExtents( out vector mins, out vector maxs )",
      "void GetWorldExtents( out vector mins, out vector maxs )",
      "void SetAmmoName( string ammo_name )",
      "string GetAmmoName()",
      "void SetDamageType( int pDamageType )",
      "int GetDamageType()",
      "void SetparentObject( EntityAI obj )",
      "void SetAreaPosition( vector position )",
      "void SetAreaOrientation( vector orientation )",
      "void SetDamageableTypes(array<typename> damageableTypes)",
      "void AddDamageableType(typename damageableType)",
      "void RemoveAddDamageableType(typename damageableType)",
      "void SetLoopInterval( float time )",
      "void SetDeferDuration( float time )",
      "void SetHitZones( array<string> hitzones )",
      "void SetRaycastSources( array<string> raycast_sources )",
      "void SetRaycastSourcesVector( array<vector> raycast_sources )",
      "bool CreateDamageTriggerEx()",
      "void CreateDamageTrigger()",
      "bool DestroyDamageTriggerEx()",
      "void DestroyDamageTrigger()"
    ]
  },
  "AreaDamageOnce": {
    "parent": null,
    "methods": [
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void SetDeferDuration(float time)",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "float CalculateDamageScale(TriggerInsider insider, float deltaTime)"
    ]
  },
  "AreaDamageOnceDeferred": {
    "parent": null,
    "methods": [
      "void SetDeferDuration(float time)",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "float CalculateDamageScale(TriggerInsider insider, float deltaTime)"
    ]
  },
  "AreaDamageTriggerInsider": {
    "parent": null,
    "methods": [
      "void AreaDamageTriggerInsider(Object obj)",
      "void AreaDamageTriggerBase()",
      "void SetAreaDamageManager( AreaDamageManager adType )",
      "void OnEnterBeginEvent(TriggerInsider insider)",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnEnterEndEvent(TriggerInsider insider)",
      "void OnStayStartBeginEvent(int nrOfInsiders)",
      "void OnStayStartServerEvent(int nrOfInsiders)",
      "void OnStayStartClientEvent(int nrOfInsiders)",
      "void OnStayStartEndEvent(int nrOfInsiders)",
      "void OnStayBeginEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayEndEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayFinishBeginEvent()",
      "void OnStayFinishServerEvent()",
      "void OnStayFinishClientEvent()",
      "void OnStayFinishEndEvent()",
      "void OnLeaveBeginEvent(TriggerInsider insider)",
      "void OnLeaveServerEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)",
      "void OnLeaveEndEvent(TriggerInsider insider)",
      "bool ShouldRemoveInsider(TriggerInsider insider)",
      "void AddInsider(Object obj)",
      "void RemoveInsider(TriggerInsider insider, int index = -1)",
      "void UpdateInsiders(int timeout)"
    ]
  },
  "AreaDamageTriggerBase": {
    "parent": null,
    "methods": [
      "void AreaDamageTriggerBase()",
      "void SetAreaDamageManager( AreaDamageManager adType )",
      "void OnEnterBeginEvent(TriggerInsider insider)",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnEnterEndEvent(TriggerInsider insider)",
      "void OnStayStartBeginEvent(int nrOfInsiders)",
      "void OnStayStartServerEvent(int nrOfInsiders)",
      "void OnStayStartClientEvent(int nrOfInsiders)",
      "void OnStayStartEndEvent(int nrOfInsiders)",
      "void OnStayBeginEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayEndEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayFinishBeginEvent()",
      "void OnStayFinishServerEvent()",
      "void OnStayFinishClientEvent()",
      "void OnStayFinishEndEvent()",
      "void OnLeaveBeginEvent(TriggerInsider insider)",
      "void OnLeaveServerEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)",
      "void OnLeaveEndEvent(TriggerInsider insider)",
      "bool ShouldRemoveInsider(TriggerInsider insider)",
      "void AddInsider(Object obj)",
      "void RemoveInsider(TriggerInsider insider, int index = -1)",
      "void UpdateInsiders(int timeout)"
    ]
  },
  "AreaDamageTriggerDirect": {
    "parent": "AreaDamageTriggerBase",
    "methods": [
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)"
    ]
  },
  "HitDirectionImagesArrow_Static": {
    "parent": null,
    "methods": [
      "static void InitArrays()",
      "void PerformRegisterImages()"
    ]
  },
  "HitDirectionImagesArrow": {
    "parent": "HitDirectionImagesBase",
    "methods": [
      "void PerformRegisterImages()"
    ]
  },
  "HitDirectionImagesBase": {
    "parent": null,
    "methods": [
      "void HitDirectionImagesBase()",
      "void PerformRegisterImages()",
      "void RegisterImage(string layout_path, string image_name)",
      "void RandomizeImageIdx()",
      "void GetCurrentImageData(out Widget layout, out Widget image)"
    ]
  },
  "HitDirectionImagesSpike_Static": {
    "parent": null,
    "methods": [
      "static void InitArrays()",
      "void PerformRegisterImages()"
    ]
  },
  "HitDirectionImagesSpike": {
    "parent": "HitDirectionImagesBase",
    "methods": [
      "void PerformRegisterImages()"
    ]
  },
  "HitDirectionImagesSplash_Static": {
    "parent": null,
    "methods": [
      "static void InitArrays()",
      "void PerformRegisterImages()"
    ]
  },
  "HitDirectionImagesSplash": {
    "parent": "HitDirectionImagesBase",
    "methods": [
      "void PerformRegisterImages()"
    ]
  },
  "AntibioticsMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugText()",
      "string GetDebugTextSimple()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "BloodRegenMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "float GetRegenModifierWater(float water)",
      "float GetRegenModifierEnergy(float energy)"
    ]
  },
  "BoneRegenMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "BreathVapourMdfr": {
    "parent": "ModifierBase",
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugText()",
      "string GetDebugTextSimple()",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "CharcoalMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugTextSimple()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "ChelationMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugText()",
      "string GetDebugTextSimple()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "DisinfectionMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugText()",
      "string GetDebugTextSimple()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "DrowningMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool CheckIsDrowning(PlayerBase player)",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "void OnReconnect(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void PlayDrowningSound(int index)",
      "void OnDeactivate(PlayerBase player)"
    ]
  },
  "EpinephrineMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugText()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)"
    ]
  },
  "FliesMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "void OnReconnect(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)"
    ]
  },
  "HealthMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "HealthRegenMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "HeatComfortMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugText()",
      "string GetDebugTextSimple()",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "HungerMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "ImmuneSystemMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "ImmunityBoost": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugText()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)"
    ]
  },
  "MaskMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "void HandleSounds(PlayerBase player, float deltaT, MaskBase mask)",
      "void OnReconnect(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)"
    ]
  },
  "MorphineMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugText()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)"
    ]
  },
  "PainKillersMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "string GetDebugText()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "SalineMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "float CalculateRegenTime()"
    ]
  },
  "ShockMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "float GetRefillSpeed(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "void OnReconnect(PlayerBase player)"
    ]
  },
  "ShockDamageMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "StomachMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "TestingMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "ThirstMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "ToxicityMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "void OnReconnect(PlayerBase player)",
      "void OnActivate(PlayerBase player)"
    ]
  },
  "UnconsciousnessMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "string GetDebugText()",
      "void OnReconnect(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "BleedingNotfr": {
    "parent": null,
    "methods": [
      "void BleedingNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayBadge()",
      "void HideBadge()"
    ]
  },
  "BloodNotfr": {
    "parent": null,
    "methods": [
      "void BloodNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayTendency(float delta)",
      "float GetObservedValue()"
    ]
  },
  "FeverNotfr": {
    "parent": null,
    "methods": [
      "void FeverNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayBadge()",
      "void HideBadge()"
    ]
  },
  "FracturedLegNotfr": {
    "parent": null,
    "methods": [
      "void FracturedLegNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void SetActive( bool state )",
      "void DisplayBadge()",
      "void HideBadge()"
    ]
  },
  "HealthNotfr": {
    "parent": null,
    "methods": [
      "void HealthNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayBadge()",
      "void DisplayTendency(float delta)",
      "void HideBadge()",
      "float GetObservedValue()"
    ]
  },
  "HeartbeatNotfr": {
    "parent": null,
    "methods": [
      "void HeartbeatNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayBadge()",
      "void HideBadge()"
    ]
  },
  "HungerNotfr": {
    "parent": null,
    "methods": [
      "void HungerNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayTendency(float delta)",
      "void DisplayBadge()",
      "void HideBadge()",
      "float GetObservedValue()"
    ]
  },
  "InjuredLegNotfr": {
    "parent": null,
    "methods": [
      "void InjuredLegNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayBadge()",
      "void HideBadge()"
    ]
  },
  "PillsNotfr": {
    "parent": null,
    "methods": [
      "void PillsNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayBadge()",
      "void HideBadge()"
    ]
  },
  "SickNotfr": {
    "parent": null,
    "methods": [
      "void SickNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayBadge()",
      "void HideBadge()"
    ]
  },
  "StuffedNotfr": {
    "parent": null,
    "methods": [
      "void StuffedNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayBadge()",
      "void HideBadge()"
    ]
  },
  "ThirstNotfr": {
    "parent": null,
    "methods": [
      "void ThirstNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayTendency(float delta)",
      "void DisplayBadge()",
      "void HideBadge()",
      "float GetObservedValue()"
    ]
  },
  "WarmthNotfr": {
    "parent": null,
    "methods": [
      "void WarmthNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayTendency(float delta)",
      "float GetObservedValue()"
    ]
  },
  "WetnessNotfr": {
    "parent": null,
    "methods": [
      "void WetnessNotfr(NotifiersManager manager)",
      "int GetNotifierType()",
      "void DisplayBadge()",
      "void HideBadge()"
    ]
  },
  "AttachHolster": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "AttachHolsterPouch": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "AttachPouch": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "AttachPouchesHolster": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "BloodTest": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "ChelateWater": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CleanRags": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CleanWeapon": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "CloseScientificBriefcase": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftArmbandFlag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftArmbandRag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftArmbandRaincoat": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftArrow": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftArrowBone": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftBait": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo( ItemBase ingredients[], PlayerBase player )"
    ]
  },
  "CraftBaseBallBatBarbed": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "void Do( ItemBase ingredients[], PlayerBase player, array<ItemBase> results, float specialty_weight )"
    ]
  },
  "CraftBaseBallBatNailed": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftBloodBagIV": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftBoneBait": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo( ItemBase ingredients[], PlayerBase player )"
    ]
  },
  "CraftBoneHook": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "bool IsRepeatable()"
    ]
  },
  "CraftBoneKnife": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "CraftBow": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftBurlapStrips": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftCamoNetShelter": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftCookingStand": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftCourierBag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftDrysackBag": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftFeathers": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftFenceKit": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftFireplace": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do( ItemBase ingredients[], PlayerBase player, array<ItemBase> results, float specialty_weight )"
    ]
  },
  "CraftFishingRod": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftFishNetTrap": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftGasMask_Filter_Improvised": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo( ItemBase ingredients[], PlayerBase player )"
    ]
  },
  "CraftGhillieAttachment": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftGhillieBushrag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftGhillieHood": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftGhillieSuit": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftGhillieTop": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftGorkaHelmetComplete": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftGutsRope": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftHandDrillKit": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftImprovisedBag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftImprovisedExplosive": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftImprovisedLeatherBag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftLeatherCourierBag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftLeatherSack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftLongTorch": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftMetalWire": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftRabbitSnare": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftRag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftRagRope": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftSalineBagIV": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftShelterKit": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftSmallFishTrap": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftSpearBone": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftSpearStone": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftSplint": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftStoneKnife": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftSuppressor": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftTannedLeather": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do( ItemBase ingredients[], PlayerBase player, array<ItemBase> results, float specialty_weight )"
    ]
  },
  "CraftTerritoryFlagKit": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftTorch": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftTripWire": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftTruck01DoubleWheel": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CraftWatchtowerKit": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftWitchHoodCoif": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftWoodenCrate": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftWoodenHook": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CraftWoodenPlank": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "CutOutPepperSeeds": {
    "parent": "CutOutSeeds",
    "methods": [
      "void Init()"
    ]
  },
  "CutOutPumpkinSeeds": {
    "parent": "CutOutSeeds",
    "methods": [
      "void Init()",
      "void Do(ItemBase ingredients[], PlayerBase player, array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CutOutSeeds": {
    "parent": "RecipeBase",
    "methods": [
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player, array<ItemBase> results, float specialty_weight)"
    ]
  },
  "CutOutTomatoSeeds": {
    "parent": "CutOutSeeds",
    "methods": [
      "void Init()"
    ]
  },
  "CutOutZucchiniSeeds": {
    "parent": "CutOutSeeds",
    "methods": [
      "void Init()"
    ]
  },
  "DeCraftArmband": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftBow": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftCamoNetShelter": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftCarrierComplete": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftCarrierHolster": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftCarrierPouches": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftCookingStand": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftCourierBag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftDetonator": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "DeCraftFishingRod": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftFishNetTrap": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftGhillieAttachment": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftGhillieBushrag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftGhillieHood": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftGhillieSuit": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftGhillieTop": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftHandDrillKit": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftImprovisedBag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftImprovisedLeatherBag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftLeatherCourierBag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftLeatherSack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftSnareTrap": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftSpear": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftSplint": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftTripWire": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "DeCraftTruck01DoubleWheel": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "DeCraftWoodenCrate": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "DisinfectItem": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "DrainLiquid": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "ExtinguishTorch": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "FillGasMask_Filter": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo( ItemBase ingredients[], PlayerBase player )",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "FillSyringe": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "FuelChainsaw": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "LoadMagazine": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "void OnSelected(ItemBase item1, ItemBase item2, PlayerBase player)",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "OpenCan": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "OpenScientificBriefcase": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAK101": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAK10130Mag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAK74": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAK7430Mag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAK74HndgrdBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAK74HndgrdCamo": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAK74WoodBttstckBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAK74WoodBttstckCamo": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAKFoldingBttstck": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAKMDrumMag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAKMPalm30Mag": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAKPlasticBttstck": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAKRailHndgrd": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAKS74U": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAKS74UBttstck": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAKWoodBttstckBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintAKWoodBttstckCamo": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintB95": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintBallisticHelmet": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintCMAG10": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintCMAG20": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintCMAG30": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintCMAG40": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintCz527": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintCz527CamoBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintCz527CamoGreen": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintDarkMotohelmet": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintFirefighterAxe": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieAttBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieAttGreen": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieAttGreenMossy": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieBushragBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieBushragGreen": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieBushragGreenMossy": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieHoodBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieHoodGreen": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieHoodGreenMossy": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieSuitBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieSuitGreen": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieSuitGreenMossy": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieTopBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieTopGreen": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGhillieTopGreenMossy": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGorkaHelmet": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintGorkaHelmetComplete": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintM4A1": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintM4CQBBttstck": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintM4MPBttstck": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintM4MPHndgrd": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintM4OEBttstck": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintM4PlasticHndgrd": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintM4RISHndgrd": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintMosin": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintMosinCamoBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintMosinCamoGreen": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintMotohelmet": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintRuger1022": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintSawedoffMosin": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintSawedoffMosinCamoBlack": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintSawedoffMosinCamoGreen": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintSKS": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PaintZSh3PilotHelmet": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PatchItem": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "PeelPotato": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PluginRecipesManagerBase": {
    "parent": "PluginBase",
    "methods": [
      "void RegisterRecipe(RecipeBase recipe)",
      "void UnregisterRecipe(string clasname)",
      "void RegisterRecipies()"
    ]
  },
  "PokeHolesBarrel": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void TransferItemsToNew(PlayerBase player, ItemBase barrel_old, ItemBase barrel_new)"
    ]
  },
  "PourLiquid": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PrepareAnimal": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player, array<ItemBase> results, float specialty_weight)",
      "void SetBloodyHands(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "PrepareCarp": {
    "parent": "PrepareFish",
    "methods": [
      "void Init()"
    ]
  },
  "PrepareChicken": {
    "parent": "PrepareAnimal",
    "methods": [
      "void Init()",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PrepareFish": {
    "parent": "PrepareAnimal",
    "methods": [
      "void Init()"
    ]
  },
  "PrepareFox": {
    "parent": "PrepareAnimal",
    "methods": [
      "void Init()",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PrepareMackerel": {
    "parent": "PrepareFish",
    "methods": [
      "void Init()"
    ]
  },
  "PrepareRabbit": {
    "parent": "PrepareAnimal",
    "methods": [
      "void Init()",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "PrepareSteelheadTrout": {
    "parent": "PrepareFish",
    "methods": [
      "void Init()"
    ]
  },
  "PrepareWalleyePollock": {
    "parent": "PrepareFish",
    "methods": [
      "void Init()"
    ]
  },
  "PurifyWater": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "RecipeTest": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "RefuelTorch": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "RepairElectric": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "RepairEpoxy": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "RepairEyePatch": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "RepairPlanks": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "RepairWithPliers": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "RepairWithRags": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "RepairWithTape": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "SawOFFB95": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SawoffFAMAS": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SawOffIzh18": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SawOffIzh18Shotgun": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SawOffMagnum": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SawoffMosin": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SawoffMosinPainted": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SawoffShotgunIzh43": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SawWoodenLog": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "SharpenBroom": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SharpenLongStick": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SharpenMelee": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)",
      "bool IsRepeatable()"
    ]
  },
  "SharpenStick": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SplitBroom": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "SplitFirewood": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "SplitLongWoodenStick": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "SplitStones": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "UpgradeTorchWithLard": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "UpgradeTorchWithLiquidFuel": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)",
      "void Do(ItemBase ingredients[], PlayerBase player,array<ItemBase> results, float specialty_weight)"
    ]
  },
  "WriteLetter": {
    "parent": "RecipeBase",
    "methods": [
      "void Init()",
      "bool CanDo(ItemBase ingredients[], PlayerBase player)"
    ]
  },
  "Ak101Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Ak74Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "AkmRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Aks74uRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "AUGRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "B95Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Colt1911Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "CrossbowRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "CZ527Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "CZ550Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Cz75Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "DEagleRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "DefaultRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "DerringerRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "FALRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "FamasRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Fnx45Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "GlockRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Izh18Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Izh18SawedOffRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Izh18ShotgunRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Izh43Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "LongHornRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "M14Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "M16A2Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "M4a1Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "M79Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "MagnumRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "MakarovRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "MkiiRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "MosinRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "MosinSawedOffRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Mp133Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Mp5kRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "P1Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "PP19Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "RepeaterRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Ruger1022Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "ScoutRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "SiagaRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Cz61Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "SKSRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "SSG82Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "SV98Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "SvdRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Ump45Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "VSSRecoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "Winchester70Recoil": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "InfectedSoundEventBase": {
    "parent": "SoundEventBase",
    "methods": [
      "void InfectedSoundEventBase()",
      "void Init(ZombieBase pInfected)",
      "void SoftStop()",
      "void Stop()",
      "void PosUpdate()",
      "bool Play()"
    ]
  },
  "InfectedSoundEventHandler": {
    "parent": "SoundEventHandler",
    "methods": [
      "void InfectedSoundEventHandler(ZombieBase pInfected)",
      "static int GetSoundEventType(int id)",
      "int GetCurrentStateEventID()",
      "int GetCurrentStateEventType()",
      "void Stop()",
      "void SoftStop()",
      "bool IsPlaying()",
      "bool PlayRequest(int id, bool sent_from_server = false)"
    ]
  },
  "PlayerSoundEventBase": {
    "parent": "SoundEventBase",
    "methods": [
      "bool IsDummy()",
      "bool HasHoldBreathException()",
      "void PlayerSoundEventBase()",
      "int GetSoundVoiceAnimEventClassID()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "bool IsFinished()",
      "bool IsDummyFinished()",
      "void OnTick(float delta_time)",
      "bool CanPlay(PlayerBase player)",
      "void Init(PlayerBase player)",
      "void InitEx(PlayerBase player, int param)",
      "void OnEnd()",
      "void SendEvent(float time)",
      "void OnInterupt()",
      "void OnPlay(PlayerBase player)",
      "bool Play()"
    ]
  },
  "PlayerSoundEventHandler": {
    "parent": "SoundEventHandler",
    "methods": [
      "void PlayerSoundEventHandler(PlayerBase player)",
      "void RegisterState(PlayerSoundEventBase state)",
      "void OnTick(float delta_time)",
      "int ConvertAnimIDtoEventID(int anim_id)",
      "int GetCurrentStateEventID()",
      "int GetCurrentStateEventType()",
      "bool PlayRequestEx(EPlayerSoundEventID id, bool sent_from_server = false, int param = 0)",
      "bool PlayRequest(EPlayerSoundEventID id, bool sent_from_server = false)"
    ]
  },
  "ReplaceSoundEventBase": {
    "parent": null,
    "methods": [
      "int GetSoundAnimEventClassID()",
      "void Init(PlayerBase player)",
      "bool Play()",
      "void SelectSoundID()"
    ]
  },
  "ReplaceSoundEventHandler": {
    "parent": null,
    "methods": [
      "void ReplaceSoundEventHandler(PlayerBase player)",
      "void RegisterEvent(ReplaceSoundEventBase soundEvent)",
      "int GetSoundEventID(int anim_id, ESoundEventType soundType)",
      "bool PlayReplaceSound(int soundEventID, ESoundEventType soundType, int flags)"
    ]
  },
  "AgentBase": {
    "parent": null,
    "methods": [
      "void AgentBase()",
      "void Init()",
      "int GetAgentType()",
      "float GetDieOffSpeedEx(PlayerBase player)",
      "float GetInvasibilityEx(PlayerBase player)",
      "float GetDigestibilityEx(PlayerBase player)",
      "float GetDieOffSpeed()",
      "float GetAntiboticsResistance()",
      "float GetAntibioticsResistanceEx(PlayerBase player)",
      "float GetInvasibility()",
      "bool GrowDuringMedicalDrugsAttack(EMedicalDrugsType drugType, PlayerBase player)",
      "float GetDigestibility()",
      "float CalculateAutoinfectProbability(float userprob)",
      "bool AutoinfectCheck(float deltaT, PlayerBase player)",
      "bool CanAutoinfectPlayer(PlayerBase player)",
      "float GetTransferabilityIn()",
      "float GetTransferabilityOut()",
      "float GetTransferabilityAirOut()",
      "int GetMaxCount()",
      "int GetAutoinfectCount()",
      "string GetName()",
      "bool GrowDuringAntibioticsAttack(PlayerBase player)"
    ]
  },
  "BrainAgent": {
    "parent": "AgentBase",
    "methods": [
      "void Init()"
    ]
  },
  "ChemicalAgent": {
    "parent": "AgentBase",
    "methods": [
      "void Init()",
      "float GetDieOffSpeedEx(PlayerBase player)"
    ]
  },
  "CholeraAgent": {
    "parent": "AgentBase",
    "methods": [
      "void Init()"
    ]
  },
  "FoodPoisonAgent": {
    "parent": null,
    "methods": [
      "void Init()",
      "float GetInvasibilityEx(PlayerBase player)",
      "float GetDieOffSpeedEx(PlayerBase player)",
      "float GetDigestibilityEx(PlayerBase player)"
    ]
  },
  "HeavyMetalAgent": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool GrowDuringMedicalDrugsAttack(EMedicalDrugsType drugType, PlayerBase player)",
      "float GetInvasibilityEx(PlayerBase player)",
      "float GetDieOffSpeedEx(PlayerBase player)"
    ]
  },
  "InfluenzaAgent": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool AutoinfectCheck(float deltaT, PlayerBase player)",
      "bool CanAutoinfectPlayer(PlayerBase player)",
      "float GetInvasibilityEx(PlayerBase player)",
      "float GetDieOffSpeedEx(PlayerBase player)"
    ]
  },
  "NerveAgent": {
    "parent": "AgentBase",
    "methods": [
      "void Init()"
    ]
  },
  "SalmonellaAgent": {
    "parent": "AgentBase",
    "methods": [
      "void Init()"
    ]
  },
  "WoundAgent": {
    "parent": null,
    "methods": [
      "void Init()",
      "float GetAntibioticsResistanceEx(PlayerBase player)",
      "bool GrowDuringMedicalDrugsAttack(EMedicalDrugsType drugType, PlayerBase player)"
    ]
  },
  "PlayerAgentPool": {
    "parent": null,
    "methods": [
      "void PlayerAgentPool(PlayerBase player)",
      "int GetStorageVersion()",
      "void PrintAgents()",
      "void ImmuneSystemTick(float value, float deltaT)",
      "void GrowAgents(float deltaT)",
      "void ProcessTemporaryResistance(float deltaTime)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void DigestAgent(int agent_id, float count)",
      "void AddAgent(int agent_id, float count)",
      "void RemoveAgent(int agent_id)",
      "void RemoveAllAgents()",
      "void ReduceAgent(int id, float percent)",
      "int GetAgents()",
      "int GetSingleAgentCount(int agent_id)",
      "float GetTotalAgentCount()",
      "void SpawnAgents(float deltaT)",
      "void SetAgentCount(int agent_id, float count)",
      "void AntibioticsAttack(float attack_value)",
      "void DrugsAttack(EMedicalDrugsType drugType, float attackValue)",
      "void SetTemporaryResistance(int agentId, float time)",
      "float GetTemporaryResistance(int agentId)",
      "void ResetTemporaryResistance()",
      "void RemoteGrowRequestDebug(ParamsReadContext ctx)",
      "void GetDebugObject(array<ref Param> object_out)"
    ]
  },
  "CABase": {
    "parent": null,
    "methods": [
      "void Init( ActionData action_data )",
      "void Setup( ActionData action_data  )",
      "int Execute( ActionData action_data  )",
      "int Cancel( ActionData action_data )",
      "int Interrupt( ActionData action_data )",
      "void SetACData(Param units)",
      "bool IsContinuousAction()",
      "float GetProgress()",
      "float GetProgressWidgetMultiplier()"
    ]
  },
  "CAContinuousBase": {
    "parent": null,
    "methods": [
      "bool IsContinuousAction()",
      "void OnCompletePogress(ActionData action_data)"
    ]
  },
  "CAContinuousCraft": {
    "parent": null,
    "methods": [
      "void Setup( ActionData action_data  )",
      "int Execute( ActionData action_data  )",
      "float GetProgress()"
    ]
  },
  "CAContinuousDisinfectPlant": {
    "parent": null,
    "methods": [
      "void CAContinuousDisinfectPlant( float quantity_used_per_second )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "float GetProgress()"
    ]
  },
  "CAContinuousEmpty": {
    "parent": null,
    "methods": [
      "void CAContinuousEmpty( float quantity_emptied_per_second )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousEmptyMagazine": {
    "parent": null,
    "methods": [
      "void CAContinuousEmptyMagazine( float eject_time )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousFertilizeGardenSlot": {
    "parent": null,
    "methods": [
      "void CAContinuousFertilizeGardenSlot( float quantity_used_per_second )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "float GetProgress()"
    ]
  },
  "CAContinuousFill": {
    "parent": null,
    "methods": [
      "void CAContinuousFill( float quantity_filled_per_second , int liquid_type )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity(ActionData action_data)"
    ]
  },
  "CAContinuousFillBrakes": {
    "parent": null,
    "methods": [
      "void CAContinuousFillBrakes( float quantity_used_per_second, float time_to_progress )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousFillCoolant": {
    "parent": null,
    "methods": [
      "void CAContinuousFillCoolant( float quantity_used_per_second, float time_to_progress )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousFillFuel": {
    "parent": null,
    "methods": [
      "void CAContinuousFillFuel( float quantity_used_per_second, float time_to_progress )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousFillOil": {
    "parent": null,
    "methods": [
      "void CAContinuousFillOil( float quantity_used_per_second, float time_to_progress )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousFillPowerGenerator": {
    "parent": null,
    "methods": [
      "void CAContinuousFillPowerGenerator( float quantity_filled_per_second , int liquid_type )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousFish": {
    "parent": null,
    "methods": [
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )"
    ]
  },
  "CAContinuousLoadMagazine": {
    "parent": null,
    "methods": [
      "void CAContinuousLoadMagazine( float time_to_complete_action )",
      "void Setup( ActionData action_data )"
    ]
  },
  "CAContinuousMineRock": {
    "parent": null,
    "methods": [
      "void CAContinuousMineRock(float time_between_drops)",
      "bool GetMiningData(ActionData action_data )"
    ]
  },
  "CAContinuousMineWood": {
    "parent": null,
    "methods": [
      "void CAContinuousMineWood(float time_between_drops)",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )",
      "float GetProgress()",
      "bool GetMiningData(ActionData action_data )",
      "void CreatePrimaryItems(ActionData action_data)",
      "void CreateSecondaryItems(ActionData action_data, string material_secondary = , int quantity_secondary = -1)",
      "void DamagePlayersHands(PlayerBase player)"
    ]
  },
  "CAContinuousQuantity": {
    "parent": null,
    "methods": [
      "void CAContinuousQuantity( float quantity_used_per_second )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousQuantityBloodTransfer": {
    "parent": null,
    "methods": [
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousQuantityEdible": {
    "parent": null,
    "methods": [
      "void CAContinuousQuantityEdible(float quantity_used_per_second, float time_to_repeat)",
      "void Setup(ActionData action_data)",
      "void CalcAndSetQuantity(ActionData action_data)",
      "float GetProgress()"
    ]
  },
  "CAContinuousQuantityExtinguish": {
    "parent": null,
    "methods": [
      "void CAContinuousQuantityExtinguish(float quantity_used_per_second, float time_to_repeat, float wetness_gain_multiplier)",
      "void CalcAndSetQuantity(ActionData action_data)",
      "void MultiplyQuantityUsed(float coef)"
    ]
  },
  "CAContinuousQuantityLiquidTransfer": {
    "parent": null,
    "methods": [
      "void CAContinuousQuantityLiquidTransfer(float quantity_used_per_second, float time_to_progress, int drain = -1)",
      "void Setup(ActionData action_data)",
      "int Execute(ActionData action_data )",
      "int Cancel(ActionData action_data)",
      "float GetProgress()",
      "void CalcAndSetQuantity(ActionData action_data)"
    ]
  },
  "CAContinuousQuantityRepeat": {
    "parent": null,
    "methods": [
      "void CAContinuousQuantityRepeat( float quantity_used_per_second, float time_to_repeat )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousRepeat": {
    "parent": null,
    "methods": [
      "void CAContinuousRepeat( float time_to_complete_action )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void SetProgress(float value)"
    ]
  },
  "CAContinuousRepeatFishing": {
    "parent": null,
    "methods": [
      "void CAContinuousRepeatFishing( float time_to_complete_action )",
      "int Execute( ActionData action_data )",
      "void SetNewSignalData(float startTime, float durationTime)",
      "void OnSignalStart(ActionData action_data)",
      "void OnSignalEnd(ActionData action_data)"
    ]
  },
  "CAContinuousRepeatStartEngine": {
    "parent": null,
    "methods": [
      "void CAContinuousRepeatStartEngine( float time_to_complete_action )",
      "int Execute( ActionData action_data )"
    ]
  },
  "CAContinuousTime": {
    "parent": null,
    "methods": [
      "void CAContinuousTime( float time_to_complete_action )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )",
      "int Cancel(ActionData action_data )",
      "float GetProgress()"
    ]
  },
  "CAContinuousTimeCooking": {
    "parent": null,
    "methods": [
      "void CAContinuousTimeCooking(float cooking_update_time)",
      "void Setup(ActionData action_data)",
      "int Execute(ActionData action_data)",
      "float GetProgress()"
    ]
  },
  "CAContinuousTransferQuantity": {
    "parent": null,
    "methods": [
      "void CAContinuousTransferQuantity( float quantity_filled_per_second )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )",
      "int Cancel( ActionData action_data )",
      "float GetProgress()",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CAContinuousWaterPlant": {
    "parent": null,
    "methods": [
      "void CAContinuousWaterPlant( float quantity_used_per_second )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "float GetProgress()"
    ]
  },
  "CAContinuousWaterSlot": {
    "parent": null,
    "methods": [
      "void CAContinuousWaterSlot( float quantity_used_per_second )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "float GetProgress()"
    ]
  },
  "CAContinuousWringClothes": {
    "parent": null,
    "methods": [
      "void CAContinuousWringClothes( float quantity_used_per_second, float time_to_repeat )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data  )",
      "float GetProgress()"
    ]
  },
  "CADummy": {
    "parent": null,
    "methods": [
      "int Execute( ActionData action_data )"
    ]
  },
  "CAInteract": {
    "parent": null,
    "methods": [
      "int Execute( ActionData action_data )"
    ]
  },
  "CAInteractLoop": {
    "parent": null,
    "methods": [
      "void CAInteractLoop( float time_to_complete_action )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )"
    ]
  },
  "CASingleUse": {
    "parent": null,
    "methods": [
      "int Execute( ActionData action_data )"
    ]
  },
  "CASingleUseBase": {
    "parent": null,
    "methods": []
  },
  "CASingleUseQuantity": {
    "parent": null,
    "methods": [
      "void CASingleUseQuantity( float quantity_used_per_action )",
      "void Setup( ActionData action_data )",
      "int Execute( ActionData action_data )",
      "void CalcAndSetQuantity( ActionData action_data )"
    ]
  },
  "CASingleUseQuantityEdible": {
    "parent": null,
    "methods": [
      "void CASingleUseQuantityEdible(float quantity_used_per_action)",
      "void CalcAndSetQuantity(ActionData action_data)"
    ]
  },
  "CASingleUseTurnOnPlugged": {
    "parent": null,
    "methods": [
      "int Execute( ActionData action_data )"
    ]
  },
  "UAQuantityConsumed": {
    "parent": null,
    "methods": []
  },
  "UATimeSpent": {
    "parent": null,
    "methods": []
  },
  "UAMaxDistances": {
    "parent": null,
    "methods": []
  },
  "UAItemsSpreadRadius": {
    "parent": null,
    "methods": []
  },
  "UASoftSkillsWeight": {
    "parent": null,
    "methods": []
  },
  "UADamageApplied": {
    "parent": null,
    "methods": []
  },
  "UAWaterType": {
    "parent": null,
    "methods": []
  },
  "UAMisc": {
    "parent": null,
    "methods": []
  },
  "UAFishingConstants": {
    "parent": null,
    "methods": []
  },
  "ActionContinuousBaseCB": {
    "parent": null,
    "methods": [
      "bool CancelCondition()",
      "void SetInLoop(bool value)",
      "void InitActionComponent()",
      "void EndActionComponent()",
      "void UserEndsAction()",
      "void ActionContinuousBase()",
      "void OnEndInput( ActionData action_data )",
      "bool HasAlternativeInterrupt()",
      "bool UseAlternativeInterrupt(ActionData action_data)",
      "bool IsCameraLockOnPerform()",
      "int GetActionCategory()",
      "void OnAnimationEvent(ActionData action_data)",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnFinishProgress( ActionData action_data )",
      "void OnStartAnimationLoopServer( ActionData action_data )",
      "void OnStartAnimationLoopClient( ActionData action_data )",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnEndAnimationLoopClient( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionContinuousBase": {
    "parent": null,
    "methods": [
      "void ActionContinuousBase()",
      "void OnEndInput( ActionData action_data )",
      "bool HasAlternativeInterrupt()",
      "bool UseAlternativeInterrupt(ActionData action_data)",
      "bool IsCameraLockOnPerform()",
      "int GetActionCategory()",
      "void OnAnimationEvent(ActionData action_data)",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnFinishProgress( ActionData action_data )",
      "void OnStartAnimationLoopServer( ActionData action_data )",
      "void OnStartAnimationLoopClient( ActionData action_data )",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnEndAnimationLoopClient( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionInstantBase": {
    "parent": null,
    "methods": [
      "bool IsInstant()"
    ]
  },
  "ActionInteractBaseCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void InitActionComponent()",
      "void EndActionComponent()",
      "void ActionInteractBase()",
      "void CreateConditionComponents()",
      "string GetHUDCursorIcon()",
      "int GetActionCategory()",
      "bool UseMainItem()",
      "bool MainItemAlwaysInHands()"
    ]
  },
  "ActionInteractBase": {
    "parent": null,
    "methods": [
      "void ActionInteractBase()",
      "void CreateConditionComponents()",
      "string GetHUDCursorIcon()",
      "int GetActionCategory()",
      "bool UseMainItem()",
      "bool MainItemAlwaysInHands()"
    ]
  },
  "ActionInteractLoopBaseCB": {
    "parent": null,
    "methods": [
      "bool CancelCondition()",
      "void CreateActionComponent()",
      "void InitActionComponent()",
      "void ActionInteractLoopBase()"
    ]
  },
  "ActionInteractLoopBase": {
    "parent": null,
    "methods": [
      "void ActionInteractLoopBase()"
    ]
  },
  "SequentialActionData": {
    "parent": null,
    "methods": [
      "void MultiStageBaseActionData()",
      "void ActionMultiStageBase()",
      "int GetStanceMask(PlayerBase player)",
      "int GetActionCategory()",
      "bool CanBePerformedFromInventory()",
      "bool CanBeUsedOnBack()",
      "bool CanBeUsedRaised()",
      "void Start( ActionData action_data )",
      "void SetStage(int stage, SequentialActionData action_data)",
      "void OnStageStart(SequentialActionData action_data)",
      "void OnStageEnd(SequentialActionData action_data)",
      "float GetProgress( ActionData action_data )"
    ]
  },
  "ActionSequentialBase": {
    "parent": null,
    "methods": [
      "void ActionMultiStageBase()",
      "int GetStanceMask(PlayerBase player)",
      "int GetActionCategory()",
      "bool CanBePerformedFromInventory()",
      "bool CanBeUsedOnBack()",
      "bool CanBeUsedRaised()",
      "void Start( ActionData action_data )",
      "void SetStage(int stage, SequentialActionData action_data)",
      "void OnStageStart(SequentialActionData action_data)",
      "void OnStageEnd(SequentialActionData action_data)",
      "float GetProgress( ActionData action_data )"
    ]
  },
  "ActionSingleUseBaseCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void InitActionComponent()",
      "void EndActionComponent()",
      "void ActionSingleUseBase()",
      "int GetActionCategory()"
    ]
  },
  "ActionSingleUseBase": {
    "parent": null,
    "methods": [
      "void ActionSingleUseBase()",
      "int GetActionCategory()"
    ]
  },
  "CCIBase": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ItemBase item )",
      "bool CanContinue( PlayerBase player, ItemBase item )"
    ]
  },
  "CCIDummy": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ItemBase item )"
    ]
  },
  "CCINone": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ItemBase item )",
      "bool CanContinue( PlayerBase player, ItemBase item )"
    ]
  },
  "CCINonRuined": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ItemBase item )"
    ]
  },
  "CCINotEmpty": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ItemBase item )"
    ]
  },
  "CCINotPresent": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ItemBase item )",
      "bool CanContinue( PlayerBase player, ItemBase item )"
    ]
  },
  "CCINotRuinedAndDry": {
    "parent": "CCIBase",
    "methods": [
      "bool Can( PlayerBase player, ItemBase item )"
    ]
  },
  "CCINotRuinedAndEmpty": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ItemBase item )"
    ]
  },
  "CCIPresent": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ItemBase item )",
      "bool CanContinue( PlayerBase player, ItemBase item )"
    ]
  },
  "CCTBase": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ActionTarget target )",
      "bool CanContinue( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTCursor": {
    "parent": null,
    "methods": [
      "void CCTCursor( float maximal_target_distance = UAMaxDistances.DEFAULT )",
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTCursorNoObject": {
    "parent": null,
    "methods": [
      "void CCTCursorNoObject( float maximal_target_distance )",
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTCursorNoRuinCheck": {
    "parent": null,
    "methods": [
      "void CCTCursorNoRuinCheck( float maximal_target_distance = UAMaxDistances.DEFAULT )",
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTCursorparent": {
    "parent": null,
    "methods": [
      "void CCTCursorparent( float maximal_target_distance = UAMaxDistances.DEFAULT )",
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTDummy": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTMan": {
    "parent": null,
    "methods": [
      "void CCTMan( float maximal_target_distance = UAMaxDistances.DEFAULT, bool must_be_alive = true )",
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTNone": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ActionTarget target )",
      "bool CanContinue( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTNonRuined": {
    "parent": null,
    "methods": [
      "void CCTNonRuined( float maximal_target_distance = UAMaxDistances.DEFAULT )",
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTObject": {
    "parent": null,
    "methods": [
      "void CCTObject( float maximal_target_distance = UAMaxDistances.DEFAULT )",
      "bool Can( PlayerBase player, ActionTarget target )",
      "void CCTparent( float maximal_target_distance = UAMaxDistances.DEFAULT )"
    ]
  },
  "CCTparent": {
    "parent": null,
    "methods": [
      "void CCTparent( float maximal_target_distance = UAMaxDistances.DEFAULT )",
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTSelf": {
    "parent": null,
    "methods": [
      "bool Can( PlayerBase player, ActionTarget target )",
      "bool CanContinue( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTSurface": {
    "parent": null,
    "methods": [
      "void CCTSurface( float maximal_target_distance = UAMaxDistances.DEFAULT )",
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTTree": {
    "parent": null,
    "methods": [
      "void CCTTree( float maximal_target_distance )",
      "bool Can( PlayerBase player, ActionTarget target )"
    ]
  },
  "CCTWaterSurface": {
    "parent": null,
    "methods": [
      "void CCTWaterSurface(float maximal_target_distance = UAMaxDistances.DEFAULT, string surfaceType = )",
      "bool Can(PlayerBase player, ActionTarget target)",
      "bool CanContinue(PlayerBase player, ActionTarget target)",
      "void CCTWaterSurfaceEx(float maximal_target_distance, int allowedLiquidSource)"
    ]
  },
  "CCTWaterSurfaceEx": {
    "parent": null,
    "methods": [
      "void CCTWaterSurfaceEx(float maximal_target_distance, int allowedLiquidSource)",
      "bool Can(PlayerBase player, ActionTarget target)",
      "bool CanContinue(PlayerBase player, ActionTarget target)"
    ]
  },
  "AnniversaryMusicSource": {
    "parent": null,
    "methods": [
      "void AnniversaryMusicSource()",
      "void EEDelete(EntityAI parent)",
      "void OnVariablesSynchronized()",
      "void UpdateMusic()",
      "void SetIntenseServer()",
      "void SetLightServer()",
      "void SetInvalidServer()",
      "void PlayIntense()",
      "void PlayLight()",
      "void StopAllMusic()"
    ]
  },
  "AnniversarySpotLight": {
    "parent": null,
    "methods": [
      "void AnniversarySpotLight()",
      "void OnVariablesSynchronized()",
      "void EEDelete(EntityAI parent)",
      "void DeActivate()",
      "void Activate()"
    ]
  },
  "Bonfire": {
    "parent": "BuildingSuper",
    "methods": [
      "void EEInit()",
      "void EEDelete(EntityAI parent)",
      "void BonfireHeating()"
    ]
  },
  "Land_Buoy": {
    "parent": "House",
    "methods": [
      "void DeferredInit()"
    ]
  },
  "Land_MooringBuoy": {
    "parent": "House",
    "methods": [
      "void DeferredInit()"
    ]
  },
  "Land_FuelStation_Feed": {
    "parent": "FuelStation",
    "methods": [
      "void EEKilled(Object killer)",
      "void OnExplosionEffects(Object source, Object directHit, int componentIndex, string surface, vector pos, vector surfNormal, float energyFactor, float explosionFactor, bool isWater, string ammoType)",
      "bool HasFuelToGive()",
      "int GetLiquidSourceType()"
    ]
  },
  "Land_FuelStation_Feed_Enoch": {
    "parent": null,
    "methods": []
  },
  "Land_WaterSpring_Sakhal": {
    "parent": null,
    "methods": []
  },
  "Land_WarheadStorage_Main": {
    "parent": null,
    "methods": [
      "void Land_WarheadStorage_Main()",
      "void DeferredInit()",
      "void SetPowerServer(bool hasPower)",
      "void SetLeverStatesServer(int leverBits)",
      "void SetLowEnergyStateServer(bool state)",
      "bool IsLowEnergy()",
      "void OnPowerOnClient()",
      "void OnPowerOffClient()",
      "void OnDoorOpenStart(DoorStartParams params)",
      "void OnDoorOpenFinish(DoorFinishParams params)",
      "void RemoveDoorTimer(int doorIndex)",
      "void OnDoorCloseStart(DoorStartParams params)",
      "void OnDoorCloseFinish(DoorFinishParams params)",
      "void AutoCloseDoor(int doorIndex)",
      "void UpdateDoorStateServer()",
      "void UpdateDoorStateClient()",
      "int GetStorageLightIndexByDoor(int doorIndex)",
      "int GetDoorIndexByLeverIndex(int LeverIndex)",
      "bool CanDoorBeOpened(int doorIndex, bool checkIfLocked = false)",
      "bool CanDoorBeLocked(int doorIndex)",
      "int GetBunkerEffectIndexByDoor(int doorIndex)",
      "bool IsBunkerDoor(int doorIndex)",
      "bool IsStorageDoor(int doorIndex)",
      "bool CanDoorBeClosed(int doorIndex)",
      "void SpawnTriggers(int count)",
      "string GetDebugText()",
      "void OnVariablesSynchronized()"
    ]
  },
  "Land_WarheadStorage_PowerStation": {
    "parent": null,
    "methods": [
      "void Land_WarheadStorage_PowerStation()",
      "void DeferredInit()",
      "void OnVariablesSynchronized()",
      "void LinkPowerGeneratorServer()",
      "void AnimateLever(int index, int state = -1)",
      "void PlayLeverSound(string leverName, int state)",
      "void StartTimer()",
      "void CheckStopTimer()",
      "void Tick()",
      "void OnLeverToggled()",
      "void TurnAllLeversOff()",
      "string GetLeverComponentNameByLeverIndex(int leverIndex)",
      "int GetLeverIndexByComponentName(string name)",
      "void UpdateLeverStatesServer()",
      "void OnGeneratorStart()",
      "void OnGeneratorStop()",
      "void OnAnimationPhaseStarted(string animSource, float phase)",
      "static void RegisterBunker(Land_WarheadStorage_Main bunker)",
      "static void UnregisterBunker(Land_WarheadStorage_Main bunker)",
      "void DebugPrepareGenerator()",
      "void OnAfterLoadUpdate()"
    ]
  },
  "PowerGeneratorStatic": {
    "parent": null,
    "methods": [
      "void PowerGeneratorStatic()",
      "static void RegisterPersistentObject(PowerGeneratorStatic obj)",
      "static void UnregisterPersistentObject(PowerGeneratorStatic obj)",
      "void Setparent(Land_WarheadStorage_PowerStation parent)",
      "void StoreLeverStates(int leverStateBits)",
      "int GetStoredLeverBits()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void SetLowEnergyState(bool state)",
      "bool HasSparkplug()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands(EntityAI parent)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void EEOnAfterLoad()",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool IsTakeable()",
      "bool IsActionTargetVisible()",
      "bool DisableVicinityIcon()",
      "void SetLowEnergyStateServer(bool state)"
    ]
  },
  "StaticObj_Roadblock_Wood_Small": {
    "parent": null,
    "methods": [
      "void EEInit()",
      "void EEDelete(EntityAI parent)",
      "void Roadblock_Light()"
    ]
  },
  "Roadblock_Light": {
    "parent": "PointLightBase",
    "methods": [
      "void Roadblock_Light()"
    ]
  },
  "Wreck_Mi8_Crashed": {
    "parent": "CrashBase",
    "methods": [
      "void Wreck_Mi8_Crashed()"
    ]
  },
  "Wreck_Mi8": {
    "parent": "CrashBase",
    "methods": []
  },
  "Wreck_SantasSleigh": {
    "parent": "CrashBase",
    "methods": [
      "void Wreck_SantasSleigh()",
      "string GetSoundSet()",
      "void EEOnCECreate()",
      "void EEDelete(EntityAI parent)",
      "void SpawnRandomDeerLater()",
      "void SpawnRandomDeers()"
    ]
  },
  "Wreck_UH1Y": {
    "parent": "CrashBase",
    "methods": [
      "void Wreck_UH1Y()"
    ]
  },
  "Fountain": {
    "parent": "BuildingSuper",
    "methods": []
  },
  "Church": {
    "parent": "BuildingSuper",
    "methods": []
  },
  "ItemSuppressor": {
    "parent": "InventoryItemSuper",
    "methods": [
      "void SetNextChannel()",
      "void SetPrevChannel()",
      "float GetTunedFrequency()",
      "void EnableBroadcast(bool state)",
      "void EnableReceive(bool state)",
      "bool IsBroadcasting()",
      "bool IsReceiving()",
      "int GetTunedFrequencyIndex()",
      "void SetFrequencyByIndex(int index)",
      "bool CanSpeak()",
      "void SetCanSpeak(bool onOff)",
      "void TuneNext()",
      "void TunePrev()",
      "bool IsTurnedOn()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ItemWatch": {
    "parent": "InventoryItemSuper",
    "methods": [
      "void SetNextChannel()",
      "void SetPrevChannel()",
      "float GetTunedFrequency()",
      "void EnableBroadcast(bool state)",
      "void EnableReceive(bool state)",
      "bool IsBroadcasting()",
      "bool IsReceiving()",
      "int GetTunedFrequencyIndex()",
      "void SetFrequencyByIndex(int index)",
      "bool CanSpeak()",
      "void SetCanSpeak(bool onOff)",
      "void TuneNext()",
      "void TunePrev()",
      "bool IsTurnedOn()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ItemTransmitter": {
    "parent": "InventoryItemSuper",
    "methods": [
      "void SetNextChannel()",
      "void SetPrevChannel()",
      "float GetTunedFrequency()",
      "void EnableBroadcast(bool state)",
      "void EnableReceive(bool state)",
      "bool IsBroadcasting()",
      "bool IsReceiving()",
      "int GetTunedFrequencyIndex()",
      "void SetFrequencyByIndex(int index)",
      "bool CanSpeak()",
      "void SetCanSpeak(bool onOff)",
      "void TuneNext()",
      "void TunePrev()",
      "bool IsTurnedOn()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ItemMegaphone": {
    "parent": "InventoryItemSuper",
    "methods": [
      "bool CanSpeak()",
      "void SetCanSpeak(bool onOff)",
      "void TuneNext()",
      "void TunePrev()",
      "bool IsTurnedOn()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ItemRadio": {
    "parent": "InventoryItemSuper",
    "methods": [
      "void TuneNext()",
      "void TunePrev()",
      "bool IsTurnedOn()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ItemBarrel": {
    "parent": "InventoryItemSuper",
    "methods": [
      "bool IsTurnedOn()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "UnderSlugLauncher": {
    "parent": "Weapon",
    "methods": [
      "bool IsTurnedOn()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ItemGPS": {
    "parent": "InventoryItemSuper",
    "methods": [
      "bool IsTurnedOn()",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ItemCompass": {
    "parent": "InventoryItemSuper",
    "methods": [
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CarWheel": {
    "parent": "InventoryItemSuper",
    "methods": [
      "float GetRadius()",
      "float GetWidth()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "int GetMeleeTargetType()",
      "void SetActions()",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool CanPutAsAttachment(EntityAI parent)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CarWheel_Ruined": {
    "parent": null,
    "methods": [
      "bool CanPutAsAttachment(EntityAI parent)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ReplaceWheelLambda": {
    "parent": null,
    "methods": [
      "void ReplaceWheelLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "bool CanExecuteLambda()",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)",
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Wheel": {
    "parent": "CarWheel",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Wheel_Ruined": {
    "parent": "CarWheel_Ruined",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Wheel": {
    "parent": "CarWheel",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Wheel_Ruined": {
    "parent": "CarWheel_Ruined",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackWheel": {
    "parent": "CarWheel",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackWheel_Ruined": {
    "parent": "CarWheel_Ruined",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanWheel": {
    "parent": "CarWheel",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanWheel_Ruined": {
    "parent": "CarWheel_Ruined",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Wheel": {
    "parent": "CarWheel",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Wheel_Ruined": {
    "parent": "CarWheel_Ruined",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_WheelDouble": {
    "parent": "CarWheel",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_WheelDouble_Ruined": {
    "parent": "CarWheel_Ruined",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Wheel": {
    "parent": "CarWheel",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Wheel_Ruined": {
    "parent": "CarWheel_Ruined",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CarDoor": {
    "parent": "InventoryItemSuper",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)",
      "int GetMeleeTargetType()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_1_1": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_1_2": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_2_1": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_2_2": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Hood": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Trunk": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_1_1_Black": {
    "parent": "Hatchback_02_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_1_2_Black": {
    "parent": "Hatchback_02_Door_1_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_2_1_Black": {
    "parent": "Hatchback_02_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_2_2_Black": {
    "parent": "Hatchback_02_Door_2_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Hood_Black": {
    "parent": "Hatchback_02_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Trunk_Black": {
    "parent": "Hatchback_02_Trunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_1_1_Blue": {
    "parent": "Hatchback_02_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_1_2_Blue": {
    "parent": "Hatchback_02_Door_1_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_2_1_Blue": {
    "parent": "Hatchback_02_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Door_2_2_Blue": {
    "parent": "Hatchback_02_Door_2_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Hood_Blue": {
    "parent": "Hatchback_02_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Hatchback_02_Trunk_Blue": {
    "parent": "Hatchback_02_Trunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_1": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_2": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_1": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_2": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Hood": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Trunk": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_1_YellowRust": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_2_YellowRust": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_1_YellowRust": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_2_YellowRust": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Hood_YellowRust": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Trunk_YellowRust": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_1_Red": {
    "parent": "Sedan_02_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_2_Red": {
    "parent": "Sedan_02_Door_1_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_1_Red": {
    "parent": "Sedan_02_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_2_Red": {
    "parent": "Sedan_02_Door_2_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Hood_Red": {
    "parent": "Sedan_02_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Trunk_Red": {
    "parent": "Sedan_02_Trunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_1_RedRust": {
    "parent": "Sedan_02_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_2_RedRust": {
    "parent": "Sedan_02_Door_1_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_1_RedRust": {
    "parent": "Sedan_02_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_2_RedRust": {
    "parent": "Sedan_02_Door_2_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Hood_RedRust": {
    "parent": "Sedan_02_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Trunk_RedRust": {
    "parent": "Sedan_02_Trunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_1_Grey": {
    "parent": "Sedan_02_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_2_Grey": {
    "parent": "Sedan_02_Door_1_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_1_Grey": {
    "parent": "Sedan_02_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_2_Grey": {
    "parent": "Sedan_02_Door_2_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Hood_Grey": {
    "parent": "Sedan_02_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Trunk_Grey": {
    "parent": "Sedan_02_Trunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_1_GreyRust": {
    "parent": "Sedan_02_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_1_2_GreyRust": {
    "parent": "Sedan_02_Door_1_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_1_GreyRust": {
    "parent": "Sedan_02_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Door_2_2_GreyRust": {
    "parent": "Sedan_02_Door_2_2",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Hood_GreyRust": {
    "parent": "Sedan_02_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Sedan_02_Trunk_GreyRust": {
    "parent": "Sedan_02_Trunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_Driver": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_CoDriver": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackHood": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackTrunk": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_Driver_White": {
    "parent": "HatchbackDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_CoDriver_White": {
    "parent": "HatchbackDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackHood_White": {
    "parent": "HatchbackHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackTrunk_White": {
    "parent": "HatchbackTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_Driver_Blue": {
    "parent": "HatchbackDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_CoDriver_Blue": {
    "parent": "HatchbackDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackHood_Blue": {
    "parent": "HatchbackHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackTrunk_Blue": {
    "parent": "HatchbackTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_Driver_GreenRust": {
    "parent": "HatchbackDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_CoDriver_GreenRust": {
    "parent": "HatchbackDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackHood_GreenRust": {
    "parent": "HatchbackHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackTrunk_GreenRust": {
    "parent": "HatchbackTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_Driver_WhiteRust": {
    "parent": "HatchbackDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_CoDriver_WhiteRust": {
    "parent": "HatchbackDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackHood_WhiteRust": {
    "parent": "HatchbackHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackTrunk_WhiteRust": {
    "parent": "HatchbackTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_Driver_BlueRust": {
    "parent": "HatchbackDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackDoors_CoDriver_BlueRust": {
    "parent": "HatchbackDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackHood_BlueRust": {
    "parent": "HatchbackHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HatchbackTrunk_BlueRust": {
    "parent": "HatchbackTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_Driver": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_CoDriver": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackLeft": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackRight": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanHood": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanTrunk": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_Driver_Black": {
    "parent": "CivSedanDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_CoDriver_Black": {
    "parent": "CivSedanDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackLeft_Black": {
    "parent": "CivSedanDoors_BackLeft",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackRight_Black": {
    "parent": "CivSedanDoors_BackRight",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanHood_Black": {
    "parent": "CivSedanHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanTrunk_Black": {
    "parent": "CivSedanTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_Driver_Wine": {
    "parent": "CivSedanDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_CoDriver_Wine": {
    "parent": "CivSedanDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackLeft_Wine": {
    "parent": "CivSedanDoors_BackLeft",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackRight_Wine": {
    "parent": "CivSedanDoors_BackRight",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanHood_Wine": {
    "parent": "CivSedanHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanTrunk_Wine": {
    "parent": "CivSedanTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_Driver_WhiteRust": {
    "parent": "CivSedanDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_CoDriver_WhiteRust": {
    "parent": "CivSedanDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackLeft_WhiteRust": {
    "parent": "CivSedanDoors_BackLeft",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackRight_WhiteRust": {
    "parent": "CivSedanDoors_BackRight",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanHood_WhiteRust": {
    "parent": "CivSedanHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanTrunk_WhiteRust": {
    "parent": "CivSedanTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_Driver_WineRust": {
    "parent": "CivSedanDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_CoDriver_WineRust": {
    "parent": "CivSedanDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackLeft_WineRust": {
    "parent": "CivSedanDoors_BackLeft",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackRight_WineRust": {
    "parent": "CivSedanDoors_BackRight",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanHood_WineRust": {
    "parent": "CivSedanHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanTrunk_WineRust": {
    "parent": "CivSedanTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_Driver_BlackRust": {
    "parent": "CivSedanDoors_Driver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_CoDriver_BlackRust": {
    "parent": "CivSedanDoors_CoDriver",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackLeft_BlackRust": {
    "parent": "CivSedanDoors_BackLeft",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanDoors_BackRight_BlackRust": {
    "parent": "CivSedanDoors_BackRight",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanHood_BlackRust": {
    "parent": "CivSedanHood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CivSedanTrunk_BlackRust": {
    "parent": "CivSedanTrunk",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_1_1": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_2_1": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_Hood": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_1_1_Blue": {
    "parent": "Truck_01_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_2_1_Blue": {
    "parent": "Truck_01_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_Hood_Blue": {
    "parent": "Truck_01_Door_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_1_1_Orange": {
    "parent": "Truck_01_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_2_1_Orange": {
    "parent": "Truck_01_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_Hood_Orange": {
    "parent": "Truck_01_Door_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_1_1_GreenRust": {
    "parent": "Truck_01_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_2_1_GreenRust": {
    "parent": "Truck_01_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Hood_GreenRust": {
    "parent": "Truck_01_Door_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_1_1_BlueRust": {
    "parent": "Truck_01_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_2_1_BlueRust": {
    "parent": "Truck_01_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Hood_BlueRust": {
    "parent": "Truck_01_Door_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_1_1_OrangeRust": {
    "parent": "Truck_01_Door_1_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Door_2_1_OrangeRust": {
    "parent": "Truck_01_Door_2_1",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Truck_01_Hood_OrangeRust": {
    "parent": "Truck_01_Door_Hood",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Door_1_1": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Door_1_2": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Door_2_1": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Door_2_2": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Trunk": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Hood": {
    "parent": "CarDoor",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Door_1_1_Rust": {
    "parent": "CarDoor",
    "methods": [
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void SetActions()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Door_1_2_Rust": {
    "parent": "CarDoor",
    "methods": [
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void SetActions()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Door_2_1_Rust": {
    "parent": "CarDoor",
    "methods": [
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void SetActions()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Door_2_2_Rust": {
    "parent": "CarDoor",
    "methods": [
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void SetActions()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Offroad_02_Trunk_Rust": {
    "parent": "CarDoor",
    "methods": [
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void SetActions()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CarRadiator": {
    "parent": "InventoryItemSuper",
    "methods": [
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void EEKilled(Object killer)",
      "void SetActions()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "TruckRadiator": {
    "parent": "CarRadiator",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "TruckExhaust": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "EngineBelt": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "BrakeFluid": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "EngineOil": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "TireRepairKit": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HeadlightH7": {
    "parent": "ItemBase",
    "methods": [
      "bool DisplayNameRuinAttach()",
      "void SetActions()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "HeadlightH7_Box": {
    "parent": "Box_Base",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "WindscreenBox": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "GlowPlug": {
    "parent": "ItemBase",
    "methods": [
      "void SetActions()",
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "SparkPlug": {
    "parent": "ItemBase",
    "methods": [
      "bool DisplayNameRuinAttach()",
      "bool ShowZonesHealth()",
      "void SetActions()",
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Clothing_Base": {
    "parent": "ItemBase",
    "methods": [
      "void Clothing_Base()",
      "bool IsClothing()",
      "float GetItemVisibility()",
      "void UpdateNVGStatus(PlayerBase player, bool attaching = false, bool force_disable = false)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool IsObstructingVoice()",
      "void MutePlayer(PlayerBase player, bool state)",
      "void HandleVoiceEffect(bool enable, PlayerBase player)",
      "int GetVoiceEffect()",
      "bool IsGasMask()",
      "void SetActions()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "Box_Base": {
    "parent": "InventoryItemSuper",
    "methods": [
      "void SetActions()",
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ItemGrenade": {
    "parent": "InventoryItemSuper",
    "methods": [
      "bool SetPinned()",
      "bool SetUnpinned()",
      "bool SetIgnited()",
      "bool IsPinned()",
      "bool IsActivated()",
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "ItemMap": {
    "parent": "InventoryItemSuper",
    "methods": [
      "void ItemMap()",
      "void InitMapState()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void SetMapStateOpen(bool state, PlayerBase player)",
      "bool GetMapStateAnimation()",
      "void SyncMapMarkers()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool NameOverride(out string output)",
      "bool DescriptionOverride(out string output)",
      "void InsertMarker(vector pos, string text, int color, int idx)",
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "MapMarker": {
    "parent": null,
    "methods": [
      "void MapMarker(vector pos, string text, int color, int idx)",
      "string GetMarkerText()",
      "int GetMarkerColor()",
      "int GetMarkerIcon()"
    ]
  },
  "CarWheelType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ClothingType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemWatchType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemRadioType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemTransmitterType": {
    "parent": "ClothingType",
    "methods": []
  },
  "ItemMegaphoneType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemCompassType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemGPSType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemMapType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemBookType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemOpticsType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemBarrelType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemSuppressorType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemGrenadeType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "WeaponType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "MagazineType": {
    "parent": "InventoryItemType",
    "methods": []
  },
  "ItemOptics": {
    "parent": "InventoryItemSuper",
    "methods": [
      "void ItemOptics()",
      "bool EnterOptics()",
      "bool IsInOptics()",
      "bool ExitOptics()",
      "bool HasWeaponIronsightsOverride()",
      "bool UseWeaponIronsightsOverride(bool state)",
      "bool IsUsingWeaponIronsightsOverride()",
      "int GetStepFOVCount()",
      "int GetStepFOVIndex()",
      "bool SetStepFOVIndex(int step)",
      "bool StepFOVUp()",
      "bool StepFOVDown()",
      "float GetCurrentStepFOV()",
      "int GetStepZeroing()",
      "bool SetStepZeroing(int step)",
      "bool StepZeroingUp()",
      "bool StepZeroingDown()",
      "void GetCameraPoint(out vector pos, out vector dir)",
      "float GetZoomInit()",
      "float GetZoomMin()",
      "float GetZoomMax()",
      "float GetZeroingDistanceZoomMin()",
      "float GetZeroingDistanceZoomMax()",
      "void SetZeroingClampDist(float dist)",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "bool IsWorking()",
      "void UpdateOpticsReddotVisibility()",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void OnInventoryExit(Man player)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnVariablesSynchronized()",
      "void InitReddotData()",
      "void ShowReddot(bool state)",
      "void InitOpticsPPInfo()",
      "bool InitDOFAvailability()",
      "void InitOpticsPP(out array<float> mask_array, out array<float> lens_array, out float blur_float)",
      "void InitCameraOverrideProperties()",
      "bool InitOpticsDOFProperties(out array<float> temp_array)",
      "bool AllowsDOF()",
      "bool IsNVOptic()",
      "int GetCurrentNVType()",
      "void SetCurrentOpticMode(int mode)",
      "int GetCurrentOpticMode()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void OnOpticExit()",
      "float GetOpticsPPBlur()",
      "float GetNearPlaneValue()",
      "void Init2DPreloadType()",
      "void InitOpticMode()",
      "void UpdateSelectionVisibility()",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "Animal": {
    "parent": "LightAISuper",
    "methods": []
  },
  "Zombie": {
    "parent": "LightAISuper",
    "methods": []
  },
  "LightAI": {
    "parent": "ManSuper",
    "methods": []
  },
  "TreeHard": {
    "parent": null,
    "methods": [
      "void OnTreeCutDown(EntityAI cutting_entity)",
      "bool IsTree()",
      "bool CanBeAutoDeleted()",
      "bool HasPlayerCollisionSound()",
      "bool IsBush()"
    ]
  },
  "TreeSoft": {
    "parent": null,
    "methods": [
      "void OnTreeCutDown(EntityAI cutting_entity)",
      "bool IsTree()",
      "bool CanBeAutoDeleted()",
      "bool HasPlayerCollisionSound()",
      "bool IsBush()"
    ]
  },
  "BushHard": {
    "parent": null,
    "methods": [
      "void OnTreeCutDown(EntityAI cutting_entity)",
      "bool IsBush()",
      "bool CanBeAutoDeleted()"
    ]
  },
  "BushSoft": {
    "parent": null,
    "methods": [
      "void OnTreeCutDown(EntityAI cutting_entity)",
      "bool IsBush()",
      "bool CanBeAutoDeleted()"
    ]
  },
  "Weapon": {
    "parent": "InventoryItemSuper",
    "methods": [
      "bool IsWeapon()",
      "void Synchronize()",
      "int GetMuzzleCount()",
      "int GetSlotFromMuzzleIndex(int muzzleIndex)",
      "int GetCurrentMuzzle()",
      "void SetCurrentMuzzle(int muzzleIndex)",
      "int GetMuzzleModeCount(int muzzleIndex)",
      "void SetMuzzleMode(int muzzleIndex, int modeIndex)",
      "void SetNextMuzzleMode(int muzzleIndex)",
      "int GetCurrentModeBurstSize(int muzzleIndex)",
      "bool GetCurrentModeAutoFire(int muzzleIndex)",
      "int GetCurrentMode(int muzzleIndex)",
      "void SetCurrentMode(int muzzleIndex, int mode)",
      "string GetCurrentModeName(int muzzleIndex)",
      "bool CanFire(int muzzleIndex)",
      "bool Fire(int muzzleIndex, vector pos, vector dir, vector speed)",
      "bool DryFire(int muzzleIndex)",
      "bool DryDryFire(int muzzleIndex)",
      "bool EjectCasing(int muzzleIndex)",
      "bool CreateRound(int muzzleIndex)",
      "bool IsChamberEmpty(int muzzleIndex)",
      "bool IsChamberFiredOut(int muzzleIndex)",
      "bool IsChamberJammed(int muzzleIndex)",
      "bool IsChamberEjectable(int muzzleIndex)",
      "bool IsChamberFull(int muzzleIndex)",
      "bool IsChamberFullEx(int muzzleIndex)",
      "bool HasInternalMagazine(int muzzleIndex)",
      "int GetInternalMagazineCartridgeCount(int muzzleIndex)",
      "int GetInternalMagazineMaxCartridgeCount(int muzzleIndex)",
      "bool IsInternalMagazineFull(int muzzleIndex)",
      "int GetTotalCartridgeCount(int muzzleIndex)",
      "int GetTotalMaxCartridgeCount(int muzzleIndex)",
      "string GetRandomChamberableAmmoTypeName(int muzzleIndex)",
      "string GetChamberAmmoTypeName(int muzzleIndex)",
      "bool GetCartridgeInfo(int muzzleIndex, out float ammoDamage, out string ammoTypeName)",
      "bool GetInternalMagazineCartridgeInfo(int muzzleIndex, int cartridgeIndex, out float ammoDamage, out string ammoTypeName)",
      "bool PopCartridgeFromChamber(int muzzleIndex, out float ammoDamage, out string ammoTypeName)",
      "bool PushCartridgeToChamber(int muzzleIndex, float ammoDamage, string ammoTypeName)",
      "void EffectBulletShow(int muzzleIndex, float dmg, string type)",
      "void EffectBulletHide(int muzzleIndex)",
      "void SetGroundAnimFrameIndex(int groundAnimFrameIndex)",
      "bool PopCartridgeFromInternalMagazine(int muzzleIndex, out float ammoDamage, out string ammoTypeName)",
      "bool PushCartridgeToInternalMagazine(int muzzleIndex, float ammoDamage, string ammoTypeName)",
      "bool CanAttachMagazine(int muzzleIndex, Magazine mag)",
      "bool TestAttachMagazine(int muzzleIndex, Magazine mag, bool do_occupancy_test, bool do_script_check)",
      "bool AttachMagazine(int muzzleIndex, Magazine mag)",
      "float GetReloadTime(int muzzleIndex)",
      "bool CanChamberFromMag(int muzzleIndex, Magazine mag)",
      "string GetChamberedCartridgeMagazineTypeName(int muzzleIndex)",
      "string GetRandomMagazineTypeName(int muzzleIndex)",
      "string GetMaxMagazineTypeName(int muzzleIndex)",
      "int GetMagazineTypeCount(int muzzleIndex)",
      "bool EnterOptics()",
      "bool IsInOptics()",
      "bool ExitOptics()",
      "float GetZoom()",
      "bool SetZoom(float percent)",
      "bool ZoomIn()",
      "bool ZoomOut()",
      "int GetStepZoom()",
      "bool SetStepZoom(int step)",
      "bool StepZoomIn()",
      "bool StepZoomOut()",
      "int GetStepZeroing(int muzzleIndex = 0)",
      "bool SetStepZeroing(int muzzleIndex, int step)",
      "bool StepZeroingUp(int muzzleIndex = 0)",
      "bool StepZeroingDown(int muzzleIndex = 0)",
      "float GetCurrentZeroing(int muzzleIndex = 0)",
      "float GetZeroingClamp(int muzzleIndex = 0)",
      "bool FlashlightOn()",
      "bool FlashlightOff()",
      "bool IsFlashlightOn()",
      "void GetCameraPoint(int muzzleIndex, out vector pos, out vector dir)",
      "float GetZoomInit(int muzzleIndex)",
      "float GetZoomMin(int muzzleIndex)",
      "float GetZoomMax(int muzzleIndex)",
      "float GetZeroingDistanceZoomMin(int muzzleIndex)",
      "float GetZeroingDistanceZoomMax(int muzzleIndex)",
      "void SelectionBulletShow()",
      "void SelectionBulletHide()",
      "void SelectionMagazineShow()",
      "void SelectionMagazineHide()",
      "void StepZeroingUpAllMuzzles()",
      "void StepZeroingDownAllMuzzles()"
    ]
  },
  "AnimalBase": {
    "parent": "DayZAnimal",
    "methods": [
      "void AnimalBase()",
      "bool IsRefresherSignalingViable()",
      "bool IsSelfAdjustingTemperature()",
      "void DeathUpdate()",
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "bool ResistContaminatedEffect()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_BosTaurus": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "bool ResistContaminatedEffect()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_BosTaurusF": {
    "parent": "Animal_BosTaurus",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "bool IsDanger()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "bool ResistContaminatedEffect()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_CanisLupus": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "bool IsDanger()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "bool ResistContaminatedEffect()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_CapraHircus": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "bool ResistContaminatedEffect()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_CapraHircusF": {
    "parent": "Animal_CapraHircus",
    "methods": [
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "bool ResistContaminatedEffect()",
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_CapraHircus_Spooky": {
    "parent": "Animal_CapraHircus",
    "methods": [
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "bool ResistContaminatedEffect()",
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_CapreolusCapreolus": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_CapreolusCapreolusF": {
    "parent": "Animal_CapreolusCapreolus",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_CervusElaphus": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_CervusElaphusF": {
    "parent": "Animal_CervusElaphus",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_RangiferTarandus": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_RangiferTarandusF": {
    "parent": "Animal_RangiferTarandus",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_RangiferTarandus_Xmas": {
    "parent": "Animal_RangiferTarandus",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_GallusGallusDomesticus": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()",
      "bool IsDanger()"
    ]
  },
  "Animal_GallusGallusDomesticusF": {
    "parent": "Animal_GallusGallusDomesticus",
    "methods": [
      "string GetDeadItemName()",
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_GallusGallusDomesticusF_Brown": {
    "parent": "Animal_GallusGallusDomesticusF",
    "methods": [
      "string GetDeadItemName()",
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_GallusGallusDomesticusF_Spotted": {
    "parent": "Animal_GallusGallusDomesticusF",
    "methods": [
      "string GetDeadItemName()",
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_GallusGallusDomesticusF_White": {
    "parent": "Animal_GallusGallusDomesticusF",
    "methods": [
      "string GetDeadItemName()",
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_OvisAries": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_OvisAriesF": {
    "parent": "Animal_OvisAries",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_SusDomesticus": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_SusScrofa": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsDanger()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_UrsusArctos": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "bool IsDanger()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_LepusEuropaeus": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "Animal_VulpesVulpes": {
    "parent": "AnimalBase",
    "methods": [
      "void RegisterHitComponentsForAI()",
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool ReplaceOnDeath()",
      "bool CanBeSkinned()",
      "string GetDeadItemName()",
      "bool KeepHealthOnReplace()"
    ]
  },
  "ZombieBase": {
    "parent": "DayZInfected",
    "methods": [
      "void ZombieBase()",
      "void Init()",
      "void OnVariablesSynchronized()",
      "void EOnInit(IEntity other, int extra)",
      "bool IsZombie()",
      "bool IsDanger()",
      "bool IsZombieMilitary()",
      "bool IsMale()",
      "bool CanBeBackstabbed()",
      "bool CanBeSkinned()",
      "bool IsHealthVisible()",
      "bool IsRefresherSignalingViable()",
      "bool IsSelfAdjustingTemperature()",
      "string GetHitComponentForAI()",
      "string GetDefaultHitComponent()",
      "int GetMindStateSynced()",
      "int GetOrientationSynced()",
      "void CommandHandler(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void CommandHandlerDebug(float pDt, int pCurrentCommandID, bool pCurrentCommandFinished)",
      "void HandleMove(int pCurrentCommandID)",
      "void HandleOrientation(float pDt, int pCurrentCommandID)",
      "bool HandleDeath(int pCurrentCommandID)",
      "bool EvaluateDeathAnimationEx(EntityAI pSource, ZombieHitData data, out int pAnimType, out float pAnimHitDir)",
      "bool EvaluateDeathAnimation(EntityAI pSource, string pComponent, string pAmmoType, out int pAnimType, out float pAnimHitDir)",
      "int GetVaultType(float height)",
      "bool HandleVault(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)",
      "bool HandleMindStateChange(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)",
      "void HandleSoundEvents()",
      "void OnSoundVoiceEvent(int event_id, string event_user_string)",
      "void ProcessSoundVoiceEvent(AnimSoundVoiceEvent sound_event, out AbstractWave aw)",
      "bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)",
      "bool ChaseAttackLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)",
      "bool FightAttackLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)",
      "int GetAttackPitch(EntityAI target)",
      "bool HandleCrawlTransition(int pCurrentCommandID)",
      "bool EvaluateCrawlTransitionAnimation(EntityAI pSource, string pComponent, string pAmmoType, out int pAnimType)",
      "bool HandleDamageHit(int pCurrentCommandID)",
      "bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)",
      "float ComputeHitDirectionAngle(EntityAI pSource)",
      "float ComputeHitDirectionAngleEx(EntityAI pSource, int invertHitDir = 0)",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void EEHitByRemote(int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos)",
      "void DebugSound(string s)",
      "void EOnContact(IEntity other, Contact extra)",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool IsBeingBackstabbed()",
      "void SetBeingBackstabbed(int backstabType)",
      "bool IsCrawling()",
      "void OnRecoverFromDeath()",
      "void AddArrow(Object arrow, int componentIndex, vector closeBonePosWS, vector closeBoneRotWS)",
      "bool IsManagingArrows()"
    ]
  },
  "ZombieHitData": {
    "parent": null,
    "methods": []
  },
  "ZombieFemaleBase": {
    "parent": "ZombieBase",
    "methods": [
      "bool IsMale()",
      "string CaptureSound()",
      "string ReleaseSound()"
    ]
  },
  "ZmbF_BlueCollarFat_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_CitizenANormal_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_CitizenANormal_LT_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_CitizenBSkinny_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_Clerk_Normal_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_ClerkFat_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_Clerk_Normal_LT_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_DoctorSkinny_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_HikerSkinny_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_JoggerSkinny_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_Runner_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_JournalistNormal_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_JournalistNormal_LT_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_MechanicNormal_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_MilkMaidOld_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_MilkMaidOld_LT_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_NurseFat_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_ParamedicNormal_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_PatientOld_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_PoliceWomanNormal_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_ShortSkirt_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_ShortSkirt_LT_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_SkaterYoung_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_SkaterYoung_LT_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_SurvivorNormal_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_SurvivorNormal_LT_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_VillagerOld_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZmbF_VillagerOld_LT_Base": {
    "parent": "ZombieFemaleBase",
    "methods": []
  },
  "ZombieMaleBase": {
    "parent": "ZombieBase",
    "methods": [
      "string CaptureSound()",
      "string ReleaseSound()",
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_CitizenASkinny_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_CitizenASkinny_LT_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_CitizenBFat_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_ClerkFat_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_ClerkFat_LT_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_CommercialPilotOld_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_CommercialPilotOld_LT_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_ConstrWorkerNormal_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_DoctorFat_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_FarmerFat_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_FarmerFat_LT_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_FirefighterNormal_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_FishermanOld_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_HandymanNormal_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_HeavyIndustryWorker_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_HermitSkinny_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_HikerSkinny_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_HunterOld_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_Jacket_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_Jacket_LT_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_JoggerSkinny_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM__Runner_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_JournalistSkinny_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_MechanicSkinny_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_MotobikerFat_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_OffshoreWorker_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_ParamedicNormal_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_PatientSkinny_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_PatrolNormal_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_PolicemanFat_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_PolicemanSpecForce_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_priestPopSkinny_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_PrisonerSkinny_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_SkaterYoung_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_SkaterYoung_LT_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_Gamedev_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_Soldier_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_SoldierNormal_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_SurvivorDean_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_usSoldier_normal_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool IsZombieMilitary()",
      "bool ResistContaminatedEffect()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_VillagerOld_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool ResistContaminatedEffect()",
      "bool IsZombieMilitary()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_VillagerOld_LT_Base": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool ResistContaminatedEffect()",
      "bool IsZombieMilitary()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_NBC_Yellow": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool ResistContaminatedEffect()",
      "bool IsZombieMilitary()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_NBC_Grey": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool ResistContaminatedEffect()",
      "bool IsZombieMilitary()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_NBC_White": {
    "parent": "ZombieMaleBase",
    "methods": [
      "bool ResistContaminatedEffect()",
      "bool IsZombieMilitary()",
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()"
    ]
  },
  "ZmbM_Mummy": {
    "parent": "ZombieMaleBase",
    "methods": [
      "void EEInit()",
      "void OnDamageDestroyed(int oldLevel)",
      "void ChangeVisual()",
      "bool ResistContaminatedEffect()"
    ]
  },
  "Archery_Base": {
    "parent": null,
    "methods": [
      "void Archery_Base()",
      "float GetChanceToJam()"
    ]
  },
  "XBUncockedEmpty": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void Crossbow_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void OnDebugSpawnEx(DebugSpawnParams params)",
      "bool CanBeUsedForSuicide()"
    ]
  },
  "XBCockedEmpty": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void Crossbow_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void OnDebugSpawnEx(DebugSpawnParams params)",
      "bool CanBeUsedForSuicide()"
    ]
  },
  "XBLoaded": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void Crossbow_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void OnDebugSpawnEx(DebugSpawnParams params)",
      "bool CanBeUsedForSuicide()"
    ]
  },
  "Crossbow_Base": {
    "parent": null,
    "methods": [
      "void Crossbow_Base()",
      "void InitStateMachine()",
      "float GetChanceToJam()",
      "void OnDebugSpawnEx(DebugSpawnParams params)",
      "bool CanBeUsedForSuicide()"
    ]
  },
  "Crossbow": {
    "parent": null,
    "methods": []
  },
  "Crossbow_Autumn": {
    "parent": null,
    "methods": []
  },
  "Crossbow_Summer": {
    "parent": null,
    "methods": []
  },
  "Crossbow_Black": {
    "parent": null,
    "methods": []
  },
  "Crossbow_Wood": {
    "parent": null,
    "methods": []
  },
  "AK101_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()",
      "bool CanEnterIronsights()"
    ]
  },
  "AK101": {
    "parent": null,
    "methods": [
      "bool CanEnterIronsights()"
    ]
  },
  "AK74_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()",
      "bool CanEnterIronsights()"
    ]
  },
  "AK74": {
    "parent": null,
    "methods": [
      "bool CanEnterIronsights()"
    ]
  },
  "AKM_Base": {
    "parent": null,
    "methods": [
      "bool CanEnterIronsights()",
      "void OnDebugSpawn()"
    ]
  },
  "AKS74U": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Aug_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()",
      "int GetWeaponSpecificCommand(int weaponAction ,int subCommand)",
      "bool CanEnterIronsights()",
      "void AssembleGun()",
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "Aug": {
    "parent": "Aug_Base",
    "methods": [
      "void OnDebugSpawn()",
      "bool CanEnterIronsights()",
      "void AssembleGun()",
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "AugShort": {
    "parent": "Aug_Base",
    "methods": [
      "bool CanEnterIronsights()",
      "void AssembleGun()",
      "void OnDebugSpawn()",
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "AugOptic": {
    "parent": null,
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "FAL_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Famas_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "FAMAS": {
    "parent": null,
    "methods": []
  },
  "SawedOffFAMAS": {
    "parent": null,
    "methods": []
  },
  "M14_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "M16A2_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "M4A1_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "OTS14": {
    "parent": null,
    "methods": []
  },
  "SKS_CLO_BU0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void InitStateMachine()",
      "bool CanEnterIronsights()",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "SKS_CLO_BU1": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void InitStateMachine()",
      "bool CanEnterIronsights()",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "SKS_OPN_BU0": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanEnterIronsights()",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "SKS_JAM_BU1": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanEnterIronsights()",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "SKS_Base": {
    "parent": "Rifle_Base",
    "methods": [
      "void InitStateMachine()",
      "bool CanEnterIronsights()",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "WeaponActionBase": {
    "parent": null,
    "methods": [
      "void Action(WeaponEventBase e)",
      "void WeaponActionDryFire(Weapon_Base w = NULL)",
      "void WeaponActionDryDryFire(Weapon_Base w = NULL)"
    ]
  },
  "WeaponActionDryFire": {
    "parent": "WeaponActionBase",
    "methods": [
      "void WeaponActionDryFire(Weapon_Base w = NULL)",
      "void Action(WeaponEventBase e)",
      "void WeaponActionDryDryFire(Weapon_Base w = NULL)"
    ]
  },
  "WeaponActionDryDryFire": {
    "parent": "WeaponActionBase",
    "methods": [
      "void WeaponActionDryDryFire(Weapon_Base w = NULL)",
      "void Action(WeaponEventBase e)"
    ]
  },
  "WeaponEventBase": {
    "parent": null,
    "methods": [
      "void WeaponEventBase(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetPackedType()",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "string DumpToString()",
      "void WeaponEventMechanism(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTrigger(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerToJam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerAutoStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerAutoEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventLoad1Bullet(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventMechanism": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventMechanism(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTrigger(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerToJam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerAutoStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerAutoEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventLoad1Bullet(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventTrigger": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventTrigger(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerToJam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerAutoStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerAutoEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventLoad1Bullet(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventTriggerToJam": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventTriggerToJam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerAutoStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerAutoEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventLoad1Bullet(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventTriggerAutoStart": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventTriggerAutoStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventTriggerAutoEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventLoad1Bullet(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventTriggerAutoEnd": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventTriggerAutoEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventLoad1Bullet(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventLoad1Bullet": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventLoad1Bullet(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventContinuousLoadBulletStart": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventContinuousLoadBulletStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventContinuousLoadBulletEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventContinuousLoadBulletEnd": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventContinuousLoadBulletEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventUnjam": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventUnjam(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAttachMagazine": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventAttachMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventUnjammingFailedTimeout": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventUnjammingFailedTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventUnjammingTimeout": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventUnjammingTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventDetachMagazine": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventDetachMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventSwapMagazine": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventSwapMagazine(DayZPlayer p = NULL, Magazine m = NULL, InventoryLocation il = NULL)",
      "void ReadFromContext(ParamsReadContext ctx)",
      "void WriteToContext(ParamsWriteContext ctx)",
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventHumanCommandActionFinished": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventHumanCommandActionFinished(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventHumanCommandActionAborted": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventHumanCommandActionAborted(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventReloadTimeout": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventReloadTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventDryFireTimeout": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventDryFireTimeout(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventSetNextMuzzleMode": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventSetNextMuzzleMode(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimation": {
    "parent": "WeaponEventBase",
    "methods": [
      "void WeaponEventAnimation(DayZPlayer p = NULL, Magazine m = NULL)",
      "int GetAnimEvent()",
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimAttachmentHide": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimAttachmentHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimAttachmentShow": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimAttachmentShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimBulletEject": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimBulletEject(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventCylinderRotate": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventCylinderRotate(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimBulletHide": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimBulletHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimBulletHide2": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimBulletHide2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimBulletInChamber": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimBulletInChamber(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimBulletInMagazine": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimBulletInMagazine(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimBulletShow": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimBulletShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimBulletShow2": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimBulletShow2(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimCanUnjamEnd": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimCanUnjamEnd(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimCanUnjamStart": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimCanUnjamStart(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimCocked": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimCocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimMagazineAttached": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimMagazineAttached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimMagazineDetached": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimMagazineDetached(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimMagazineHide": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimMagazineHide(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimMagazineShow": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimMagazineShow(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimSliderOpen": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimSliderOpen(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimUnjammed": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimUnjammed(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimHammerUncocked": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimHammerUncocked(DayZPlayer p = NULL, Magazine m = NULL)",
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponEventAnimHammerCocked": {
    "parent": "WeaponEventAnimation",
    "methods": [
      "void WeaponEventAnimHammerCocked(DayZPlayer p = NULL, Magazine m = NULL)"
    ]
  },
  "WeaponGuardBase": {
    "parent": null,
    "methods": [
      "bool GuardCondition(WeaponEventBase e)",
      "void GuardAnd(WeaponGuardBase arg0 = NULL, WeaponGuardBase arg1 = NULL)",
      "void GuardNot(WeaponGuardBase arg0 = NULL)",
      "void GuardOr(WeaponGuardBase arg0 = NULL, WeaponGuardBase arg1 = NULL)",
      "void WeaponGuardJammed(Weapon_Base w = NULL)",
      "void WeaponGuardIsDestroyed(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmo(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInnerMagazine(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInEvent(Weapon_Base w = NULL)",
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "GuardAnd": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void GuardAnd(WeaponGuardBase arg0 = NULL, WeaponGuardBase arg1 = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void GuardNot(WeaponGuardBase arg0 = NULL)",
      "void GuardOr(WeaponGuardBase arg0 = NULL, WeaponGuardBase arg1 = NULL)",
      "void WeaponGuardJammed(Weapon_Base w = NULL)",
      "void WeaponGuardIsDestroyed(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmo(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInnerMagazine(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInEvent(Weapon_Base w = NULL)",
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "GuardNot": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void GuardNot(WeaponGuardBase arg0 = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void GuardOr(WeaponGuardBase arg0 = NULL, WeaponGuardBase arg1 = NULL)",
      "void WeaponGuardJammed(Weapon_Base w = NULL)",
      "void WeaponGuardIsDestroyed(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmo(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInnerMagazine(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInEvent(Weapon_Base w = NULL)",
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "GuardOr": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void GuardOr(WeaponGuardBase arg0 = NULL, WeaponGuardBase arg1 = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardJammed(Weapon_Base w = NULL)",
      "void WeaponGuardIsDestroyed(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmo(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInnerMagazine(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInEvent(Weapon_Base w = NULL)",
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardJammed": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardJammed(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardIsDestroyed(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmo(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInnerMagazine(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInEvent(Weapon_Base w = NULL)",
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardIsDestroyed": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardIsDestroyed(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardHasAmmo(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInnerMagazine(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInEvent(Weapon_Base w = NULL)",
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardHasAmmo": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardHasAmmo(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardHasAmmoInnerMagazine(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInEvent(Weapon_Base w = NULL)",
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardHasAmmoInnerMagazine": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardHasAmmoInnerMagazine(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardHasAmmoInEvent(Weapon_Base w = NULL)",
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardHasAmmoInEvent": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardHasAmmoInEvent(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardHasMag": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardHasMag(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardChamberEmpty": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardCurrentChamberEmpty": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardCurrentChamberEmpty(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardAnyChamberEmpty": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardAnyChamberEmpty(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardChamberFull": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardChamberFull(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardCurrentChamberFull": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardCurrentChamberFull(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardInnerMagazineFull": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardInnerMagazineFull(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardInnerMagazineFullShareChamber": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardInnerMagazineFullShareChamber(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardChamberFiredOut": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardChamberFiredOut(Weapon_Base w = NULL, int muzzle_index = 0 )",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardCurrentChamberFiredOut": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardCurrentChamberFiredOut(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardAnyChamberFiredOut": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardAnyChamberFiredOut(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardCanAttachMag": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardCanAttachMag(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardCanSwapMag": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardCanSwapMag(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardCanDetachMag": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardCanDetachMag(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardChamberHasRoomForMoreThanOne": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardChamberHasRoomForMoreThanOne(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardInternalMagazineHasRoomForBullet": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardInternalMagazineHasRoomForBullet(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardChamberHasRoomForOne": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardChamberHasRoomForOne(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardChamberMultiHasRoomBulltet": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardChamberMultiHasRoomBulltet(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardChamberMultiHasRoomBulltetIgnoreLast": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardChamberMultiHasRoomBulltetIgnoreLast(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardHasAmmoInLoopedState": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardHasAmmoInLoopedState(WeaponChambering_Base state)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardMagazinesHaveEqualSizes": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardMagazinesHaveEqualSizes(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardWeaponCharged": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardWeaponCharged(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardWeaponDischarged": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardWeaponDischarged(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)",
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)"
    ]
  },
  "WeaponGuardWeaponOpen": {
    "parent": "WeaponGuardBase",
    "methods": [
      "void WeaponGuardWeaponOpen(Weapon_Base w = NULL)",
      "bool GuardCondition(WeaponEventBase e)"
    ]
  },
  "WeaponGuardWeaponManagerWantContinue": {
    "parent": "WeaponGuardBase",
    "methods": [
      "bool GuardCondition(WeaponEventBase e)"
    ]
  },
  "M79_Base": {
    "parent": "RifleSingleShotManual_Base",
    "methods": [
      "void M79_Base()",
      "bool ShootsExplosiveAmmo()",
      "void AssembleGun()",
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "M79": {
    "parent": "M79_Base",
    "methods": [
      "void AssembleGun()",
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "M79DummyOptics": {
    "parent": "ItemOptics",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "M249": {
    "parent": null,
    "methods": []
  },
  "Colt1911_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Colt1911": {
    "parent": null,
    "methods": []
  },
  "Engraved1911": {
    "parent": null,
    "methods": []
  },
  "CZ75_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Deagle_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Deagle": {
    "parent": null,
    "methods": []
  },
  "Deagle_Gold": {
    "parent": null,
    "methods": []
  },
  "Derringer_Base": {
    "parent": null,
    "methods": []
  },
  "Derringer": {
    "parent": null,
    "methods": []
  },
  "FLAREEmpty": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()"
    ]
  },
  "FLAREFireout": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()"
    ]
  },
  "FLARELoaded": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()"
    ]
  },
  "Flaregun": {
    "parent": null,
    "methods": [
      "void InitStateMachine()"
    ]
  },
  "FNX45_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Glock19_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "LongHorn_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "LongHorn": {
    "parent": null,
    "methods": []
  },
  "Magnum_Static_State": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsSingleState()",
      "void SetActions()",
      "void Magnum_Base()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void AssembleGun()",
      "static float GetCylinderRotation(int muzzleIndex)",
      "void SetCylinderRotationAnimationPhase(float rot, bool reset = false)",
      "void SyncCylinderRotation(bool reset = true)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void SetAttachmentsHealth()",
      "void OnFire(int muzzle_index)",
      "bool IsShowingChamberedBullet()",
      "bool CanEjectBullet()",
      "void ShowBullet(int muzzleIndex)",
      "void HideBullet(int muzzleIndex)",
      "void OnDebugSpawn()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "Magnum_Base": {
    "parent": "Weapon_Base",
    "methods": [
      "void SetActions()",
      "void Magnum_Base()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void AssembleGun()",
      "static float GetCylinderRotation(int muzzleIndex)",
      "void SetCylinderRotationAnimationPhase(float rot, bool reset = false)",
      "void SyncCylinderRotation(bool reset = true)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void SetAttachmentsHealth()",
      "void OnFire(int muzzle_index)",
      "bool IsShowingChamberedBullet()",
      "bool CanEjectBullet()",
      "void ShowBullet(int muzzleIndex)",
      "void HideBullet(int muzzleIndex)",
      "void OnDebugSpawn()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "Magnum": {
    "parent": "Magnum_Base",
    "methods": [
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "SawedoffMagnum": {
    "parent": "Magnum_Base",
    "methods": []
  },
  "Magnum_Cylinder": {
    "parent": "DummyItem",
    "methods": []
  },
  "Magnum_Ejector": {
    "parent": "DummyItem",
    "methods": []
  },
  "MakarovIJ70_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "MKII_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "P1_Base": {
    "parent": null,
    "methods": []
  },
  "P1": {
    "parent": null,
    "methods": []
  },
  "PMM": {
    "parent": null,
    "methods": []
  },
  "Red9": {
    "parent": null,
    "methods": []
  },
  "B95_base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "B95": {
    "parent": null,
    "methods": []
  },
  "SawedoffB95": {
    "parent": "B95_base",
    "methods": []
  },
  "CZ527_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "CZ550_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Izh18_Base": {
    "parent": "RifleSingleShot_Base",
    "methods": [
      "void Izh18_Base()",
      "void OnDebugSpawn()"
    ]
  },
  "Mosin9130_Base": {
    "parent": "BoltActionRifle_InnerMagazine_Base",
    "methods": [
      "void Mosin9130_Base()",
      "bool CanEnterIronsights()",
      "void OnDebugSpawn()"
    ]
  },
  "Mosin9130": {
    "parent": "Mosin9130_Base",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "SawedoffMosin9130_Base": {
    "parent": "Mosin9130_Base",
    "methods": []
  },
  "RPTEmptyDischarged": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "RPTLoadedCharged": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "RPTLoadedDischarged": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "RPTLoadedJammed": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "Repeater_Base": {
    "parent": "Rifle_Base",
    "methods": [
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "Repeater": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Ruger1022_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "SawedoffIzh18": {
    "parent": "Izh18_Base",
    "methods": [
      "void SawedoffIzh18()"
    ]
  },
  "Scout_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "SSG82_Base": {
    "parent": null,
    "methods": [
      "bool CanEnterIronsights()",
      "void AssembleGun()",
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "SSG82Optic": {
    "parent": null,
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "SV98_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "SVD_Base": {
    "parent": null,
    "methods": [
      "bool CanEnterIronsights()",
      "void OnDebugSpawn()"
    ]
  },
  "SVD": {
    "parent": "SVD_Base",
    "methods": []
  },
  "SVD_Wooden": {
    "parent": "SVD_Base",
    "methods": []
  },
  "Trumpet": {
    "parent": null,
    "methods": []
  },
  "Winchester70_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Izh18Shotgun_Base": {
    "parent": "RifleSingleShot_Base",
    "methods": [
      "void Izh18Shotgun_Base()",
      "void OnDebugSpawn()"
    ]
  },
  "Izh43Shotgun_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Izh43Shotgun": {
    "parent": null,
    "methods": []
  },
  "SawedoffIzh43Shotgun": {
    "parent": null,
    "methods": []
  },
  "PumpShotgunEmpty": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void Mp133Shotgun()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "PumpShotgunFireout": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void Mp133Shotgun()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "PumpShotgunLoaded": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "bool IsBoltOpen()",
      "void Mp133Shotgun()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "PumpShotgunJammed": {
    "parent": "WeaponStateJammed",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "int GetCurrentStateID()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsBoltOpen()",
      "bool IsRepairEnabled()",
      "void InitMuzzleArray()",
      "void Mp133Shotgun()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "Mp133Shotgun_Base": {
    "parent": null,
    "methods": [
      "void Mp133Shotgun()",
      "void InitStateMachine()",
      "bool CanChamberBullet(int muzzleIndex, Magazine mag)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "Remington12": {
    "parent": null,
    "methods": []
  },
  "Saiga_Base": {
    "parent": null,
    "methods": [
      "bool CanEnterIronsights()",
      "void OnDebugSpawn()"
    ]
  },
  "Saiga": {
    "parent": null,
    "methods": []
  },
  "SawedoffIzh18Shotgun": {
    "parent": "Izh18Shotgun_Base",
    "methods": [
      "void SawedoffIzh18Shotgun()"
    ]
  },
  "CZ61_Base": {
    "parent": null,
    "methods": [
      "void CZ61()",
      "int GetWeaponSpecificCommand(int weaponAction ,int subCommand)",
      "void OnDebugSpawn()"
    ]
  },
  "MP5K_Base": {
    "parent": null,
    "methods": [
      "void MP5K_Base()",
      "int GetWeaponSpecificCommand(int weaponAction ,int subCommand)",
      "void OnDebugSpawn()"
    ]
  },
  "PM73Rak_Base": {
    "parent": null,
    "methods": []
  },
  "PP19_Base": {
    "parent": null,
    "methods": [
      "void PP19_Base()",
      "int GetWeaponSpecificCommand(int weaponAction ,int subCommand)",
      "bool CanEnterIronsights()",
      "void OnDebugSpawn()"
    ]
  },
  "UMP45_Base": {
    "parent": null,
    "methods": [
      "void UMP_Base()",
      "void OnDebugSpawn()"
    ]
  },
  "VSS_Base": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()",
      "bool CanEnterIronsights()"
    ]
  },
  "VSS": {
    "parent": null,
    "methods": [
      "bool CanEnterIronsights()"
    ]
  },
  "ASVAL": {
    "parent": null,
    "methods": [
      "bool CanEnterIronsights()"
    ]
  },
  "Vikhr": {
    "parent": null,
    "methods": [
      "bool CanEnterIronsights()"
    ]
  },
  "House": {
    "parent": null,
    "methods": [
      "void House()",
      "void BuildingBase()",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "void SetActions()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)"
    ]
  },
  "BuildingBase": {
    "parent": null,
    "methods": [
      "void BuildingBase()",
      "void InitializeActions()",
      "void GetActions(typename action_input_type, out array<ActionBase_Basic> actions)",
      "void SetActions()",
      "void AddAction(typename actionName)",
      "void RemoveAction(typename actionName)"
    ]
  },
  "Bark_Birch": {
    "parent": "Bark_ColorBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )",
      "bool CanDetachAttachment( EntityAI parent )"
    ]
  },
  "Bark_Oak": {
    "parent": "Bark_ColorBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )",
      "bool CanDetachAttachment( EntityAI parent )"
    ]
  },
  "Fence": {
    "parent": "BaseBuildingBase",
    "methods": [
      "void Fence()",
      "string GetConstructionKitType()",
      "int GetMeleeTargetType()",
      "bool HasHinges()",
      "bool HasFullyConstructedGate()",
      "void SetGateState( int state )",
      "int GetGateState()",
      "int CheckGateState()",
      "void SetOpenedState( bool state )",
      "bool IsOpened()",
      "bool IsLocked()",
      "bool NameOverride(out string output)",
      "bool CanDisplayAttachmentSlot( int slot_id )",
      "bool CanDisplayAttachmentCategory( string category_name )",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void AfterStoreLoad()",
      "void OnVariablesSynchronized()",
      "void OnPartBuiltServer( notnull Man player, string part_name, int action_id )",
      "void OnPartDismantledServer( notnull Man player, string part_name, int action_id )",
      "void OnPartDestroyedServer( Man player, string part_name, int action_id, bool destroyed_by_connected_part = false )",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanBeRepairedToPristine()",
      "bool CanOpenFence()",
      "bool CanCloseFence()",
      "void OpenFence()",
      "void CloseFence()",
      "void CheckFenceOpened()",
      "void CheckFenceClosed()",
      "void CreateAreaDamage( string slot_name, float rotation_angle = 0 )",
      "void UpdateBarbedWireAreaDamagePos(float rotation_angle = 0, bool to_delete = false )",
      "void PostAreaDamageActions()",
      "bool IsPlayerInside( PlayerBase player, string selection )",
      "bool IsFacingPlayer( PlayerBase player, string selection )",
      "bool IsFacingCamera( string selection )",
      "bool HasProperDistance( string selection, PlayerBase player )",
      "bool CanUseConstructionBuild()",
      "void SoundGateOpenStart()",
      "void SoundGateCloseStart()",
      "void SoundGateCloseEnd()",
      "void GateAttachmentsSanityCheck()",
      "void HandleDropAttachment(ItemBase item)",
      "bool GateAttachmentConditions(int slotId)",
      "bool TranslateSlotFromSelection(string selection_name, out int slot_id)",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "ShelterSite": {
    "parent": "BaseBuildingBase",
    "methods": [
      "void ShelterSite()",
      "string GetConstructionKitType()",
      "int GetMeleeTargetType()",
      "void OnPartBuiltServer( notnull Man player, string part_name, int action_id )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanBeRepairedToPristine()",
      "bool CanUseHandConstruction()",
      "bool MustBeBuiltFromOutside()",
      "bool IsFacingCamera( string selection )",
      "bool IsPlayerInside( PlayerBase player, string selection )",
      "bool HasProperDistance( string selection, PlayerBase player )",
      "void SetActions()"
    ]
  },
  "StaticFlagPole": {
    "parent": "TerritoryFlag",
    "methods": [
      "void OnPartDismantledServer( notnull Man player, string part_name, int action_id )",
      "void OnPartDestroyedServer( Man player, string part_name, int action_id, bool destroyed_by_connected_part = false )",
      "void OnSpawnByObjectSpawner(ITEM_SpawnerObject item)",
      "void FullyBuild()"
    ]
  },
  "TerritoryFlag": {
    "parent": "BaseBuildingBase",
    "methods": [
      "void TerritoryFlag()",
      "void InitRefresherData()",
      "string GetConstructionKitType()",
      "int GetMeleeTargetType()",
      "bool CanDisplayAttachmentCategory( string category_name )",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void AfterStoreLoad()",
      "void OnCEUpdate()",
      "void HandleRefreshers()",
      "void SetRefresherActive(bool state)",
      "void InsertRefresherPosition()",
      "void RemoveRefresherPosition(int idx = -2)",
      "void OnVariablesSynchronized()",
      "void OnPartBuiltServer( notnull Man player, string part_name, int action_id )",
      "void OnPartDismantledServer( notnull Man player, string part_name, int action_id )",
      "void OnPartDestroyedServer( Man player, string part_name, int action_id, bool destroyed_by_connected_part = false )",
      "void EEItemDetached( EntityAI item, string slot_name )",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanBeRepairedToPristine()",
      "bool IsPlayerInside( PlayerBase player, string selection )",
      "bool IsFacingPlayer( PlayerBase player, string selection )",
      "bool IsFacingCamera( string selection )",
      "bool HasProperDistance( string selection, PlayerBase player )",
      "void SetActions()",
      "void AnimateFlagEx(float delta, PlayerBase player = null)",
      "void AnimateFlag(float delta)",
      "void LogAnimateFlag(float newPhase, notnull PlayerBase player)",
      "void SetRefreshTimer01(float fraction)",
      "void AddRefresherTime01(float fraction)",
      "float GetRefresherTime01()",
      "void CheckLoadedVariables(int max_duration)",
      "void OnDebugSpawn()"
    ]
  },
  "Watchtower": {
    "parent": "BaseBuildingBase",
    "methods": [
      "void Watchtower()",
      "string GetConstructionKitType()",
      "int GetMeleeTargetType()",
      "void UpdateVisuals()",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanBeRepairedToPristine()",
      "bool PerformRoofCheckForBase( string partName, PlayerBase player, out bool result )",
      "bool CanDisplayAttachmentSlot( int slot_id )",
      "bool CanDisplayAttachmentCategory( string category_name )",
      "bool CheckSlotVerticalDistance( int slot_id, PlayerBase player )",
      "bool CheckMemoryPointVerticalDistance( float max_dist, string selection, PlayerBase player )",
      "bool CheckLevelVerticalDistance( float max_dist, string selection, PlayerBase player )",
      "void AfterStoreLoad()",
      "void OnPartBuiltServer( notnull Man player, string part_name, int action_id )",
      "void OnPartDismantledServer( notnull Man player, string part_name, int action_id )",
      "void OnPartDestroyedServer( Man player, string part_name, int action_id, bool destroyed_by_connected_part = false )",
      "bool IsFacingPlayer( PlayerBase player, string selection )",
      "bool IsFacingCamera( string selection )",
      "bool IsPlayerInside( PlayerBase player, string selection )",
      "bool HasProperDistance( string selection, PlayerBase player )",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "BloodBagEmpty": {
    "parent": "BloodContainerBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "BloodBagFull": {
    "parent": "BloodContainerBase",
    "methods": [
      "void BloodBagFull()"
    ]
  },
  "BloodBagIV": {
    "parent": "BloodContainerBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "BloodContainerBase": {
    "parent": "ItemBase",
    "methods": [
      "void BloodContainerBase()",
      "bool IsBloodContainer()",
      "void SetBloodTypeVisible( bool visible )",
      "bool GetBloodTypeVisible()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )"
    ]
  },
  "BloodSyringe": {
    "parent": "BloodContainerBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "Syringe": {
    "parent": "BloodContainerBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "AirborneMask": {
    "parent": "MaskBase",
    "methods": [
      "bool IsObstructingVoice()",
      "int GetVoiceEffect()"
    ]
  },
  "AliceBag_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "AliceBag_Green": {
    "parent": "AliceBag_ColorBase",
    "methods": []
  },
  "AliceBag_Black": {
    "parent": "AliceBag_ColorBase",
    "methods": []
  },
  "AliceBag_Camo": {
    "parent": "AliceBag_ColorBase",
    "methods": []
  },
  "Armband_ColorBase": {
    "parent": "Clothing",
    "methods": [
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutAsAttachment( EntityAI parent )",
      "void SetActions()",
      "void SwitchItemSelectionTextureEx(EItemManipulationContext context, Param par = null)"
    ]
  },
  "Armband_Dyed": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_White": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Yellow": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Orange": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Red": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Green": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Pink": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Blue": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Rex": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Zagorky": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Crook": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "Armband_Black": {
    "parent": "Armband_ColorBase",
    "methods": []
  },
  "ArmyPouch_ColorBase": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "ArmyPouch_Green": {
    "parent": null,
    "methods": []
  },
  "ArmyPouch_Black": {
    "parent": null,
    "methods": []
  },
  "ArmyPouch_Camo": {
    "parent": null,
    "methods": []
  },
  "AssaultBag_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "AssaultBag_Ttsko": {
    "parent": "AssaultBag_ColorBase",
    "methods": []
  },
  "AssaultBag_Black": {
    "parent": "AssaultBag_ColorBase",
    "methods": []
  },
  "AssaultBag_Green": {
    "parent": "AssaultBag_ColorBase",
    "methods": []
  },
  "AthleticShoes_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "AthleticShoes_Blue": {
    "parent": "AthleticShoes_ColorBase",
    "methods": []
  },
  "AthleticShoes_Black": {
    "parent": "AthleticShoes_ColorBase",
    "methods": []
  },
  "AthleticShoes_Brown": {
    "parent": "AthleticShoes_ColorBase",
    "methods": []
  },
  "AthleticShoes_Green": {
    "parent": "AthleticShoes_ColorBase",
    "methods": []
  },
  "AthleticShoes_Grey": {
    "parent": "AthleticShoes_ColorBase",
    "methods": []
  },
  "AviatorGlasses": {
    "parent": "Glasses_Base",
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "Balaclava3Holes_ColorBase": {
    "parent": "Mask_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Balaclava3Holes_Beige": {
    "parent": "Balaclava3Holes_ColorBase",
    "methods": []
  },
  "Balaclava3Holes_Blue": {
    "parent": "Balaclava3Holes_ColorBase",
    "methods": []
  },
  "Balaclava3Holes_Black": {
    "parent": "Balaclava3Holes_ColorBase",
    "methods": []
  },
  "Balaclava3Holes_Green": {
    "parent": "Balaclava3Holes_ColorBase",
    "methods": []
  },
  "Balaclava3Holes_White": {
    "parent": "Balaclava3Holes_ColorBase",
    "methods": []
  },
  "BalaclavaMask_ColorBase": {
    "parent": "Mask_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "BalaclavaMask_Black": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "BalaclavaMask_Blackskull": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "BalaclavaMask_Beige": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "BalaclavaMask_Blue": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "BalaclavaMask_Green": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "BalaclavaMask_Pink": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "BalaclavaMask_White": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "BalaclavaMask_Pig": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "BalaclavaMask_Chain": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "BalaclavaMask_BDU": {
    "parent": "BalaclavaMask_ColorBase",
    "methods": []
  },
  "Ballerinas_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "Ballerinas_Blue": {
    "parent": "Ballerinas_ColorBase",
    "methods": []
  },
  "Ballerinas_Red": {
    "parent": "Ballerinas_ColorBase",
    "methods": []
  },
  "Ballerinas_White": {
    "parent": "Ballerinas_ColorBase",
    "methods": []
  },
  "Ballerinas_Yellow": {
    "parent": "Ballerinas_ColorBase",
    "methods": []
  },
  "BaseballCap_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "BaseballCap_Blue": {
    "parent": "BaseballCap_ColorBase",
    "methods": []
  },
  "BaseballCap_Beige": {
    "parent": "BaseballCap_ColorBase",
    "methods": []
  },
  "BaseballCap_Black": {
    "parent": "BaseballCap_ColorBase",
    "methods": []
  },
  "BaseballCap_Olive": {
    "parent": "BaseballCap_ColorBase",
    "methods": []
  },
  "BaseballCap_Pink": {
    "parent": "BaseballCap_ColorBase",
    "methods": []
  },
  "BaseballCap_Red": {
    "parent": "BaseballCap_ColorBase",
    "methods": []
  },
  "BaseballCap_Camo": {
    "parent": "BaseballCap_ColorBase",
    "methods": []
  },
  "BaseballCap_CMMG_Black": {
    "parent": "BaseballCap_ColorBase",
    "methods": []
  },
  "BaseballCap_CMMG_Pink": {
    "parent": "BaseballCap_ColorBase",
    "methods": []
  },
  "BDUJacket": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "BDUPants": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "BeanieHat_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "BeanieHat_Beige": {
    "parent": "BeanieHat_ColorBase",
    "methods": []
  },
  "BeanieHat_Black": {
    "parent": "BeanieHat_ColorBase",
    "methods": []
  },
  "BeanieHat_Blue": {
    "parent": "BeanieHat_ColorBase",
    "methods": []
  },
  "BeanieHat_Brown": {
    "parent": "BeanieHat_ColorBase",
    "methods": []
  },
  "BeanieHat_Green": {
    "parent": "BeanieHat_ColorBase",
    "methods": []
  },
  "BeanieHat_Grey": {
    "parent": "BeanieHat_ColorBase",
    "methods": []
  },
  "BeanieHat_Pink": {
    "parent": "BeanieHat_ColorBase",
    "methods": []
  },
  "BeanieHat_Red": {
    "parent": "BeanieHat_ColorBase",
    "methods": []
  },
  "Blouse_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Blouse_Blue": {
    "parent": "Blouse_ColorBase",
    "methods": []
  },
  "Blouse_Green": {
    "parent": "Blouse_ColorBase",
    "methods": []
  },
  "Blouse_Violet": {
    "parent": "Blouse_ColorBase",
    "methods": []
  },
  "Blouse_White": {
    "parent": "Blouse_ColorBase",
    "methods": []
  },
  "BomberJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "BomberJacket_Black": {
    "parent": "BomberJacket_ColorBase",
    "methods": []
  },
  "BomberJacket_Brown": {
    "parent": "BomberJacket_ColorBase",
    "methods": []
  },
  "BomberJacket_Blue": {
    "parent": "BomberJacket_ColorBase",
    "methods": []
  },
  "BomberJacket_Grey": {
    "parent": "BomberJacket_ColorBase",
    "methods": []
  },
  "BomberJacket_Maroon": {
    "parent": "BomberJacket_ColorBase",
    "methods": []
  },
  "BomberJacket_Olive": {
    "parent": "BomberJacket_ColorBase",
    "methods": []
  },
  "BomberJacket_SkyBlue": {
    "parent": "BomberJacket_ColorBase",
    "methods": []
  },
  "BoonieHat_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "BoonieHat_Black": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_Blue": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_DPM": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_Dubok": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_Flecktran": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_NavyBlue": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_Olive": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_Orange": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_Red": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_Tan": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "BoonieHat_Winter": {
    "parent": "BoonieHat_ColorBase",
    "methods": []
  },
  "Breeches_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Breeches_Pink": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "Breeches_Red": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "Breeches_White": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "Breeches_Green": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "Breeches_Browncheck": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "Breeches_Blue": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "Breeches_Blackcheck": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "Breeches_Black": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "Breeches_Beige": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "Breeches_Beetcheck": {
    "parent": "Breeches_ColorBase",
    "methods": []
  },
  "BudenovkaHat_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "BudenovkaHat_Gray": {
    "parent": "BudenovkaHat_ColorBase",
    "methods": []
  },
  "BurlapSackCover": {
    "parent": "HeadGear_Base",
    "methods": [
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanDetachAttachment( EntityAI parent )",
      "void OnRemovedFromHead(PlayerBase player)"
    ]
  },
  "BushlatPoliceJacket_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "BushlatPoliceJacket_Blue": {
    "parent": null,
    "methods": []
  },
  "CanvasBag_ColorBase": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "CanvasBag_Olive": {
    "parent": null,
    "methods": []
  },
  "CanvasBag_Medical": {
    "parent": null,
    "methods": []
  },
  "CanvasPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "CanvasPants_Beige": {
    "parent": "CanvasPants_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "CanvasPants_Blue": {
    "parent": "CanvasPants_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "CanvasPants_Grey": {
    "parent": "CanvasPants_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "CanvasPants_Red": {
    "parent": "CanvasPants_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "CanvasPants_Violet": {
    "parent": "CanvasPants_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "CanvasPantsMidi_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "CanvasPantsMidi_Beige": {
    "parent": "CanvasPantsMidi_ColorBase",
    "methods": []
  },
  "CanvasPantsMidi_Blue": {
    "parent": "CanvasPantsMidi_ColorBase",
    "methods": []
  },
  "CanvasPantsMidi_Grey": {
    "parent": "CanvasPantsMidi_ColorBase",
    "methods": []
  },
  "CanvasPantsMidi_Red": {
    "parent": "CanvasPantsMidi_ColorBase",
    "methods": []
  },
  "CanvasPantsMidi_Violet": {
    "parent": "CanvasPantsMidi_ColorBase",
    "methods": []
  },
  "CargoPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "CargoPants_Beige": {
    "parent": "CargoPants_ColorBase",
    "methods": []
  },
  "CargoPants_Black": {
    "parent": "CargoPants_ColorBase",
    "methods": []
  },
  "CargoPants_Blue": {
    "parent": "CargoPants_ColorBase",
    "methods": []
  },
  "CargoPants_Green": {
    "parent": "CargoPants_ColorBase",
    "methods": []
  },
  "CargoPants_Grey": {
    "parent": "CargoPants_ColorBase",
    "methods": []
  },
  "Chainmail": {
    "parent": "Top_Base",
    "methods": []
  },
  "Chainmail_Coif": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "Chainmail_Leggings": {
    "parent": "Pants_Base",
    "methods": []
  },
  "ChernarusSportShirt": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "ChestHolster": {
    "parent": "Vest_Base",
    "methods": []
  },
  "Chestplate": {
    "parent": "Vest_Base",
    "methods": []
  },
  "ChildBag_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "ChildBag_Green": {
    "parent": "ChildBag_ColorBase",
    "methods": []
  },
  "ChildBag_Red": {
    "parent": "ChildBag_ColorBase",
    "methods": []
  },
  "ChildBag_Blue": {
    "parent": "ChildBag_ColorBase",
    "methods": []
  },
  "ChristmasHeadband_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "ChristmasHeadband_Antlers": {
    "parent": "ChristmasHeadband_ColorBase",
    "methods": []
  },
  "ChristmasHeadband_Trees": {
    "parent": "ChristmasHeadband_ColorBase",
    "methods": []
  },
  "ChristmasHeadband_Gingerbread": {
    "parent": "ChristmasHeadband_ColorBase",
    "methods": []
  },
  "CivilianBelt": {
    "parent": null,
    "methods": [
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanReceiveAttachment( EntityAI attachment,int slotId )",
      "void OnDebugSpawn()"
    ]
  },
  "CombatBoots_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "CombatBoots_Beige": {
    "parent": "CombatBoots_ColorBase",
    "methods": []
  },
  "CombatBoots_Black": {
    "parent": "CombatBoots_ColorBase",
    "methods": []
  },
  "CombatBoots_Brown": {
    "parent": "CombatBoots_ColorBase",
    "methods": []
  },
  "CombatBoots_Green": {
    "parent": "CombatBoots_ColorBase",
    "methods": []
  },
  "CombatBoots_Grey": {
    "parent": "CombatBoots_ColorBase",
    "methods": []
  },
  "CourierBag": {
    "parent": null,
    "methods": []
  },
  "CowboyHat_ColorBase": {
    "parent": null,
    "methods": []
  },
  "CowboyHat_Brown": {
    "parent": null,
    "methods": []
  },
  "CowboyHat_black": {
    "parent": null,
    "methods": []
  },
  "CowboyHat_darkBrown": {
    "parent": null,
    "methods": []
  },
  "CowboyHat_green": {
    "parent": null,
    "methods": []
  },
  "CoyoteBag_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "CoyoteBag_Brown": {
    "parent": "CoyoteBag_ColorBase",
    "methods": []
  },
  "CoyoteBag_Green": {
    "parent": "CoyoteBag_ColorBase",
    "methods": []
  },
  "CoyoteBag_Winter": {
    "parent": "CoyoteBag_ColorBase",
    "methods": []
  },
  "CrookedNose": {
    "parent": "Mask_Base",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DallasMask": {
    "parent": "ClothingBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DenimJacket": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "DesignerGlasses": {
    "parent": "Glasses_Base",
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "DownJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": []
  },
  "DressShoes_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "DressShoes_Beige": {
    "parent": "DressShoes_ColorBase",
    "methods": []
  },
  "DressShoes_Black": {
    "parent": "DressShoes_ColorBase",
    "methods": []
  },
  "DressShoes_Brown": {
    "parent": "DressShoes_ColorBase",
    "methods": []
  },
  "DressShoes_Sunburst": {
    "parent": "DressShoes_ColorBase",
    "methods": []
  },
  "DressShoes_White": {
    "parent": "DressShoes_ColorBase",
    "methods": []
  },
  "DryBag_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "DryBag_Orange": {
    "parent": "DryBag_ColorBase",
    "methods": []
  },
  "DryBag_Yellow": {
    "parent": "DryBag_ColorBase",
    "methods": []
  },
  "DryBag_Blue": {
    "parent": "DryBag_ColorBase",
    "methods": []
  },
  "DryBag_Green": {
    "parent": "DryBag_ColorBase",
    "methods": []
  },
  "DryBag_Black": {
    "parent": "DryBag_ColorBase",
    "methods": []
  },
  "DryBag_Red": {
    "parent": "DryBag_ColorBase",
    "methods": []
  },
  "DrysackBag_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool IsContainer()",
      "bool CanPutInCargo(EntityAI parent)"
    ]
  },
  "DrysackBag_Green": {
    "parent": null,
    "methods": []
  },
  "DrysackBag_Orange": {
    "parent": null,
    "methods": []
  },
  "DrysackBag_Yellow": {
    "parent": null,
    "methods": []
  },
  "DuffelBagSmall_ColorBase": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "DuffelBagSmall_Green": {
    "parent": null,
    "methods": []
  },
  "DuffelBagSmall_Black": {
    "parent": null,
    "methods": []
  },
  "DuffelBagSmall_Camo": {
    "parent": null,
    "methods": []
  },
  "EyePatch_Improvised": {
    "parent": "Glasses_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "FaceCover_Improvised": {
    "parent": "Mask_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "FeetCover_Improvised": {
    "parent": "Shoes_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "FirefighterJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "FirefighterJacket_Beige": {
    "parent": "FirefighterJacket_ColorBase",
    "methods": []
  },
  "FirefighterJacket_Black": {
    "parent": "FirefighterJacket_ColorBase",
    "methods": []
  },
  "FirefightersPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "FirefightersPants_Beige": {
    "parent": "FirefightersPants_ColorBase",
    "methods": []
  },
  "FirefightersPants_Black": {
    "parent": "FirefightersPants_ColorBase",
    "methods": []
  },
  "FlatCap_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "FlatCap_Black": {
    "parent": "FlatCap_ColorBase",
    "methods": []
  },
  "FlatCap_Blue": {
    "parent": "FlatCap_ColorBase",
    "methods": []
  },
  "FlatCap_Red": {
    "parent": "FlatCap_ColorBase",
    "methods": []
  },
  "FlatCap_Brown": {
    "parent": "FlatCap_ColorBase",
    "methods": []
  },
  "FlatCap_Grey": {
    "parent": "FlatCap_ColorBase",
    "methods": []
  },
  "FlatCap_BrownCheck": {
    "parent": "FlatCap_ColorBase",
    "methods": []
  },
  "FlatCap_GreyCheck": {
    "parent": "FlatCap_ColorBase",
    "methods": []
  },
  "FlatCap_BlackCheck": {
    "parent": "FlatCap_ColorBase",
    "methods": []
  },
  "FurCourierBag": {
    "parent": null,
    "methods": []
  },
  "FurImprovisedBag": {
    "parent": null,
    "methods": []
  },
  "GasMask": {
    "parent": "MaskBase",
    "methods": [
      "bool IsObstructingVoice()",
      "int GetVoiceEffect()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)"
    ]
  },
  "GasMask_Filter": {
    "parent": null,
    "methods": [
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "float GetFilterDamageRatio()"
    ]
  },
  "GasMask_Filter_Improvised": {
    "parent": null,
    "methods": [
      "float GetFilterDamageRatio()"
    ]
  },
  "GhillieBushrag_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "GhillieBushrag_Tan": {
    "parent": "GhillieBushrag_ColorBase",
    "methods": []
  },
  "GhillieBushrag_Woodland": {
    "parent": "GhillieBushrag_ColorBase",
    "methods": []
  },
  "GhillieBushrag_Mossy": {
    "parent": "GhillieBushrag_ColorBase",
    "methods": []
  },
  "GhillieBushrag_Winter": {
    "parent": "GhillieBushrag_ColorBase",
    "methods": []
  },
  "GhillieHood_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "GhillieHood_Tan": {
    "parent": "GhillieHood_ColorBase",
    "methods": []
  },
  "GhillieHood_Woodland": {
    "parent": "GhillieHood_ColorBase",
    "methods": []
  },
  "GhillieHood_Mossy": {
    "parent": "GhillieHood_ColorBase",
    "methods": []
  },
  "GhillieHood_Winter": {
    "parent": "GhillieHood_ColorBase",
    "methods": []
  },
  "GhillieSuit_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "GhillieSuit_Tan": {
    "parent": "GhillieSuit_ColorBase",
    "methods": []
  },
  "GhillieSuit_Woodland": {
    "parent": "GhillieSuit_ColorBase",
    "methods": []
  },
  "GhillieSuit_Mossy": {
    "parent": "GhillieSuit_ColorBase",
    "methods": []
  },
  "GhillieSuit_Winter": {
    "parent": "GhillieSuit_ColorBase",
    "methods": []
  },
  "GhillieTop_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "GhillieTop_Tan": {
    "parent": "GhillieTop_ColorBase",
    "methods": []
  },
  "GhillieTop_Woodland": {
    "parent": "GhillieTop_ColorBase",
    "methods": []
  },
  "GhillieTop_Mossy": {
    "parent": "GhillieTop_ColorBase",
    "methods": []
  },
  "GhillieTop_Winter": {
    "parent": "GhillieTop_ColorBase",
    "methods": []
  },
  "GorkaEJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "GorkaEJacket_Summer": {
    "parent": "GorkaEJacket_ColorBase",
    "methods": []
  },
  "GorkaEJacket_Flat": {
    "parent": "GorkaEJacket_ColorBase",
    "methods": []
  },
  "GorkaEJacket_Autumn": {
    "parent": "GorkaEJacket_ColorBase",
    "methods": []
  },
  "GorkaEJacket_PautRev": {
    "parent": "GorkaEJacket_ColorBase",
    "methods": []
  },
  "GorkaPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "GorkaPants_Summer": {
    "parent": "GorkaPants_ColorBase",
    "methods": []
  },
  "GorkaPants_Autumn": {
    "parent": "GorkaPants_ColorBase",
    "methods": []
  },
  "GorkaPants_Flat": {
    "parent": "GorkaPants_ColorBase",
    "methods": []
  },
  "GorkaPants_PautRev": {
    "parent": "GorkaPants_ColorBase",
    "methods": []
  },
  "GP5GasMask": {
    "parent": "MaskBase",
    "methods": [
      "bool IsObstructingVoice()",
      "int GetVoiceEffect()"
    ]
  },
  "GP5GasMask_Filter": {
    "parent": null,
    "methods": []
  },
  "GreatHelm": {
    "parent": "HelmetBase",
    "methods": [
      "bool IsObstructingVoice()",
      "int GetVoiceEffect()"
    ]
  },
  "GuyFawkesMask": {
    "parent": "ClothingBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "HandsCover_Improvised": {
    "parent": "Gloves_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "HeadCover_Improvised": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Headdress_Colorbase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "Headdress_Wolf": {
    "parent": "Headdress_Colorbase",
    "methods": []
  },
  "Headtorch_Black": {
    "parent": null,
    "methods": [
      "void OnLightCreated()",
      "void OnDebugSpawn()"
    ]
  },
  "Headtorch_ColorBase": {
    "parent": "Clothing",
    "methods": [
      "void Headtorch_ColorBase()",
      "void InitGlobalExclusionValues()",
      "void Checkparent()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void OnWork(float consumed_energy)",
      "void OnLightCreated()",
      "void CreateHeadtorchLight()",
      "void AttachLightOnHead(EntityAI person)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "void SetActions()",
      "bool IsLightSource()",
      "void OnInvisibleSet(bool invisible)"
    ]
  },
  "Headtorch_Grey": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "HelmetBase": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "HighCapacityVest_ColorBase": {
    "parent": "Vest_Base",
    "methods": []
  },
  "HighCapacityVest_Black": {
    "parent": "HighCapacityVest_ColorBase",
    "methods": []
  },
  "HighCapacityVest_Olive": {
    "parent": "HighCapacityVest_ColorBase",
    "methods": []
  },
  "HikingBootsLow_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "HikingBootsLow_Black": {
    "parent": "HikingBootsLow_ColorBase",
    "methods": []
  },
  "HikingBootsLow_Blue": {
    "parent": "HikingBootsLow_ColorBase",
    "methods": []
  },
  "HikingBootsLow_Beige": {
    "parent": "HikingBootsLow_ColorBase",
    "methods": []
  },
  "HikingBootsLow_Grey": {
    "parent": "HikingBootsLow_ColorBase",
    "methods": []
  },
  "HikingBoots_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "HikingBoots_Brown": {
    "parent": "HikingBoots_ColorBase",
    "methods": []
  },
  "HikingBoots_Black": {
    "parent": "HikingBoots_ColorBase",
    "methods": []
  },
  "HikingJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "HikingJacket_Black": {
    "parent": "HikingJacket_ColorBase",
    "methods": []
  },
  "HikingJacket_Blue": {
    "parent": "HikingJacket_ColorBase",
    "methods": []
  },
  "HikingJacket_Red": {
    "parent": "HikingJacket_ColorBase",
    "methods": []
  },
  "HikingJacket_Green": {
    "parent": "HikingJacket_ColorBase",
    "methods": []
  },
  "HipPack_ColorBase": {
    "parent": null,
    "methods": [
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanReceiveAttachment( EntityAI attachment,int slotId )",
      "void OnDebugSpawn()"
    ]
  },
  "HipPack_Black": {
    "parent": null,
    "methods": []
  },
  "HipPack_Green": {
    "parent": null,
    "methods": []
  },
  "HipPack_Medical": {
    "parent": null,
    "methods": []
  },
  "HipPack_Party": {
    "parent": null,
    "methods": []
  },
  "HockeyMask": {
    "parent": "Mask_Base",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "Hoodie_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Hoodie_Blue": {
    "parent": "Hoodie_ColorBase",
    "methods": []
  },
  "Hoodie_Black": {
    "parent": "Hoodie_ColorBase",
    "methods": []
  },
  "Hoodie_Brown": {
    "parent": "Hoodie_ColorBase",
    "methods": []
  },
  "Hoodie_Green": {
    "parent": "Hoodie_ColorBase",
    "methods": []
  },
  "Hoodie_Grey": {
    "parent": "Hoodie_ColorBase",
    "methods": []
  },
  "Hoodie_Red": {
    "parent": "Hoodie_ColorBase",
    "methods": []
  },
  "HoxtonMask": {
    "parent": "ClothingBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "HunterPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "HunterPants_Autumn": {
    "parent": "HunterPants_ColorBase",
    "methods": []
  },
  "HunterPants_Brown": {
    "parent": "HunterPants_ColorBase",
    "methods": []
  },
  "HunterPants_Spring": {
    "parent": "HunterPants_ColorBase",
    "methods": []
  },
  "HunterPants_Summer": {
    "parent": "HunterPants_ColorBase",
    "methods": []
  },
  "HunterPants_Winter": {
    "parent": "HunterPants_ColorBase",
    "methods": []
  },
  "HuntingBag": {
    "parent": null,
    "methods": []
  },
  "HuntingBag_Hannah": {
    "parent": null,
    "methods": []
  },
  "HuntingJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "HuntingJacket_Autumn": {
    "parent": "HuntingJacket_ColorBase",
    "methods": []
  },
  "HuntingJacket_Brown": {
    "parent": "HuntingJacket_ColorBase",
    "methods": []
  },
  "HuntingJacket_Spring": {
    "parent": "HuntingJacket_ColorBase",
    "methods": []
  },
  "HuntingJacket_Summer": {
    "parent": "HuntingJacket_ColorBase",
    "methods": []
  },
  "HuntingJacket_Winter": {
    "parent": "HuntingJacket_ColorBase",
    "methods": []
  },
  "HuntingVest": {
    "parent": "Vest_Base",
    "methods": []
  },
  "HuntingVest_Winter": {
    "parent": "HuntingVest",
    "methods": []
  },
  "ImprovisedBag": {
    "parent": null,
    "methods": []
  },
  "Jeans_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Jeans_Black": {
    "parent": "Jeans_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "Jeans_Blue": {
    "parent": "Jeans_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "Jeans_Brown": {
    "parent": "Jeans_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "Jeans_Green": {
    "parent": "Jeans_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "Jeans_Grey": {
    "parent": "Jeans_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "Jeans_BlueDark": {
    "parent": "Jeans_ColorBase",
    "methods": [
      "void SetActions()"
    ]
  },
  "ShortJeans_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "ShortJeans_Black": {
    "parent": "ShortJeans_ColorBase",
    "methods": []
  },
  "ShortJeans_Blue": {
    "parent": "ShortJeans_ColorBase",
    "methods": []
  },
  "ShortJeans_Brown": {
    "parent": "ShortJeans_ColorBase",
    "methods": []
  },
  "ShortJeans_Darkblue": {
    "parent": "ShortJeans_ColorBase",
    "methods": []
  },
  "ShortJeans_Green": {
    "parent": "ShortJeans_ColorBase",
    "methods": []
  },
  "ShortJeans_Red": {
    "parent": "ShortJeans_ColorBase",
    "methods": []
  },
  "JoggingShoes_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "JoggingShoes_Black": {
    "parent": "JoggingShoes_ColorBase",
    "methods": []
  },
  "JoggingShoes_Blue": {
    "parent": "JoggingShoes_ColorBase",
    "methods": []
  },
  "JoggingShoes_Red": {
    "parent": "JoggingShoes_ColorBase",
    "methods": []
  },
  "JoggingShoes_Violet": {
    "parent": "JoggingShoes_ColorBase",
    "methods": []
  },
  "JoggingShoes_White": {
    "parent": "JoggingShoes_ColorBase",
    "methods": []
  },
  "JumpsuitJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "JumpsuitJacket_Blue": {
    "parent": "JumpsuitJacket_ColorBase",
    "methods": []
  },
  "JumpsuitJacket_Gray": {
    "parent": "JumpsuitJacket_ColorBase",
    "methods": []
  },
  "JumpsuitJacket_Green": {
    "parent": "JumpsuitJacket_ColorBase",
    "methods": []
  },
  "JumpsuitJacket_Red": {
    "parent": "JumpsuitJacket_ColorBase",
    "methods": []
  },
  "JumpsuitPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "JumpsuitPants_Blue": {
    "parent": "JumpsuitPants_ColorBase",
    "methods": []
  },
  "JumpsuitPants_Green": {
    "parent": "JumpsuitPants_ColorBase",
    "methods": []
  },
  "JumpsuitPants_Grey": {
    "parent": "JumpsuitPants_ColorBase",
    "methods": []
  },
  "JumpsuitPants_Red": {
    "parent": "JumpsuitPants_ColorBase",
    "methods": []
  },
  "JungleBoots_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "JungleBoots_Beige": {
    "parent": "JungleBoots_ColorBase",
    "methods": []
  },
  "JungleBoots_Black": {
    "parent": "JungleBoots_ColorBase",
    "methods": []
  },
  "JungleBoots_Brown": {
    "parent": "JungleBoots_ColorBase",
    "methods": []
  },
  "JungleBoots_Green": {
    "parent": "JungleBoots_ColorBase",
    "methods": []
  },
  "JungleBoots_Olive": {
    "parent": "JungleBoots_ColorBase",
    "methods": []
  },
  "KnifeHolster": {
    "parent": null,
    "methods": []
  },
  "LeatherKnifeSheath": {
    "parent": null,
    "methods": []
  },
  "NylonKnifeSheath": {
    "parent": null,
    "methods": []
  },
  "LabCoat": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "LeatherBelt_ColorBase": {
    "parent": "Belt_Base",
    "methods": [
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanReceiveAttachment( EntityAI attachment,int slotId )"
    ]
  },
  "LeatherBelt_Beige": {
    "parent": "LeatherBelt_ColorBase",
    "methods": []
  },
  "LeatherBelt_Natural": {
    "parent": "LeatherBelt_ColorBase",
    "methods": []
  },
  "LeatherBelt_Brown": {
    "parent": "LeatherBelt_ColorBase",
    "methods": []
  },
  "LeatherBelt_Black": {
    "parent": "LeatherBelt_ColorBase",
    "methods": []
  },
  "LeatherGloves_ColorBase": {
    "parent": "Gloves_Base",
    "methods": []
  },
  "LeatherGloves_Natural": {
    "parent": "LeatherGloves_ColorBase",
    "methods": []
  },
  "LeatherGloves_Beige": {
    "parent": "LeatherGloves_ColorBase",
    "methods": []
  },
  "LeatherGloves_Black": {
    "parent": "LeatherGloves_ColorBase",
    "methods": []
  },
  "LeatherGloves_Brown": {
    "parent": "LeatherGloves_ColorBase",
    "methods": []
  },
  "LeatherHat_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "LeatherHat_Natural": {
    "parent": "LeatherHat_ColorBase",
    "methods": []
  },
  "LeatherHat_Beige": {
    "parent": "LeatherHat_ColorBase",
    "methods": []
  },
  "LeatherHat_Brown": {
    "parent": "LeatherHat_ColorBase",
    "methods": []
  },
  "LeatherHat_Black": {
    "parent": "LeatherHat_ColorBase",
    "methods": []
  },
  "LeatherJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": []
  },
  "LeatherJacket_Natural": {
    "parent": "LeatherJacket_ColorBase",
    "methods": []
  },
  "LeatherJacket_Beige": {
    "parent": "LeatherJacket_ColorBase",
    "methods": []
  },
  "LeatherJacket_Brown": {
    "parent": "LeatherJacket_ColorBase",
    "methods": []
  },
  "LeatherJacket_Black": {
    "parent": "LeatherJacket_ColorBase",
    "methods": []
  },
  "LeatherMoccasinsShoes_Natural": {
    "parent": null,
    "methods": [
      "bool IsClothing()"
    ]
  },
  "LeatherPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": []
  },
  "LeatherPants_Natural": {
    "parent": "LeatherPants_ColorBase",
    "methods": []
  },
  "LeatherPants_Beige": {
    "parent": "LeatherPants_ColorBase",
    "methods": []
  },
  "LeatherPants_Brown": {
    "parent": "LeatherPants_ColorBase",
    "methods": []
  },
  "LeatherPants_Black": {
    "parent": "LeatherPants_ColorBase",
    "methods": []
  },
  "LeatherSack_ColorBase": {
    "parent": "Backpack_Base",
    "methods": [
      "bool IsClothing()"
    ]
  },
  "LeatherSack_Natural": {
    "parent": "LeatherSack_ColorBase",
    "methods": []
  },
  "LeatherSack_Black": {
    "parent": "LeatherSack_ColorBase",
    "methods": []
  },
  "LeatherSack_Beige": {
    "parent": "LeatherSack_ColorBase",
    "methods": []
  },
  "LeatherSack_Brown": {
    "parent": "LeatherSack_ColorBase",
    "methods": []
  },
  "LeatherShirt_ColorBase": {
    "parent": "Top_Base",
    "methods": []
  },
  "LeatherShirt_Natural": {
    "parent": "LeatherShirt_ColorBase",
    "methods": []
  },
  "LeatherShoes_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "LeatherShoes_Black": {
    "parent": "LeatherShoes_ColorBase",
    "methods": []
  },
  "LeatherShoes_Natural": {
    "parent": "LeatherShoes_ColorBase",
    "methods": []
  },
  "LeatherShoes_Brown": {
    "parent": "LeatherShoes_ColorBase",
    "methods": []
  },
  "LeatherShoes_Beige": {
    "parent": "LeatherShoes_ColorBase",
    "methods": []
  },
  "LeatherStorageVest_ColorBase": {
    "parent": "Vest_Base",
    "methods": []
  },
  "LeatherStorageVest_Natural": {
    "parent": "LeatherStorageVest_ColorBase",
    "methods": []
  },
  "LeatherStorageVest_Beige": {
    "parent": "LeatherStorageVest_ColorBase",
    "methods": []
  },
  "LeatherStorageVest_Brown": {
    "parent": "LeatherStorageVest_ColorBase",
    "methods": []
  },
  "LeatherStorageVest_Black": {
    "parent": "LeatherStorageVest_ColorBase",
    "methods": []
  },
  "LegsCover_Improvised": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "M65Jacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "M65Jacket_Black": {
    "parent": "M65Jacket_ColorBase",
    "methods": []
  },
  "M65Jacket_Khaki": {
    "parent": "M65Jacket_ColorBase",
    "methods": []
  },
  "M65Jacket_Tan": {
    "parent": "M65Jacket_ColorBase",
    "methods": []
  },
  "M65Jacket_Olive": {
    "parent": "M65Jacket_ColorBase",
    "methods": []
  },
  "ManSuit_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "ManSuit_Beige": {
    "parent": "ManSuit_ColorBase",
    "methods": []
  },
  "ManSuit_Black": {
    "parent": "ManSuit_ColorBase",
    "methods": []
  },
  "ManSuit_Blue": {
    "parent": "ManSuit_ColorBase",
    "methods": []
  },
  "ManSuit_Brown": {
    "parent": "ManSuit_ColorBase",
    "methods": []
  },
  "ManSuit_DarkGrey": {
    "parent": "ManSuit_ColorBase",
    "methods": []
  },
  "ManSuit_Khaki": {
    "parent": "ManSuit_ColorBase",
    "methods": []
  },
  "ManSuit_LightGrey": {
    "parent": "ManSuit_ColorBase",
    "methods": []
  },
  "ManSuit_White": {
    "parent": "ManSuit_ColorBase",
    "methods": []
  },
  "MaskBase": {
    "parent": "Mask_Base",
    "methods": [
      "bool IsGasMask()",
      "bool AllowFoodConsumption()",
      "void OnDebugSpawn()",
      "bool HasValidFilter()",
      "float GetFilterQuantityMax()",
      "float GetFilterQuantity()",
      "float GetFilterQuantity01()",
      "bool IsExternalFilterAttached()",
      "bool HasIntegratedFilter()",
      "bool CanHaveExternalFilter()",
      "bool ConsumeQuantity(float quantity, PlayerBase consumer_player)",
      "void OnQuantityConsumed(notnull ItemBase filter, PlayerBase consumer_player)",
      "void OnQuantityConsumed(notnull ItemBase filter, PlayerBase consumer_player, float quantity)",
      "void InitGlobalExclusionValues()"
    ]
  },
  "MedicalScrubsHat_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "MedicalScrubsHat_Blue": {
    "parent": "MedicalScrubsHat_ColorBase",
    "methods": []
  },
  "MedicalScrubsHat_White": {
    "parent": "MedicalScrubsHat_ColorBase",
    "methods": []
  },
  "MedicalScrubsHat_Green": {
    "parent": "MedicalScrubsHat_ColorBase",
    "methods": []
  },
  "MedicalScrubsPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "MedicalScrubsPants_Blue": {
    "parent": "MedicalScrubsPants_ColorBase",
    "methods": []
  },
  "MedicalScrubsPants_Green": {
    "parent": "MedicalScrubsPants_ColorBase",
    "methods": []
  },
  "MedicalScrubsPants_White": {
    "parent": "MedicalScrubsPants_ColorBase",
    "methods": []
  },
  "MedicalScrubsShirt_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "MedicalScrubsShirt_Blue": {
    "parent": "MedicalScrubsShirt_ColorBase",
    "methods": []
  },
  "MedicalScrubsShirt_Green": {
    "parent": "MedicalScrubsShirt_ColorBase",
    "methods": []
  },
  "MedicalScrubsShirt_White": {
    "parent": "MedicalScrubsShirt_ColorBase",
    "methods": []
  },
  "MedievalBoots": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "MilitaryBelt": {
    "parent": null,
    "methods": [
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanReceiveAttachment( EntityAI attachment,int slotId )",
      "void OnDebugSpawn()"
    ]
  },
  "MilitaryBeret_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "MilitaryBeret_Red": {
    "parent": "MilitaryBeret_ColorBase",
    "methods": []
  },
  "MilitaryBeret_UN": {
    "parent": "MilitaryBeret_ColorBase",
    "methods": []
  },
  "MilitaryBeret_NZ": {
    "parent": "MilitaryBeret_ColorBase",
    "methods": []
  },
  "MilitaryBeret_ChDKZ": {
    "parent": "MilitaryBeret_ColorBase",
    "methods": []
  },
  "MilitaryBeret_CDF": {
    "parent": "MilitaryBeret_ColorBase",
    "methods": []
  },
  "MilitaryBoots_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "MilitaryBoots_Beige": {
    "parent": "MilitaryBoots_ColorBase",
    "methods": []
  },
  "MilitaryBoots_Black": {
    "parent": "MilitaryBoots_ColorBase",
    "methods": []
  },
  "MilitaryBoots_Bluerock": {
    "parent": "MilitaryBoots_ColorBase",
    "methods": []
  },
  "MilitaryBoots_Brown": {
    "parent": "MilitaryBoots_ColorBase",
    "methods": []
  },
  "MilitaryBoots_Redpunk": {
    "parent": "MilitaryBoots_ColorBase",
    "methods": []
  },
  "MimeMask_Male": {
    "parent": null,
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "MimeMask_Female": {
    "parent": null,
    "methods": []
  },
  "MiniDress_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "MiniDress_Pink": {
    "parent": "MiniDress_ColorBase",
    "methods": []
  },
  "MiniDress_PinkChecker": {
    "parent": "MiniDress_ColorBase",
    "methods": []
  },
  "MiniDress_RedChecker": {
    "parent": "MiniDress_ColorBase",
    "methods": []
  },
  "MiniDress_WhiteChecker": {
    "parent": "MiniDress_ColorBase",
    "methods": []
  },
  "MiniDress_GreenChecker": {
    "parent": "MiniDress_ColorBase",
    "methods": []
  },
  "MiniDress_BrownChecker": {
    "parent": "MiniDress_ColorBase",
    "methods": []
  },
  "MiniDress_BlueChecker": {
    "parent": "MiniDress_ColorBase",
    "methods": []
  },
  "MiniDress_BlueWithDots": {
    "parent": "MiniDress_ColorBase",
    "methods": []
  },
  "MorozkoHat": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "MountainBag_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "MountainBag_Red": {
    "parent": "MountainBag_ColorBase",
    "methods": []
  },
  "MountainBag_Blue": {
    "parent": "MountainBag_ColorBase",
    "methods": []
  },
  "MountainBag_Orange": {
    "parent": "MountainBag_ColorBase",
    "methods": []
  },
  "MountainBag_Green": {
    "parent": "MountainBag_ColorBase",
    "methods": []
  },
  "MouthRag": {
    "parent": "Mask_Base",
    "methods": [
      "void MouthRag()",
      "bool CanDetachAttachment(EntityAI parent)",
      "bool IsObstructingVoice()",
      "int GetVoiceEffect()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void SetIncomingLambaBool(bool state)",
      "bool GetIncomingLambdaBool()"
    ]
  },
  "NavyUniformJacket": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "NavyUniformPants": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "NBCBootsBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "NBCBootsGray": {
    "parent": "NBCBootsBase",
    "methods": []
  },
  "NBCBootsWhite": {
    "parent": "NBCBootsBase",
    "methods": []
  },
  "NBCGloves_ColorBase": {
    "parent": "Gloves_Base",
    "methods": []
  },
  "NBCGlovesGray": {
    "parent": "NBCGloves_ColorBase",
    "methods": []
  },
  "NBCHood": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "NBCHoodBase": {
    "parent": null,
    "methods": []
  },
  "NBCHoodGray": {
    "parent": null,
    "methods": []
  },
  "NBCHoodYellow": {
    "parent": null,
    "methods": []
  },
  "NBCHoodWhite": {
    "parent": null,
    "methods": []
  },
  "NBCJacketBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "NBCJacketGray": {
    "parent": "NBCJacketBase",
    "methods": []
  },
  "NBCJacketWhite": {
    "parent": "NBCJacketBase",
    "methods": []
  },
  "NBCPantsBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "NBCPantsGray": {
    "parent": "NBCPantsBase",
    "methods": []
  },
  "NBCPantsWhite": {
    "parent": "NBCPantsBase",
    "methods": []
  },
  "NioshFaceMask": {
    "parent": null,
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "NorseHelm": {
    "parent": "HelmetBase",
    "methods": []
  },
  "NurseDress_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "NurseDress_White": {
    "parent": "NurseDress_ColorBase",
    "methods": []
  },
  "NurseDress_Blue": {
    "parent": "NurseDress_ColorBase",
    "methods": []
  },
  "NVGHeadstrap": {
    "parent": "Glasses_Base",
    "methods": [
      "void SetActions()",
      "void InitGlobalExclusionValues()"
    ]
  },
  "OfficerHat": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "OKZKCap_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "OKZKCap_Beige": {
    "parent": "OKZKCap_ColorBase",
    "methods": []
  },
  "OKZKCap_Green": {
    "parent": "OKZKCap_ColorBase",
    "methods": []
  },
  "OMKJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "OMKJacket_Navy": {
    "parent": "OMKJacket_ColorBase",
    "methods": []
  },
  "OMKPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "OMKPants_Navy": {
    "parent": "OMKPants_ColorBase",
    "methods": []
  },
  "OMNOGloves_ColorBase": {
    "parent": "Gloves_Base",
    "methods": []
  },
  "OMNOGloves_Gray": {
    "parent": "OMNOGloves_ColorBase",
    "methods": []
  },
  "OMNOGloves_Brown": {
    "parent": "OMNOGloves_ColorBase",
    "methods": []
  },
  "PaddedGloves_ColorBase": {
    "parent": null,
    "methods": []
  },
  "PaddedGloves_Brown": {
    "parent": null,
    "methods": []
  },
  "PaddedGloves_Beige": {
    "parent": null,
    "methods": []
  },
  "PaddedGloves_Threat": {
    "parent": null,
    "methods": []
  },
  "ParamedicJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "ParamedicJacket_Blue": {
    "parent": "ParamedicJacket_ColorBase",
    "methods": []
  },
  "ParamedicJacket_Crimson": {
    "parent": "ParamedicJacket_ColorBase",
    "methods": []
  },
  "ParamedicJacket_Green": {
    "parent": "ParamedicJacket_ColorBase",
    "methods": []
  },
  "ParamedicPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "ParamedicPants_Blue": {
    "parent": "ParamedicPants_ColorBase",
    "methods": []
  },
  "ParamedicPants_Crimson": {
    "parent": "ParamedicPants_ColorBase",
    "methods": []
  },
  "ParamedicPants_Green": {
    "parent": "ParamedicPants_ColorBase",
    "methods": []
  },
  "PaydayMask_ColorBase": {
    "parent": null,
    "methods": []
  },
  "PaydayMask_Dallas": {
    "parent": null,
    "methods": []
  },
  "PaydayMask_Hoxton": {
    "parent": null,
    "methods": []
  },
  "PaydayMask_Wolf": {
    "parent": null,
    "methods": []
  },
  "PaydayMask_Chains": {
    "parent": null,
    "methods": []
  },
  "PetushokHat_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "PetushokHat_Yellow": {
    "parent": "PetushokHat_ColorBase",
    "methods": []
  },
  "PetushokHat_Black": {
    "parent": "PetushokHat_ColorBase",
    "methods": []
  },
  "PetushokHat_Green": {
    "parent": "PetushokHat_ColorBase",
    "methods": []
  },
  "PilotkaCap": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "PlateCarrierHolster": {
    "parent": "Vest_Base",
    "methods": []
  },
  "PlateCarrierHolster_Black": {
    "parent": "PlateCarrierHolster",
    "methods": []
  },
  "PlateCarrierHolster_Camo": {
    "parent": "PlateCarrierHolster",
    "methods": []
  },
  "PlateCarrierHolster_Green": {
    "parent": "PlateCarrierHolster",
    "methods": []
  },
  "PlateCarrierHolster_Winter": {
    "parent": "PlateCarrierHolster",
    "methods": []
  },
  "PlateCarrierVest": {
    "parent": null,
    "methods": [
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnDebugSpawn()"
    ]
  },
  "PlateCarrierVest_Black": {
    "parent": "PlateCarrierVest",
    "methods": []
  },
  "PlateCarrierVest_Camo": {
    "parent": "PlateCarrierVest",
    "methods": []
  },
  "PlateCarrierVest_Green": {
    "parent": "PlateCarrierVest",
    "methods": []
  },
  "PlateCarrierVest_Winter": {
    "parent": "PlateCarrierVest",
    "methods": []
  },
  "PoliceCap": {
    "parent": "HeadGear_Base",
    "methods": []
  },
  "PoliceJacket": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "PoliceJacketOrel": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "PolicePants": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "PolicePantsOrel": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "PoliceVest": {
    "parent": "Vest_Base",
    "methods": []
  },
  "PressVest_ColorBase": {
    "parent": "Vest_Base",
    "methods": []
  },
  "PressVest_Blue": {
    "parent": "PressVest_ColorBase",
    "methods": []
  },
  "PressVest_LightBlue": {
    "parent": "PressVest_ColorBase",
    "methods": []
  },
  "PrisonerCap": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "PrisonUniformJacket": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "PrisonUniformPants": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "QuiltedJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "QuiltedJacket_Black": {
    "parent": "QuiltedJacket_ColorBase",
    "methods": []
  },
  "QuiltedJacket_Green": {
    "parent": "QuiltedJacket_ColorBase",
    "methods": []
  },
  "QuiltedJacket_Blue": {
    "parent": "QuiltedJacket_ColorBase",
    "methods": []
  },
  "QuiltedJacket_Red": {
    "parent": "QuiltedJacket_ColorBase",
    "methods": []
  },
  "QuiltedJacket_Grey": {
    "parent": "QuiltedJacket_ColorBase",
    "methods": []
  },
  "QuiltedJacket_Orange": {
    "parent": "QuiltedJacket_ColorBase",
    "methods": []
  },
  "QuiltedJacket_Yellow": {
    "parent": "QuiltedJacket_ColorBase",
    "methods": []
  },
  "QuiltedJacket_Violet": {
    "parent": "QuiltedJacket_ColorBase",
    "methods": []
  },
  "RadarCap_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "RadarCap_Black": {
    "parent": "RadarCap_ColorBase",
    "methods": []
  },
  "RadarCap_Blue": {
    "parent": "RadarCap_ColorBase",
    "methods": []
  },
  "RadarCap_Brown": {
    "parent": "RadarCap_ColorBase",
    "methods": []
  },
  "RadarCap_Green": {
    "parent": "RadarCap_ColorBase",
    "methods": []
  },
  "RadarCap_Red": {
    "parent": "RadarCap_ColorBase",
    "methods": []
  },
  "Raincoat_ColorBase": {
    "parent": "Top_Base",
    "methods": []
  },
  "Raincoat_Orange": {
    "parent": "Raincoat_ColorBase",
    "methods": []
  },
  "Raincoat_Green": {
    "parent": "Raincoat_ColorBase",
    "methods": []
  },
  "Raincoat_Yellow": {
    "parent": "Raincoat_ColorBase",
    "methods": []
  },
  "Raincoat_Pink": {
    "parent": "Raincoat_ColorBase",
    "methods": []
  },
  "Raincoat_Red": {
    "parent": "Raincoat_ColorBase",
    "methods": []
  },
  "Raincoat_Blue": {
    "parent": "Raincoat_ColorBase",
    "methods": []
  },
  "Raincoat_Black": {
    "parent": "Raincoat_ColorBase",
    "methods": []
  },
  "ReflexVest": {
    "parent": "Vest_Base",
    "methods": []
  },
  "RidersJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "RidersJacket_Black": {
    "parent": "RidersJacket_ColorBase",
    "methods": []
  },
  "RopeBelt": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanReceiveAttachment( EntityAI attachment,int slotId )"
    ]
  },
  "SantasBeard": {
    "parent": "Mask_Base",
    "methods": [
      "void SetActions()",
      "void InitGlobalExclusionValues()"
    ]
  },
  "SantasHat": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "SherpaHat_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "SherpaHat_Red": {
    "parent": "SherpaHat_ColorBase",
    "methods": []
  },
  "SherpaHat_Black": {
    "parent": "SherpaHat_ColorBase",
    "methods": []
  },
  "SherpaHat_Blue": {
    "parent": "SherpaHat_ColorBase",
    "methods": []
  },
  "Shirt_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Shirt_BlueCheck": {
    "parent": "Shirt_ColorBase",
    "methods": []
  },
  "Shirt_BlueCheckBright": {
    "parent": "Shirt_ColorBase",
    "methods": []
  },
  "Shirt_GreenCheck": {
    "parent": "Shirt_ColorBase",
    "methods": []
  },
  "Shirt_RedCheck": {
    "parent": "Shirt_ColorBase",
    "methods": []
  },
  "Shirt_WhiteCheck": {
    "parent": "Shirt_ColorBase",
    "methods": []
  },
  "Shirt_PlaneBlack": {
    "parent": "Shirt_ColorBase",
    "methods": []
  },
  "SkiGloves_ColorBase": {
    "parent": null,
    "methods": []
  },
  "SkiGloves_Blue": {
    "parent": null,
    "methods": []
  },
  "SkiGloves_Red": {
    "parent": null,
    "methods": []
  },
  "SkiGloves_90s": {
    "parent": null,
    "methods": []
  },
  "SkiGoggles_ColorBase": {
    "parent": null,
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "SkiGoggles_WhiteClear": {
    "parent": null,
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "SkiGoggles_WhiteDark": {
    "parent": null,
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "SkiGoggles_BlackYellow": {
    "parent": null,
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "Skirt_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Skirt_Blue": {
    "parent": "Skirt_ColorBase",
    "methods": []
  },
  "Skirt_Red": {
    "parent": "Skirt_ColorBase",
    "methods": []
  },
  "Skirt_White": {
    "parent": "Skirt_ColorBase",
    "methods": []
  },
  "Skirt_Yellow": {
    "parent": "Skirt_ColorBase",
    "methods": []
  },
  "SlacksPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "SlacksPants_Beige": {
    "parent": "SlacksPants_ColorBase",
    "methods": []
  },
  "SlacksPants_Black": {
    "parent": "SlacksPants_ColorBase",
    "methods": []
  },
  "SlacksPants_Blue": {
    "parent": "SlacksPants_ColorBase",
    "methods": []
  },
  "SlacksPants_Brown": {
    "parent": "SlacksPants_ColorBase",
    "methods": []
  },
  "SlacksPants_DarkGrey": {
    "parent": "SlacksPants_ColorBase",
    "methods": []
  },
  "SlacksPants_Khaki": {
    "parent": "SlacksPants_ColorBase",
    "methods": []
  },
  "SlacksPants_LightGrey": {
    "parent": "SlacksPants_ColorBase",
    "methods": []
  },
  "SlacksPants_White": {
    "parent": "SlacksPants_ColorBase",
    "methods": []
  },
  "SlingBag_ColorBase": {
    "parent": null,
    "methods": []
  },
  "SlingBag_Brown": {
    "parent": null,
    "methods": []
  },
  "SlingBag_Gray": {
    "parent": null,
    "methods": []
  },
  "SlingBag_Black": {
    "parent": null,
    "methods": []
  },
  "SmershBag": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "SmershVest": {
    "parent": "Vest_Base",
    "methods": [
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)"
    ]
  },
  "Sneakers_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "Sneakers_Black": {
    "parent": "Sneakers_ColorBase",
    "methods": []
  },
  "Sneakers_Gray": {
    "parent": "Sneakers_ColorBase",
    "methods": []
  },
  "Sneakers_Green": {
    "parent": "Sneakers_ColorBase",
    "methods": []
  },
  "Sneakers_Red": {
    "parent": "Sneakers_ColorBase",
    "methods": []
  },
  "Sneakers_White": {
    "parent": "Sneakers_ColorBase",
    "methods": []
  },
  "SnowstormUshanka_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "SnowstormUshanka_Olive": {
    "parent": "SnowstormUshanka_ColorBase",
    "methods": []
  },
  "SnowstormUshanka_Brown": {
    "parent": "SnowstormUshanka_ColorBase",
    "methods": []
  },
  "SnowstormUshanka_White": {
    "parent": "SnowstormUshanka_ColorBase",
    "methods": []
  },
  "SnowstormUshanka_Navy": {
    "parent": "SnowstormUshanka_ColorBase",
    "methods": []
  },
  "SportGlasses_ColorBase": {
    "parent": "Glasses_Base",
    "methods": [
      "void InitGlobalExclusionValues()",
      "int GetGlassesEffectID()"
    ]
  },
  "SportGlasses_Black": {
    "parent": "SportGlasses_ColorBase",
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "SportGlasses_Blue": {
    "parent": "SportGlasses_ColorBase",
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "SportGlasses_Green": {
    "parent": "SportGlasses_ColorBase",
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "SportGlasses_Orange": {
    "parent": "SportGlasses_ColorBase",
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "SurgicalGloves_ColorBase": {
    "parent": "Gloves_Base",
    "methods": []
  },
  "SurgicalGloves_Blue": {
    "parent": "SurgicalGloves_ColorBase",
    "methods": []
  },
  "SurgicalGloves_LightBlue": {
    "parent": "SurgicalGloves_ColorBase",
    "methods": []
  },
  "SurgicalGloves_Green": {
    "parent": "SurgicalGloves_ColorBase",
    "methods": []
  },
  "SurgicalGloves_White": {
    "parent": "SurgicalGloves_ColorBase",
    "methods": []
  },
  "SurgicalMask": {
    "parent": "Mask_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Sweater_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Sweater_Gray": {
    "parent": "Sweater_ColorBase",
    "methods": []
  },
  "Sweater_Blue": {
    "parent": "Sweater_ColorBase",
    "methods": []
  },
  "Sweater_Green": {
    "parent": "Sweater_ColorBase",
    "methods": []
  },
  "Sweater_Red": {
    "parent": "Sweater_ColorBase",
    "methods": []
  },
  "Sweater_ChristmasBlue": {
    "parent": "Sweater_ColorBase",
    "methods": []
  },
  "Sweater_ChristmasGreen": {
    "parent": "Sweater_ColorBase",
    "methods": []
  },
  "Sweater_ChristmasRed": {
    "parent": "Sweater_ColorBase",
    "methods": []
  },
  "TacticalGloves_ColorBase": {
    "parent": "Gloves_Base",
    "methods": []
  },
  "TacticalGloves_Black": {
    "parent": "TacticalGloves_ColorBase",
    "methods": []
  },
  "TacticalGloves_Beige": {
    "parent": "TacticalGloves_ColorBase",
    "methods": []
  },
  "TacticalGloves_Green": {
    "parent": "TacticalGloves_ColorBase",
    "methods": []
  },
  "TacticalGoggles": {
    "parent": "Glasses_Base",
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "TacticalShirt_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "TacticalShirt_Grey": {
    "parent": "TacticalShirt_ColorBase",
    "methods": []
  },
  "TacticalShirt_Black": {
    "parent": "TacticalShirt_ColorBase",
    "methods": []
  },
  "TacticalShirt_Olive": {
    "parent": "TacticalShirt_ColorBase",
    "methods": []
  },
  "TacticalShirt_Tan": {
    "parent": "TacticalShirt_ColorBase",
    "methods": []
  },
  "TaloonBag_ColorBase": {
    "parent": "Backpack_Base",
    "methods": []
  },
  "TaloonBag_Blue": {
    "parent": "TaloonBag_ColorBase",
    "methods": []
  },
  "TaloonBag_Green": {
    "parent": "TaloonBag_ColorBase",
    "methods": []
  },
  "TaloonBag_Orange": {
    "parent": "TaloonBag_ColorBase",
    "methods": []
  },
  "TaloonBag_Violet": {
    "parent": "TaloonBag_ColorBase",
    "methods": []
  },
  "TankerHelmet": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "TelnyashkaShirt": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "ThickFramesGlasses": {
    "parent": "Glasses_Base",
    "methods": []
  },
  "ThinFramesGlasses": {
    "parent": "Glasses_Base",
    "methods": []
  },
  "TorsoCover_Improvised": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "TortillaBag": {
    "parent": null,
    "methods": []
  },
  "TortillaBag_Winter": {
    "parent": "TortillaBag",
    "methods": []
  },
  "TrackSuitJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "TrackSuitJacket_Black": {
    "parent": "TrackSuitJacket_ColorBase",
    "methods": []
  },
  "TrackSuitJacket_Blue": {
    "parent": "TrackSuitJacket_ColorBase",
    "methods": []
  },
  "TrackSuitJacket_Green": {
    "parent": "TrackSuitJacket_ColorBase",
    "methods": []
  },
  "TrackSuitJacket_LightBlue": {
    "parent": "TrackSuitJacket_ColorBase",
    "methods": []
  },
  "TrackSuitJacket_Red": {
    "parent": "TrackSuitJacket_ColorBase",
    "methods": []
  },
  "TrackSuitPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "TrackSuitPants_Black": {
    "parent": "TrackSuitPants_ColorBase",
    "methods": []
  },
  "TrackSuitPants_Blue": {
    "parent": "TrackSuitPants_ColorBase",
    "methods": []
  },
  "TrackSuitPants_Green": {
    "parent": "TrackSuitPants_ColorBase",
    "methods": []
  },
  "TrackSuitPants_Red": {
    "parent": "TrackSuitPants_ColorBase",
    "methods": []
  },
  "TrackSuitPants_LightBlue": {
    "parent": "TrackSuitPants_ColorBase",
    "methods": []
  },
  "TShirt_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "TShirt_Beige": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_Black": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_Blue": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_Dyed": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_Green": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_OrangeWhiteStripes": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_Red": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_RedBlackStripes": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_White": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_Grey": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TShirt_10thAnniversary": {
    "parent": "TShirt_ColorBase",
    "methods": []
  },
  "TTSKOBoots": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "TTsKOJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "TTsKOJacket_Camo": {
    "parent": "TTsKOJacket_ColorBase",
    "methods": []
  },
  "TTSKOPants": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "UKAssVest_ColorBase": {
    "parent": "Vest_Base",
    "methods": []
  },
  "UKAssVest_Black": {
    "parent": "UKAssVest_ColorBase",
    "methods": []
  },
  "UKAssVest_Camo": {
    "parent": "UKAssVest_ColorBase",
    "methods": []
  },
  "UKAssVest_Khaki": {
    "parent": "UKAssVest_ColorBase",
    "methods": []
  },
  "UKAssVest_Olive": {
    "parent": "UKAssVest_ColorBase",
    "methods": []
  },
  "UKAssVest_Winter": {
    "parent": "UKAssVest_ColorBase",
    "methods": []
  },
  "Ushanka_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "Ushanka_Black": {
    "parent": "Ushanka_ColorBase",
    "methods": []
  },
  "Ushanka_Blue": {
    "parent": "Ushanka_ColorBase",
    "methods": []
  },
  "Ushanka_Green": {
    "parent": "Ushanka_ColorBase",
    "methods": []
  },
  "USMCJacket_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "USMCJacket_Desert": {
    "parent": "USMCJacket_ColorBase",
    "methods": []
  },
  "USMCJacket_Woodland": {
    "parent": "USMCJacket_ColorBase",
    "methods": []
  },
  "USMCPants_ColorBase": {
    "parent": "Pants_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "USMCPants_Desert": {
    "parent": "USMCPants_ColorBase",
    "methods": []
  },
  "USMCPants_Woodland": {
    "parent": "USMCPants_ColorBase",
    "methods": []
  },
  "WeldingMask": {
    "parent": "HelmetBase",
    "methods": [
      "int GetGlassesEffectID()"
    ]
  },
  "Wellies_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "Wellies_Black": {
    "parent": "Wellies_ColorBase",
    "methods": []
  },
  "Wellies_Brown": {
    "parent": "Wellies_ColorBase",
    "methods": []
  },
  "Wellies_Green": {
    "parent": "Wellies_ColorBase",
    "methods": []
  },
  "Wellies_Grey": {
    "parent": "Wellies_ColorBase",
    "methods": []
  },
  "WinterCoif_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "WinterCoif_Black": {
    "parent": "WinterCoif_ColorBase",
    "methods": []
  },
  "WinterCoif_Blue": {
    "parent": "WinterCoif_ColorBase",
    "methods": []
  },
  "WinterCoif_Green": {
    "parent": "WinterCoif_ColorBase",
    "methods": []
  },
  "WinterCoif_Skull": {
    "parent": "WinterCoif_ColorBase",
    "methods": []
  },
  "WitchHat": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "WitchHood": {
    "parent": "Clothing",
    "methods": [
      "void SetActions()"
    ]
  },
  "WitchHood_ColorBase": {
    "parent": null,
    "methods": []
  },
  "WitchHood_Black": {
    "parent": null,
    "methods": []
  },
  "WitchHood_Brown": {
    "parent": null,
    "methods": []
  },
  "WitchHood_Red": {
    "parent": null,
    "methods": []
  },
  "WitchHoodCoif_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "WitchHoodCoif_Black": {
    "parent": null,
    "methods": []
  },
  "WitchHoodCoif_Brown": {
    "parent": null,
    "methods": []
  },
  "WitchHoodCoif_Red": {
    "parent": null,
    "methods": []
  },
  "WolfMask": {
    "parent": "ClothingBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "WomanSuit_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "WomanSuit_Beige": {
    "parent": "WomanSuit_ColorBase",
    "methods": []
  },
  "WomanSuit_Black": {
    "parent": "WomanSuit_ColorBase",
    "methods": []
  },
  "WomanSuit_Blue": {
    "parent": "WomanSuit_ColorBase",
    "methods": []
  },
  "WomanSuit_Brown": {
    "parent": "WomanSuit_ColorBase",
    "methods": []
  },
  "WomanSuit_DarkGrey": {
    "parent": "WomanSuit_ColorBase",
    "methods": []
  },
  "WomanSuit_Khaki": {
    "parent": "WomanSuit_ColorBase",
    "methods": []
  },
  "WomanSuit_LightGrey": {
    "parent": "WomanSuit_ColorBase",
    "methods": []
  },
  "WomanSuit_White": {
    "parent": "WomanSuit_ColorBase",
    "methods": []
  },
  "WoolCoat_ColorBase": {
    "parent": "Top_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "WoolCoat_Black": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolCoat_Red": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolCoat_Blue": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolCoat_Green": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolCoat_Beige": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolCoat_RedCheck": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolCoat_BlackCheck": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolCoat_BlueCheck": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolCoat_GreyCheck": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolCoat_BrownCheck": {
    "parent": "WoolCoat_ColorBase",
    "methods": []
  },
  "WoolGlovesFingerless_ColorBase": {
    "parent": "Gloves_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "WoolGlovesFingerless_Green": {
    "parent": "WoolGlovesFingerless_ColorBase",
    "methods": []
  },
  "WoolGlovesFingerless_Black": {
    "parent": "WoolGlovesFingerless_ColorBase",
    "methods": []
  },
  "WoolGlovesFingerless_Tan": {
    "parent": "WoolGlovesFingerless_ColorBase",
    "methods": []
  },
  "WoolGlovesFingerless_White": {
    "parent": "WoolGlovesFingerless_ColorBase",
    "methods": []
  },
  "WoolGlovesFingerless_ChristmasBlue": {
    "parent": "WoolGlovesFingerless_ColorBase",
    "methods": []
  },
  "WoolGlovesFingerless_ChristmasRed": {
    "parent": "WoolGlovesFingerless_ColorBase",
    "methods": []
  },
  "WoolGloves_ColorBase": {
    "parent": "Gloves_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "WoolGloves_Green": {
    "parent": "WoolGloves_ColorBase",
    "methods": []
  },
  "WoolGloves_Black": {
    "parent": "WoolGloves_ColorBase",
    "methods": []
  },
  "WoolGloves_Tan": {
    "parent": "WoolGloves_ColorBase",
    "methods": []
  },
  "WoolGloves_White": {
    "parent": "WoolGloves_ColorBase",
    "methods": []
  },
  "WoolGloves_ChristmasBlue": {
    "parent": "WoolGloves_ColorBase",
    "methods": []
  },
  "WoolGloves_ChristmasRed": {
    "parent": "WoolGloves_ColorBase",
    "methods": []
  },
  "WorkingBoots_ColorBase": {
    "parent": "Shoes_Base",
    "methods": []
  },
  "WorkingBoots_Grey": {
    "parent": "WorkingBoots_ColorBase",
    "methods": []
  },
  "WorkingBoots_Brown": {
    "parent": "WorkingBoots_ColorBase",
    "methods": []
  },
  "WorkingBoots_Green": {
    "parent": "WorkingBoots_ColorBase",
    "methods": []
  },
  "WorkingBoots_Yellow": {
    "parent": "WorkingBoots_ColorBase",
    "methods": []
  },
  "WorkingBoots_Beige": {
    "parent": "WorkingBoots_ColorBase",
    "methods": []
  },
  "WorkingGloves_ColorBase": {
    "parent": "Gloves_Base",
    "methods": []
  },
  "WorkingGloves_Black": {
    "parent": "WorkingGloves_ColorBase",
    "methods": []
  },
  "WorkingGloves_Beige": {
    "parent": "WorkingGloves_ColorBase",
    "methods": []
  },
  "WorkingGloves_Brown": {
    "parent": "WorkingGloves_ColorBase",
    "methods": []
  },
  "WorkingGloves_Yellow": {
    "parent": "WorkingGloves_ColorBase",
    "methods": []
  },
  "ZmijovkaCap_ColorBase": {
    "parent": "HeadGear_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "ZmijovkaCap_Black": {
    "parent": "ZmijovkaCap_ColorBase",
    "methods": []
  },
  "ZmijovkaCap_Blue": {
    "parent": "ZmijovkaCap_ColorBase",
    "methods": []
  },
  "ZmijovkaCap_Brown": {
    "parent": "ZmijovkaCap_ColorBase",
    "methods": []
  },
  "ZmijovkaCap_Green": {
    "parent": "ZmijovkaCap_ColorBase",
    "methods": []
  },
  "ZmijovkaCap_Red": {
    "parent": "ZmijovkaCap_ColorBase",
    "methods": []
  },
  "AnniversaryBox": {
    "parent": "Container_Base",
    "methods": [
      "void DeferredInit()",
      "void EEDelete(EntityAI parent)",
      "bool IsTakeable()",
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool DisableVicinityIcon()",
      "bool CanDisplayCargo()",
      "void EmtpyInventory()",
      "void FillInventory()"
    ]
  },
  "Bear_ColorBase": {
    "parent": "Container_Base",
    "methods": [
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Bear_Beige": {
    "parent": null,
    "methods": []
  },
  "Bear_Dark": {
    "parent": null,
    "methods": []
  },
  "Bear_Pink": {
    "parent": null,
    "methods": []
  },
  "Bear_White": {
    "parent": null,
    "methods": []
  },
  "WaterproofBag_ColorBase": {
    "parent": null,
    "methods": [
      "bool CanPutInCargo(EntityAI parent)"
    ]
  },
  "WaterproofBag_Yellow": {
    "parent": null,
    "methods": []
  },
  "WaterproofBag_Green": {
    "parent": null,
    "methods": []
  },
  "WaterproofBag_Orange": {
    "parent": null,
    "methods": []
  },
  "AgaricusMushroom": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "AmanitaMushroom": {
    "parent": null,
    "methods": []
  },
  "Apple": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()",
      "void EEOnCECreate()"
    ]
  },
  "AuriculariaMushroom": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "BakedBeansCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "float GetQuantityNormalizedScripted()"
    ]
  },
  "Banana": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "BearSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void HandleFoodStageChangeAgents(FoodStageType stageOld, FoodStageType stageNew)",
      "void SetActions()"
    ]
  },
  "Bitterlings": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsMeat()",
      "bool CanDecay()",
      "bool UseConfigInitTemperature()",
      "void SetActions()"
    ]
  },
  "BoarSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "BoletusMushroom": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Bottle_Base": {
    "parent": "Edible_Base",
    "methods": [
      "void Bottle_Base()",
      "void EEDelete( EntityAI parent )",
      "void EECargoIn(EntityAI item)",
      "void OnFreezeStateChangeServer()",
      "int GetConsumptionPenaltyContext()",
      "void Synchronize()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void OnVariablesSynchronized()",
      "void RemoveAudioVisualsOnClient()",
      "void RefreshAudioVisualsOnClient( CookingMethodType cooking_method, bool is_done, bool is_empty, bool is_burned )",
      "void RefreshAudioVisuals(CookingMethodType cooking_method, bool is_done, bool is_empty, bool is_burned)",
      "void RemoveAudioVisuals()",
      "void ParticleCookingStart(int particle_id)",
      "void ParticleCookingStop()",
      "void PlayPouringLoopSound()",
      "void StopPouringLoopSound()",
      "void PlayEmptyingLoopSound()",
      "void StopEmptyingLoopSound()",
      "string GetEmptyingLoopSoundset()",
      "string GetEmptyingEndSoundset()",
      "string GetPouringSoundset()",
      "string GetEmptyingLoopSoundsetHard()",
      "string GetEmptyingLoopSoundsetSoft()",
      "string GetEmptyingLoopSoundsetWater()",
      "string GetEmptyingEndSoundsetHard()",
      "string GetEmptyingEndSoundsetSoft()",
      "string GetEmptyingEndSoundsetWater()",
      "float GetLiquidEmptyRate()",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "BoxCerealCrunchin": {
    "parent": "Edible_Base",
    "methods": [
      "void BoxCerealCrunchin()",
      "void SetActions()"
    ]
  },
  "Candycane_Colorbase": {
    "parent": "Edible_Base",
    "methods": [
      "void Candycane_Colorbase()",
      "void SetActions()"
    ]
  },
  "Candycane_Green": {
    "parent": "Candycane_Colorbase",
    "methods": []
  },
  "Candycane_Red": {
    "parent": "Candycane_Colorbase",
    "methods": []
  },
  "Candycane_RedGreen": {
    "parent": "Candycane_Colorbase",
    "methods": []
  },
  "Candycane_Yellow": {
    "parent": "Candycane_Colorbase",
    "methods": []
  },
  "CaninaBerry": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "bool ConditionAttach( EntityAI parent )",
      "bool ConditionDetach( EntityAI parent )",
      "void SetActions()"
    ]
  },
  "Cannabis": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "Carp": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsCorpse()",
      "bool CanDecay()"
    ]
  },
  "CarpFilletMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "CharcoalTablets": {
    "parent": "Edible_Base",
    "methods": [
      "void SetActions()",
      "void OnConsume(float amount, PlayerBase consumer)"
    ]
  },
  "ChelatingTablets": {
    "parent": null,
    "methods": [
      "void InitItemVariables()",
      "void OnConsume(float amount, PlayerBase consumer)",
      "void SetActions()"
    ]
  },
  "ChickenBreastMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "DeadChicken_ColorBase": {
    "parent": null,
    "methods": [
      "void DeadChicken_ColorBase()",
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsCorpse()",
      "bool CanDecay()"
    ]
  },
  "DeadRooster": {
    "parent": null,
    "methods": []
  },
  "DeadChicken_White": {
    "parent": null,
    "methods": []
  },
  "DeadChicken_Spotted": {
    "parent": null,
    "methods": []
  },
  "DeadChicken_Brown": {
    "parent": null,
    "methods": []
  },
  "CowSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "CraterellusMushroom": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void EEOnCECreate()"
    ]
  },
  "DeerSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "DisinfectantSpray": {
    "parent": null,
    "methods": [
      "void InitItemVariables()",
      "bool CanPutAsAttachment(EntityAI parent)",
      "bool CanDetachAttachment( EntityAI parent )",
      "float GetDisinfectQuantity(int system = 0, Param param1 = null)",
      "void SetActions()"
    ]
  },
  "DeadFox": {
    "parent": null,
    "methods": [
      "void DeadFox()",
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsCorpse()",
      "bool CanDecay()"
    ]
  },
  "FoxSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "GoatSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "GreenBellPepper": {
    "parent": null,
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()",
      "void EEOnCECreate()"
    ]
  },
  "Guts": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )",
      "bool CanDetachAttachment( EntityAI parent )",
      "void SetActions()"
    ]
  },
  "HumanSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "void HumanSteakMeat()",
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "Kiwi": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "LactariusMushroom": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Lard": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "Mackerel": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsCorpse()",
      "bool CanDecay()"
    ]
  },
  "MackerelFilletMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "MacrolepiotaMushroom": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "MouflonSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "Orange": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "PainkillerTablets": {
    "parent": "Edible_Base",
    "methods": [
      "void SetActions()",
      "void OnConsume(float amount, PlayerBase consumer)"
    ]
  },
  "PeachesCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()"
    ]
  },
  "Pear": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "void SetActions()",
      "bool CanDecay()",
      "void EEOnCECreate()"
    ]
  },
  "PigSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "PleurotusMushroom": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Plum": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()",
      "void EEOnCECreate()"
    ]
  },
  "Potato": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()",
      "void EEOnCECreate()"
    ]
  },
  "PsilocybeMushroom": {
    "parent": null,
    "methods": []
  },
  "Pumpkin": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()"
    ]
  },
  "PurificationTablets": {
    "parent": "Edible_Base",
    "methods": []
  },
  "DeadRabbit": {
    "parent": null,
    "methods": [
      "void DeadRabbit()",
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsCorpse()",
      "bool CanDecay()"
    ]
  },
  "RabbitLegMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "RedCaviar": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanDecay()",
      "void SetActions()",
      "void InitItemVariables()"
    ]
  },
  "ReindeerSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "SambucusBerry": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "bool ConditionAttach( EntityAI parent )",
      "bool ConditionDetach( EntityAI parent )",
      "void SetActions()"
    ]
  },
  "Sardines": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "SardinesCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()"
    ]
  },
  "SheepSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "Shrimp": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsMeat()",
      "bool CanDecay()",
      "bool UseConfigInitTemperature()",
      "void SetActions()"
    ]
  },
  "SlicedPumpkin": {
    "parent": null,
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "SmallGuts": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )",
      "bool CanDetachAttachment( EntityAI parent )",
      "void SetActions()"
    ]
  },
  "SpaghettiCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()"
    ]
  },
  "SteelheadTrout": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsCorpse()",
      "bool CanDecay()"
    ]
  },
  "SteelheadTroutFilletMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "TacticalBaconCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()"
    ]
  },
  "TetracyclineAntibiotics": {
    "parent": null,
    "methods": [
      "void OnConsume(float amount, PlayerBase consumer)",
      "void SetActions()"
    ]
  },
  "Tomato": {
    "parent": null,
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()",
      "void EEOnCECreate()"
    ]
  },
  "TunaCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "void SetActions()",
      "bool IsOpen()"
    ]
  },
  "VitaminBottle": {
    "parent": null,
    "methods": [
      "void InitItemVariables()",
      "void OnConsume(float amount, PlayerBase consumer)",
      "void SetActions()"
    ]
  },
  "WalleyePollock": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsCorpse()",
      "bool CanDecay()"
    ]
  },
  "WalleyePollockFilletMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void SetActions()"
    ]
  },
  "WolfSteakMeat": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCooked()",
      "bool CanBeCookedOnStick()",
      "bool IsMeat()",
      "bool CanDecay()",
      "void HandleFoodStageChangeAgents(FoodStageType stageOld, FoodStageType stageNew)",
      "void SetActions()"
    ]
  },
  "Worm": {
    "parent": "Edible_Base",
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsMeat()",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)"
    ]
  },
  "Zucchini": {
    "parent": null,
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsFruit()",
      "bool CanDecay()",
      "void SetActions()",
      "void EEOnCECreate()"
    ]
  },
  "BarrelHoles_ColorBase": {
    "parent": "FireplaceBase",
    "methods": [
      "void BarrelHoles_ColorBase()",
      "void InitializeTemperatureSources()",
      "bool CanCookOnStick()",
      "bool IsBaseFireplace()",
      "void CreateAreaDamage()",
      "int GetDamageSystemVersionChange()",
      "string GetInvulnerabilityTypeString()",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "bool CanDetachAttachment(EntityAI parent)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "bool IsBarrelWithHoles()",
      "void OnVariablesSynchronized()",
      "bool CanReceiveAttachment(EntityAI attachment, int slotId)",
      "bool CanLoadAttachment(EntityAI attachment)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "bool IsPrepareToDelete()",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanRemoveFromCargo(EntityAI parent)",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanLoadItemIntoCargo(EntityAI item)",
      "bool CanReleaseCargo(EntityAI cargo)",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanDisplayCargo()",
      "bool CanDisplayAttachmentCategory(string category_name)",
      "void Open()",
      "void OpenLoad()",
      "void Close()",
      "void CloseLoad()",
      "bool IsOpen()",
      "void UpdateVisualState()",
      "bool CanExtinguishFire()",
      "bool CanShowSmoke()",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy(EntityAI igniter = NULL)",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "bool IsIgnited()",
      "void OnIgnitedTarget(EntityAI target_item)",
      "void OnIgnitedThis(EntityAI fire_source)",
      "void DestroyClutterCutter(Object clutter_cutter)",
      "bool IsThisIgnitionSuccessful(EntityAI item_source = NULL)",
      "string GetBarrelOpenSoundset()",
      "string GetBarrelCloseSoundset()",
      "string GetDeploySoundset()",
      "void InitItemSounds()",
      "void SetActions()",
      "void OnDebugSpawn()",
      "void SoundBarrelOpenPlay()",
      "void SoundBarrelClosePlay()"
    ]
  },
  "Fireplace": {
    "parent": "FireplaceBase",
    "methods": [
      "void Fireplace()",
      "void InitializeTemperatureSources()",
      "bool IsBaseFireplace()",
      "bool CanObstruct()",
      "bool CanProxyObstruct()",
      "void EOnTouch( IEntity other, int extra )",
      "void EOnContact( IEntity other, Contact extra )",
      "void ContactEvent( IEntity other, vector position )",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "bool CanDisplayAttachmentSlot( int slot_id )",
      "bool CanLoadAttachment( EntityAI attachment )",
      "bool CanReleaseAttachment( EntityAI attachment )",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void SetCookingEquipment(ItemBase equipment)",
      "void OnBeforeTryDelete()",
      "bool IsPrepareToDelete()",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanRemoveFromCargo( EntityAI parent )",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "bool CanLoadItemIntoCargo( EntityAI item )",
      "bool CanPutIntoHands(EntityAI parent)",
      "bool CanDisplayAttachmentCategory( string category_name )",
      "bool CanAssignAttachmentsToQuickbar()",
      "float HeightStartCheckOverride()",
      "bool CanShowSmoke()",
      "void DestroyClutterCutter( Object clutter_cutter )",
      "void RefreshPhysics()",
      "void RefreshFireplacePhysics()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void AfterStoreLoad()",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy(EntityAI igniter = NULL)",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "bool IsIgnited()",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedThis( EntityAI fire_source )",
      "bool IsThisIgnitionSuccessful( EntityAI item_source = NULL )",
      "static bool CanIgniteEntityAsFireplace(notnull EntityAI entity)",
      "void SetActions()"
    ]
  },
  "FireplaceFireBarrel": {
    "parent": null,
    "methods": [
      "void FireplaceFireBarrel()",
      "bool IsBaseFireplace()"
    ]
  },
  "FireplaceIndoor": {
    "parent": null,
    "methods": [
      "void FireplaceIndoor()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "static int GetFirePointIndex( string action_selection )",
      "void SetFirePointIndex( int fire_point_index )",
      "static bool CanPlaceFireplaceInSelectedSpot( Object building, int fire_point_index, out vector fire_point_pos_world, out vector fire_point_rot_world )",
      "void SetSmokePointPosition( vector smoke_point_pos )",
      "void ParticleSmallSmokeStart()",
      "void ParticleNormalSmokeStart()",
      "bool IsFireplaceIndoor()",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanRemoveFromCargo( EntityAI parent )",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanRemoveFromHands( EntityAI parent )",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy( EntityAI igniter = NULL )",
      "bool CanIgniteItem( EntityAI ignite_target = NULL )",
      "bool IsIgnited()",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedThis( EntityAI fire_source )",
      "bool IsThisIgnitionSuccessful( EntityAI item_source = NULL )"
    ]
  },
  "Land_Misc_FireBarrel_ColorBase": {
    "parent": null,
    "methods": [
      "string GetFireplaceType(int firePointIndex)"
    ]
  },
  "Land_Misc_FireBarrel_Green": {
    "parent": null,
    "methods": []
  },
  "Land_Misc_FireBarrel_Red": {
    "parent": null,
    "methods": []
  },
  "Land_Misc_FireBarrel_Yellow": {
    "parent": null,
    "methods": []
  },
  "Land_Misc_FireBarrel_Blue": {
    "parent": null,
    "methods": []
  },
  "OvenIndoor": {
    "parent": "FireplaceBase",
    "methods": [
      "void OvenIndoor()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "static int GetFirePointIndex( string action_selection )",
      "void SetFirePointIndex( int fire_point_index )",
      "static bool CanPlaceFireplaceInSelectedSpot( Object building, int fire_point_index, out vector fire_point_pos_world, out vector fire_point_rot_world )",
      "void SetSmokePointPosition( vector smoke_point_pos )",
      "void ParticleSmallSmokeStart()",
      "void ParticleNormalSmokeStart()",
      "bool IsIndoorOven()",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanRemoveFromCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "bool CanRemoveFromHands( EntityAI parent )",
      "bool HasFlammableMaterial()",
      "bool CanBeIgnitedBy( EntityAI igniter = NULL )",
      "bool CanIgniteItem( EntityAI ignite_target = NULL )",
      "bool IsIgnited()",
      "void OnIgnitedTarget( EntityAI target_item )",
      "void OnIgnitedThis( EntityAI fire_source )",
      "bool IsThisIgnitionSuccessful( EntityAI item_source = NULL )"
    ]
  },
  "AK74_Hndgrd": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "AK_Bayonet": {
    "parent": "ToolBase",
    "methods": [
      "bool IsMeleeFinisher()",
      "bool CanPutAsAttachment( EntityAI parent )",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "void SetActions()"
    ]
  },
  "AK_PlasticHndgrd": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "AK_RailHndgrd": {
    "parent": "Inventory_Base",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)"
    ]
  },
  "AK_WoodHndgrd": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "AtlasBipod": {
    "parent": "Inventory_Base",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )",
      "bool CanDetachAttachment( EntityAI parent )"
    ]
  },
  "BUISOptic": {
    "parent": "ItemOptics",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "Candle": {
    "parent": "Inventory_Base",
    "methods": [
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "FryingPan": {
    "parent": null,
    "methods": [
      "void FryingPan()",
      "bool IsContainer()",
      "bool IsCookware()",
      "bool CanHaveTemperature()",
      "float GetQuantityNormalizedScripted()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "bool CanLoadItemIntoCargo( EntityAI item )",
      "void SetActions()",
      "void EEDelete( EntityAI parent )",
      "void Synchronize()",
      "void OnVariablesSynchronized()",
      "void RemoveAudioVisualsOnClient()",
      "void RefreshAudioVisualsOnClient( CookingMethodType cooking_method, bool is_done, bool is_empty, bool is_burned )",
      "void RefreshAudioVisuals( CookingMethodType cooking_method, bool is_done, bool is_empty, bool is_burned )",
      "void RemoveAudioVisuals()",
      "void ParticleCookingStart( int particle_id )",
      "void ParticleCookingStop()",
      "void SoundCookingStart(string sound_name)",
      "void SoundCookingStop()"
    ]
  },
  "GardenLime": {
    "parent": "ItemBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )",
      "bool CanDetachAttachment( EntityAI parent )",
      "void SetActions()"
    ]
  },
  "GrozaGL_LowerReceiver": {
    "parent": "ItemBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "HuntingOptic": {
    "parent": "ItemOptics",
    "methods": [
      "void HuntingOptic()",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void HideSelection( string selection_name )",
      "void ShowSelection( string selection_name )",
      "bool parentUsesWinchesterTypeMount()"
    ]
  },
  "M249_Hndgrd": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "M249_RisHndgrd": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "M4_CarryHandleOptic": {
    "parent": "ItemOptics",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "M4_MPHndgrd": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "M4_PlasticHndgrd": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "M4_RISHndgrd": {
    "parent": "Inventory_Base",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)"
    ]
  },
  "M9A1_Bayonet": {
    "parent": "ToolBase",
    "methods": [
      "bool IsMeleeFinisher()",
      "bool CanPutAsAttachment( EntityAI parent )",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "void SetActions()"
    ]
  },
  "Mosin_Bayonet": {
    "parent": "Inventory_Base",
    "methods": [
      "bool IsMeleeFinisher()",
      "bool CanPutAsAttachment( EntityAI parent )",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "void SetActions()"
    ]
  },
  "Mosin_Compensator": {
    "parent": "ItemSuppressor",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "MP5_Compensator": {
    "parent": "ItemSuppressor",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "MP5_PlasticHndgrd": {
    "parent": "Inventory_Base",
    "methods": []
  },
  "MP5_RailHndgrd": {
    "parent": "Inventory_Base",
    "methods": [
      "bool CanDetachAttachment(EntityAI parent)"
    ]
  },
  "Nails": {
    "parent": "Inventory_Base",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )",
      "bool CanDetachAttachment( EntityAI parent )"
    ]
  },
  "Crossbow_RedpointOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "LongrangeOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "PistolOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "GrozaOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "ACOGOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "ACOGOptic_6x": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "KashtanOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "M68Optic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "M4_T3NRDSOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "FNP45_MRDSOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "ReflexOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "KobraOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "KazuarOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "StarlightOptic": {
    "parent": null,
    "methods": [
      "void InitOpticMode()",
      "int GetCurrentNVType()",
      "void OnOpticModeChange()",
      "void OnOpticEnter()",
      "void UpdateSelectionVisibility()",
      "void SetActions()"
    ]
  },
  "PlantMaterial": {
    "parent": "Inventory_Base",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )",
      "bool CanDetachAttachment( EntityAI parent )",
      "void SetActions()",
      "void InitItemVariables()"
    ]
  },
  "PSO11Optic": {
    "parent": "ItemOptics",
    "methods": []
  },
  "PSO1Optic": {
    "parent": "ItemOptics",
    "methods": []
  },
  "PUScopeOptic": {
    "parent": "ItemOptics",
    "methods": []
  },
  "Red9Bttstck": {
    "parent": "Inventory_Base",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "SKS_Bayonet": {
    "parent": "Inventory_Base",
    "methods": [
      "bool IsMeleeFinisher()",
      "bool CanPutAsAttachment( EntityAI parent )",
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)",
      "void SetActions()"
    ]
  },
  "Ammunition_Base": {
    "parent": null,
    "methods": [
      "static float GetAmmoWeightByBulletType(string bulletType)",
      "bool IsAmmoPile()",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "void SetQuantityToMinimum()",
      "void SetFromProjectile(ProjectileStoppedInfo info)",
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_45ACP": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_308Win": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_308WinTracer": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_9x19": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_380": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_556x45": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_556x45Tracer": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_762x54": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_762x54Tracer": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_762x39": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_762x39Tracer": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_9x39": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_22": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_12gaPellets": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_12gaSlug": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_357": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_545x39": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_545x39Tracer": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Bolt_Base": {
    "parent": null,
    "methods": [
      "bool IsInventoryVisible()",
      "bool CanBeActionTarget()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "void SetActions()",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_DartSyringe": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_Flare": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_RPG7_HE": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_RPG7_AP": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_LAW_HE": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_GrenadeM4": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_HuntingBolt": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_ImprovisedBolt_1": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_ImprovisedBolt_2": {
    "parent": null,
    "methods": [
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_CupidsBolt": {
    "parent": null,
    "methods": [
      "void EEparentedTo(EntityAI parent)",
      "void EEparentedFrom(EntityAI parent)",
      "static void PlayOnHitParticle(vector position)",
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_40mm_Base": {
    "parent": null,
    "methods": [
      "bool IsTakeable()",
      "bool IsInventoryVisible()",
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_40mm_Explosive": {
    "parent": null,
    "methods": [
      "bool ShootsExplosiveAmmo()",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_40mm_ChemGas": {
    "parent": null,
    "methods": [
      "void OnActivatedByItem(notnull ItemBase item)",
      "void EEKilled(Object killer)",
      "void OnDamageDestroyed(int oldLevel)",
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )"
    ]
  },
  "Ammo_40mm_Smoke_ColorBase": {
    "parent": null,
    "methods": [
      "void Ammo_40mm_Smoke_ColorBase()",
      "void OnVariablesSynchronized()",
      "void Activate()",
      "void EEKilled(Object killer)",
      "void EEDelete(EntityAI parent)",
      "bool CanPutInCargo( EntityAI parent )",
      "void OnActivatedByItem(notnull ItemBase item)"
    ]
  },
  "Ammo_40mm_Smoke_Red": {
    "parent": null,
    "methods": []
  },
  "Ammo_40mm_Smoke_Green": {
    "parent": null,
    "methods": []
  },
  "Ammo_40mm_Smoke_White": {
    "parent": null,
    "methods": []
  },
  "Ammo_40mm_Smoke_Black": {
    "parent": null,
    "methods": []
  },
  "AmmoData": {
    "parent": null,
    "methods": [
      "void AmmoData( string init_type )",
      "void Magazine()",
      "int GetAmmoCount()",
      "void ServerSetAmmoCount(int ammoCount)",
      "void LocalSetAmmoCount(int ammoCount)",
      "bool LocalAcquireCartridge(out float dmg, out string cartTypeName)",
      "bool ServerAcquireCartridge(out float dmg, out string cartTypeName)",
      "bool LocalStoreCartridge(float ammoDamage, string cartTypeName)",
      "bool ServerStoreCartridge(float ammoDamage, string cartTypeName)",
      "bool GetCartridgeAtIndex(int cartIndex, out float dmg, out string cartTypeName)",
      "bool SetCartridgeAtIndex(int cartIndex, out float dmg, out string cartTypeName)",
      "bool SetCartridgeDamageAtIndex(int cartIndex, float dmg)",
      "bool IsCompatiableAmmo( ItemBase ammo )",
      "bool CanAddCartridges(int count)",
      "void ServerAddAmmoCount(int ammoCount)",
      "void LocalAddAmmoCount(int ammoCount)",
      "int GetAmmoMax()",
      "void ServerSetAmmoMax()",
      "void LocalSetAmmoMax()",
      "bool IsMagazine()",
      "bool CanBeSplit()",
      "bool InitReliability(out array<float> reliability_array)",
      "float GetChanceToJam()",
      "void SplitItemToInventoryLocation( notnull InventoryLocation dst )",
      "void SplitItem(PlayerBase player)",
      "void ApplyManipulationDamage()",
      "bool IsFullQuantity()",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "bool IsCombineAll( ItemBase other_item, bool use_stack_max = false)",
      "void CombineItems( ItemBase other_item, bool use_stack_max = false )",
      "bool CanDetachAttachment(EntityAI parent)",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void EEHealthLevelChanged( int oldLevel, int newLevel, string zone )",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "bool CanBeFSwaped()",
      "void SetActions()"
    ]
  },
  "Magazine": {
    "parent": null,
    "methods": [
      "void Magazine()",
      "int GetAmmoCount()",
      "void ServerSetAmmoCount(int ammoCount)",
      "void LocalSetAmmoCount(int ammoCount)",
      "bool LocalAcquireCartridge(out float dmg, out string cartTypeName)",
      "bool ServerAcquireCartridge(out float dmg, out string cartTypeName)",
      "bool LocalStoreCartridge(float ammoDamage, string cartTypeName)",
      "bool ServerStoreCartridge(float ammoDamage, string cartTypeName)",
      "bool GetCartridgeAtIndex(int cartIndex, out float dmg, out string cartTypeName)",
      "bool SetCartridgeAtIndex(int cartIndex, out float dmg, out string cartTypeName)",
      "bool SetCartridgeDamageAtIndex(int cartIndex, float dmg)",
      "bool IsCompatiableAmmo( ItemBase ammo )",
      "bool CanAddCartridges(int count)",
      "void ServerAddAmmoCount(int ammoCount)",
      "void LocalAddAmmoCount(int ammoCount)",
      "int GetAmmoMax()",
      "void ServerSetAmmoMax()",
      "void LocalSetAmmoMax()",
      "bool IsMagazine()",
      "bool CanBeSplit()",
      "bool InitReliability(out array<float> reliability_array)",
      "float GetChanceToJam()",
      "void SplitItemToInventoryLocation( notnull InventoryLocation dst )",
      "void SplitItem(PlayerBase player)",
      "void ApplyManipulationDamage()",
      "bool IsFullQuantity()",
      "float GetWeightSpecialized(bool forceRecalc = false)",
      "bool IsCombineAll( ItemBase other_item, bool use_stack_max = false)",
      "void CombineItems( ItemBase other_item, bool use_stack_max = false )",
      "bool CanDetachAttachment(EntityAI parent)",
      "void OnInventoryEnter(Man player)",
      "void OnInventoryExit(Man player)",
      "void OnWasAttached( EntityAI parent, int slot_id )",
      "void OnWasDetached( EntityAI parent, int slot_id )",
      "void EEHealthLevelChanged( int oldLevel, int newLevel, string zone )",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "bool CanBeFSwaped()",
      "void SetActions()"
    ]
  },
  "MagazineStorage": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Mag_FNX45_15Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_357Speedloader_6Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Deagle_9rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_1911_7Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CZ75_15Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Glock_15Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_P1_8Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_IJ70_8Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_MP5_15Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_MP5_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_PM73_15Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_PM73_25Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CZ61_20Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_MKII_10Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_ShockCartridge": {
    "parent": null,
    "methods": []
  },
  "Mag_Ruger1022_10Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Ruger1022_15Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Ruger1022_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CLIP762x54_5Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_762x54Snaploader_2Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_308WinSnaploader_2Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CLIP762x39_10Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CLIP9x19_10Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_AKM_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_AKM_Drum75Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_AKM_Palm30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CZ527_5rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_STANAG_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_STANAGCoupled_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CMAG_10Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CMAG_20Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CMAG_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CMAG_40Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_AK101_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_AK74_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_SVD_10Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_FAL_20Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Scout_5Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_UMP_25Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_VSS_10Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_M249_Box200Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_12gaSnaploader_2Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Saiga_5Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Saiga_8Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Saiga_Drum20Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Arrows_Quiver": {
    "parent": null,
    "methods": []
  },
  "Mag_Bolts_Quiver": {
    "parent": null,
    "methods": []
  },
  "Mag_Dartgun_CO2": {
    "parent": null,
    "methods": []
  },
  "Mag_Groza_20Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_MakarovPB_8Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_VAL_20Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_STANAG_60Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_AK74_45Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_FAMAS_25Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Aug_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_PP19_64Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CZ550_4rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_CZ550_10rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_SSG82_5rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_M14_10Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_M14_20Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_Vikhr_30Rnd": {
    "parent": null,
    "methods": []
  },
  "Mag_SV98_10Rnd": {
    "parent": null,
    "methods": []
  },
  "CannabisSeedsPack": {
    "parent": "SeedPackBase",
    "methods": []
  },
  "PepperSeedsPack": {
    "parent": "SeedPackBase",
    "methods": []
  },
  "PumpkinSeedsPack": {
    "parent": "SeedPackBase",
    "methods": []
  },
  "TomatoSeedsPack": {
    "parent": "SeedPackBase",
    "methods": []
  },
  "ZucchiniSeedsPack": {
    "parent": "SeedPackBase",
    "methods": []
  },
  "AK_Suppressor": {
    "parent": "ItemSuppressor",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "Groza_Barrel_Grip": {
    "parent": "SuppressorBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "Groza_Barrel_Short": {
    "parent": "SuppressorBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "Groza_Barrel_Suppressor": {
    "parent": "SuppressorBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "ImprovisedSuppressor": {
    "parent": "SuppressorBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "M4_Suppressor": {
    "parent": "SuppressorBase",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "MakarovPBSuppressor": {
    "parent": "ItemSuppressor",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "PistolSuppressor": {
    "parent": "ItemSuppressor",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )"
    ]
  },
  "Chainsaw": {
    "parent": "Switchable_Base",
    "methods": [
      "bool CanPutInCargo( EntityAI parent )",
      "void SetActions()"
    ]
  },
  "TLRLight": {
    "parent": "Switchable_Base",
    "methods": [
      "bool CanPutAsAttachment( EntityAI parent )",
      "void OnWorkStart()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStop()",
      "void OnInventoryExit(Man player)",
      "void SetActions()",
      "bool IsLightSource()"
    ]
  },
  "UniversalLight": {
    "parent": "Switchable_Base",
    "methods": [
      "void UniversalLight()",
      "bool CanPutAsAttachment( EntityAI parent )",
      "void OnWorkStart()",
      "void OnWork( float consumed_energy )",
      "void OnWorkStop()",
      "void OnInventoryExit(Man player)",
      "void SetActions()",
      "bool IsLightSource()",
      "void InitAttachmentsSlotsToCheck(out array<int> AttSlots)"
    ]
  },
  "CarTent": {
    "parent": "TentBase",
    "methods": [
      "void CarTent()",
      "void EEInit()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "string GetSoundOpen()",
      "string GetSoundClose()",
      "bool HasClutterCutter()",
      "bool IsDeployable()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()"
    ]
  },
  "LargeTent": {
    "parent": "TentBase",
    "methods": [
      "void LargeTent()",
      "void OnRPC(PlayerIdentity sender, int rpc_type,ParamsReadContext  ctx)",
      "void PlayRepackingLoopSound()",
      "void StopRepackingLoopSound()",
      "void EEInit()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "string GetSoundOpen()",
      "string GetSoundClose()",
      "string GetSoundOpenWindow()",
      "string GetSoundCloseWindow()",
      "bool HasClutterCutter()",
      "string GetClutterCutter()",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()"
    ]
  },
  "LargeTentBackPack": {
    "parent": "Backpack_Base",
    "methods": [
      "void LargeTentBackPack()",
      "void OnRPC(PlayerIdentity sender, int rpc_type,ParamsReadContext  ctx)",
      "void PlayRepackingLoopSound()",
      "void StopRepackingLoopSound()"
    ]
  },
  "MediumTent": {
    "parent": "TentBase",
    "methods": [
      "void MediumTent()",
      "void EEInit()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "string GetSoundOpen()",
      "string GetSoundClose()",
      "bool HasClutterCutter()",
      "string GetClutterCutter()",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()"
    ]
  },
  "MediumTent_Green": {
    "parent": "MediumTent",
    "methods": []
  },
  "MediumTent_Orange": {
    "parent": "MediumTent",
    "methods": []
  },
  "MediumTentPlacing": {
    "parent": "MediumTent",
    "methods": []
  },
  "MediumTent_GreenPlacing": {
    "parent": "MediumTentPlacing",
    "methods": []
  },
  "MediumTent_OrangePlacing": {
    "parent": "MediumTentPlacing",
    "methods": []
  },
  "PartyTent": {
    "parent": "TentBase",
    "methods": [
      "void PartyTent()",
      "string GetSoundOpen()",
      "string GetSoundClose()",
      "string GetSoundOpenWindow()",
      "string GetSoundCloseWindow()",
      "bool HasClutterCutter()",
      "string GetClutterCutter()",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "void HandleCamoNetAttachment(bool hide)",
      "void AnimateCamonetToggle(ToggleAnimations toggle)",
      "void AnimateCamonetByOpeningSelection(string opening_selection)"
    ]
  },
  "PartyTent_Blue": {
    "parent": "PartyTent",
    "methods": []
  },
  "PartyTent_Brown": {
    "parent": "PartyTent",
    "methods": []
  },
  "PartyTent_Lunapark": {
    "parent": "PartyTent",
    "methods": []
  },
  "PartyTentPlacing": {
    "parent": "PartyTent",
    "methods": []
  },
  "PartyTent_BluePlacing": {
    "parent": "PartyTentPlacing",
    "methods": []
  },
  "PartyTent_BrownPlacing": {
    "parent": "PartyTentPlacing",
    "methods": []
  },
  "PartyTent_LunaparkPlacing": {
    "parent": "PartyTentPlacing",
    "methods": []
  },
  "ShelterBase": {
    "parent": "TentBase",
    "methods": [
      "void ShelterBase()",
      "void SetActions()",
      "void EEInit()",
      "void Deconstruct()",
      "string GetMaterialPath()",
      "string GetShelterVariant()",
      "void SpawnKit()",
      "bool IsPlayerInside(PlayerBase player, string selection)"
    ]
  },
  "ShelterFabric": {
    "parent": "ShelterBase",
    "methods": [
      "string GetShelterVariant()"
    ]
  },
  "ShelterLeather": {
    "parent": "ShelterBase",
    "methods": [
      "string GetShelterVariant()"
    ]
  },
  "ShelterStick": {
    "parent": "ShelterBase",
    "methods": [
      "string GetShelterVariant()"
    ]
  },
  "BaseRadio": {
    "parent": "TransmitterBase",
    "methods": [
      "void BaseRadio()"
    ]
  },
  "PersonalRadio": {
    "parent": "TransmitterBase",
    "methods": [
      "void PersonalRadio()",
      "void OnDebugSpawn()"
    ]
  },
  "BearTrap": {
    "parent": "TrapBase",
    "methods": [
      "void BearTrap()",
      "bool CanBeDisarmed()",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void CreateTrigger()",
      "void OnUpdate(EntityAI victim)",
      "void OnSteppedOn(EntityAI victim)",
      "void OnSteppedOut(EntityAI victim)",
      "void OnServerSteppedOn(Object obj, string damageZone)",
      "void CauseVictimToStartLimping(Object obj, string damagedZone)",
      "void PlaySoundBiteLeg()",
      "void PlaySoundBiteEmpty()",
      "void PlaySoundOpen()",
      "void OnActivate()",
      "void OnDisarm()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "bool IsDeployable()",
      "string GetLoopDeploySoundset()",
      "void SetActions()",
      "void OnDebugSpawn()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "LandMineTrap": {
    "parent": "TrapBase",
    "methods": [
      "void LandMineTrap()",
      "void StartActivate(PlayerBase player)",
      "void OnActivatedByItem(notnull ItemBase item)",
      "void OnActivate()",
      "bool CanExplodeInFire()",
      "void OnUpdate(EntityAI victim)",
      "void OnSteppedOn(EntityAI victim)",
      "void OnSteppedOut(EntityAI victim)",
      "void OnServerSteppedOn(Object obj, string damageZone)",
      "void DeleteThis()",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void EEKilled(Object killer)",
      "void PlaySoundActivate()",
      "void Explode(int damageType, string ammoType = )",
      "bool CanBeDisarmed()",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void PlayDisarmingLoopSound()",
      "void StopDisarmingLoopSound()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "bool IsDeployable()",
      "string GetLoopDeploySoundset()",
      "void SetActions()",
      "void OnDebugSpawn()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "TripwireTrap": {
    "parent": null,
    "methods": [
      "void TripwireTrap()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void CreateTrigger()",
      "void OnSteppedOn(EntityAI victim)",
      "void OnItemLocationChanged(EntityAI old_owner, EntityAI new_owner)",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void EEHealthLevelChanged(int oldLevel, int newLevel, string zone)",
      "void SetInactive(bool stop_timer = true)",
      "void SetState(int state_ID)",
      "int GetState()",
      "void SetWireType( int wireType )",
      "int GetWireType()",
      "void RefreshState()",
      "void SetupTrapPlayer( PlayerBase player, bool set_position = true )",
      "void StartDeactivate(PlayerBase player)",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "bool CanDisplayAttachmentSlot( int slot_id )",
      "void EEItemAttached(EntityAI item, string slot_name)",
      "void EEItemDetached(EntityAI item, string slot_name)",
      "void EEKilled(Object killer)",
      "void FoldTripWire()",
      "void OnInventoryEnter( Man player )",
      "int GetViewIndex()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "void OnPlacementCancelled(Man player)",
      "bool IsDeployable()",
      "bool IsTakeable()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "void SetActions()",
      "void UpdateProxySelections()",
      "void OnDebugSpawn()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "TripwireTrapDeployed": {
    "parent": null,
    "methods": []
  },
  "Trap_FishNet": {
    "parent": "TrapSpawnBase",
    "methods": [
      "void InitTrapValues()",
      "void InitCatchingComponent()",
      "bool IsPlaceableAtPosition( vector position )",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "int GetViewIndex()",
      "bool IsDeployable()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()"
    ]
  },
  "FishNetTrap": {
    "parent": "Trap_FishNet",
    "methods": []
  },
  "Trap_RabbitSnare": {
    "parent": "TrapSpawnBase",
    "methods": [
      "void InitTrapValues()",
      "bool CanBePlaced(Man player, vector position)",
      "void SetupTrap()",
      "void InitCatchingComponent()",
      "void OnPlacementComplete( Man player, vector position = , vector orientation =  )",
      "bool IsDeployable()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "void SetActions()",
      "void AlignCatch( ItemBase obj, string catch_name )"
    ]
  },
  "RabbitSnareTrap": {
    "parent": "Trap_RabbitSnare",
    "methods": []
  },
  "Trap_SmallFish": {
    "parent": "TrapSpawnBase",
    "methods": [
      "void InitTrapValues()",
      "void InitCatchingComponent()",
      "bool IsPlaceableAtPosition( vector position )",
      "bool CanReceiveAttachment( EntityAI attachment, int slotId )",
      "int GetViewIndex()",
      "bool IsDeployable()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "bool DoPlacingHeightCheck()"
    ]
  },
  "SmallFishTrap": {
    "parent": "Trap_SmallFish",
    "methods": [
      "bool IsDeployable()",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "bool DoPlacingHeightCheck()"
    ]
  },
  "AircraftBattery": {
    "parent": null,
    "methods": []
  },
  "CarBattery": {
    "parent": null,
    "methods": []
  },
  "TruckBattery": {
    "parent": null,
    "methods": []
  },
  "ButtstockBase": {
    "parent": "Inventory_Base",
    "methods": [
      "void OnWasAttached(EntityAI parent, int slot_id)",
      "void OnWasDetached(EntityAI parent, int slot_id)"
    ]
  },
  "AK74_WoodBttstck": {
    "parent": null,
    "methods": []
  },
  "AKS74U_Bttstck": {
    "parent": null,
    "methods": []
  },
  "AK_FoldingBttstck": {
    "parent": null,
    "methods": []
  },
  "AK_PlasticBttstck": {
    "parent": null,
    "methods": []
  },
  "AK_WoodBttstck": {
    "parent": null,
    "methods": []
  },
  "Fal_FoldingBttstck": {
    "parent": null,
    "methods": []
  },
  "Fal_OeBttstck": {
    "parent": null,
    "methods": []
  },
  "GhillieAtt_ColorBase": {
    "parent": null,
    "methods": []
  },
  "GhillieAtt_Mossy": {
    "parent": null,
    "methods": []
  },
  "GhillieAtt_Tan": {
    "parent": null,
    "methods": []
  },
  "GhillieAtt_Woodland": {
    "parent": null,
    "methods": []
  },
  "GhillieAtt_Winter": {
    "parent": null,
    "methods": []
  },
  "Groza_LowerReceiver": {
    "parent": null,
    "methods": []
  },
  "M249_Bipod": {
    "parent": null,
    "methods": []
  },
  "M4_CQBBttstck": {
    "parent": null,
    "methods": []
  },
  "M4_MPBttstck": {
    "parent": null,
    "methods": []
  },
  "M4_OEBttstck": {
    "parent": null,
    "methods": []
  },
  "MP5k_StockBttstck": {
    "parent": null,
    "methods": []
  },
  "Saiga_Bttstck": {
    "parent": null,
    "methods": []
  },
  "PP19_Bttstck": {
    "parent": null,
    "methods": []
  },
  "MaleFeet_Base": {
    "parent": "InventoryItem",
    "methods": []
  },
  "FemaleFeet_Base": {
    "parent": "InventoryItem",
    "methods": []
  },
  "MaleAdamFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleBorisFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleCyrilFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleDenisFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleEliasFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleFrancisFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleGuoFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleHassanFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleIndarFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleJoseFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleKaitoFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleLewisFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleManuaFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleNikiFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleOliverFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MalePeterFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleQuinnFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleRolfFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleSethFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleTaikiFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "MaleDeanFeet": {
    "parent": "MaleFeet_Base",
    "methods": []
  },
  "FemaleEvaFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "FemaleFridaFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "FemaleGabiFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "FemaleHelgaFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "FemaleIrenaFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "FemaleJudyFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "FemaleKeikoFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "FemaleLindaFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "FemaleMariaFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "FemaleNaomiFeet": {
    "parent": "FemaleFeet_Base",
    "methods": []
  },
  "MaleHands_Base": {
    "parent": "InventoryItem",
    "methods": []
  },
  "FemaleHands_Base": {
    "parent": "InventoryItem",
    "methods": []
  },
  "MaleAdamHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleBorisHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleCyrilHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleDenisHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleEliasHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleFrancisHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleGuoHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleHassanHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleIndarHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleJoseHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleKaitoHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleLewisHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleManuaHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleNikiHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleOliverHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MalePeterHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleQuinnHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleRolfHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleSethHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleTaikiHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "MaleDeanHands": {
    "parent": "MaleHands_Base",
    "methods": []
  },
  "FemaleEvaHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "FemaleFridaHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "FemaleGabiHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "FemaleHelgaHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "FemaleIrenaHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "FemaleJudyHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "FemaleKeikoHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "FemaleLindaHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "FemaleMariaHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "FemaleNaomiHands": {
    "parent": "FemaleHands_Base",
    "methods": []
  },
  "Head_Default": {
    "parent": "Head",
    "methods": [
      "void Head_Default()",
      "void Init()",
      "void InitSelectionTranslation()",
      "bool GetHeadHideableSelections(out array<string> selections)",
      "int GetBeardIndex()",
      "int GetHairIndex()",
      "int GetSelectionIndex(string str)",
      "bool IsHandlingException()",
      "void SelectionTranslation(Head_Default head, int idx)",
      "void InitTranslatedSelections(int idx)",
      "bool SearchAndTranslate(string path, int idx)",
      "void SetSelectionState(bool state)",
      "bool GetSelectionState()"
    ]
  },
  "SelectionTranslation": {
    "parent": null,
    "methods": [
      "void SelectionTranslation(Head_Default head, int idx)",
      "void InitTranslatedSelections(int idx)",
      "bool SearchAndTranslate(string path, int idx)",
      "void SetSelectionState(bool state)",
      "bool GetSelectionState()"
    ]
  },
  "MaleLegs_Base": {
    "parent": "InventoryItem",
    "methods": []
  },
  "FemaleLegs_Base": {
    "parent": "InventoryItem",
    "methods": []
  },
  "MaleAdamLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleBorisLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleCyrilLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleDenisLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleEliasLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleFrancisLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleGuoLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleHassanLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleIndarLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleJoseLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleKaitoLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleLewisLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleManuaLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleNikiLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleOliverLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MalePeterLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleQuinnLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleRolfLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleSethLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "MaleTaikiLegs": {
    "parent": "MaleLegs_Base",
    "methods": []
  },
  "FemaleEvaLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "FemaleFridaLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "FemaleGabiLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "FemaleHelgaLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "FemaleIrenaLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "FemaleJudyLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "FemaleKeikoLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "FemaleLindaLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "FemaleMariaLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "FemaleNaomiLegs": {
    "parent": "FemaleLegs_Base",
    "methods": []
  },
  "MaleTorso_Base": {
    "parent": "InventoryItem",
    "methods": []
  },
  "FemaleTorso_Base": {
    "parent": "InventoryItem",
    "methods": []
  },
  "MaleAdamTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleBorisTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleCyrilTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleDenisTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleEliasTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleFrancisTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleGuoTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleHassanTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleIndarTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleJoseTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleKaitoTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleLewisTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleManuaTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleNikiTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleOliverTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MalePeterTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleQuinnTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleRolfTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleSethTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "MaleTaikiTorso": {
    "parent": "MaleTorso_Base",
    "methods": []
  },
  "FemaleEvaTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "FemaleFridaTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "FemaleGabiTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "FemaleHelgaTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "FemaleIrenaTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "FemaleJudyTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "FemaleKeikoTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "FemaleLindaTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "FemaleMariaTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "FemaleNaomiTorso": {
    "parent": "FemaleTorso_Base",
    "methods": []
  },
  "DayZPlayerCamera1stPerson": {
    "parent": "DayZPlayerCameraBase",
    "methods": [
      "void DayZPlayerCamera1stPerson(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "string GetCameraName()",
      "void DayZPlayerCamera1stPersonUnconscious(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera1stPersonUnconscious": {
    "parent": "DayZPlayerCamera1stPerson",
    "methods": [
      "void DayZPlayerCamera1stPersonUnconscious(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)"
    ]
  },
  "DayZPlayerCamera3rdPerson": {
    "parent": "DayZPlayerCameraBase",
    "methods": [
      "void DayZPlayerCamera3rdPerson(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "string GetCameraName()",
      "void DayZPlayerCamera3rdPersonErc(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonJump(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonClimb(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonErcSpr(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonErcRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()",
      "void HandleShoulderCameraOverride(HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouch(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouchRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera3rdPersonErc": {
    "parent": "DayZPlayerCamera3rdPerson",
    "methods": [
      "void DayZPlayerCamera3rdPersonErc(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonJump(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonClimb(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonErcSpr(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonErcRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()",
      "void HandleShoulderCameraOverride(HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouch(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouchRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera3rdPersonJump": {
    "parent": "DayZPlayerCamera3rdPersonErc",
    "methods": [
      "void DayZPlayerCamera3rdPersonJump(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonClimb(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonErcSpr(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonErcRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()",
      "void HandleShoulderCameraOverride(HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouch(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouchRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera3rdPersonClimb": {
    "parent": "DayZPlayerCamera3rdPersonErc",
    "methods": [
      "void DayZPlayerCamera3rdPersonClimb(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonErcSpr(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonErcRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()",
      "void HandleShoulderCameraOverride(HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouch(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouchRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera3rdPersonErcSpr": {
    "parent": "DayZPlayerCamera3rdPersonErc",
    "methods": [
      "void DayZPlayerCamera3rdPersonErcSpr(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonErcRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()",
      "void HandleShoulderCameraOverride(HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouch(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouchRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera3rdPersonErcRaised": {
    "parent": "DayZPlayerCamera3rdPersonErc",
    "methods": [
      "void DayZPlayerCamera3rdPersonErcRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()",
      "void HandleShoulderCameraOverride(HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouch(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonCrouchRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera3rdPersonErcRaisedMelee": {
    "parent": "DayZPlayerCamera3rdPersonErcRaised",
    "methods": [
      "void HandleShoulderCameraOverride(HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonCrouch(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonCrouchRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()",
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera3rdPersonCrouch": {
    "parent": "DayZPlayerCamera3rdPerson",
    "methods": [
      "void DayZPlayerCamera3rdPersonCrouch(DayZPlayer pPlayer, HumanInputController pInput)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonCrouchRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()",
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera3rdPersonCrouchRaised": {
    "parent": "DayZPlayerCamera3rdPersonCrouch",
    "methods": [
      "void DayZPlayerCamera3rdPersonCrouchRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()",
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)"
    ]
  },
  "DayZPlayerCamera3rdPersonProneBase": {
    "parent": "DayZPlayerCamera3rdPerson",
    "methods": [
      "float UpdateLRAngleLookAt(float pMin, float pMax, float pDt)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()"
    ]
  },
  "DayZPlayerCamera3rdPersonProne": {
    "parent": "DayZPlayerCamera3rdPersonProneBase",
    "methods": [
      "void DayZPlayerCamera3rdPersonProne(DayZPlayer pPlayer, HumanInputController pInput)",
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()"
    ]
  },
  "DayZPlayerCamera3rdPersonProneRaised": {
    "parent": "DayZPlayerCamera3rdPersonProneBase",
    "methods": [
      "void DayZPlayerCamera3rdPersonProneRaised(DayZPlayer pPlayer, HumanInputController pInput)",
      "bool IsCamera3rdRaised()"
    ]
  },
  "DayZPlayerCameraIronsights": {
    "parent": "DayZPlayerCameraBase",
    "methods": [
      "void DayZPlayerCameraIronsights(DayZPlayer pPlayer, HumanInputController pInput)",
      "void SetupSightEntities()",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "bool GetCurrentSightInfo(out vector camPos, out vector camDir)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void AdjustCameraParameters(float pDt, inout DayZPlayerCameraResult pOutResult)",
      "float HoldBreathFOVEffect(float pDt)",
      "void SetCameraPP(bool state, DayZPlayerCamera launchedFrom)",
      "string GetCameraName()",
      "void SetCameraPPDelay(DayZPlayerCamera pPrevCamera)",
      "void UpdateBatteryOptics(EntityAI entity)",
      "void DayZPlayerCameraOptics(DayZPlayer pPlayer, HumanInputController pInput)",
      "void Init()",
      "void SetCameraPP(bool state,DayZPlayerCamera launchedFrom)",
      "void SendRecoilOffsetZ(float offset)"
    ]
  },
  "DayZPlayerCameraOptics": {
    "parent": null,
    "methods": [
      "void DayZPlayerCameraOptics(DayZPlayer pPlayer, HumanInputController pInput)",
      "void Init()",
      "bool GetCurrentSightInfo(out vector camPos, out vector camDir)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "void AdjustCameraParameters(float pDt, inout DayZPlayerCameraResult pOutResult)",
      "float HoldBreathFOVEffect(float pDt)",
      "void SetCameraPP(bool state,DayZPlayerCamera launchedFrom)",
      "string GetCameraName()",
      "void SetCameraPPDelay(DayZPlayerCamera pPrevCamera)",
      "void SendRecoilOffsetZ(float offset)"
    ]
  },
  "DayZPlayerCameras": {
    "parent": null,
    "methods": [
      "static void RegisterCameras(DayZPlayerType pType)",
      "static void RegisterTransitionTime(int pFrom, int pTo, float pTime, bool pTwoWay)",
      "static float GetTransitionTime(int pFrom, int pTo)",
      "static float OnCameraChange(DayZPlayer pPlayer, int pFrom, int pTo)"
    ]
  },
  "DayZPlayerCamera1stPersonVehicle": {
    "parent": "DayZPlayerCamera1stPerson",
    "methods": [
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void DayZPlayerCamera3rdPersonVehicle( DayZPlayer pPlayer, HumanInputController pInput )",
      "void OnActivate( DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult )",
      "void OnUpdate( float pDt, out DayZPlayerCameraResult pOutResult )"
    ]
  },
  "DayZPlayerCamera3rdPersonVehicle": {
    "parent": "DayZPlayerCameraBase",
    "methods": [
      "void DayZPlayerCamera3rdPersonVehicle( DayZPlayer pPlayer, HumanInputController pInput )",
      "void OnActivate( DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult )",
      "void OnUpdate( float pDt, out DayZPlayerCameraResult pOutResult )"
    ]
  },
  "DayZPlayerCameraBase": {
    "parent": "DayZPlayerCamera",
    "methods": [
      "void DayZPlayerCameraBase(DayZPlayer pPlayer, HumanInputController pInput)",
      "void HandleShoulderCameraOverride(HumanInputController pInput)",
      "void ProcessCameraShake(float delta, out float leftRight, out float upDown)",
      "void Init()",
      "float UpdateUDAngleUnlocked(out float pAngle, out float pAngleAdd, float pMin, float pMax, float pDt)",
      "float UpdateLRAngleUnlocked(out float pAngle, out float pAngleAdd, float pMin, float pMax, float pDt)",
      "float UpdateUDAngle(out float pAngle, out float pAngleAdd, float pMin, float pMax, float pDt)",
      "float UpdateLRAngle(float pAngle, float pMin, float pMax, float pDt)",
      "void StdFovUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void SpawnCameraShakeProper(float strength, float radius, float smoothness, float radius_decay_speed)",
      "void OnUpdate(float pDt, out DayZPlayerCameraResult pOutResult)",
      "void OnActivate(DayZPlayerCamera pPrevCamera, DayZPlayerCameraResult pPrevCameraResult)",
      "float GetWeaponSwayModifier()",
      "string GetCameraName()",
      "void SetCameraPPDelay(DayZPlayerCamera pPrevCamera)",
      "void SetCameraNV(bool nightvision)",
      "bool IsCameraNV()",
      "void SetCameraNVType(int type)",
      "int GetCameraNVType()",
      "void UpdateCameraNV(PlayerBase player)",
      "void SetCameraPP(bool state, DayZPlayerCamera launchedFrom)",
      "float GetCurrentYaw()",
      "float GetCurrentPitch()",
      "float GetCurrentRoll()",
      "void ForceFreelook(bool state)",
      "void SetNVPostprocess(int NVtype)",
      "void InitCameraOnPlayer(bool force = false)"
    ]
  },
  "DayZPlayerTypeUtils": {
    "parent": null,
    "methods": [
      "static void DayZPlayerTypeCreate(DayZPlayerType pType)",
      "static void DayZPlayerTypeInitMovement(DayZPlayerType pType)",
      "void DayzPlayerItemBehaviorCfg()",
      "void SetIKTwoHanded()",
      "void SetIKPoleArms()",
      "void SetPistols()",
      "void SetFirearms()",
      "void SetEmptyHanded()",
      "void SetTwoHanded()",
      "void SetToolsOneHanded()",
      "void SetRestrained()",
      "void SetSurrender()",
      "void SetHeavyItems()",
      "void SetPoleArms()",
      "void RegisterEmptyHanded(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterOneHanded(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterTwoHanded(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterRestrained(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterSurrender(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterHeavy(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterPistol(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterFireArms(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterArcheryItem(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterPoleArms(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterLauncher(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterCustom(DayZPlayerType pType)",
      "void CustomBoneRemapping(DayZPlayerType pType)",
      "void DayZPlayerTypeRegisterItems(DayZPlayerType pType)"
    ]
  },
  "DayzPlayerItemBehaviorCfg": {
    "parent": "HumanItemBehaviorCfg",
    "methods": [
      "void DayzPlayerItemBehaviorCfg()",
      "void SetIKTwoHanded()",
      "void SetIKPoleArms()",
      "void SetPistols()",
      "void SetFirearms()",
      "void SetEmptyHanded()",
      "void SetTwoHanded()",
      "void SetToolsOneHanded()",
      "void SetRestrained()",
      "void SetSurrender()",
      "void SetHeavyItems()",
      "void SetPoleArms()",
      "void RegisterEmptyHanded(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterOneHanded(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterTwoHanded(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterRestrained(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterSurrender(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterHeavy(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterPistol(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterFireArms(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterArcheryItem(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterPoleArms(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterLauncher(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterCustom(DayZPlayerType pType)",
      "void CustomBoneRemapping(DayZPlayerType pType)",
      "void DayZPlayerTypeRegisterItems(DayZPlayerType pType)"
    ]
  },
  "ModItemRegisterCallbacks": {
    "parent": null,
    "methods": [
      "void RegisterEmptyHanded(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterOneHanded(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterTwoHanded(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterRestrained(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterSurrender(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterHeavy(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterPistol(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterFireArms(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterArcheryItem(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterPoleArms(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterLauncher(DayZPlayerType pType, DayzPlayerItemBehaviorCfg pBehavior)",
      "void RegisterCustom(DayZPlayerType pType)",
      "void CustomBoneRemapping(DayZPlayerType pType)",
      "void DayZPlayerTypeRegisterItems(DayZPlayerType pType)"
    ]
  },
  "DayZPlayerTypeStepSoundLookupTableImpl": {
    "parent": "DayZPlayerTypeStepSoundLookupTable",
    "methods": [
      "void DayZPlayerTypeStepSoundLookupTableImpl()",
      "void DayZPlayerTypeAttachmentSoundLookupTableImpl()",
      "void DayZPlayerTypeVoiceSoundLookupTableImpl()",
      "void DayZPlayerTypeSoundTableImpl()",
      "void DayZPlayerTypeRegisterSounds(DayZPlayerType pType)"
    ]
  },
  "DayZPlayerTypeAttachmentSoundLookupTableImpl": {
    "parent": "DayZPlayerTypeAttachmentSoundLookupTable",
    "methods": [
      "void DayZPlayerTypeAttachmentSoundLookupTableImpl()",
      "void DayZPlayerTypeVoiceSoundLookupTableImpl()",
      "void DayZPlayerTypeSoundTableImpl()",
      "void DayZPlayerTypeRegisterSounds(DayZPlayerType pType)"
    ]
  },
  "DayZPlayerTypeVoiceSoundLookupTableImpl": {
    "parent": "DayZPlayerTypeVoiceSoundLookupTable",
    "methods": [
      "void DayZPlayerTypeVoiceSoundLookupTableImpl()",
      "void DayZPlayerTypeSoundTableImpl()",
      "void DayZPlayerTypeRegisterSounds(DayZPlayerType pType)"
    ]
  },
  "DayZPlayerTypeSoundTableImpl": {
    "parent": "DayZPlayerTypeAnimTable",
    "methods": [
      "void DayZPlayerTypeSoundTableImpl()",
      "void DayZPlayerTypeRegisterSounds(DayZPlayerType pType)"
    ]
  },
  "DayZPlayerMeleeFightLogic_LightHeavy": {
    "parent": null,
    "methods": [
      "void DayZPlayerMeleeFightLogic_LightHeavy(DayZPlayerImplement player)",
      "void Init(DayZPlayerImplement player)",
      "bool IsInBlock()",
      "void SetBlock(bool block)",
      "bool IsEvading()",
      "bool GetCurrentHitType()",
      "bool CanFight()",
      "void RegisterCooldowns()",
      "float GetAttackTypeByDistanceToTarget(EntityAI pTarget, EMeleeTargetType pTargetType = EMeleeTargetType.ALIGNABLE)",
      "bool HandleFightLogic(int pCurrentCommandID, HumanInputController pInputs, EntityAI pEntityInHands, HumanMovementState pMovementState, out bool pContinueAttack)",
      "bool HandleHitEvent(int pCurrentCommandID, HumanInputController pInputs, InventoryItem itemInHands, HumanMovementState pMovementState, out bool pContinueAttack)",
      "bool HandleInitialFirearmMelee(int pCurrentCommandID, HumanInputController pInputs, InventoryItem itemInHands, HumanMovementState pMovementState, out bool pContinueAttack)",
      "bool HandleInitialMeleeErc(int pCurrentCommandID, HumanInputController pInputs, InventoryItem itemInHands, HumanMovementState pMovementState, out bool pContinueAttack)",
      "bool HandleProneKick(int pCurrentCommandID, HumanInputController pInputs, InventoryItem itemInHands, HumanMovementState pMovementState, out bool pContinueAttack)",
      "bool HandleSprintAttack(int pCurrentCommandID, HumanInputController pInputs, InventoryItem itemInHands, HumanMovementState pMovementState, out bool pContinueAttack)",
      "bool HandleComboHit(int pCurrentCommandID, HumanInputController pInputs, InventoryItem itemInHands, HumanMovementState pMovementState, out bool pContinueAttack)",
      "void EvaluateHit(InventoryItem weapon)",
      "void EvaluateHit_Player(InventoryItem weapon, Object target)",
      "void EvaluateHit_Infected(InventoryItem weapon, Object target)",
      "bool EvaluateFinisherAttack(InventoryItem weapon, Object target)",
      "void EvaluateHit_Common(InventoryItem weapon, Object target, bool forcedDummy=false, int forcedWeaponMode = -1)",
      "void EvaluateHit_NonAlignableObjects(InventoryItem weapon, Object target)",
      "bool WeaponDestroyedCheck(InventoryItem weapon, out string ammo)",
      "void GetTargetData(out EntityAI target, out EMeleeTargetType targetType)",
      "bool DummyHitSelector(EMeleeHitType hitType, out string ammoType)",
      "bool IsBehindEntity(int angle, DayZPlayer source, Object target)",
      "void SetCooldown(float time, EFightLogicCooldownCategory cooldownCategory)",
      "void ResetCooldown(EFightLogicCooldownCategory cooldownCategory)",
      "void EnableControls()",
      "void DisableControls()",
      "void DamageHands(DayZPlayer DZPlayer, ClothingBase gloves, InventoryItem itemInHands)",
      "int DetermineFinisherAnimation(int finisher_type)",
      "string DetermineFinisherAmmo(int finisher_type)",
      "bool IsShortDistance(EntityAI pTarget, float pDistanceSq)",
      "int GetFinisherType(InventoryItem weapon, EntityAI target)",
      "bool IsHitTypeFinisher(int type)",
      "int DetermineSpecificFinisherType(ItemBase weapon, int component)"
    ]
  },
  "AITargetCallbacksPlayer": {
    "parent": null,
    "methods": [
      "void AITargetCallbacksPlayer(PlayerBase pPlayer)",
      "float GetMaxVisionRangeModifier(EntityAI pApplicant)",
      "static int StanceToMovementIdxTranslation(HumanMovementState pState)"
    ]
  },
  "PlayerConsumeData": {
    "parent": null,
    "methods": []
  },
  "SurvivorBase": {
    "parent": "PlayerBaseClient",
    "methods": [
      "void SurvivorBase()",
      "int GetHideIconMask()"
    ]
  },
  "BarbedWireTrigger": {
    "parent": null,
    "methods": [
      "void OnEnter( Object obj )",
      "void SetparentObject( ItemBase wire )",
      "void SoundElectricShock()",
      "void SoundCollision()"
    ]
  },
  "ContaminatedTrigger": {
    "parent": "EffectTrigger",
    "methods": [
      "string GetDisplayName()",
      "void OnEnterServerEvent( TriggerInsider insider )",
      "void OnLeaveServerEvent( TriggerInsider insider )",
      "void OnEnterClientEvent( TriggerInsider insider )",
      "void OnLeaveClientEvent( TriggerInsider insider )",
      "void OnStayStartServerEvent(int nrOfInsiders)",
      "void OnStayFinishServerEvent()",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "string GetAmbientSoundsetName()",
      "void ContaminatedTrigger_Dynamic()",
      "void SetAreaState( int state )",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)",
      "void OnVariablesSynchronized()"
    ]
  },
  "ContaminatedTrigger_Dynamic": {
    "parent": null,
    "methods": [
      "void ContaminatedTrigger_Dynamic()",
      "void SetAreaState( int state )",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)",
      "void OnVariablesSynchronized()",
      "string GetAmbientSoundsetName()"
    ]
  },
  "ContaminatedTrigger_Local": {
    "parent": null,
    "methods": [
      "string GetAmbientSoundsetName()"
    ]
  },
  "CylinderTrigger": {
    "parent": null,
    "methods": [
      "void EOnInit(IEntity other, int extra)"
    ]
  },
  "EffectTrigger": {
    "parent": null,
    "methods": [
      "void EffectTrigger()",
      "void SetLocalEffects( int aroundPartId, int tinyPartId, int ppeRequesterIdx )",
      "void Init(EffectArea area, int priority)",
      "int GetEffectsPriority()",
      "string GetAmbientSoundsetName()",
      "void SetupClientEffects(bool enable, notnull PlayerBase player)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "bool CanAddObjectAsInsider(Object object)",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)",
      "void OnEnterServerEvent( TriggerInsider insider )",
      "void OnEnterClientEvent( TriggerInsider insider )",
      "void OnLeaveServerEvent( TriggerInsider insider )",
      "void OnLeaveClientEvent( TriggerInsider insider )",
      "bool ShouldRemoveInsider( TriggerInsider insider )",
      "static void TriggerEffect( EntityAI insider, typename triggerType )",
      "void DebugDmgTrigger( vector pos, vector orientation, vector min, vector max, float radius, string dmgType, array<ref TriggerInsider> insiders)"
    ]
  },
  "GeyserTrigger": {
    "parent": null,
    "methods": [
      "void GeyserTrigger()",
      "void EEInit()",
      "string GetDisplayName()",
      "void EEDelete( EntityAI parent )",
      "void OnEnterServerEvent( TriggerInsider insider )",
      "void OnLeaveServerEvent( TriggerInsider insider )",
      "void OnEnterClientEvent( TriggerInsider insider )",
      "void OnLeaveClientEvent( TriggerInsider insider )",
      "void OnVariablesSynchronized()",
      "void UpdateGeyserState()",
      "void RandomizeMouthPos()",
      "void StopEffects()",
      "void AddGeyserState(EGeyserState state)",
      "void RemoveGeyserState(EGeyserState state)",
      "bool IsSubmerged()"
    ]
  },
  "HotSpringTrigger": {
    "parent": null,
    "methods": [
      "void EEInit()",
      "string GetDisplayName()",
      "void EEDelete( EntityAI parent )",
      "void OnEnterServerEvent( TriggerInsider insider )",
      "void OnLeaveServerEvent( TriggerInsider insider )",
      "void OnEnterClientEvent( TriggerInsider insider )",
      "void OnLeaveClientEvent( TriggerInsider insider )",
      "void SpawnVaporEffect()",
      "static void ApplyEffects(PlayerBase player)"
    ]
  },
  "ManTrigger": {
    "parent": null,
    "methods": [
      "void EOnInit(IEntity other, int extra)",
      "bool CanAddObjectAsInsider(Object object)"
    ]
  },
  "SphereTrigger": {
    "parent": null,
    "methods": [
      "void EOnInit(IEntity other, int extra)"
    ]
  },
  "SpookyTrigger": {
    "parent": "EffectTrigger",
    "methods": [
      "void OnEnterClientEvent( TriggerInsider insider )",
      "void OnLeaveClientEvent( TriggerInsider insider )",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)"
    ]
  },
  "SpookyTrigger23": {
    "parent": "SpookyTrigger",
    "methods": [
      "void OnEnterClientEvent( TriggerInsider insider )",
      "void OnLeaveClientEvent( TriggerInsider insider )",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)"
    ]
  },
  "TrapTrigger": {
    "parent": null,
    "methods": [
      "void TrapTrigger()",
      "void SetparentObject( TrapBase obj )",
      "bool CanAddObjectAsInsider(Object object)",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnLeaveServerEvent(TriggerInsider insider)",
      "void SetEnabled()",
      "void DebugSendDmgTrigger()",
      "void OnEnterServerEvent( TriggerInsider insider )"
    ]
  },
  "TripWireTrigger": {
    "parent": null,
    "methods": [
      "void OnEnterServerEvent( TriggerInsider insider )"
    ]
  },
  "TriggerInsider": {
    "parent": null,
    "methods": [
      "void TriggerInsider(Object obj)",
      "void Trigger()",
      "void EOnInit(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void EOnEnter(IEntity other, int extra)",
      "void EOnLeave(IEntity other, int extra)",
      "void SetExtents(vector mins, vector maxs)",
      "float GetRadius(vector min, vector max)",
      "int GetInsiderIndexForObject(Object object)",
      "void OnEnterBeginEvent(TriggerInsider insider)",
      "void OnLeaveBeginEvent(TriggerInsider insider)",
      "void OnEnter(Object obj)",
      "void OnLeave(Object obj)",
      "bool CanAddObjectAsInsider(Object object)",
      "bool ShouldRemoveInsider(TriggerInsider insider)",
      "bool ShouldRemoveInsiderNoLeave(TriggerInsider insider)",
      "void AddInsider(Object obj)",
      "void RemoveInsider(TriggerInsider insider, int index = -1)",
      "void RemoveInsiderByObject(Object object)",
      "void UpdateInsiders(int timeout)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void DebugSendDmgTrigger()",
      "void DebugDmgTrigger( vector pos, vector orientation, vector min, vector max, float radius, string dmgType, array<ref TriggerInsider> insiders)",
      "void CleanupDebugShapes(array<Shape> shapes)"
    ]
  },
  "Trigger": {
    "parent": null,
    "methods": [
      "void Trigger()",
      "void EOnInit(IEntity other, int extra)",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void EOnEnter(IEntity other, int extra)",
      "void EOnLeave(IEntity other, int extra)",
      "void SetExtents(vector mins, vector maxs)",
      "float GetRadius(vector min, vector max)",
      "int GetInsiderIndexForObject(Object object)",
      "void OnEnterBeginEvent(TriggerInsider insider)",
      "void OnLeaveBeginEvent(TriggerInsider insider)",
      "void OnEnter(Object obj)",
      "void OnLeave(Object obj)",
      "bool CanAddObjectAsInsider(Object object)",
      "bool ShouldRemoveInsider(TriggerInsider insider)",
      "bool ShouldRemoveInsiderNoLeave(TriggerInsider insider)",
      "void AddInsider(Object obj)",
      "void RemoveInsider(TriggerInsider insider, int index = -1)",
      "void RemoveInsiderByObject(Object object)",
      "void UpdateInsiders(int timeout)",
      "void OnRPC(PlayerIdentity sender, int rpc_type, ParamsReadContext ctx)",
      "void DebugSendDmgTrigger()",
      "void DebugDmgTrigger( vector pos, vector orientation, vector min, vector max, float radius, string dmgType, array<ref TriggerInsider> insiders)",
      "void CleanupDebugShapes(array<Shape> shapes)"
    ]
  },
  "TriggerEffectManager": {
    "parent": null,
    "methods": [
      "void TriggerEffectManager()",
      "static void DestroyInstance()",
      "void RegisterTriggerType( EffectTrigger effectTrigger )",
      "void OnPlayerEnter( notnull PlayerBase player, notnull EffectTrigger trigger )",
      "void OnPlayerInsideEffectAreaEnter(PlayerBase player)",
      "void OnPlayerInsideEffectAreaExit(PlayerBase player)",
      "void OnPlayerExit( notnull PlayerBase player, notnull EffectTrigger trigger )",
      "bool IsPlayerInTriggerType( notnull PlayerBase player, notnull EffectTrigger trigger )"
    ]
  },
  "TriggerEvents": {
    "parent": null,
    "methods": [
      "void Enter(TriggerInsider insider)",
      "void OnEnterBeginEvent(TriggerInsider insider)",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnEnterEndEvent(TriggerInsider insider)",
      "void StayStart(int nrOfInsiders)",
      "void OnStayStartBeginEvent(int nrOfInsiders)",
      "void OnStayStartServerEvent(int nrOfInsiders)",
      "void OnStayStartClientEvent(int nrOfInsiders)",
      "void OnStayStartEndEvent(int nrOfInsiders)",
      "void Stay(TriggerInsider insider, float deltaTime)",
      "void OnStayBeginEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayServerEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayClientEvent(TriggerInsider insider, float deltaTime)",
      "void OnStayEndEvent(TriggerInsider insider, float deltaTime)",
      "void StayFinish()",
      "void OnStayFinishBeginEvent()",
      "void OnStayFinishServerEvent()",
      "void OnStayFinishClientEvent()",
      "void OnStayFinishEndEvent()",
      "void Leave(TriggerInsider insider)",
      "void OnLeaveBeginEvent(TriggerInsider insider)",
      "void OnLeaveServerEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)",
      "void OnLeaveEndEvent(TriggerInsider insider)"
    ]
  },
  "UndergroundBunkerTriggerData": {
    "parent": null,
    "methods": [
      "void Init(UndergroundBunkerTriggerData data)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)"
    ]
  },
  "UndergroundBunkerTrigger": {
    "parent": null,
    "methods": [
      "void Init(UndergroundBunkerTriggerData data)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)"
    ]
  },
  "UndergroundTriggerCarrier": {
    "parent": "UndergroundTriggerCarrierBase",
    "methods": [
      "void UndergroundTriggerCarrier()",
      "void OnVariablesSynchronized()",
      "bool CanSpawnTrigger()",
      "void RequestDelayedTriggerSpawn()",
      "void SpawnTrigger()",
      "void Init(JsonUndergroundAreaTriggerData data)",
      "bool CanAddObjectAsInsider(Object object)",
      "void EOnInit(IEntity other, int extra)",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnLeaveServerEvent(TriggerInsider insider)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)"
    ]
  },
  "UndergroundTrigger": {
    "parent": null,
    "methods": [
      "void Init(JsonUndergroundAreaTriggerData data)",
      "bool CanAddObjectAsInsider(Object object)",
      "void EOnInit(IEntity other, int extra)",
      "void OnEnterServerEvent(TriggerInsider insider)",
      "void OnLeaveServerEvent(TriggerInsider insider)",
      "void OnEnterClientEvent(TriggerInsider insider)",
      "void OnLeaveClientEvent(TriggerInsider insider)"
    ]
  },
  "VolcanicTrigger": {
    "parent": null,
    "methods": [
      "void EEInit()",
      "string GetDisplayName()",
      "void EEDelete( EntityAI parent )",
      "void OnEnterServerEvent( TriggerInsider insider )",
      "void OnLeaveServerEvent( TriggerInsider insider )",
      "void OnEnterClientEvent( TriggerInsider insider )",
      "void OnLeaveClientEvent( TriggerInsider insider )",
      "void SpawnVaporEffect()",
      "static void ApplyEffects(PlayerBase player)"
    ]
  },
  "DimmingConfig": {
    "parent": null,
    "methods": [
      "void SetRandomBrigthnessLimits(float min, float max)",
      "void SetRandomDimSpeedLimits(float min, float max)",
      "void SetRandomDurationLimits(float min, float max)",
      "void SetRandomBrightenSpeedLimits(float min, float max)",
      "void SetRandomPauseDurationLimits(float min, float max)",
      "void AddDimmingPattern(array<int> brightnessTarget, array<float> dimSpeed, array<float> dimDuration, array<float> brightenSpeed, array<float> pause)",
      "void SetPatternQueueRepeat(int val)"
    ]
  },
  "LightDimming": {
    "parent": null,
    "methods": [
      "void LightDimming(ScriptedLightBase light, float baseBrightness, DimmingConfig dimCfg)",
      "void AddConfig(DimmingConfig cfg)",
      "void SetDimmingVal(float val)",
      "void AdvanceState(ELightDimmingState lastState)",
      "void SelectPattern()",
      "void SwapConfig(int index)",
      "void HandleDimming(float timeSlice)"
    ]
  },
  "AnniversaryBoxLight": {
    "parent": "PointLightBase",
    "methods": [
      "void AnniversaryBoxLight()"
    ]
  },
  "AnniversaryMainLight": {
    "parent": null,
    "methods": [
      "void AnniversaryMainLight()"
    ]
  },
  "BlowtorchLight": {
    "parent": null,
    "methods": [
      "void BlowtorchLight()"
    ]
  },
  "BonfireLight": {
    "parent": "PointLightBase",
    "methods": [
      "void BonfireLight()",
      "void OnFrameLightSource(IEntity other, float timeSlice)"
    ]
  },
  "BrightnessTestLight": {
    "parent": "PointLightBase",
    "methods": [
      "void BrightnessTestLight()",
      "void OnFrameLightSource(IEntity other, float timeSlice)"
    ]
  },
  "BuoyLight": {
    "parent": "PointLightBase",
    "methods": [
      "void BuoyLight()",
      "void EOnFrame(IEntity other, float timeSlice)",
      "void MooringBuoyLight()"
    ]
  },
  "MooringBuoyLight": {
    "parent": "PointLightBase",
    "methods": [
      "void MooringBuoyLight()"
    ]
  },
  "ChemlightLight": {
    "parent": "PointLightBase",
    "methods": [
      "void ChemlightLight()",
      "void SetIntensity( float coef, float time )",
      "void SetColorToWhite()",
      "void SetColorToRed()",
      "void SetColorToGreen()",
      "void SetColorToBlue()",
      "void SetColorToYellow()"
    ]
  },
  "EntranceLight": {
    "parent": "PointLightBase",
    "methods": [
      "void EntranceLight()",
      "void EntranceLightStairs1()"
    ]
  },
  "EntranceLightStairs1": {
    "parent": null,
    "methods": [
      "void EntranceLightStairs1()"
    ]
  },
  "EntranceLightStairs2": {
    "parent": null,
    "methods": []
  },
  "EntranceLightMain1": {
    "parent": null,
    "methods": []
  },
  "EntranceLightMain2": {
    "parent": null,
    "methods": []
  },
  "FireplaceLight": {
    "parent": "PointLightBase",
    "methods": [
      "void FireplaceLight()",
      "void SetInteriorMode()",
      "void SetExteriorMode()"
    ]
  },
  "FlareLight": {
    "parent": "PointLightBase",
    "methods": [
      "void FlareLight()",
      "void FlareLightRed()",
      "void FlareLightGreen()",
      "void FlareLightBlue()",
      "void FlareLightContamination()"
    ]
  },
  "FlareLightRed": {
    "parent": "FlareLight",
    "methods": [
      "void FlareLightRed()",
      "void FlareLightGreen()",
      "void FlareLightBlue()",
      "void FlareLightContamination()"
    ]
  },
  "FlareLightGreen": {
    "parent": "FlareLight",
    "methods": [
      "void FlareLightGreen()",
      "void FlareLightBlue()",
      "void FlareLightContamination()"
    ]
  },
  "FlareLightBlue": {
    "parent": "FlareLight",
    "methods": [
      "void FlareLightBlue()",
      "void FlareLightContamination()"
    ]
  },
  "FlareLightContamination": {
    "parent": "FlareLightRed",
    "methods": [
      "void FlareLightContamination()"
    ]
  },
  "GoatLight": {
    "parent": "PointLightBase",
    "methods": [
      "void GoatLight()"
    ]
  },
  "MuzzleFlashLight": {
    "parent": "PointLightBase",
    "methods": [
      "void MuzzleFlashLight()",
      "void MuzzleFlashLight_1()",
      "void MuzzleFlashLight_2()"
    ]
  },
  "MuzzleFlashLight_1": {
    "parent": "PointLightBase",
    "methods": [
      "void MuzzleFlashLight_1()",
      "void MuzzleFlashLight_2()"
    ]
  },
  "MuzzleFlashLight_2": {
    "parent": "PointLightBase",
    "methods": [
      "void MuzzleFlashLight_2()"
    ]
  },
  "PartyLight": {
    "parent": "PointLightBase",
    "methods": [
      "void PartyLight()",
      "void OnFrameLightSource(IEntity other, float timeSlice)"
    ]
  },
  "PersonalLight": {
    "parent": "PointLightBase",
    "methods": [
      "void PersonalLight()",
      "void OnFrameLightSource(IEntity other, float timeSlice)"
    ]
  },
  "PortableGasLampLight": {
    "parent": "PointLightBase",
    "methods": [
      "void PortableGasLampLight()"
    ]
  },
  "RoadflareLight": {
    "parent": "PointLightBase",
    "methods": [
      "void RoadflareLight()"
    ]
  },
  "StoveLight": {
    "parent": "PointLightBase",
    "methods": [
      "void StoveLight()"
    ]
  },
  "TorchLight": {
    "parent": "PointLightBase",
    "methods": [
      "void TorchLight()",
      "void OnFrameLightSource(IEntity other, float timeSlice)"
    ]
  },
  "WarheadStorageLight": {
    "parent": "PointLightBase",
    "methods": [
      "void WarheadStorageLight()",
      "void EOnFrame(IEntity other, float timeSlice)"
    ]
  },
  "XmasSleighLight": {
    "parent": "PointLightBase",
    "methods": [
      "void XmasSleighLight()"
    ]
  },
  "XmasTreeLight": {
    "parent": "PointLightBase",
    "methods": [
      "void XmasTreeLight()"
    ]
  },
  "ZombieMummyLight": {
    "parent": "PointLightBase",
    "methods": [
      "void ZombieMummyLight()"
    ]
  },
  "CarLightBase": {
    "parent": "SpotLightBase",
    "methods": [
      "void CarLightBase()",
      "void AggregateLight()",
      "void SegregateLight()"
    ]
  },
  "FlashlightLight": {
    "parent": "SpotLightBase",
    "methods": [
      "void FlashlightLight()",
      "void SetIntensity( float coef, float time )"
    ]
  },
  "HeadtorchLight": {
    "parent": "SpotLightBase",
    "methods": [
      "void HeadtorchLight()",
      "void SetColorToWhite()",
      "void SetColorToRed()",
      "void SetIntensity( float coef, float time )",
      "void PerformVisibilityCheck(EntityAI owner)"
    ]
  },
  "PistollightLight": {
    "parent": "SpotLightBase",
    "methods": [
      "void PistollightLight()",
      "void SetIntensity( float coef, float time )",
      "void UpdateLightMode( string slotName )"
    ]
  },
  "SpotlightLight": {
    "parent": "SpotLightBase",
    "methods": [
      "void SpotlightLight()"
    ]
  },
  "UniversallightLight": {
    "parent": "SpotLightBase",
    "methods": [
      "void UniversallightLight()",
      "void SetIntensity( float coef, float time )",
      "void UpdateLightMode( string slotName )"
    ]
  },
  "Boat_01_ColorBase": {
    "parent": null,
    "methods": [
      "void Boat_01()",
      "void EEInit()",
      "int GetAnimInstance()",
      "int GetSeatAnimationType(int posIdx)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanDisplayAttachmentCategory(string category_name)",
      "bool CanDisplayCargo()",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "void OnDamageDestroyed(int oldLevel)",
      "void OnDebugSpawn()"
    ]
  },
  "Boat_01_Blue": {
    "parent": null,
    "methods": []
  },
  "Boat_01_Orange": {
    "parent": null,
    "methods": []
  },
  "Boat_01_Black": {
    "parent": null,
    "methods": []
  },
  "Boat_01_Camo": {
    "parent": null,
    "methods": []
  },
  "CivilianSedan": {
    "parent": "CarScript",
    "methods": [
      "void CivilianSedan()",
      "void EEInit()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "int GetAnimInstance()",
      "float GetTransportCameraDistance()",
      "int GetSeatAnimationType(int posIdx)",
      "bool CanReleaseAttachment( EntityAI attachment )",
      "bool CanManipulateSpareWheel(string slotSelectionName)",
      "bool CanDisplayAttachmentCategory(string category_name)",
      "bool CanDisplayCargo()",
      "int GetCarDoorsState( string slotType )",
      "bool CrewCanGetThrough( int posIdx )",
      "string GetDoorSelectionNameFromSeatPos(int posIdx)",
      "string GetDoorInvSlotNameFromSeatPos(int posIdx)",
      "float OnSound(CarSoundCtrl ctrl, float oldValue)",
      "string GetAnimSourceFromSelection(string selection)",
      "bool IsVitalTruckBattery()",
      "bool IsVitalGlowPlug()",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "bool CanReachDoorsFromSeat( string pDoorsSelection, int pCurrentSeat )",
      "void OnDebugSpawn()",
      "float GetPushForceCoefficientMultiplier()"
    ]
  },
  "CivilianSedan_Wine": {
    "parent": "CivilianSedan",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "CivilianSedan_Black": {
    "parent": "CivilianSedan",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Hatchback_02": {
    "parent": "CarScript",
    "methods": [
      "void Hatchback_02()",
      "void EEInit()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "int GetAnimInstance()",
      "int GetSeatAnimationType(int posIdx)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanManipulateSpareWheel(string slotSelectionName)",
      "bool CanDisplayAttachmentCategory( string category_name )",
      "bool CanDisplayCargo()",
      "int GetCarDoorsState(string slotType)",
      "bool CrewCanGetThrough(int posIdx)",
      "string GetDoorSelectionNameFromSeatPos(int posIdx)",
      "string GetDoorInvSlotNameFromSeatPos(int posIdx)",
      "float OnSound(CarSoundCtrl ctrl, float oldValue)",
      "string GetAnimSourceFromSelection( string selection )",
      "bool IsVitalTruckBattery()",
      "bool IsVitalGlowPlug()",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "bool CanReachDoorsFromSeat(string pDoorsSelection, int pCurrentSeat)",
      "void OnDebugSpawn()"
    ]
  },
  "Hatchback_02_Black": {
    "parent": "Hatchback_02",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Hatchback_02_Blue": {
    "parent": "Hatchback_02",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "OffroadHatchback": {
    "parent": "CarScript",
    "methods": [
      "void OffroadHatchback()",
      "void EEInit()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "int GetAnimInstance()",
      "float GetTransportCameraDistance()",
      "int GetSeatAnimationType( int posIdx )",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanManipulateSpareWheel(string slotSelectionName)",
      "bool CanDisplayAttachmentCategory( string category_name )",
      "bool CanDisplayCargo()",
      "int GetCarDoorsState(string slotType)",
      "bool CrewCanGetThrough(int posIdx)",
      "string GetDoorSelectionNameFromSeatPos(int posIdx)",
      "string GetDoorInvSlotNameFromSeatPos(int posIdx)",
      "float OnSound(CarSoundCtrl ctrl, float oldValue)",
      "string GetAnimSourceFromSelection( string selection )",
      "string GetDoorConditionPointFromSelection(string selection)",
      "int GetCrewIndex(string selection)",
      "bool IsVitalTruckBattery()",
      "bool IsVitalGlowPlug()",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "bool CanReachDoorsFromSeat( string pDoorsSelection, int pCurrentSeat )",
      "int GetSeatIndexFromDoor( string pDoorSelection )",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "OffroadHatchback_White": {
    "parent": "OffroadHatchback",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "OffroadHatchback_Blue": {
    "parent": "OffroadHatchback",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Offroad_02": {
    "parent": "CarScript",
    "methods": [
      "void Offroad_02()",
      "void EEInit()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "int GetAnimInstance()",
      "float GetTransportCameraDistance()",
      "int GetSeatAnimationType(int posIdx)",
      "bool CanReleaseAttachment( EntityAI attachment )",
      "bool CanManipulateSpareWheel(string slotSelectionName)",
      "bool CanDisplayAttachmentCategory(string category_name)",
      "bool CanDisplayCargo()",
      "int GetCarDoorsState(string slotType)",
      "bool CrewCanGetThrough( int posIdx )",
      "string GetDoorSelectionNameFromSeatPos(int posIdx)",
      "string GetDoorInvSlotNameFromSeatPos(int posIdx)",
      "float OnSound(CarSoundCtrl ctrl, float oldValue)",
      "string GetAnimSourceFromSelection(string selection)",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "bool CanReachDoorsFromSeat(string pDoorsSelection, int pCurrentSeat)",
      "bool IsVitalTruckBattery()",
      "bool IsVitalSparkPlug()",
      "bool IsVitalRadiator()",
      "void OnDebugSpawn()"
    ]
  },
  "Sedan_02": {
    "parent": "CarScript",
    "methods": [
      "void Sedan_02()",
      "void EEInit()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "int GetAnimInstance()",
      "int GetSeatAnimationType(int posIdx)",
      "bool CanReleaseAttachment( EntityAI attachment )",
      "bool CanManipulateSpareWheel(string slotSelectionName)",
      "bool CanDisplayAttachmentCategory(string category_name)",
      "bool CanDisplayCargo()",
      "int GetCarDoorsState(string slotType)",
      "bool CrewCanGetThrough( int posIdx )",
      "string GetDoorSelectionNameFromSeatPos(int posIdx)",
      "string GetDoorInvSlotNameFromSeatPos(int posIdx)",
      "float OnSound(CarSoundCtrl ctrl, float oldValue)",
      "string GetAnimSourceFromSelection( string selection )",
      "bool IsVitalTruckBattery()",
      "bool IsVitalGlowPlug()",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "bool CanReachDoorsFromSeat(string pDoorsSelection, int pCurrentSeat)",
      "void OnDebugSpawn()"
    ]
  },
  "Sedan_02_Red": {
    "parent": "Sedan_02",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Sedan_02_Grey": {
    "parent": "Sedan_02",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Truck_01_Base": {
    "parent": "CarScript",
    "methods": [
      "void Truck_01_Base()",
      "void EEInit()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "float GetTransportCameraDistance()",
      "int GetAnimInstance()",
      "int GetSeatAnimationType(int posIdx)",
      "bool CanReleaseAttachment(EntityAI attachment)",
      "bool CanManipulateSpareWheel(string slotSelectionName)",
      "bool CrewCanGetThrough( int posIdx )",
      "string GetDoorSelectionNameFromSeatPos(int posIdx)",
      "string GetDoorInvSlotNameFromSeatPos(int posIdx)",
      "float OnSound(CarSoundCtrl ctrl, float oldValue)",
      "void OnAnimationPhaseStarted(string animSource, float phase)",
      "int GetCarDoorsState( string slotType )",
      "string GetAnimSourceFromSelection( string selection )",
      "bool CanReachSeatFromSeat(int currentSeat, int nextSeat)",
      "bool CanReachDoorsFromSeat(string pDoorsSelection, int pCurrentSeat)",
      "int GetSeatIndexFromDoor( string pDoorSelection )",
      "bool IsVitalCarBattery()",
      "bool IsVitalSparkPlug()",
      "bool IsVitalGlowPlug()",
      "bool IsVitalEngineBelt()",
      "bool IsVitalRadiator()",
      "void SetActions()",
      "void OnDebugSpawn()"
    ]
  },
  "Truck_01_Cargo": {
    "parent": "Truck_01_Chassis",
    "methods": []
  },
  "Truck_01_Chassis": {
    "parent": "Truck_01_Base",
    "methods": []
  },
  "Truck_01_Covered": {
    "parent": "Truck_01_Base",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Truck_01_Covered_Orange": {
    "parent": "Truck_01_Covered",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Truck_01_Covered_Blue": {
    "parent": "Truck_01_Covered",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "Truck_02": {
    "parent": "CarScript",
    "methods": [
      "void Truck_02()",
      "void EEInit()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "int GetAnimInstance()",
      "int GetSeatAnimationType( int posIdx )",
      "int GetCarDoorsState( string slotType )",
      "bool CrewCanGetThrough( int posIdx )",
      "float OnSound( CarSoundCtrl ctrl, float oldValue )",
      "string GetAnimSourceFromSelection( string selection )",
      "bool IsVitalCarBattery()",
      "bool IsVitalSparkPlug()",
      "bool IsVitalGlowPlug()",
      "bool IsVitalEngineBelt()",
      "bool IsVitalRadiator()",
      "bool CanReachSeatFromSeat( int currentSeat, int nextSeat )",
      "bool CanReachDoorsFromSeat( string pDoorsSelection, int pCurrentSeat )",
      "int GetSeatIndexFromDoor( string pDoorSelection )",
      "void OnDebugSpawn()"
    ]
  },
  "Van_01": {
    "parent": "CarScript",
    "methods": [
      "void Van_01()",
      "void EEInit()",
      "void OnEngineStart()",
      "void OnEngineStop()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "int GetAnimInstance()",
      "int GetSeatAnimationType( int posIdx )",
      "int GetCarDoorsState( string slotType )",
      "bool CrewCanGetThrough( int posIdx )",
      "float OnSound( CarSoundCtrl ctrl, float oldValue )",
      "string GetAnimSourceFromSelection( string selection )",
      "string GetDoorConditionPointFromSelection( string selection )",
      "bool IsVitalTruckBattery()",
      "bool IsVitalGlowPlug()",
      "bool CanReachSeatFromSeat( int currentSeat, int nextSeat )",
      "bool CanReachDoorsFromSeat( string pDoorsSelection, int pCurrentSeat )"
    ]
  },
  "DeveloperFreeCamera": {
    "parent": null,
    "methods": [
      "static void OnInit()",
      "static void FreeCameraToggle(PlayerBase player, bool teleport_player = false)",
      "static void EnableFreeCameraSceneEditor(PlayerBase player)",
      "static bool IsFreeCameraEnabled()",
      "static void EnableFreeCamera(PlayerBase player)",
      "static void DisableFreeCamera(PlayerBase player, bool teleport_player = false)",
      "static void OnSetFreeCameraEvent(PlayerBase player, FreeDebugCamera camera)"
    ]
  },
  "DeveloperTeleport": {
    "parent": null,
    "methods": [
      "static void TeleportAtCursor()",
      "static void TeleportAtCursorEx()",
      "static void SetPlayerPosition(PlayerBase player, vector position, bool breakSync = false)",
      "static void SetPlayerDirection(PlayerBase player, vector direction)",
      "static void OnRPC(PlayerBase player, int rpc_type, ParamsReadContext ctx)",
      "void OnRPCSetPlayerPosition(PlayerBase player, ParamsReadContext ctx)",
      "void OnRPCSetPlayerDirection(PlayerBase player, ParamsReadContext ctx)"
    ]
  },
  "PluginCharPlacement": {
    "parent": "PluginBase",
    "methods": [
      "void CheckInit()",
      "void Init()",
      "void OnUpdate(float delta_time)",
      "void OnDestroy()"
    ]
  },
  "PluginDoorRuler": {
    "parent": "PluginBase",
    "methods": [
      "void CheckInit()",
      "void Init()",
      "void OnUpdate(float delta_time)"
    ]
  },
  "PluginDrawCheckerboard": {
    "parent": "PluginBase",
    "methods": [
      "void PluginDrawCheckerboard()",
      "void CreateWidgetOverlay()",
      "bool IsActive()",
      "bool IsEven(int num)",
      "void ShowWidgets(bool show)",
      "void Show()",
      "void Hide()"
    ]
  },
  "PluginNutritionDumper": {
    "parent": "PluginBase",
    "methods": []
  },
  "PluginRemotePlayerDebugClient": {
    "parent": "PluginBase",
    "methods": [
      "void OnInit()",
      "void OnUpdate(float delta_time)",
      "void InitWidgets()",
      "void EnableWidgets(bool enable)",
      "void UpdateWidgetsStats()",
      "void UpdateDamageWidget(int index, PlayerBase player)",
      "void UpdateDistanceWidget(int index, PlayerBase other_player)",
      "void UpdateStatsWidget(int index, RemotePlayerStatDebug rpd)",
      "void RequestPlayerInfo(PlayerBase player, int type)",
      "void MergeDamage( array<ref RemotePlayerDamageDebug> delta )",
      "void DebugDamage(PlayerBase player)",
      "void OnRPC(ParamsReadContext ctx)"
    ]
  },
  "PluginRemotePlayerDebugServer": {
    "parent": "PluginBase",
    "methods": [
      "void OnUpdate(float delta_time)",
      "void SetWatching(bool enable)",
      "bool GetWatching()",
      "void GatherPlayerInfo()",
      "void SendDebug()",
      "void OnDamageEvent(PlayerBase player, TotalDamageResult damageResult)",
      "void OnRequestReceived(PlayerBase player, bool enable)",
      "void OnRPC(ParamsReadContext ctx, PlayerBase player)"
    ]
  },
  "PluginTargetTemperature": {
    "parent": "PluginBase",
    "methods": [
      "void Init(PlayerBase player)",
      "void ShowDebug(bool show)"
    ]
  },
  "PluginUniversalTemperatureSourceClient": {
    "parent": "PluginBase",
    "methods": [
      "void PluginUniversalTemperatureSourceClient()",
      "void OnInit()",
      "void OnUpdate(float delta_time)",
      "void InitWidgets()",
      "void DrawDebugs()",
      "void ProcessUniversalTemperatureSources()",
      "float CalcTemperatureFromTemperatureSource(notnull UTemperatureSourceDebug utsd)",
      "void EnableWidgets(bool enable)",
      "void UpdateStatWidgets()",
      "void UpdateStatWidget(int rowIndex, UTemperatureSourceDebug utsd)",
      "void RequestUniversalTemperatureSources(PlayerBase player, int enable)",
      "void PrintedDebug()",
      "void OnRPC(ParamsReadContext ctx)"
    ]
  },
  "PluginUniversalTemperatureSourceServer": {
    "parent": "PluginBase",
    "methods": [
      "void PluginUniversalTemperatureSourceServer()",
      "void OnUpdate(float delta_time)",
      "void GatherTemperatureSources(PlayerBase player)",
      "void SendDebug()",
      "void OnRequestReceived(PlayerBase player, bool enable)",
      "void OnRPC(ParamsReadContext ctx, PlayerBase player)"
    ]
  },
  "PluginDiagMenu": {
    "parent": null,
    "methods": [
      "void OnInit()",
      "void OnDestroy()",
      "void RegisterDiags()",
      "void RegisterDeveloperDiags()",
      "int GetModdedDiagID()",
      "int GetModdedRootMenu()",
      "void RegisterModdedDiagsIDs()",
      "void RegisterModdedDiags()",
      "void OnRPC(PlayerBase player, int rpc_type, ParamsReadContext ctx)",
      "void GoUnconscious(PlayerBase player)",
      "void InitTimeAccel()",
      "void SetTimeAccelMenuState(bool enable, int bigFactor, float smallFactor, int bitmask)",
      "void BindCallbacks()",
      "static void CBModdedDiadIDsExampleBool(bool enabled)",
      "static void CBModdedDiadIDsExampleRange(float value)"
    ]
  },
  "PluginDiagMenuClient": {
    "parent": null,
    "methods": [
      "void OnInit()",
      "void BindCallbacks()",
      "void OnRPC(PlayerBase player, int rpc_type, ParamsReadContext ctx)",
      "void OnUpdate(float delta_time)",
      "void CheckTimeAccel()",
      "static void CBCraftingGenerate(bool enabled, int id)",
      "static void CBCraftingInstant(bool enabled)",
      "static void CBCraftingDump(bool enabled, int id)",
      "static void CBCheatsModifiers(bool enabled)",
      "static void CBCheatsKillPlayer(bool enabled, int id)",
      "static void CBCheatsInvincibility(int value)",
      "static void CBCheatsStaminaDisable(bool enabled)",
      "static void CBCheatsResetPlayer(bool enabled, int id)",
      "static void CBCheatsResetPlayerMax(bool enabled, int id)",
      "static void CBCheatsInventoryAccess(bool enabled)",
      "static void CBCheatsFixItems(bool enabled, int id)",
      "static void CBCreateHit(bool enabled, int id)",
      "static void CBCreateHitLight(bool enabled, int id)",
      "static void CBPlayerAgentsInjectActions(bool enabled)",
      "static void CBSoftSkillsShowDebug(bool enabled)",
      "static void CBSoftSkillsToggleState(bool enabled)",
      "static void CBSoftSkillsToggleModel(bool enabled)",
      "static void CBSoftSkillsSpecialtyValue(float value)",
      "static void CBLifespanBloodyHands(bool enabled)",
      "static void CBLifespanPlaytimeUpdate(float value)",
      "static void CBMiscPersonalLight(bool enabled)",
      "static void CBMiscItemDebugActions(bool enabled)",
      "static void CBMiscLogPlayerStats(bool enabled)",
      "static void CBMiscForceHintIndex(int index)",
      "static void CBMiscPermanentCrossHair(bool enabled)",
      "void UpdateMiscVehicleGetOutBox()",
      "static void CBMiscToggleHud(bool enabled)",
      "static void CBMiscEnvironmentDebug(bool enabled)",
      "void UpdateEnvironmentDebug()",
      "void UpdateMaterialDebug()",
      "void MatGhostDebug()",
      "static void CBMiscEnvironmentLoggingDryWet(bool enabled)",
      "static void CBMiscEnvironmentLoggingItemHeat(bool enabled)",
      "static void CBMiscFallDamageDebug(bool enabled)",
      "void UpdateFallDamageDebug()",
      "static void CBMiscDisplayPlayerInfo(int value)",
      "static void CBMiscUniversalTemperatureSources(bool enabled)",
      "static void CBMiscBulletImpact(bool enabled, int id)",
      "static void CBMiscGoUnconscious(bool enabled, int id)",
      "static void CBMiscGoUnconsciousDelayed(bool enabled, int id)",
      "static void CBMiscQuickRestrain(bool enabled)",
      "static void CBMiscHairHide(bool enabled, int id)",
      "static void CBMiscHairHideAll(bool enabled)",
      "static void CBMiscCamShake(bool enabled, int id)",
      "static void CBMiscQuickFishing(bool enabled)",
      "static void CBMiscShockImpact(bool enabled, int id)",
      "static void ShockImpact()",
      "static void CBMiscPlugArrows(bool enabled)",
      "static void CBMiscTargetableByAI(bool enabled, int id)",
      "static void CBMiscHitIndication()",
      "static void CBMiscHitIndicationSpawnHit(bool enabled, int id)",
      "static void SpawnHitDirEffect()",
      "static void CBDebugMonitor(bool enabled, int id)",
      "static void CBPRADrawAll(bool enabled, int id)",
      "static void CBPRADetect(bool enabled, int id)",
      "static void CBMiscFreezeEntity(bool enabled, int id)",
      "static void FreezeEntity()",
      "static void CBMiscFreezePlayer(bool enabled, int id)",
      "static void FreezePlayer()",
      "static void CBVehicleDebugOutput(int value)",
      "static void CBDumpCrashData(bool value)",
      "static void SimulateMode(bool enabled, int id, int rpc)",
      "static void CBSimulateInfiniteLoop(bool enabled, int id)",
      "static void CBSimulateNullPointer(bool enabled, int id)",
      "static void CBSimulateDivisionByZero(bool enabled, int id)",
      "static void CBSimulateErrorFunction(bool enabled, int id)",
      "static void CBWeaponParticles(bool enabled)",
      "static void CBWeaponDebug(bool enabled)",
      "static void CBWeaponAimNoise(bool enabled)",
      "static void CBWeaponRecoil(bool enabled)",
      "static void CBWeaponUnlimitedAmmo(bool enabled)",
      "static void CBWeaponBurstVersion(int value)",
      "static void CBBleedingSources(bool enabled)",
      "static void CBBleedingDisableBloodLoss(bool enabled)",
      "static void CBBleedingActivateSource(int value)",
      "static void CBBleedingActivateAllSources(bool enabled, int id)",
      "static void CBBleedingActivateSourceLevel(int value)",
      "static void CBBleedingReload(bool enabled, int id)",
      "static void CBBBleedingIndicators()",
      "static void CBLogsActions(bool enabled)",
      "static void CBLogsWeapons(bool enabled)",
      "static void CBLogsSync(bool enabled)",
      "static void CBLogsBaseBuilding(bool enabled)",
      "static void CBLogsSymptoms(bool enabled)",
      "static void CBLogsInventoryMove(bool enabled)",
      "static void CBLogsInventoryReservation(bool enabled)",
      "static void CBLogsInventoryHFSM(bool enabled)",
      "static void CBLogsQuickbar(bool enabled)",
      "static void CBLogsBleedingChances(bool enabled)",
      "static void CBTriggerDebug(bool enabled)",
      "static void CBBaseBuildingWood(bool enabled)",
      "static void CBBaseBuildingGate(bool enabled)",
      "static void CBFinishersFinisherForced(int value)",
      "static void CBCameraToolsEnableRemoteCamera(bool enabled)",
      "static void DiagDebugAction(DebugActionType type, bool enable)",
      "static void EnableDebugSystemClient(ESubscriberSystems system, bool enable)",
      "static void DiagButtonActionParams(bool enabled, int id, ScriptCaller action, Param params)",
      "static void DiagButtonAction(bool enabled, int id, ScriptCaller action)",
      "static void DiagButtonRPC(bool enabled, int id, int rpc, bool serverOnly = false)",
      "static void DiagButtonRPCSelf(bool enabled, int id, int rpc)",
      "static void DiagButtonRPCIntInt(bool enabled, int id, int value, int value2, int rpc, bool serverOnly = false)",
      "static void DiagToggleRPC(bool value, int current, int rpc)",
      "static void DiagToggleRPC(int value, int current, int rpc)",
      "static void DiagToggleRPC(float value, int current, int rpc)",
      "static void DiagToggleRPCServer(bool value, out bool current, int rpc)",
      "static void DiagToggleRPCServer(int value, out int current, int rpc)",
      "static void DiagToggleRPCServer(float value, out float current, int rpc)",
      "static void DiagToggleRPCAction(int value, ScriptCaller action, int current, int rpc)",
      "static void DiagToggleAction(int value, ScriptCaller action, int current)",
      "static void SendDiagRPCSelf(Param value, int rpc)",
      "static void SendDiagRPCSelfBasic(SendDiagRPCSelfBasicParam param)",
      "static void SendDiagRPCSelfParam(SendDiagRPCSelfParamParam param)",
      "static void SendDiagRPC(Param value, int rpc, bool serverOnly = false)",
      "static void SendDiagRPCBasic(SendDiagRPCBasicParam param)",
      "static void SendDiagRPCParam(SendDiagRPCParamParam param)",
      "static void SendDiagRPC(int rpc, bool serverOnly = false)",
      "static void SendDiagRPC(bool value, int rpc, bool serverOnly = false)",
      "static void SendDiagRPC(int value, int rpc, bool serverOnly = false)",
      "static void SendDiagRPC(float value, int rpc, bool serverOnly = false)",
      "static void CBModdedDiadIDsExampleBool(bool enabled)",
      "static void CBModdedDiadIDsExampleRange(float value)"
    ]
  },
  "PluginDiagMenuModded": {
    "parent": null,
    "methods": [
      "void RegisterModdedDiagsIDs()",
      "void RegisterModdedDiags()",
      "void BindCallbacks()",
      "static void CBModdedDiadIDsExampleBool(bool enabled)",
      "static void CBModdedDiadIDsExampleRange(float value)"
    ]
  },
  "DummyDoxygenClass": {
    "parent": null,
    "methods": [
      "void BindCallbacks()",
      "static void CBModdedDiadIDsExampleBool(bool enabled)",
      "static void CBModdedDiadIDsExampleRange(float value)"
    ]
  },
  "PluginDiagMenuClientModded": {
    "parent": null,
    "methods": [
      "void BindCallbacks()",
      "static void CBModdedDiadIDsExampleBool(bool enabled)",
      "static void CBModdedDiadIDsExampleRange(float value)"
    ]
  },
  "PluginDiagMenuServer": {
    "parent": null,
    "methods": [
      "void RegisterDiags()",
      "void OnRPC(PlayerBase player, int rpc_type, ParamsReadContext ctx)",
      "static void SendDataToSubscribersServer(Object target, ESubscriberSystems system, int rpc_type, Param data, bool guaranteed = true)"
    ]
  },
  "PluginConfigHandler": {
    "parent": "PluginFileHandler",
    "methods": [
      "void PluginConfigHandler()",
      "void OnInit()",
      "string GetFileName()",
      "void LoadConfigFile()",
      "void SaveConfigToFile()",
      "void ClearParams()",
      "void RemoveParamByName( string name )",
      "void RenameParam( string name, string new_name )",
      "bool ParamExist(string name)",
      "string ParseParam(CfgParam param)",
      "int GetTextType(string text)"
    ]
  },
  "PluginLocalEnscriptHistory": {
    "parent": "PluginLocalHistoryBase",
    "methods": [
      "string GetSubFolderName()",
      "string GetFileName()"
    ]
  },
  "PluginLocalEnscriptHistoryServer": {
    "parent": "PluginLocalHistoryBase",
    "methods": [
      "string GetSubFolderName()",
      "string GetFileName()"
    ]
  },
  "PluginLocalHistoryBase": {
    "parent": "PluginFileHandler",
    "methods": [
      "void PluginLocalHistoryBase()",
      "void OnInit()",
      "string GetFileName()",
      "void AddNewLine(string text)"
    ]
  },
  "PluginLocalProfile": {
    "parent": "PluginFileHandler",
    "methods": [
      "void PluginLocalProfile()",
      "string GetFileName()",
      "void OnInit()",
      "bool LoadConfigFile()",
      "void SaveConfigToFile()",
      "bool IsTextArray(string text)",
      "string LoadParameter(string param_name)",
      "string LoadSubParameter(string param_name, int sub_array_index, string sub_param_name)",
      "void SaveParameter(string param_name, string value, bool save_in_file = true)",
      "void SaveParameterArray(string param_name, TStringArray value, bool save_in_file = true)",
      "void SaveSubParameterInArray(string param_name, int sub_array_index, string sub_param_name, string sub_param_value, bool save_in_file = true)",
      "void RenameParameter(string old_name, string new_name, bool save_in_file = true)",
      "void RenameParameterArray(string old_name, string new_name, bool save_in_file = true)",
      "void RemoveParameter(string name, bool save_in_file = true)",
      "void RemoveParameterArray(string name, bool save_in_file = true)",
      "void SetParameterString(string name, string value, bool save_in_file = true)",
      "void SetParameterInt(string name, int value, bool save_in_file = true)",
      "void SetParameterFloat(string name, float value, bool save_in_file = true)",
      "void SetParameterBool(string name, bool value, bool save_in_file = true)",
      "void SetParameterArray(string name, TStringArray value, bool save_in_file = true)",
      "void SetSubParameterInArray(string param_name, int sub_array_index, string sub_param_name, string sub_param_value, bool save_in_file = true)",
      "string GetParameterString(string name)"
    ]
  },
  "CatchingContextFishingBase": {
    "parent": null,
    "methods": [
      "void DeserializeData(Param par)"
    ]
  },
  "CatchingContextFishingRodAction": {
    "parent": null,
    "methods": [
      "void Init(Param par)",
      "void InitCatchMethodMask()",
      "void InitCatchEnviroMask()",
      "void CreateResultDataStructure()",
      "void ClearCatchingItemData()",
      "void InitCatchingItemData()",
      "void InitItemValues(EntityAI item)",
      "bool ModifySignalProbability(inout float probability)",
      "float GetChanceCoef()",
      "bool RollCatch()",
      "void ResetSignalCounter()",
      "void GenerateResult()",
      "int GetResultParticleId()",
      "void RecalculateProcessingData()",
      "float GetHookLossChanceModifierClamped()",
      "float GetBaitLossChanceModifierClamped()",
      "float GetActionCycleTime()",
      "float RandomizeSignalDuration()",
      "float RandomizeSignalStartTime()",
      "void TryHookLoss()",
      "void RemoveItemSafe(EntityAI item)",
      "void TryBaitLoss()",
      "void TryDamageItems()",
      "void OnBeforeSpawnSignalHit()",
      "void OnAfterSpawnSignalHit()",
      "void OnSignalMiss()",
      "void OnSignalPass()",
      "float GetSignalPoissonMean()",
      "int GetSignalMax()"
    ]
  },
  "CatchingContextTrapsBase": {
    "parent": null,
    "methods": [
      "void DeserializeData(Param par)",
      "void CreateResultDataStructure()",
      "void ClearCatchingItemData()",
      "void InitItemValues(EntityAI item)",
      "float AdjustBaitItemChance(EntityAI item)",
      "void InitCatchEnviroMask()",
      "void Init(Param par)",
      "void SetupInitialTypes()",
      "void UpdateDataAndMasks()",
      "int UpdateTrapEnviroMask()",
      "void SetTrapEnviroMask(int value)",
      "void UpdateUsedBait(ECatchingBaitCategories type)",
      "void UpdateBaseProbability(YieldItemBase yItem)",
      "bool ModifySignalProbability(inout float probability)",
      "void RemoveBait()",
      "void ReduceBaitQty(float qtyNorm)",
      "void InitCatchMethodMask()"
    ]
  },
  "CatchingContextTrapFishSmall": {
    "parent": null,
    "methods": [
      "void InitCatchMethodMask()"
    ]
  },
  "CatchingContextTrapFishLarge": {
    "parent": null,
    "methods": [
      "void InitCatchMethodMask()"
    ]
  },
  "CatchingContextTrapLandSnare": {
    "parent": null,
    "methods": [
      "void InitCatchMethodMask()"
    ]
  },
  "CarchingResultFishingAction": {
    "parent": null,
    "methods": [
      "float GetCurrentCycleTime(CatchingContextFishingRodAction ctx)"
    ]
  },
  "CatchingResultTrapBase": {
    "parent": null,
    "methods": []
  },
  "FishYieldItemBase": {
    "parent": null,
    "methods": [
      "void Init()",
      "float GetCycleTimeForYieldItem(CatchingContextFishingRodAction ctx)",
      "float GetBaitTypeSensitivity(ECatchingBaitCategories type)",
      "string GetCatchDeathSoundset()",
      "string GetCatchAINoise()",
      "int GetCatchParticleID()",
      "void YieldItemGenericFish(int baseWeight, string type, int enviroMask, int methodMask)"
    ]
  },
  "YieldItemGenericFish": {
    "parent": null,
    "methods": [
      "void YieldItemGenericFish(int baseWeight, string type, int enviroMask, int methodMask)",
      "void Init()"
    ]
  },
  "YieldItemMackerel": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemCarp": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemSardines": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemBitterlings": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemWalleyePollock": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemSteelheadTrout": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemShrimp": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemJunk": {
    "parent": null,
    "methods": [
      "void YieldItemJunk(int baseWeight, string type)",
      "void Init()",
      "float GetChanceForYieldItem(CatchingContextBase ctx)",
      "float GetCycleTimeForYieldItem(CatchingContextFishingRodAction ctx)",
      "void OnEntityYieldSpawned(EntityAI spawn)",
      "string GetCatchDeathSoundset()",
      "float GetQualityForYieldItem(CatchingContextBase ctx)"
    ]
  },
  "YieldItemJunkEmpty": {
    "parent": null,
    "methods": [
      "float GetQualityForYieldItem(CatchingContextBase ctx)"
    ]
  },
  "LandAnimalYieldItemBase": {
    "parent": null,
    "methods": [
      "void YieldItemGenericSmallAnimal(int baseWeight, string type, int enviroMask, int methodMask)",
      "void Init()",
      "float GetBaitTypeSensitivity(ECatchingBaitCategories type)",
      "string GetCatchDeathSoundset()",
      "string GetCatchAINoise()",
      "float GetCatchAINoiseBaseStrength()"
    ]
  },
  "YieldItemGenericSmallAnimal": {
    "parent": null,
    "methods": [
      "void YieldItemGenericSmallAnimal(int baseWeight, string type, int enviroMask, int methodMask)",
      "void Init()",
      "float GetBaitTypeSensitivity(ECatchingBaitCategories type)",
      "string GetCatchDeathSoundset()",
      "string GetCatchAINoise()",
      "float GetCatchAINoiseBaseStrength()"
    ]
  },
  "YieldItemDeadRabbit": {
    "parent": null,
    "methods": [
      "void Init()",
      "float GetBaitTypeSensitivity(ECatchingBaitCategories type)",
      "string GetCatchDeathSoundset()",
      "string GetCatchAINoise()",
      "float GetCatchAINoiseBaseStrength()"
    ]
  },
  "YieldItemDeadFox": {
    "parent": null,
    "methods": [
      "void Init()",
      "float GetBaitTypeSensitivity(ECatchingBaitCategories type)",
      "string GetCatchDeathSoundset()",
      "string GetCatchAINoise()",
      "float GetCatchAINoiseBaseStrength()"
    ]
  },
  "YieldItemCapraHircusBase": {
    "parent": null,
    "methods": [
      "void Init()",
      "float GetBaitTypeSensitivity(ECatchingBaitCategories type)",
      "string GetCatchDeathSoundset()",
      "string GetCatchAINoise()",
      "float GetCatchAINoiseBaseStrength()"
    ]
  },
  "YieldItemDeadRooster": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemDeadChicken_White": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemDeadChicken_Spotted": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "YieldItemDeadChicken_Brown": {
    "parent": null,
    "methods": [
      "void Init()"
    ]
  },
  "HandsArea": {
    "parent": null,
    "methods": [
      "void HandsArea( LayoutHolder parent )",
      "bool IsSwapActive()",
      "bool IsCombineActive()",
      "void UpdateSelectionIcons()",
      "void UpdateInterval()",
      "void SetLayoutName()",
      "void SetparentWidget()",
      "void OnShow()",
      "void Refresh()",
      "void SetSameLevelNextActive()",
      "void SetSameLevelPreviousActive()",
      "void DraggingOverHandsPanel( Widget w, int x, int y, Widget receiver )",
      "void OnHandsPanelDropReceived( Widget w, int x, int y, Widget receiver )"
    ]
  },
  "LeftArea": {
    "parent": null,
    "methods": [
      "void LeftArea(LayoutHolder parent )",
      "void UnfocusGrid()",
      "bool IsActive()",
      "void SetActive( bool active )",
      "void UpdateSelectionIcons()",
      "float GetCurrentContainerTopY()",
      "float GetCurrentContainerBottomY()",
      "void SetSameLevelNextActive()",
      "void SetSameLevelPreviousActive()",
      "void ExpandCollapseContainer()",
      "void OnLeftPanelDropReceived( Widget w, int x, int y, Widget receiver )",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )",
      "void SetLayoutName()",
      "void SetparentWidget()",
      "void OnShow()",
      "void Refresh()",
      "void UpdateInterval()",
      "bool OnChildRemove( Widget w, Widget child )",
      "bool OnChildAdd( Widget w, Widget child )"
    ]
  },
  "RightArea": {
    "parent": null,
    "methods": [
      "void RightArea(LayoutHolder parent)",
      "void DraggingOverHeader(Widget w, int x, int y, Widget receiver)",
      "bool Select()",
      "bool SelectItem()",
      "bool Combine()",
      "bool SplitItem()",
      "bool EquipItem()",
      "bool TransferItem()",
      "bool InspectItem()",
      "bool TransferItemToVicinity()",
      "void UnfocusGrid()",
      "bool CanTakeToInventory()",
      "bool CanTakeToInventoryEx(EntityAI focusedEntity)",
      "bool HasEntityContainerVisible(EntityAI entity)",
      "void SwapItemsInOrder(int slot1, int slot2)",
      "bool IsPlayerEquipmentActive()",
      "void SetSameLevelNextActive()",
      "void SetSameLevelPreviousActive()",
      "void ExpandCollapseContainer()",
      "void Refresh()",
      "void SetLayoutName()",
      "void SetparentWidget()",
      "void OnShow()",
      "void UpdateInterval()",
      "void MoveUpDownIcons()",
      "void UpdateSelectionIcons()",
      "float GetCurrentContainerTopY()",
      "float GetCurrentContainerBottomY()"
    ]
  },
  "CargoContainer": {
    "parent": "Container",
    "methods": [
      "void CargoContainer( LayoutHolder parent, bool is_attachment = false )",
      "int GetCargoIndex()",
      "void AddedToCargoEx( EntityAI item, bool refresh = true )",
      "void AddedToCargo( EntityAI item )",
      "void RemovedFromCargo( EntityAI item )",
      "void MovedInCargo( EntityAI item )",
      "void SetLock( EntityAI item )",
      "void ReleaseLock( EntityAI item )",
      "void SetLayoutName()",
      "void SetEntity( EntityAI item, int cargo_index = 0, bool immedUpdate = true )",
      "void UpdateHeaderText()",
      "void InitGridHeight()",
      "void UpdateSize()",
      "float GetIconSize()",
      "float GetSpaceSize()",
      "int GetCargoCapacity()",
      "int GetMaxCargoCapacity()",
      "float GetFocusedContainerHeight( bool contents = false )",
      "float GetFocusedContainerYPos( bool contents = false )",
      "float GetFocusedContainerYScreenPos( bool contents = false )",
      "void UpdateSelection()",
      "void UpdateRowVisibility(int count)",
      "void Refresh()",
      "void RefreshImpl()",
      "void UpdateInterval()",
      "bool HasItem( EntityAI item )",
      "bool TransferItemToVicinity()",
      "void SetDefaultFocus( bool while_micromanagment_mode = false )",
      "void SetLastFocus()",
      "void Unfocus()",
      "void UnfocusAll()",
      "void SetNextActive()",
      "void SetPreviousActive( bool force = false )",
      "void SetNextRightActive()",
      "void SetNextLeftActive()",
      "void SetLastActive()",
      "void SetActive( bool active )",
      "bool IsItemActive()",
      "bool IsItemWithQuantityActive()",
      "bool IsEmpty()",
      "int GetRecipeCount( bool recipe_anywhere, ItemBase entity1, ItemBase entity2, PlayerBase player )",
      "bool CanCombineAmmo()",
      "bool TransferItem()",
      "bool SelectItem()",
      "bool Select()",
      "bool Combine()",
      "void ShowFalseCargoHeader(bool show)",
      "void SetAlternateFalseTextHeaderWidget(TextWidget w)",
      "void SetAttachmentSlotID(int slotID)",
      "int GetAttachmentSlotID()",
      "int GetIconsCount()"
    ]
  },
  "CargoContainerRow": {
    "parent": null,
    "methods": [
      "void CargoContainerRow( LayoutHolder parent )",
      "void UnfocusAll()",
      "void SetFocus( int column )",
      "bool GetIconSize(int row, int column, out int width, out int height)",
      "int GetFocusedColumn()",
      "void SetLayoutName()",
      "void SetEntity( EntityAI entity )",
      "void DropReceived( Widget w, int x, int y, Widget receiver )",
      "void DraggingOver( Widget w, int x, int y, Widget receiver )",
      "void ColumnOnDraggingOver0( Widget w )",
      "void ColumnOnDraggingOver1( Widget w )",
      "void ColumnOnDraggingOver2( Widget w )",
      "void ColumnOnDraggingOver3( Widget w )",
      "void ColumnOnDraggingOver4( Widget w )",
      "void ColumnOnDraggingOver5( Widget w )",
      "void ColumnOnDraggingOver6( Widget w )",
      "void ColumnOnDraggingOver7( Widget w )",
      "void ColumnOnDraggingOver8( Widget w )",
      "void ColumnOnDraggingOver9( Widget w )",
      "void Column0( Widget w )",
      "void Column1( Widget w )",
      "void Column2( Widget w )",
      "void Column3( Widget w )",
      "void Column4( Widget w )",
      "void Column5( Widget w )",
      "void Column6( Widget w )",
      "void Column7( Widget w )",
      "void Column8( Widget w )",
      "void Column9( Widget w )",
      "void OnShow()",
      "void OnHide()",
      "void SetNumber( int number )",
      "int GetWidth()",
      "void SetWidth( int width, bool immedUpdate = true )"
    ]
  },
  "HandsPreview": {
    "parent": null,
    "methods": [
      "void HandsPreview( LayoutHolder parent )",
      "void RefreshQuantity( EntityAI m_Item_to_refresh )",
      "void SetDefaultFocus(bool while_micromanagment_mode = false)",
      "void SetLastFocus()",
      "void Unfocus()",
      "float GetIconSize()",
      "void SetLayoutName()",
      "void RemoveItem()",
      "void UpdateInterval()",
      "void CreateNewIcon( ItemBase item )",
      "void DeleteIcon()",
      "bool SelectItem()",
      "bool Select()"
    ]
  },
  "Icon": {
    "parent": null,
    "methods": [
      "void Icon( LayoutHolder parent, bool hands_icon = false )",
      "bool IsDragged()",
      "void SetActive( bool active )",
      "void SetparentWidget()",
      "int GetRelevantInventoryAction(int relevantActions)",
      "void RefreshQuickbar()",
      "void DoubleClick(Widget w, int x, int y, int button)",
      "void DraggingOverSwap( Widget w, int x, int y, Widget receiver )",
      "void DraggingOverCombine(Widget w, int x, int y, Widget receiver)",
      "bool MouseEnter(Widget w, int x, int y)",
      "bool MouseLeave( Widget w, Widget s, int x, int y)",
      "void DraggingOver( Widget w, int x, int y, Widget receiver )",
      "void OnPerformCombination( int combinationFlags )",
      "bool PerformCombination(EntityAI selectedEntity, EntityAI targetEntity, int combinationFlag, InventoryLocation ilSwapDst = null)",
      "void UpdateFrameColor(EntityAI selectedEntity, EntityAI targetEntity, int combinationFlag, Widget w, InventoryLocation il = null)",
      "void ShowActionMenuCombine( EntityAI entity1, EntityAI entity2, int combinationFlags, Widget w , bool color_test )",
      "void OnPerformRecipe(int id)",
      "void Combine( Widget w, int x, int y, Widget receiver )",
      "bool CombineItems( EntityAI entity1, EntityAI entity2 )",
      "bool FlagAction( EntityAI entity1, EntityAI entity2, int combinationFlags )",
      "void MouseClick(Widget w, int x, int y, int button)",
      "void DropReceivedFromMain( Widget w, int x, int y, Widget receiver )",
      "void Swap( Widget w, int x, int y, Widget receiver )",
      "void ToRefresh( Icon icon, Icon icon2 )",
      "void SetLayoutName()",
      "void SetSize( int x, int y )",
      "void SetPos( int x, int y )",
      "int GetCargoPos()",
      "void SetCargoPos(int x)",
      "void DestroyWhiteBackground()",
      "void CreateWhiteBackground()",
      "void OnDraggingOverBackground( Widget w, int x, int y, Widget reciever  )",
      "void DropReceivedFromBackground( Widget w, int x, int y, Widget reciever  )",
      "void RevertToOriginalFlip()",
      "void Refresh()",
      "void SetTemperature()",
      "void RefreshIconPos()",
      "void FullScreen()",
      "void RefreshPos( int row, int column )",
      "void RefreshMuzzleIcon()",
      "void SetQuantity()",
      "void SetSort(int index)",
      "int GetSort()",
      "void SetItemPreviewEx(bool refresh = true)",
      "void SetItemPreview()",
      "void SetItemSizeEx(bool refresh = true)",
      "void SetItemSize()",
      "void UpdateFlip(bool flipped)",
      "void InitLock( EntityAI parent, EntityAI obj, int x_pos, int y_pos, bool flip)",
      "void InitEx( EntityAI obj, bool refresh = true )",
      "void Init(EntityAI obj)",
      "void CheckIsWeapon()",
      "void CheckIsMagazineEx( bool refresh = true )",
      "void CheckIsMagazine()",
      "void CheckHasTemperature()",
      "void CheckHasQuantityEx(bool refresh = true)",
      "void CheckHasQuantity()",
      "void SetPosX(int x)",
      "void SetPosY(int y)",
      "void SetSizeX(int x)",
      "void SetSizeY(int y)",
      "int GetPosX()",
      "int GetPosY()",
      "int GetSizeX()",
      "int GetSizeY()",
      "void SetPosEx(bool refresh = true)",
      "void SetPos()",
      "void SetSize()",
      "void UpdateInterval()",
      "void Pos(int _x, int _y)"
    ]
  },
  "Pos": {
    "parent": null,
    "methods": [
      "void Pos(int _x, int _y)"
    ]
  },
  "SlotsContainer": {
    "parent": null,
    "methods": [
      "void SlotsContainer( LayoutHolder parent, EntityAI slot_parent )",
      "void SetDefaultFocus( bool while_micromanagment_mode = false )",
      "void SetLastFocus()",
      "void SetFocus( int index )",
      "void SetVisibleFocus( int index )",
      "int GetVisibleFocus()",
      "void SetNextRightActive()",
      "void SetNextLeftActive()",
      "void UpdateIcon()",
      "void UnfocusAll()",
      "void Unfocus()",
      "bool SelectItem()",
      "bool IsEmpty()",
      "bool IsDisplayable()",
      "void SetLayoutName()",
      "bool VerifySlotsIconVisibility(int idx = -1)"
    ]
  },
  "SlotsIcon": {
    "parent": null,
    "methods": [
      "void SlotsIcon( LayoutHolder parent, Widget root, int index, EntityAI slot_parent )",
      "bool IsVisible()",
      "void SetSlotparent( EntityAI parent)",
      "void SetContainer( Container container )",
      "void SetSlotDisplayName( string text )",
      "string GetSlotDisplayName( )",
      "void SetSlotDesc( string text )",
      "string GetSlotDesc()",
      "int GetSlotID()",
      "void SetSlotID(int slot_ID)",
      "bool IsReserved()",
      "bool IsFocused()",
      "void SetActive( bool active )",
      "void SetLayoutName()",
      "void Refresh()",
      "void SetTemperature()",
      "void RefreshMuzzleIcon()",
      "void SetQuantity()",
      "void SetItemPreview()",
      "void SetItemSize()",
      "void UpdateFlip( bool flipped )",
      "void Init( EntityAI obj, bool reservation = false )",
      "void ClearRemainSelected()",
      "void Clear()",
      "void CheckIsWeapon()",
      "void CheckIsMagazine()",
      "void CheckHasTemperature()",
      "void CheckHasQuantity()",
      "void CheckHasItemSize()",
      "bool IsOutOfReach()",
      "bool MouseEnter(Widget w, int x, int y)",
      "bool MouseEnterGhostSlot(Widget w, int x, int y)",
      "bool MouseLeave( Widget w, Widget s, int x, int y\t)",
      "bool MouseLeaveGhostSlot( Widget w, Widget s, int x, int y\t)",
      "void UpdateInterval()",
      "void OnIconDrag( Widget w )",
      "void OnIconDrop( Widget w )",
      "static int GetNormalWidth()",
      "static int GetNormalHeight()"
    ]
  },
  "AttachmentsGroupContainer": {
    "parent": null,
    "methods": [
      "void SetLayoutName()",
      "void SetHeader(Header header)",
      "void AttachmentsGroupContainer(LayoutHolder parent)",
      "void SetActive(bool active)",
      "void SetDefaultFocus(bool while_micromanagment_mode = false)",
      "int GetRowCount(bool include_invisible = true)",
      "int GetColumnCountForRow(int row, bool include_invisible = true)",
      "void SetNextActive()",
      "void SetPreviousActive(bool force = false)"
    ]
  },
  "AttachmentsWrapper": {
    "parent": null,
    "methods": [
      "void AttachmentsWrapper(LayoutHolder parent)",
      "void Setparent( Attachments atts )",
      "bool Select()",
      "bool SelectItem()",
      "bool Combine()",
      "bool TransferItemToVicinity()",
      "bool TransferItem()",
      "bool InspectItem()",
      "bool SplitItem()",
      "bool EquipItem()",
      "bool CanEquip()",
      "bool CanCombine()",
      "bool CanCombineAmmo()",
      "bool IsDisplayable()",
      "bool IsItemActive()",
      "bool IsItemWithQuantityActive()",
      "void UpdateInterval()",
      "int GetFocusedSlot()",
      "void ShowFalseAttachmentsHeader(bool show)",
      "void SetFalseAttachmentsHeaderText(string text)"
    ]
  },
  "ClosableContainer": {
    "parent": "Container",
    "methods": [
      "void ClosableContainer( LayoutHolder parent, int sort = -1 )",
      "bool IsDisplayable()",
      "void UpdateRadialIcon()",
      "void SetOpenState( bool state )",
      "void Open()",
      "void Close()",
      "void SetLayoutName()",
      "void OnShow()",
      "void Refresh()",
      "void CloseButtonOnMouseButtonDown()",
      "float GetFocusedContainerHeight( bool contents = false )",
      "float GetFocusedContainerYPos( bool contents = false )",
      "float GetFocusedContainerYScreenPos( bool contents = false )",
      "void MoveContainerUp( Widget cont )",
      "void MoveContainerDown( Widget cont )",
      "void CheckHeaderDragability()"
    ]
  },
  "CollapsibleContainer": {
    "parent": null,
    "methods": [
      "void CollapsibleContainer( LayoutHolder parent, int sort = -1 )",
      "void SetLayoutName()",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "void Refresh()",
      "void OnShow()",
      "void OnHide()",
      "void Insert( LayoutHolder container, int pos = -1, bool immedUpdate = true )",
      "void Remove( LayoutHolder container )",
      "bool CanDisplayAnyCategory()",
      "void UpdateCollapseButtons()",
      "void LoadDefaultState()",
      "bool IsHidden()",
      "void CollapseButtonOnMouseButtonDown( Widget w )",
      "void Toggle()",
      "bool OnChildRemove( Widget w, Widget child )",
      "bool OnChildAdd( Widget w, Widget child )",
      "void SetHeader(Header header)",
      "void SetCollapsibleHeaderArrowState(bool open)"
    ]
  },
  "Container": {
    "parent": "LayoutHolder",
    "methods": [
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "void DraggingOver( Widget w, int x, int y, Widget receiver )",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )",
      "void UpdateSpacer()",
      "void SetHeader(Header header)",
      "void CheckHeaderDragability()",
      "void Container( LayoutHolder parent )",
      "void SetFocusedContainer( Container cont )",
      "int GetActiveIndex()",
      "void SetActiveIndex( int index )",
      "void UpdateRadialIcon()",
      "void SetSlotIcon( SlotsIcon icon )",
      "void SetDefaultFocus(bool while_micromanagment_mode = false)",
      "void SetLastFocus()",
      "void Unfocus()",
      "void MoveGridCursor(int direction)",
      "void ScrollToActiveContainer()",
      "void ScrollToActiveContainer(ScrollWidget sw)",
      "void CheckScrollbarVisibility()",
      "void CheckScrollbarVisibility(ScrollWidget sw)",
      "void Open()",
      "void Close()",
      "bool IsOpened()",
      "void SetOpenForSlotIcon(bool open, SlotsIcon icon = null)",
      "void Toggle()",
      "float GetFocusedContainerHeight( bool contents = false )",
      "float GetFocusedContainerYPos( bool contents = false )",
      "float GetFocusedContainerYScreenPos( bool contents = false )",
      "int Count()",
      "bool SelectItem()",
      "bool Select()",
      "bool OnSelectButton()",
      "bool Combine()",
      "bool TransferItemToVicinity()",
      "bool TransferItem()",
      "bool InspectItem()",
      "bool SplitItem()",
      "bool EquipItem()",
      "bool CanOpenCloseContainer()",
      "bool CanOpenCloseContainerEx(EntityAI focusedEntity)",
      "bool CanSplit()",
      "bool CanSplitEx(EntityAI focusedEntity)",
      "bool CanDrop()",
      "bool CanDropEx(EntityAI focusedEntity)",
      "bool CanSwapOrTakeToHands()",
      "bool CanSwapOrTakeToHandsEx(EntityAI focusedEntity)",
      "bool CanEquip()",
      "bool CanEquipEx(EntityAI focusedEntity)",
      "bool CanTakeToInventory()",
      "bool CanTakeToInventoryEx(EntityAI focusedEntity)",
      "bool CanCombine()",
      "bool CanCombineEx(EntityAI focusedEntity)",
      "bool CanCombineAmmo()",
      "bool CanAddToQuickbarEx(EntityAI focusedEntity)",
      "bool AddItemToQuickbarRadial(EntityAI itemToAssign)",
      "bool IsEmpty()",
      "bool IsItemActive()",
      "bool IsItemWithQuantityActive()",
      "int GetColumnCount()",
      "void SetColumnCount( int count )",
      "int GetFocusedColumn()",
      "void SetFocusedColumn( int column )",
      "void UpdateInterval()",
      "void SetLastActive()",
      "void SetFirstActive()",
      "void SetActive(bool active)",
      "void UnfocusAll()",
      "void UnfocusGrid()",
      "bool IsLastIndex()",
      "bool IsFirstIndex()",
      "bool IsFirstContainerFocused()",
      "bool IsLastContainerFocused()",
      "void ResetFocusedContainer()",
      "void SetNextActive()",
      "void SetPreviousActive(bool force = false)",
      "void SetNextRightActive()",
      "void SetNextLeftActive()",
      "void SetSameLevelNextActive()",
      "void SetSameLevelPreviousActive()",
      "void RecomputeOpenedContainers()",
      "void SetLayoutName()",
      "void Insert( LayoutHolder container, int pos = -1, bool immedUpdate = true )",
      "void Remove( LayoutHolder container )",
      "void Refresh()",
      "void UpdateBodySpacers()",
      "void HideContent( bool force_hide = false )",
      "void ShowContent( bool force_show = false )",
      "void SetForceShow(bool value)",
      "void UpdateSelectionIcons()",
      "void ExpandCollapseContainer()"
    ]
  },
  "HandsContainer": {
    "parent": null,
    "methods": [
      "void HandsContainer( LayoutHolder parent )",
      "void ResetContainer()",
      "bool IsLastIndex()",
      "void SetFocusToIndex()",
      "void ScrollToActiveContainer( Container active_container )",
      "void Insert( LayoutHolder container, int pos = -1, bool immedUpdate = true )",
      "bool TransferItem()",
      "bool SplitItem()",
      "bool EquipItem()",
      "void SetActive( bool active )",
      "void SetLastActive()",
      "void Refresh()",
      "bool IsItemActive()",
      "bool IsItemWithQuantityActive()",
      "bool IsEmpty()",
      "bool TransferItemToVicinity()",
      "bool InspectItem()",
      "bool OnSelectButton()",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )",
      "void OnDropReceivedFromHeader2( Widget w, int x, int y, Widget receiver )",
      "void OnPerformCombination(int combinationFlags)",
      "void ShowActionMenuCombine( EntityAI entity1, EntityAI entity2, int combinationFlags )",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "int GetCombinationFlags( EntityAI entity1, EntityAI entity2 )",
      "int GetRecipeCount( bool recipe_anywhere, EntityAI entity1, EntityAI entity2 )",
      "void RemoveItem()",
      "void DestroyAtt()",
      "void UnfocusGrid()",
      "void UnfocusAll()",
      "void DestroyCargo()",
      "void DropReceived( Widget w,  int x, int y, CargoContainer cargo )",
      "bool DraggingOverGrid( Widget w,  int x, int y, Widget reciever, CargoContainer cargo )",
      "void TakeAsAttachment( Widget w, Widget receiver )",
      "void ShowAtt( EntityAI entity )",
      "void RefreshHands()",
      "void AttachmentAdded(EntityAI item, string slot, EntityAI parent)",
      "void AttachmentRemoved(EntityAI item, string slot, EntityAI parent)",
      "void UpdateInterval()",
      "void SetLayoutName()",
      "void OnShow()",
      "void MouseClick2(Widget w, int x, int y, int button)",
      "void DoubleClick(Widget w, int x, int y, int button)",
      "void DraggingOverHeader2(Widget w, int x, int y, Widget receiver )",
      "void ElectricityIcon()",
      "void CollapseButtonOnMouseButtonDown( Widget w )",
      "void HideCargo()",
      "void ShowCargo()"
    ]
  },
  "IconsContainer": {
    "parent": null,
    "methods": [
      "void IconsContainer( LayoutHolder parent )",
      "void UnfocusAll()",
      "int GetItemCount()",
      "void AddItem( Icon icon )",
      "void RemoveItem( Icon icon )",
      "void RemoveItem( int entity )",
      "bool ContainsEntity( EntityAI entity )",
      "void UpdateItemsTemperature()",
      "void Refresh()"
    ]
  },
  "AttachmentCategoriesContainer": {
    "parent": null,
    "methods": [
      "void AttachmentCategoriesContainer( LayoutHolder parent, int sort = -1 )",
      "void SetEntity( EntityAI entity )",
      "void SetHeaderName()",
      "bool IsDisplayable()",
      "void UpdateInterval()",
      "void LoadAttachmentCategoriesIcon( SlotsContainer items_cont, string icon_name, int slot_number )",
      "int GetAttachmentCategoriesCount( string config_path )",
      "void ShowInSlots( string category, bool show )",
      "bool CanDisplayAnyCategory()",
      "void UpdateRadialIcon()",
      "string GetAttachmentCategory( string config_path_attachment_categories, int i )",
      "string GetIconName( string config_path_attachment_categories, string attachment_category )",
      "int GetViewIndex( string config_path_attachment_categories, string attachment_category )",
      "void MouseClick(Widget w)",
      "void ExpandCollapseContainer()",
      "bool IsHeaderActive()",
      "void InitIconsContainers()",
      "void InitGhostSlots()",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )",
      "void CollapseButtonOnMouseButtonDown( Widget w )",
      "void Open()",
      "void Close()",
      "void OnHide()",
      "bool CanOpenCloseContainerEx(EntityAI focusedEntity)"
    ]
  },
  "AttachmentCategoriesRow": {
    "parent": null,
    "methods": [
      "void AttachmentCategoriesRow( LayoutHolder parent, int sort = -1 )",
      "string GetCategoryIdentifier()",
      "int GetFocusedSlot()",
      "bool Select()",
      "bool TransferItem()",
      "bool TransferItemToVicinity()",
      "bool Combine()",
      "bool EquipItem()",
      "bool CanCombine()",
      "bool CanCombineAmmo()",
      "bool IsItemActive()",
      "bool IsItemWithQuantityActive()",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "void UnfocusAll()",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )",
      "bool DraggingOverGrid( Widget w,  int x, int y, Widget reciever, CargoContainer cargo )",
      "void DropReceived( Widget w, int x, int y, CargoContainer cargo )",
      "void Refresh()",
      "void RefreshAllSlots()",
      "void RefreshSlot( int row, int column, int slot_id, string slot_name )",
      "void DoubleClick(Widget w, int x, int y, int button)",
      "void MouseClick(Widget w, int x, int y, int button)",
      "void Init(int attachments_categories_count, int i, string attachment_category, string config_path_attachment_categories, EntityAI entity, int parent_m_Body_count )",
      "void UpdateInterval()"
    ]
  },
  "AttachmentCategoriesSlotsContainer": {
    "parent": null,
    "methods": [
      "void AttachmentCategoriesSlotsContainer( LayoutHolder parent, int index )",
      "bool IsDisplayable()",
      "void SetLayoutName()",
      "int GetparentID()",
      "int GetFocusedID()",
      "void ExpandCollapseContainer( bool expand )",
      "bool SelectItem()",
      "bool Select()",
      "bool Combine()",
      "bool TransferItemToVicinity()",
      "bool TransferItem()",
      "bool SplitItem()",
      "bool EquipItem()",
      "bool CanCombine()",
      "bool CanCombineAmmo()",
      "bool IsEmpty()",
      "bool IsItemActive()",
      "bool IsItemWithQuantityActive()",
      "string GetAttachmentCategory( string config_path_attachment_categories, int i )",
      "string GetIconName( string config_path_attachment_categories, string attachment_category )"
    ]
  },
  "ContainerWithCargo": {
    "parent": "ClosableContainer",
    "methods": [
      "void ContainerWithCargo( LayoutHolder parent, int sort = -1 )",
      "bool IsDisplayable()",
      "bool IsEmpty()",
      "bool IsItemActive()",
      "bool CanCombine()",
      "bool CanCombineAmmo()",
      "bool IsItemWithQuantityActive()",
      "void LockCargo(bool value)",
      "void Open()",
      "void Close()",
      "bool IsOpened()",
      "void UpdateInterval()",
      "bool IsFirstContainerFocused()",
      "bool IsLastContainerFocused()",
      "void SetDefaultFocus( bool while_micromanagment_mode = false )",
      "void UnfocusAll()",
      "bool SplitItem()",
      "bool EquipItem()",
      "bool TransferItem()",
      "bool TransferItemToVicinity()",
      "bool InspectItem()",
      "void SetEntity( EntityAI entity, int cargo_index = 0, bool immedUpdate = true )",
      "bool DraggingOverGrid( Widget w, int x, int y, Widget reciever )",
      "void DropReceived( Widget w, int x, int y )",
      "void TakeIntoHands( notnull PlayerBase player, notnull EntityAI item )",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )",
      "void DraggingOver( Widget w, int x, int y, Widget receiver )",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )"
    ]
  },
  "ContainerWithCargoAndAttachments": {
    "parent": "ClosableContainer",
    "methods": [
      "void ContainerWithCargoAndAttachments( LayoutHolder parent, int sort = -1 )",
      "void RecomputeContainers()",
      "void AttachmentAddedEx(EntityAI item, string slot, EntityAI parent, bool immedUpdate = true)",
      "void AttachmentAdded(EntityAI item, string slot, EntityAI parent)",
      "void AttachmentRemoved(EntityAI item, string slot, EntityAI parent)",
      "void UpdateInterval()",
      "void UnfocusAll()",
      "bool IsLastIndex()",
      "bool IsFirstContainerFocused()",
      "bool IsLastContainerFocused()",
      "void MoveGridCursor( int direction )",
      "void SetEntity( EntityAI entity, bool immedUpdate = true )",
      "void HideCargo()",
      "void ShowCargo()",
      "void MouseClick2(Widget w, int x, int y, int button)",
      "void DropReceived(Widget w, int x, int y, CargoContainer cargo)",
      "void TakeAsAttachment( Widget w, Widget receiver )",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "void OnDropReceivedFromHeader2( Widget w, int x, int y, Widget receiver )",
      "void DoubleClick(Widget w, int x, int y, int button)",
      "bool DraggingOverGrid( Widget w,  int x, int y, Widget reciever, CargoContainer cargo )",
      "void DraggingOver( Widget w, int x, int y, Widget receiver )",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )"
    ]
  },
  "ContainerWithElectricManager": {
    "parent": null,
    "methods": [
      "void UpdateInterval()",
      "void SetEntity(EntityAI entity, bool immedUpdate = true)",
      "void ElectricityIcon()"
    ]
  },
  "PlayerContainer": {
    "parent": null,
    "methods": [
      "void UpdateRadialIcon()",
      "bool HasEntityContainerVisible( EntityAI entity )",
      "void PlayerContainer( LayoutHolder parent, int sort = -1 )",
      "void ItemAttached(EntityAI item, string slot_name)",
      "void ItemDetached(EntityAI item, string slot_name)",
      "void OnAttachmentReservationSet( EntityAI item, int slot_id )",
      "void OnAttachmentReservationRelease( EntityAI item, int slot_id )",
      "void AddSlotsContainer( int row_count )",
      "void MouseClick( Widget w, int x, int y, int button )",
      "float GetMainContainerTopPos()",
      "float GetMainContainerBottomPos()",
      "void Insert( LayoutHolder container, int pos = -1, bool immedUpdate = true )",
      "bool IsItemWithContainerActive()",
      "bool IsItemWithQuantityActive()",
      "bool IsItemActive()",
      "bool IsEmptyItemActive()",
      "void UnfocusPlayerAttachmentsContainer()",
      "void DoubleClick(Widget w, int x, int y, int button)",
      "void ExpandCollapseContainer()",
      "bool IsContainerWithCargoActive()",
      "bool IsItemWithAttachmentsActive()",
      "bool TransferItemToVicinity()",
      "bool InspectItem()",
      "int GetRecipeCount( bool recipe_anywhere, EntityAI entity1, EntityAI entity2 )",
      "bool TransferItem()",
      "bool Combine()",
      "bool Select()",
      "void SetPlayer(PlayerBase player)",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )",
      "void DraggingOver( Widget w, int x, int y, Widget receiver )",
      "void OnDropReceivedFromGhostArea( Widget w, int x, int y, Widget receiver )",
      "void SwapItemsInOrder( int slot1, int slot2 )",
      "void UpdateInterval()",
      "void ToggleContainer( Widget w, EntityAI item )",
      "bool CanOpenCloseContainerEx(EntityAI focusedEntity)",
      "void ToggleWidget( Widget w )",
      "void CollapseButtonOnMouseButtonDown(Widget w)",
      "bool IsPlayerEquipmentActive()",
      "void Refresh()",
      "bool OnChildRemove( Widget w, Widget child )",
      "bool OnChildAdd( Widget w, Widget child )"
    ]
  },
  "VicinityContainer": {
    "parent": null,
    "methods": [
      "void VicinityContainer( LayoutHolder parent, int sort = -1 )",
      "bool IsVicinityContainerIconsActive()",
      "bool IsContainerWithCargoActive()",
      "bool IsItemWithAttachmentsActive()",
      "bool IsItemWithCategoriesActive()",
      "void TraverseShowedItems()",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )",
      "void DraggingOverIcon( Widget w, int x, int y, Widget receiver )",
      "void OnDropReceivedFromIcon( Widget w, int x, int y, Widget receiver )",
      "void OnLeftPanelDropReceived( Widget w, int x, int y, Widget receiver )",
      "void OnDropReceivedFromEmptySpace( Widget w, int x, int y, Widget receiver )",
      "void OnDropReceivedFromHeader(Widget w, int x, int y, Widget receiver)",
      "void UpdateInterval()",
      "void ToggleContainer( Widget w, EntityAI item )",
      "bool CanOpenCloseContainerEx(EntityAI focusedEntity)",
      "void ToggleContainer( notnull Container conta )",
      "void ExpandCollapseContainer()",
      "bool OnChildRemove( Widget w, Widget child )",
      "bool OnChildAdd( Widget w, Widget child )",
      "void CollapseButtonOnMouseButtonDown(Widget w)",
      "void UpdateHeader(EntityAI entity, Container cont, PlayerBase player)"
    ]
  },
  "VicinitySlotsContainer": {
    "parent": null,
    "methods": [
      "void VicinitySlotsContainer( LayoutHolder parent )",
      "bool IsItemWithContainerActive()",
      "bool IsItemWithQuantityActive()",
      "bool IsItemActive()",
      "bool IsEmptyItemActive()",
      "bool IsDisplayable()",
      "bool IsTakeable()",
      "bool CanCombineAmmo()",
      "bool InspectItem()",
      "bool TransferItem()",
      "bool Combine()",
      "bool Select()",
      "void SetLayoutName()",
      "void OnShow()",
      "int GetRowSlotCount()",
      "bool ExcludeFromContainer(EntityAI item)",
      "void ShowItemsInContainers( array<EntityAI> items )",
      "void DoubleClick(Widget w, int x, int y, int button)",
      "string GetItemQuantityText( EntityAI item )",
      "int HasItemQuantity( EntityAI item )",
      "float GetItemQuantity( InventoryItem item )",
      "void MouseButtonDown( Widget w, int x, int y, int button)",
      "void MouseClick( Widget w, int x, int y, int button)",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "void RecomputeNumberOfContainers( array<EntityAI> items )",
      "void PrepareOwnedTooltipAfterItemTransfer()",
      "void PrepareOwnedTooltipAfterItemTransferClick()"
    ]
  },
  "ZombieContainer": {
    "parent": null,
    "methods": [
      "void ZombieContainer( LayoutHolder parent, int sort = -1 )",
      "void SetEntity( EntityAI zombie_entity )",
      "void UpdateRadialIcon()",
      "bool IsItemWithQuantityActive()",
      "bool IsContainerWithCargoActive()",
      "bool IsItemWithAttachmentsActive()",
      "bool IsZombieEquipmentActive()",
      "bool IsItemWithContainerActive()",
      "bool IsEmptyItemActive()",
      "void ExpandCollapseContainer()",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "void DraggingOverHeader(Widget w, int x, int y, Widget receiver)",
      "void OnDropReceivedFromGhostArea(Widget w, int x, int y, Widget receiver)",
      "void SetHeaderName()",
      "void ItemAttached(EntityAI item, string slot_name)",
      "void ItemDetached(EntityAI item, string slot_name)",
      "bool CanOpenCloseContainerEx(EntityAI focusedEntity)",
      "void ToggleContainer(Widget w)",
      "void MouseClick(Widget w, int x, int y, int button)",
      "void InitGhostSlots()",
      "void AddSlotsContainer( int row_count )",
      "void DoubleClick(Widget w, int x, int y, int button)",
      "void CollapseButtonOnMouseButtonDown(Widget w)",
      "bool EquipItem()",
      "bool TransferItem()",
      "bool Select()",
      "bool TransferItemToVicinity()"
    ]
  },
  "CharacterCreationMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void CharacterCreationMenu()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void Apply()",
      "void Save()",
      "void Back()",
      "void SetCharacter()",
      "void RandomizeCharacter()",
      "void GenderChanged()",
      "void SkinChanged()",
      "void TopChanged()",
      "void BottomChanged()",
      "void ShoesChanged()",
      "bool OnKeyPress(Widget w, int x, int y, int key)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsFocusable(Widget w)",
      "void SetTooltipTexts(Widget w, string header = , string desc = )",
      "void CheckNewOptions()",
      "void OnShow()",
      "void Refresh()",
      "void Update(float timeslice)",
      "void OnHide()",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ColorDisable(Widget w)",
      "void SetCharacterSaved(bool state)",
      "void UpdateControlsElements()",
      "void UpdateControlsElementVisibility()"
    ]
  },
  "TutorialKeybinds": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void TutorialKeybinds(Widget parent, TutorialsMenu menu)",
      "bool SetElementTitle(UAInput pInput, int iDeviceFlags, out string output)",
      "bool SetElementModifier(UAInput pInput, out string output)",
      "string GetLayoutName()"
    ]
  },
  "CreditsMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void LoadDataAsync()",
      "void Update( float timeslice )",
      "void UpdateInfoPanelText(int input_device_type)"
    ]
  },
  "DropdownPrefab": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void DropdownPrefab( Widget root, string text =  )",
      "void RefreshContent()",
      "int AddElement( string text, Widget content = null )",
      "void RemoveElement( int index )",
      "void Close()",
      "void SetText( string text )",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnMouseButtonDown( Widget w, int x, int y, int button )"
    ]
  },
  "KeybindingElement": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void KeybindingElement( int key_index, Widget parent, KeybindingsGroup group )",
      "string GetLayoutName()",
      "bool IsChanged()",
      "bool IsAlternateChanged()",
      "void SetElementTitle( ButtonWidget btnWidget, UAInput pInput, int iDeviceFlags )",
      "void Reload()",
      "void Reload( array<int> custom_binds, bool is_alternate )",
      "void StartEnteringKeybind()",
      "void CancelEnteringKeybind()",
      "void StartEnteringAlternateKeybind()",
      "void CancelEnteringAlternateKeybind()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnMouseButtonUp( Widget w, int x, int y, int button )",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool OnMouseLeave( Widget w, Widget enterW, int x, int y )"
    ]
  },
  "KeybindingElementNew": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void KeybindingElementNew( int key_index, Widget parent, KeybindingsContainer group )",
      "string GetLayoutName()",
      "bool IsChanged()",
      "bool IsAlternateChanged()",
      "void SetElementTitle( ButtonWidget btnWidget, UAInput pInput, int iDeviceFlags )",
      "void Reload()",
      "void Reload( array<int> custom_binds, bool is_alternate )",
      "void StartEnteringKeybind()",
      "void CancelEnteringKeybind()",
      "void StartEnteringAlternateKeybind()",
      "void CancelEnteringAlternateKeybind()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnMouseButtonUp( Widget w, int x, int y, int button )",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool OnMouseLeave( Widget w, Widget enterW, int x, int y )"
    ]
  },
  "KeybindingsContainer": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void KeybindingsContainer( int index, Input input, Widget parent, KeybindingsMenu menu )",
      "string GetLayoutName()",
      "void OnSelectKBPreset( int index )",
      "void ReloadElements()",
      "void AddSubgroup( int sort_index, Widget parent, Input input )",
      "void CreateSubgroups( Widget parent, Input input )",
      "void AddElement( int index, Widget parent, Input input )",
      "bool IsEnteringKeyBind()",
      "void ClearKeybind( int key_index )",
      "void ClearAlternativeKeybind( int key_index )",
      "void StartEnteringKeybind( int key_index )",
      "void CancelEnteringKeybind()",
      "void StartEnteringAlternateKeybind( int key_index )",
      "void CancelEnteringAlternateKeybind()",
      "bool IsChanged()",
      "void Apply()",
      "void Reset(bool forced = false)",
      "void Update( float timeslice )",
      "void SwitchSubgroup(int index)"
    ]
  },
  "KeybindingsGroup": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void KeybindingsGroup( int index, Input input, Widget parent, KeybindingsMenu menu )",
      "string GetLayoutName()",
      "void InitPresets( int index, Widget parent, Input input )",
      "void OnSelectKBPreset( int index )",
      "void OnSelectConsolePreset( int index )",
      "void ReloadProfiles()",
      "void AddSubgroup( Widget parent, Input input )",
      "void AddAction( int index, Widget parent, Input input )",
      "void ReloadAction( int index )",
      "bool IsEnteringKeyBind()",
      "void ClearKeybind( int key_index )",
      "void ClearAlternativeKeybind( int key_index )",
      "void StartEnteringKeybind( int key_index )",
      "void CancelEnteringKeybind()",
      "void StartEnteringAlternateKeybind( int key_index )",
      "void CancelEnteringAlternateKeybind()",
      "bool IsChanged()",
      "void Apply()",
      "void Reset()",
      "void ResetEx(bool forced = false)",
      "void Update( float timeslice )",
      "bool OnMouseButtonDown( Widget w, int x, int y, int button )"
    ]
  },
  "KeybindingsMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void CreateTabs()",
      "void CreateGroupContainer()",
      "void UpdateTabContent(int tab_index)",
      "void ClearKeybind(int key_index)",
      "void ClearAlternativeKeybind(int key_index)",
      "void StartEnteringKeybind(int key_index)",
      "void CancelEnteringKeybind()",
      "void StartEnteringAlternateKeybind(int key_index)",
      "void CancelEnteringAlternateKeybind()",
      "void ConfirmKeybindEntry(TIntArray new_keys)",
      "void ConfirmAlternateKeybindEntry(TIntArray new_keys)",
      "void Update(float timeslice)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void Apply()",
      "void Back()",
      "void Reset()",
      "void SetToDefaults()",
      "void HardReset()",
      "void PerformSetToDefaultsExt(int mode)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "void Refresh()",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseWheel(Widget w, int x, int y, int wheel)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsFocusable(Widget w)",
      "void ColorRed(Widget w)",
      "void ColorWhite(Widget w, Widget enterW)",
      "void ColorDisabled(Widget w)",
      "void InitInputSortingMap()",
      "void InitPresets(int index, Widget parent, Input input)",
      "void OnAttemptSelectPreset(int index)",
      "void OnSelectKBPreset(int index)",
      "void AddGroup(int index, Input input)",
      "void PerformSetToDefaults()",
      "void DeferredDefaultsInit()"
    ]
  },
  "BannerHandlerBase": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void BannerHandlerBase(Widget parent)",
      "void SetBannerColor(int argb)",
      "void SetBannerText(string text)",
      "bool OnUpdate(Widget w)"
    ]
  },
  "MainMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void LoadMods()",
      "void FilterDlcs(inout array<ref ModInfo> modArray)",
      "void ShowDlcFrame(bool show)",
      "void PopulateDlcFrame()",
      "bool OnMouseButtonDown(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsFocusable(Widget w)",
      "void Refresh()",
      "void OnShow()",
      "void OnHide()",
      "void Update(float timeslice)",
      "void Play()",
      "bool CanSaveDefaultCharacter()",
      "void OpenMenuServerBrowser()",
      "void OpenMenuCustomizeCharacter()",
      "void NextCharacter()",
      "void PreviousCharacter()",
      "void OnChangeCharacter(bool create_character = true)",
      "void OpenStats()",
      "void OpenMessages()",
      "void OpenSettings()",
      "void PlayVideo()",
      "void OpenFeedback()",
      "void OpenTutorials()",
      "void OpenCredits()",
      "void Exit()",
      "bool TryConnectLastSession(out string ip, out int port)",
      "void AutoConnect()",
      "void ConnectLastSession()",
      "void ConnectBestServer()",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ButtonSetText(Widget w, string text)",
      "void ButtonSetColor(Widget w, int color)",
      "void ImagenSetColor(Widget w, int color)",
      "void ButtonSetTextColor(Widget w, int color)"
    ]
  },
  "MainMenuConsole": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void OnDLCChange(EDLCId dlcId)",
      "void LoadMods()",
      "void FilterDLCs(inout array<ref ModInfo> modArray)",
      "void PopulateDlcFrame()",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void Refresh()",
      "void OnShow()",
      "void OnHide()",
      "void Update(float timeslice)",
      "void ToggleFeedbackDialog()",
      "bool FeedbackDialogVisible()",
      "bool CanStoreBeOpened()",
      "void OpenMenuServerBrowser()",
      "void OpenMenuControls()",
      "void OpenMenuOptions()",
      "void OpenMenuPlayVideo()",
      "void OpenMenuTutorials()",
      "void OpenMenuCustomizeCharacter()",
      "void OpenCredits()",
      "void ChangeAccount()",
      "void Exit()",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "void ButtonSetText(Widget w, string text)",
      "void ButtonSetColor(Widget w, int color)",
      "void ButtonSetAlphaAnim(Widget w)",
      "void ButtonSetTextColor(Widget w, int color)",
      "void UpdateControlsElements()",
      "void UpdateControlsElementVisibility()"
    ]
  },
  "MainMenuNewsfeed": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void MainMenuNewsfeed( Widget root )",
      "void ShowNewsfeed()",
      "void HideNewsfeed()",
      "void OpenDLC()",
      "void OpenDiscord()",
      "void OpenFeedback()",
      "void OpenForums()",
      "void OpenTwitter()",
      "void OpenYoutube()",
      "bool OnClick( Widget w, int x, int y, int button )",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool OnMouseLeave( Widget w, Widget enterW, int x, int y )",
      "bool OnFocus( Widget w, int x, int y )",
      "bool OnFocusLost( Widget w, int x, int y )",
      "bool IsFocusable( Widget w )",
      "void ColorRed( Widget w, int x, int y )",
      "void ColorWhite( Widget w, Widget enterW, int x, int y )"
    ]
  },
  "MainMenuDlcHandlerBase": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void MainMenuDlcHandlerBase(ModInfo info, Widget parent, JsonDataDLCInfo DlcInfo)",
      "void Init()",
      "void CreateRootWidget(Widget parent)",
      "void ShowInfoPanel(bool show)",
      "bool IsInfoPanelVisible()",
      "void OnPanelVisibilityChanged()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool LoadVideoFile()",
      "void StartVideo()",
      "void StopVideo()",
      "void PauseVideo()",
      "void UnloadVideo()",
      "void ColorFocussed(Widget w, int x, int y)",
      "void ColorUnfocussed(Widget w, Widget enterW, int x, int y)",
      "void UpdateOwnedStatus()",
      "void OnDLCChange()",
      "void SetPlatformSpecifics()",
      "void UpdateAllPromotionInfo()",
      "void UpdateDlcData()",
      "void UpdateIconVisibility()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)"
    ]
  },
  "MainMenuStats": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void MainMenuStats(Widget root)",
      "void ShowStats()",
      "void HideStats()",
      "void UpdateStats()",
      "string GetDistanceString( float total_distance, bool meters_only = false )",
      "string GetValueString(float total_value, bool show_decimals = false)",
      "string GetTimeString(float total_time)"
    ]
  },
  "MainMenuVideo": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void OnShow()",
      "void OnHide()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void StopVideo()",
      "void PlayPauseVideo()",
      "void Update(float timeslice)",
      "void OnVisibilityChanged(bool isVisible)",
      "void LoadFooterButtonTexts()",
      "void LoadTextStrings()",
      "void UpdateControlsElements()"
    ]
  },
  "TutorialsMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void OnShow()",
      "void Back()",
      "void DrawConnectingLines(int index)",
      "void Update(float timeslice)",
      "void LoadFooterButtonTexts()",
      "void LoadTextStrings()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsFocusable(Widget w)",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ButtonSetText(Widget w, string text)",
      "void ButtonSetColor(Widget w, int color)",
      "void ImagenSetColor(Widget w, int color)",
      "void ButtonSetTextColor(Widget w, int color)",
      "void UpdateControlsElements()",
      "void UpdateControlsElementVisibility()"
    ]
  },
  "ModsMenuDetailed": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ModsMenuDetailed(array<ref ModInfo> data, Widget parent, ModsMenuTooltip tooltip, UIScriptedMenu menu_parent)",
      "void Open()",
      "void Close()",
      "bool IsOpen()",
      "void HighlightFirst()",
      "void Highlight( ModInfo mod_ref )",
      "void ScrollToMod( ModInfo mod_ref )",
      "void Select( ModInfo mod_ref, bool show )",
      "void PrepareTooltip( ModInfo mod_ref )",
      "void ShowTooltip()",
      "void HideTooltip()",
      "void LoadEntries( array<ref ModInfo> data )",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)"
    ]
  },
  "ModsMenuDetailedEntry": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ModsMenuDetailedEntry(ModInfo data, Widget parent, ModsMenuDetailed parent_menu)",
      "void Select()",
      "void Deselect()",
      "void LoadData()",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)"
    ]
  },
  "ModsMenuSimple": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ModsMenuSimple(array<ref ModInfo> data, Widget parent, ModsMenuDetailed detail_menu)",
      "void LoadEntries(array<ref ModInfo> data)",
      "void Select(ModInfo mod)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)"
    ]
  },
  "ModsMenuSimpleEntry": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ModsMenuSimpleEntry(ModInfo data, int index, Widget parent, ModsMenuSimple parent_menu)",
      "void LoadData()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus( Widget w, int x, int y )",
      "bool OnFocusLost( Widget w, int x, int y )"
    ]
  },
  "ModsMenuTooltip": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ModsMenuTooltip(Widget parent)",
      "void ShowTooltip(ModInfo mod_ref)",
      "void HideTooltip()"
    ]
  },
  "OptionsMenu": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void OptionsMenu()",
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void OnTabSwitch(int tab)",
      "void Apply()",
      "void Back()",
      "void OnAttemptTabSwitch(int source, int target)",
      "bool IsAnyTabChanged()",
      "void OnChanged()",
      "void Reset()",
      "void ResetCurrentTab()",
      "void SetToDefaults()",
      "void PerformSetToDefaults()",
      "void SliderFocus()",
      "void ToggleFocus()",
      "void ToggleDependentOptions(int mode, bool state)",
      "void ReloadOptions()",
      "void ReloadVideoOptions()",
      "bool OnModalResult(Widget w, int x, int y, int code, int result)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsFocusable(Widget w)",
      "void Refresh()",
      "void OnShow()",
      "void Update(float timeslice)",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ColorDisable(Widget w)",
      "void UpdateControlsElements()",
      "void UpdateControlsElementVisibility()"
    ]
  },
  "OptionsMenuControls": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void OptionsMenuControls( Widget parent, Widget details_root, GameOptions options, OptionsMenu menu )",
      "string GetLayoutName()",
      "void EnterKeybindingMenu()",
      "void Focus()",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool OnMouseLeave( Widget w, Widget enterW, int x, int y )",
      "bool OnMouseButtonUp( Widget w, int x, int y, int button )",
      "bool OnFocus( Widget w, int x, int y )",
      "bool OnFocusLost( Widget w, int x, int y )",
      "bool IsFocusable( Widget w )",
      "bool TextMapUpdateWidget(int key)",
      "bool IsChanged()",
      "bool IsConsoleOptionChanged()",
      "bool IsOptionChanged()",
      "void Apply()",
      "void Revert()",
      "void SetToDefaults()",
      "void ShowConsoleSensitivityOptions(int index)",
      "void UpdateKeyboard( int index )",
      "void UpdateAimHelper( int index )",
      "void UpdateControllerLS_VSensitivity( float value )",
      "void UpdateControllerLS_HSensitivity( float value )",
      "void UpdateControllerLS_VehicleMod_HSensitivity( float value )",
      "void UpdateControllerRS_InvertView( int index )",
      "void UpdateControllerRS_VSensitivity( float value )",
      "void UpdateControllerRS_HSensitivity( float value )",
      "void UpdateControllerRS_Curvature( float value )",
      "void UpdateControllerLS_Deadzone( float value )",
      "void UpdateControllerRS_Deadzone( float value )",
      "void UpdateControllerRS_AimMod_VSensitivity( float value )",
      "void UpdateControllerRS_AimMod_HSensitivity( float value )",
      "void UpdateControllerRS_AimMod_Curvature( float value )",
      "void UpdateMouseInvertView( int index )",
      "void UpdateMouseVSensitivity( float value )",
      "void UpdateMouseHSensitivity( float value )",
      "void UpdateMouseAimModVSensitivity( float value )",
      "void UpdateMouseAimModHSensitivity( float value )",
      "void ReloadOptions()",
      "void SetOptions( GameOptions options )",
      "void ToggleDependentOptions(int mode, bool state)",
      "void InitDependentOptionsVisibility()",
      "void FillTextMap()",
      "void ColorRed( Widget w )",
      "void ColorWhite( Widget w, Widget enterW )",
      "void SetActiveOption(OptionSelectorBase option)"
    ]
  },
  "OptionsMenuGame": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void OptionsMenuGame(Widget parent, Widget details_root, GameOptions options, OptionsMenu menu)",
      "string GetLayoutName()",
      "void Focus()",
      "bool IsChanged()",
      "void Apply()",
      "void Revert()",
      "void SetToDefaults()",
      "void ReloadOptions()",
      "void SetOptions(GameOptions options)",
      "void ToggleDependentOptions(int mode, bool state)",
      "void InitDependentOptionsVisibility()",
      "void UpdateLanguageOption(int new_index)",
      "void UpdatePauseOption(int new_index)",
      "void UpdateFOVOption(float new_value)",
      "void UpdateHUDBrightnessOption(float newValue)",
      "void UpdateHUDOption(int new_index)",
      "void UpdateBleedingIndication(int new_index)",
      "void UpdateConnectivityInfo(int newIndex)",
      "void UpdateCrosshairOption(int new_index)",
      "void UpdateQuickbarOption(int new_index)",
      "void UpdateHUDVehicleOption(int new_index)",
      "void UpdateGameOption(int new_index)",
      "void UpdateAdminOption(int new_index)",
      "void UpdatePlayerOption(int new_index)",
      "void UpdateServerInfoOption(int new_index)",
      "void UpdateBrightnessOption(float value)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "void OnBleedingIndicationChanged(bool state)",
      "bool TextMapUpdateWidget(int key)",
      "void FillTextMap()",
      "void RevertHUDBrightness()"
    ]
  },
  "OptionsMenuSounds": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void OptionsMenuSounds(Widget parent, Widget details_root, GameOptions options, OptionsMenu menu)",
      "string GetLayoutName()",
      "void Focus()",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool TextMapUpdateWidget(int key)",
      "void OnVonStateEvent()",
      "void OnPartyChatChangedEvent()",
      "void UpdateWasMicCapturing()",
      "bool IsChanged()",
      "void Apply()",
      "void Revert()",
      "void SetToDefaults()",
      "void ReloadOptions()",
      "void SetOptions(GameOptions options)",
      "void ToggleDependentOptions(int mode, bool state)",
      "void InitDependentOptionsVisibility()",
      "void UpdateMaster(float value)",
      "void UpdateEffects(float value)",
      "void UpdateVOIP(float value)",
      "void UpdateVOIPThreshold(float value)",
      "void UpdateMusic(float value)",
      "void UpdateAmbientSoundModeOption(int value)",
      "void UpdateInputMode(int newIndex)",
      "void UpdateAudioLevel()",
      "void FillTextMap()"
    ]
  },
  "OptionsMenuVideo": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void OptionsMenuVideo( Widget parent, Widget details_root, GameOptions options, OptionsMenu menu )",
      "void InitSelectors()",
      "string GetLayoutName()",
      "void Focus()",
      "void ReloadOptions()",
      "bool IsChanged()",
      "void Apply()",
      "void Revert()",
      "void SetToDefaults()",
      "void SetOptions( GameOptions options )",
      "void ToggleDependentOptions(int mode, bool state)",
      "void InitDependentOptionsVisibility()",
      "void RefreshCustom()",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool OnMouseLeave( Widget w, Widget enterW, int x, int y )",
      "void OnOptionChanged()",
      "void OnFlipModeChanged( int value )",
      "void OnOverallQualityChanged( int value )",
      "void OnDisplayModeChanged( int value )",
      "void OnResolutionChanged( int value )",
      "void OnBrightnessChanged( float value )",
      "void OnVSyncChanged( float value )",
      "void OnColorDepthChanged( int value )",
      "void OnObjectDetailChanged( int value )",
      "void OnTerrainDetailChanged( int value )",
      "void OnTextureDetailChanged( int value )",
      "void OnShadowDetailChanged( int value )",
      "void OnVisibilityChanged( int value )",
      "void OnObjectVisibilityChanged( int value )",
      "void OnTextureFilteringChanged( int value )",
      "void OnTerrainSurfaceDetailChanged( int value )",
      "void OnPPAAChanged( int value )",
      "void OnHWAAChanged( int value )",
      "void OnATOCChanged( int value )",
      "void OnAOChanged( int value )",
      "void OnPPQualityChanged( int value )",
      "void OnSSRQualityChanged( int value )",
      "bool OnFocus( Widget w, int x, int y )",
      "bool TextMapUpdateWidget(int key)",
      "void FillTextMap()"
    ]
  },
  "ServerBrowserDetailsContainer": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ServerBrowserDetailsContainer(Widget root, ServerBrowserTab parent)",
      "void SetDetails(GetServersResultRow serverInfo, bool online = false)",
      "void ClearDetails()",
      "void SetName(string name)",
      "void SetType(string shardId)",
      "void SetConsoleType(bool offical)",
      "void SetMode(int mode)",
      "void SetServerIP(string ip)",
      "void SetCharacter(string characterName)",
      "void SetFriends(string steamFriends = )",
      "void SetTimeAcceleration(float timeMul, float nightTimeMul)",
      "void SetTimeIcon(string time, float multiplier)",
      "void SetBattleyeState(int enabled = -1)",
      "void SetVersion(string version)",
      "void SetServerDesc(string desc)",
      "void SetServerMap(GetServersResultRow serverInfo)",
      "void Focus()",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)"
    ]
  },
  "ServerBrowserEntry": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ServerBrowserEntry(Widget parent, int index, ServerBrowserTab tab)",
      "void Show(bool show)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnDoubleClick(Widget w, int x, int y, int button)",
      "bool OnMouseButtonUp(Widget w, int x, int y, int button)",
      "void OnSelect()",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void Focus()",
      "void ServerListFocus(bool focus)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool IsOnline()",
      "bool IsFocusable(Widget w)",
      "void FillInfo(GetServersResultRow server_info)",
      "void UpdateEntry()",
      "void SetName(string name)",
      "void SetPasswordLocked(bool locked)",
      "void SetPopulationEx(GetServersResultRow serverInfo)",
      "void SetSlots(int slots)",
      "void SetPing(int ping)",
      "void SetTime(string time, float multiplier)",
      "void SetShard(int shard)",
      "void RefreshDLCIcon()",
      "void SetCharacterAlive(string char_alive)",
      "void SetFriends(string friends_text)",
      "void SetMode(int mode)",
      "void SetBattleye(bool battleye)",
      "void SetIP(string ip)",
      "string GetIP()",
      "int GetPort()",
      "int GetSteamQueryPort()",
      "string GetServerID()",
      "string GetMapToRun()",
      "void SetFavorite(bool favorite)",
      "void SetAcceleration(float mult)",
      "void SetModded(bool is_modded)",
      "void SetServerMapName()",
      "void SetMods(array<string> mods)",
      "void SetMouseAndKeyboard(bool is_mkenabled)",
      "void SetIsOnline(bool isOnline)",
      "bool ToggleFavorite()",
      "bool ToggleExpand()",
      "bool SetExpand(bool expand)",
      "void Select(bool notify = true)",
      "void Deselect()",
      "void UpdateColors()",
      "void Preview(Widget w, int x, int y)",
      "void Darken(Widget w, int x, int y)",
      "void Lighten(Widget w, Widget enterW, int x, int y)",
      "string GetMapName()",
      "void SetMapName(string mapName)",
      "void SetPopulation(int population, int slots)"
    ]
  },
  "ServerBrowserFavoritesTabConsolePages": {
    "parent": "ServerBrowserTabConsolePages",
    "methods": [
      "void Construct(Widget parent, ServerBrowserMenuNew menu, TabType type)",
      "void OnLoadServersAsyncFinished()",
      "void LoadEntries(int cur_page_index , GetServersResultRowArray page_entries)",
      "void LoadExtraEntries(int index)",
      "void RefreshList()",
      "void RefreshServerList()",
      "void SetFavoriteChanged(bool state)",
      "bool PassFilter(GetServersResultRow result)",
      "void PressThumbRight()",
      "void PressX()",
      "void SetFocusFilters()"
    ]
  },
  "ServerBrowserFavoritesTabPc": {
    "parent": "ServerBrowserTabPc",
    "methods": [
      "void Construct(Widget parent, ServerBrowserMenuNew menu, TabType type)",
      "void LoadExtraEntries(int index)",
      "void RefreshList()",
      "string GetConnEndPoint(CachedServerInfo cachedInfo)",
      "string GetQueryEndPoint(CachedServerInfo cachedInfo)"
    ]
  },
  "ServerBrowserFilterContainer": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ServerBrowserFilterContainer(Widget root, ServerBrowserTab parent)",
      "void OnFilterChanged()",
      "void OnMapFilterChanged()",
      "void LoadFilters()",
      "void SaveFilters()",
      "void ResetFilters()",
      "bool PingIsSet()",
      "bool FavoriteIsSet()",
      "bool PreviouslyIsSet()",
      "bool ProcessIntoIPAddress(out string potential_ip)",
      "bool LimitTextBoxCharacterCount(out string text, int max_length)",
      "string GenerateValidIP(string potential_ip)",
      "bool GenerateValidFilter(out string potential_filter)",
      "void OnSortChanged(int value)",
      "void Focus()",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)"
    ]
  },
  "ServerBrowserMenuNew": {
    "parent": "UIScriptedMenu",
    "methods": [
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "void SetServersLoadingTab(TabType refreshing)",
      "void AddFavoritesToFilter(GetServersInput input)",
      "bool IsFavorited(string server_id)",
      "bool SetFavoriteConsoles(string ipAddress, int port, bool favorite)",
      "void AddFavorite(string ipAddress, int port, bool favorite)",
      "void Back()",
      "void ShowYButton(bool show)",
      "void UpdateYButtonLabel(string text)",
      "void ShowAButton(bool show)",
      "void UpdateAButtonLabel(string text)",
      "void UpdateXButtonLabel(string text)",
      "void ShowThumbRButton(bool show)",
      "void UpdateThumbRButtonLabel(string text)",
      "void FilterFocus(bool focus)",
      "void DetailsFocus(bool focus)",
      "void BackButtonFocus()",
      "void ServerListFocus(bool focus, bool favorite)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "void Refresh()",
      "void Update(float timeslice)",
      "bool IsFocusable(Widget w)",
      "void LoadFavoriteServers()",
      "void SaveFavoriteServersConsoles()",
      "void SelectServer(ServerBrowserEntry server)",
      "void DeselectCurrentServer()",
      "void Connect(ServerBrowserEntry server)",
      "void Play()",
      "void CustomizeCharacter()",
      "void NextCharacter()",
      "void PreviousCharacter()",
      "void OnTabSwitch()",
      "void OnLoadServerModsAsync(GetServerModListResult result_list)",
      "void OnLoadServersAsync(GetServersResult result_list, EBiosError error, string response)",
      "void ColorHighlight(Widget w)",
      "void ColorNormal(Widget w)",
      "void ButtonSetText(Widget w, string text)",
      "void ButtonSetColor(Widget w, int color)",
      "void ButtonSetTextColor(Widget w, int color)",
      "void UpdateControlsElements()",
      "void OnShow()",
      "void OnHide()"
    ]
  },
  "ServerBrowserTab": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void ServerBrowserTab(Widget parent, ServerBrowserMenuNew menu, TabType type)",
      "void Construct(Widget parent, ServerBrowserMenuNew menu, TabType type)",
      "bool GetIsServerLoadingFinished()",
      "void OnDLCChange(EDLCId dlcId)",
      "void ScrollToEntry( ServerBrowserEntry entry )",
      "void Focus()",
      "void OnFilterFocusLost(Widget w)",
      "void OnFilterFocus(Widget w)",
      "void OnDetailsFocusLost(Widget w)",
      "void OnDetailsFocus(Widget w)",
      "void OnFilterChanged()",
      "void ServerListFocus(bool focus, bool favorite)",
      "bool OnFocus(Widget w, int x, int y)",
      "bool OnFocusLost(Widget w, int x, int y)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool IsFocusable(Widget w)",
      "void SetPanelFocus()",
      "void PressA()",
      "void PressX()",
      "void PressY()",
      "void PressSholderLeft()",
      "void PressSholderRight()",
      "void OnPressShoulder()",
      "void Left()",
      "void LeftHold()",
      "void LeftRelease()",
      "void Right()",
      "void RightHold()",
      "void RightRelease()",
      "void Up()",
      "void Down()",
      "void PressThumbRight()",
      "void OnLoadServerModsAsync(string server_id, array<string> mods)",
      "void GetNextEntry()",
      "void GetPrevEntry()",
      "void GetNextFilter()",
      "void GetPrevFilter()",
      "void SetCurrentPage(int page_num)",
      "int GetCurrentPage()",
      "bool IsNotInitialized()",
      "void ResetFilters()",
      "void ApplyFilters()",
      "void AddFavoritesToFilter( GetServersInput input )",
      "void RefreshList()",
      "void GetNextPage()",
      "void SelectServer(ServerBrowserEntry server)",
      "void OnLoadServersAsyncPC(GetServersResult result_list, EBiosError error, string response)",
      "void OnLoadServersAsyncConsole(GetServersResult result_list, EBiosError error, string response)",
      "void UpdateServerList()",
      "void SetSort( ESortType type, ESortOrder order )",
      "bool IsPingInRange( int ping, string max_ping )",
      "bool PassFilter( GetServersResultRow result )",
      "void LoadExtraEntries(int index)",
      "void Connect( ServerBrowserEntry server )",
      "string GetSortOption()",
      "int AddSorted( GetServersResultRow entry )",
      "void Unfavorite( string uid )",
      "void ButtonEnable( Widget w )",
      "void ButtonDisable( Widget w )",
      "void ColorHighlight( Widget w )",
      "void ColorNormal( Widget w )",
      "void ColorDisable( Widget w )",
      "void SwitchRightAreaView()",
      "void SwitchToDetails(bool focus = true)",
      "void SwitchToFilters(bool focus = true)",
      "void SetServerDetails(GetServersResultRow server_info, bool online)",
      "void ShowServerDetails()"
    ]
  },
  "ServerBrowserTabConsole": {
    "parent": "ServerBrowserTab",
    "methods": [
      "void Construct( Widget parent, ServerBrowserMenuNew menu, TabType type )",
      "void ShowHideConsoleWidgets()",
      "void OnLoadServersAsyncConsole( GetServersResult result_list, EBiosError error, string response )",
      "void OnLoadServersAsyncFinished()",
      "void LoadEntries( int cur_page_index , GetServersResultRowArray page )",
      "void OnFilterFocus( Widget w )",
      "void OnFilterChanged()",
      "void RefreshList()",
      "void ResetFilters()",
      "void ApplyFilters()",
      "void OnFilterFocusLost( Widget w )",
      "void PressA()",
      "void PressX()",
      "void PressY()",
      "void PressSholderLeft()",
      "void PressSholderRight()",
      "void OnPressShoulder()",
      "void SetFocusFilters()",
      "void SetFocusDetails()",
      "void Focus()",
      "void SetFocusServers()",
      "void SetEnableFilters(bool enable)",
      "void SetEnableServers(bool enable)",
      "void ColorHighlight( Widget w )",
      "void ColorNormal( Widget w )",
      "void ColorDisable( Widget w )"
    ]
  },
  "ServerBrowserTabConsolePages": {
    "parent": "ServerBrowserTab",
    "methods": [
      "void Construct(Widget parent, ServerBrowserMenuNew menu, TabType type)",
      "void ShowHideConsoleWidgets()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void OnLoadServersAsyncConsole( GetServersResult result_list, EBiosError error, string response )",
      "void OnLoadServersAsyncFinished()",
      "void LoadEntries( int cur_page_index , GetServersResultRowArray page_entries )",
      "bool PassFilter(GetServersResultRow result)",
      "void OnFilterChanged()",
      "bool CanRefreshServerList()",
      "void RefreshList()",
      "void ResetFilters()",
      "void ApplyFilters()",
      "void PressA()",
      "void PressX()",
      "void RefreshServerList()",
      "void PressY()",
      "void PressThumbRight()",
      "void Left()",
      "void LeftHold()",
      "void LeftRelease()",
      "void Right()",
      "void RightHold()",
      "void RightRelease()",
      "void PressSholderLeft()",
      "void PressSholderRight()",
      "void OnPressShoulder()",
      "void Focus()",
      "void ShowServerDetails()",
      "void SetFocusFilters()",
      "void SetFocusDetails()",
      "void SetFocusServers()",
      "void SetEnableFilters(bool enable)",
      "void SetEnableServers(bool enable)",
      "void UpdatePageButtons()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void ColorHighlight( Widget w )",
      "void ColorNormal( Widget w )",
      "void ColorDisable( Widget w )",
      "void SwitchToDetails(bool focus = true)",
      "void SwitchToFilters(bool focus = true)"
    ]
  },
  "ServerBrowserTabPc": {
    "parent": "ServerBrowserTab",
    "methods": [
      "void Construct(Widget parent, ServerBrowserMenuNew menu, TabType type)",
      "void RefreshList()",
      "void ResetFilters()",
      "void ApplyFilters()",
      "void LoadingServersStop()",
      "void OnLoadServersAsyncPC(GetServersResult result_list, EBiosError error, string response)",
      "void OnLoadServersAsyncPCFinished()",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnMouseEnter(Widget w, int x, int y)",
      "bool OnMouseLeave(Widget w, Widget enterW, int x, int y)",
      "bool OnMouseButtonUp( Widget w, int x, int y, int button )",
      "void OnFilterChanged()",
      "void OnClickPagePrev()",
      "void OnClickPageNext()",
      "void OnClickPageEnd()",
      "void OnClickPageFirst()",
      "bool OnClickPage(Widget w)",
      "void SetPageIndex(int page_index)",
      "void ToggleSort( ESortType type )",
      "void SetSort( ESortType type, ESortOrder order )",
      "int GetTimeOfDayEnum( string time_of_day )",
      "int AddSorted( GetServersResultRow entry )",
      "int SortedInsert(GetServersResultRow entry, ESortType sort_type)",
      "int SortedInsertEx(GetServersResultRow entry, ESortType sortType, bool isDescending)",
      "int SortedInsertAsc( GetServersResultRow entry, ESortType sort_type )",
      "int SortedInsertDesc( GetServersResultRow entry, ESortType sort_type )",
      "void UpdatePageButtons()",
      "void UpdateServerList()",
      "void UpdateStatusBar()",
      "void OnLoadServerModsAsync( string server_id, array<string> mods )",
      "bool IsFocusable( Widget w )",
      "void ButtonRefreshToCancel()",
      "void ButtonCancelToRefresh()",
      "void OnClickDetails()",
      "void OnClickFilters()",
      "void SwitchToDetails(bool focus = true)",
      "void SwitchToFilters(bool focus = true)",
      "void ShowServerDetails()"
    ]
  },
  "TabberUI": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void OnInputPresetChanged()",
      "void OnInputDeviceChanged(EInputDeviceType pInputDeviceType)",
      "void Init()",
      "void OnWidgetScriptInit( Widget w )",
      "void AlignTabbers()",
      "int AddTab( string name )",
      "void RemoveTab( int index )",
      "int GetTabCount()",
      "bool CanSwitchTab()",
      "void SetCanSwitch(bool value)",
      "void PerformSwitchTab(int index)",
      "bool OnMouseEnter( Widget w, int x, int y )",
      "bool OnMouseLeave( Widget w, Widget enterW, int x, int y )",
      "bool OnMouseButtonUp( Widget w, int x, int y, int button )",
      "bool OnChildAdd( Widget w, Widget child )",
      "bool OnChildRemove( Widget w, Widget child )",
      "void EnableTabControl( int index, bool enable )",
      "void SelectTabControl( int index )",
      "void SelectTabPanel( int index )",
      "void DeselectTabControl( int index )",
      "void DeselectTabPanel( int index )",
      "void DeselectAll()",
      "void NextTab()",
      "void PreviousTab()",
      "int GetSelectedIndex()",
      "void RefreshTab(bool performInitAlignment = false)",
      "void UpdateControlsElements()",
      "void DisableTabs(bool disable)"
    ]
  },
  "UIPopupScriptConfigs": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptConfigs( Widget wgt )",
      "void ChangeConfigFilter()",
      "void OnOpen(Param param)",
      "void AddItemToClipboard( TextListboxWidget text_listbox_widget )",
      "void RenderVariables( int row )",
      "void ExpandHierarchy( int row )",
      "void CollapseHierarchy( int row )",
      "void ClearHierarchy()",
      "void FindInHierarchy( string class_name )",
      "bool OnChange( Widget w, int x, int y, bool finished )",
      "bool OnClick( Widget w, int x, int y, int button )"
    ]
  },
  "UIPopupScriptEditorSettings": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptEditorSettings(Widget wgt)",
      "void OnOpen(Param param)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)"
    ]
  },
  "UIPopupScriptInitScript": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptInitScript(Widget wgt)",
      "void OnOpen(Param param)",
      "bool OnClick(Widget w, int x, int y, int button)"
    ]
  },
  "UIPopupScriptNotify": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptNotify(Widget wgt)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SetLabelText(string text)"
    ]
  },
  "UIPopupScriptPositionManager": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptPositionManager( Widget wgt )",
      "void OnOpen( Param param )",
      "bool OnClick( Widget w, int x, int y, int button )",
      "void OnItemSelected( Widget w, int x, int y, int row, int column, int oldRow, int oldColumn )",
      "string GetCurrentLocationName()"
    ]
  },
  "UIPopupScriptPresetNew": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptPresetNew( Widget wgt )",
      "bool OnClick( Widget w, int x, int y, int button )"
    ]
  },
  "UIPopupScriptPresetRename": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptPresetRename( Widget wgt )",
      "void OnOpen( Param param )",
      "bool OnClick( Widget w, int x, int y, int button )"
    ]
  },
  "UIPopupScriptSceneDelete": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptSceneDelete(Widget wgt)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SetDeleteName(string scene_name)"
    ]
  },
  "UIPopupScriptSceneManager": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptSceneManager(Widget wgt)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void UpdateSceneList()",
      "void OnOpen(Param param)",
      "void OnClose()",
      "void OnUpdate()",
      "void ResetSliders()",
      "void UpdateSliderStartTime( int hour, int minute )",
      "void UpdateSliderStartDay( int month, int day )",
      "void UpdateSliderOvercast()",
      "void UpdateSliderRain()",
      "void UpdateSliderFog()",
      "void UpdateSliderWindForce()"
    ]
  },
  "UIPopupScriptSceneNew": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptSceneNew(Widget wgt)",
      "bool OnClick(Widget w, int x, int y, int button)"
    ]
  },
  "UIPopupScriptSceneRename": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptSceneRename(Widget wgt)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "void SetRenameName(string rename_name)"
    ]
  },
  "UIPopupScriptSceneSettings": {
    "parent": "UIPopupScript",
    "methods": [
      "void UIPopupScriptSceneSettings(Widget wgt)",
      "bool OnClick(Widget w, int x, int y, int button)",
      "bool OnChange(Widget w, int x, int y, bool finished)",
      "void OnOpen(Param param)",
      "void OnClose()",
      "void OnUpdate()",
      "void ResetSliders()",
      "void UpdateSliderStartTime( int hour, int minute )",
      "void UpdateSliderStartDay( int month, int day )",
      "void UpdateSliderOvercast()",
      "void UpdateSliderRain()",
      "void UpdateSliderFog()",
      "void UpdateSliderWindForce()"
    ]
  },
  "BleedingIndicatorDropData": {
    "parent": null,
    "methods": [
      "void BleedingIndicatorDropData(ImageWidget image, int severity)",
      "void InitImageScale()",
      "void ScatterPosition(vector pos)",
      "void StartDrop()",
      "void StopDrop()",
      "void SetBasePosition(vector pos)",
      "bool IsRunning()",
      "void AdjustColorSaturation()",
      "void UpdateAlpha(float progress,float progressFade)",
      "void UpdateTransform(float progress, float progressFade)",
      "void Update(float timeSlice)"
    ]
  },
  "BleedingIndicator": {
    "parent": "Managed",
    "methods": [
      "void BleedingIndicator(int source_ID, int severity, GameplayEffectsDataBleeding parent)",
      "void InitIndicator(vector position)",
      "void StopIndicator(bool instant = false)",
      "void StartRunningDrops()",
      "bool IsRunningDrops()",
      "void TrySpawnNextDrop()",
      "void ResetSequence()",
      "void ResetIndicator()",
      "void Update(float timeSlice)",
      "bool GetEndNow()",
      "int GetSeverity()"
    ]
  },
  "Hit_Foliage_Conifer": {
    "parent": null,
    "methods": [
      "void Hit_Foliage_Conifer()"
    ]
  },
  "Hit_Foliage_Green": {
    "parent": null,
    "methods": [
      "void Hit_Foliage_Green()"
    ]
  },
  "Hit_MeatBones_MeleeFist": {
    "parent": null,
    "methods": [
      "void Hit_MeatBones_MeleeFist()"
    ]
  },
  "Hit_MeatBones_MeleePipeWrench": {
    "parent": null,
    "methods": [
      "void Hit_MeatBones_MeleePipeWrench()"
    ]
  },
  "Hit_MeatBones_MeleeShovel": {
    "parent": null,
    "methods": [
      "void Hit_MeatBones_MeleeShovel()"
    ]
  },
  "Hit_MeatBones_MeleeWrench": {
    "parent": null,
    "methods": [
      "void Hit_MeatBones_MeleeWrench()"
    ]
  },
  "PPEDOF": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "void RegisterMaterialParameters()",
      "void ApplyValueChanges()",
      "void SetFinalParameterValue(int parameter_idx)"
    ]
  },
  "PPEExposureNative": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "void RegisterMaterialParameters()",
      "void SetFinalParameterValue(int parameter_idx)"
    ]
  },
  "PPEEyeAccomodationNative": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "void RegisterMaterialParameters()",
      "void SetFinalParameterValue(int parameter_idx)"
    ]
  },
  "PPELightIntensityParamsNative": {
    "parent": null,
    "methods": [
      "int GetPostProcessEffectID()",
      "void RegisterMaterialParameters()",
      "void ApplyValueChanges()",
      "void SetFinalParameterValue(int parameter_idx)"
    ]
  },
  "AreaDamageComponentData": {
    "parent": null,
    "methods": [
      "void AreaDamageComponent(AreaDamageManager parent)",
      "bool OnEvaluateDamage(TriggerInsider insider, float damageCoef)",
      "void PreDamageActions()",
      "void PostDamageActions()",
      "bool ShouldDamage(Object object)",
      "bool EvaluateDamageInternal(TriggerInsider insider, float damageCoef)"
    ]
  },
  "AreaDamageComponent": {
    "parent": null,
    "methods": [
      "void AreaDamageComponent(AreaDamageManager parent)",
      "bool OnEvaluateDamage(TriggerInsider insider, float damageCoef)",
      "void PreDamageActions()",
      "void PostDamageActions()",
      "bool ShouldDamage(Object object)",
      "bool EvaluateDamageInternal(TriggerInsider insider, float damageCoef)"
    ]
  },
  "AreaDamageComponentRandomHitzone": {
    "parent": null,
    "methods": [
      "void AreaDamageComponentRandomHitzone(AreaDamageManager parent)",
      "void SetHitZones( array<string> hitzones )"
    ]
  },
  "AreaDamageComponentRaycasted": {
    "parent": null,
    "methods": [
      "void AreaDamageComponentRaycasted(AreaDamageManager parent)",
      "void OnTriggerCreated()",
      "void SetRaycastSources( array<string> raycast_sources )",
      "void SetRaycastSourcesVector( array<vector> raycast_sources )",
      "void SetRaycastLength(float length)",
      "void OnStayFinishServerEvent()",
      "void ClearCache()",
      "string GetRaycastedHitZone(Object victim)",
      "string GetFallbackHitZone(Object victim)"
    ]
  },
  "AreaExposureMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "void ApplyAgentsToBleedingSources(PlayerBase player, float deltaT)",
      "void BleedingSourceCreateCheck(PlayerBase player)",
      "float TransmitAgents(PlayerBase player, float count)"
    ]
  },
  "BleedingCheckMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "BlindedMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "BrokenArmsMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)"
    ]
  },
  "BrokenLegsMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "static void DelayedRequest(PlayerBase player, bool state)",
      "void Delayed(bool state)"
    ]
  },
  "BurningMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "FatigueMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)"
    ]
  },
  "FeverMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "HeartAttackMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "HeatBufferMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "void Tick(float delta_time)",
      "int GetHeatBufferStage()"
    ]
  },
  "HemolyticReactionMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "float CalculateRunTime()"
    ]
  },
  "PoisoningMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "StuffedStomachMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "void OnTick(PlayerBase player, float deltaT)",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)"
    ]
  },
  "TremorMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "VomitStuffedMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)"
    ]
  },
  "WetMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "string GetDebugText()",
      "string GetDebugTextSimple()"
    ]
  },
  "BrainDiseaseMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "CholeraMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "CommonColdMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "ContaminationStage1Mdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)"
    ]
  },
  "ContaminationStage2Mdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "ContaminationStage3Mdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "HeavyMetalMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "HeavyMetalPhase1Mdfr": {
    "parent": null,
    "methods": [
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "void Init()",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)"
    ]
  },
  "HeavyMetalPhase2Mdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)"
    ]
  },
  "HeavyMetalPhase3Mdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "InfluenzaMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "PneumoniaMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "SalmonellaMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "TestDiseaseMdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnReconnect(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "WoundInfectionMdfr": {
    "parent": null,
    "methods": [
      "void WoundInfectionMdfr()",
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "WoundInfectStage1Mdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "WoundInfectStage2Mdfr": {
    "parent": null,
    "methods": [
      "void Init()",
      "string GetDebugText()",
      "bool ActivateCondition(PlayerBase player)",
      "void OnActivate(PlayerBase player)",
      "void OnDeactivate(PlayerBase player)",
      "bool DeactivateCondition(PlayerBase player)",
      "void OnTick(PlayerBase player, float deltaT)"
    ]
  },
  "CoughSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "bool IsContaminationActive()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnAnimationStart()",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "FreezeSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnAnimationPlayFailed()",
      "bool CanActivate()",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "FreezeRattleSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "bool CanActivate()",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "GaspSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "bool CanBeInterupted()",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "HotSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnAnimationPlayFailed()",
      "bool CanActivate()",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "LaughterSymptom": {
    "parent": null,
    "methods": [
      "void OnInit()",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "PainHeavySymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnAnimationPlayFailed()",
      "bool CanActivate()",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "PainLightSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnAnimationPlayFailed()",
      "bool CanActivate()",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "SneezeSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "VomitSymptom": {
    "parent": null,
    "methods": [
      "void OnInit()",
      "bool IsContaminationActive()",
      "void SetParam(Param p)",
      "void OnAnimationStart()",
      "void OnAnimationFinish()",
      "bool CanActivate()",
      "void OnGetActivatedServer(PlayerBase player)",
      "bool IsSyncToRemotes()"
    ]
  },
  "BlindnessSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "BloodLoss": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "DeafnessCompleteSymptom": {
    "parent": null,
    "methods": [
      "void OnInit()",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "FeverBlurSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void OnUpdateServer(PlayerBase player, float deltatime)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "HandShiversSymptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void SetParam(Param p)",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "HMP3Symptom": {
    "parent": "SymptomBase",
    "methods": [
      "void OnInit()",
      "void OnUpdateClient(PlayerBase player, float deltatime)",
      "void OnGetActivatedServer(PlayerBase player)",
      "void OnGetActivatedClient(PlayerBase player)",
      "void OnGetDeactivatedServer(PlayerBase player)",
      "void OnGetDeactivatedClient(PlayerBase player)"
    ]
  },
  "MindStateSoundEventBase": {
    "parent": "InfectedSoundEventBase",
    "methods": [
      "bool CanPlay()",
      "void CalmIdleSoundEvent()",
      "void CalmMoveSoundEvent()",
      "void DisturbedIdleSoundEvent()",
      "void ChaseMoveSoundEvent()",
      "void AlertedIdleSoundEvent()",
      "void AlertedMoveSoundEvent()"
    ]
  },
  "CalmIdleSoundEvent": {
    "parent": "MindStateSoundEventBase",
    "methods": [
      "void CalmIdleSoundEvent()",
      "void CalmMoveSoundEvent()",
      "void DisturbedIdleSoundEvent()",
      "void ChaseMoveSoundEvent()",
      "void AlertedIdleSoundEvent()",
      "void AlertedMoveSoundEvent()"
    ]
  },
  "CalmMoveSoundEvent": {
    "parent": "MindStateSoundEventBase",
    "methods": [
      "void CalmMoveSoundEvent()",
      "void DisturbedIdleSoundEvent()",
      "void ChaseMoveSoundEvent()",
      "void AlertedIdleSoundEvent()",
      "void AlertedMoveSoundEvent()"
    ]
  },
  "DisturbedIdleSoundEvent": {
    "parent": "MindStateSoundEventBase",
    "methods": [
      "void DisturbedIdleSoundEvent()",
      "void ChaseMoveSoundEvent()",
      "void AlertedIdleSoundEvent()",
      "void AlertedMoveSoundEvent()"
    ]
  },
  "ChaseMoveSoundEvent": {
    "parent": "MindStateSoundEventBase",
    "methods": [
      "void ChaseMoveSoundEvent()",
      "void AlertedIdleSoundEvent()",
      "void AlertedMoveSoundEvent()"
    ]
  },
  "AlertedIdleSoundEvent": {
    "parent": "MindStateSoundEventBase",
    "methods": [
      "void AlertedIdleSoundEvent()",
      "void AlertedMoveSoundEvent()"
    ]
  },
  "AlertedMoveSoundEvent": {
    "parent": "MindStateSoundEventBase",
    "methods": [
      "void AlertedMoveSoundEvent()"
    ]
  },
  "DamageSoundEvents": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void DamageSoundEvents()",
      "bool CanPlay(PlayerBase player)",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void DamageLightSoundEvent()",
      "void DamageHeavySoundEvent()"
    ]
  },
  "DamageLightSoundEvent": {
    "parent": "DamageSoundEvents",
    "methods": [
      "void DamageLightSoundEvent()",
      "void DamageHeavySoundEvent()"
    ]
  },
  "DamageHeavySoundEvent": {
    "parent": "DamageSoundEvents",
    "methods": [
      "void DamageHeavySoundEvent()"
    ]
  },
  "DrowningSoundEventBase": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void DrowningEvents()",
      "bool CanPlay(PlayerBase player)",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id,EPlayerSoundEventType type_other )",
      "void DrowningEvent1()",
      "void DrowningEvent2()"
    ]
  },
  "DrowningEvent1": {
    "parent": "DrowningSoundEventBase",
    "methods": [
      "void DrowningEvent1()",
      "void DrowningEvent2()"
    ]
  },
  "DrowningEvent2": {
    "parent": "DrowningSoundEventBase",
    "methods": [
      "void DrowningEvent2()"
    ]
  },
  "HeatComfortEventsBase": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void HeatComfortEventsBase()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id,EPlayerSoundEventType type_other )",
      "void FreezingSoundEvent()",
      "void RattlingTeethSoundEvent()",
      "void HotSoundEvent()"
    ]
  },
  "FreezingSoundEvent": {
    "parent": "HeatComfortEventsBase",
    "methods": [
      "void FreezingSoundEvent()",
      "void RattlingTeethSoundEvent()",
      "void HotSoundEvent()"
    ]
  },
  "RattlingTeethSoundEvent": {
    "parent": "HeatComfortEventsBase",
    "methods": [
      "void RattlingTeethSoundEvent()",
      "void HotSoundEvent()"
    ]
  },
  "HotSoundEvent": {
    "parent": "HeatComfortEventsBase",
    "methods": [
      "void HotSoundEvent()"
    ]
  },
  "HoldBreathSoundEventBase": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void HoldBreathSoundEventBase()",
      "bool HasHoldBreathException()",
      "void HoldBreathSoundEvent()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void ExhaustedBreathSoundEvent()",
      "void ReleaseBreathSoundEvent()"
    ]
  },
  "HoldBreathSoundEvent": {
    "parent": "HoldBreathSoundEventBase",
    "methods": [
      "void HoldBreathSoundEvent()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void ExhaustedBreathSoundEvent()",
      "void ReleaseBreathSoundEvent()"
    ]
  },
  "ExhaustedBreathSoundEvent": {
    "parent": "HoldBreathSoundEventBase",
    "methods": [
      "void ExhaustedBreathSoundEvent()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void ReleaseBreathSoundEvent()"
    ]
  },
  "ReleaseBreathSoundEvent": {
    "parent": "HoldBreathSoundEventBase",
    "methods": [
      "void ReleaseBreathSoundEvent()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)"
    ]
  },
  "InjurySoundEvents": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void InjurySoundEvents()",
      "bool CanPlay(PlayerBase player)",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id,EPlayerSoundEventType type_other )",
      "void InjuryLightSoundEvent()",
      "void InjuryMediumSoundEvent()",
      "void InjuryHeavySoundEvent()"
    ]
  },
  "InjuryLightSoundEvent": {
    "parent": "InjurySoundEvents",
    "methods": [
      "void InjuryLightSoundEvent()",
      "void InjuryMediumSoundEvent()",
      "void InjuryHeavySoundEvent()"
    ]
  },
  "InjuryMediumSoundEvent": {
    "parent": "InjurySoundEvents",
    "methods": [
      "void InjuryMediumSoundEvent()",
      "void InjuryHeavySoundEvent()"
    ]
  },
  "InjuryHeavySoundEvent": {
    "parent": "InjurySoundEvents",
    "methods": [
      "void InjuryHeavySoundEvent()"
    ]
  },
  "JumpEventsBase": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "bool CanPlay(PlayerBase player)",
      "void OnPlay(PlayerBase player)",
      "void OnEnd()",
      "void JumpSoundEvent()"
    ]
  },
  "JumpSoundEvent": {
    "parent": "JumpEventsBase",
    "methods": [
      "void JumpSoundEvent()"
    ]
  },
  "MeleeAttackSoundEvents": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void MeleeAttackSoundEvents()",
      "bool CanPlay(PlayerBase player)",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void OnEnd()",
      "void MeleeAttackLightEvent()",
      "void MeleeAttackHeavyEvent()"
    ]
  },
  "MeleeAttackLightEvent": {
    "parent": "MeleeAttackSoundEvents",
    "methods": [
      "void MeleeAttackLightEvent()",
      "void MeleeAttackHeavyEvent()"
    ]
  },
  "MeleeAttackHeavyEvent": {
    "parent": "MeleeAttackSoundEvents",
    "methods": [
      "void MeleeAttackHeavyEvent()"
    ]
  },
  "PickupHeavySoundEvent": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void PickupHeavySoundEvent()",
      "void ThirstSoundEvent()",
      "void ForceConsumeSoundEvent()",
      "void ForceFeedSoundEvent()",
      "void ForceDrinkSoundEvent()"
    ]
  },
  "ThirstSoundEvent": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void ThirstSoundEvent()",
      "void ForceConsumeSoundEvent()",
      "void ForceFeedSoundEvent()",
      "void ForceDrinkSoundEvent()"
    ]
  },
  "ForceConsumeSoundEvent": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void ForceConsumeSoundEvent()",
      "void ForceFeedSoundEvent()",
      "void ForceDrinkSoundEvent()"
    ]
  },
  "ForceFeedSoundEvent": {
    "parent": "ForceConsumeSoundEvent",
    "methods": [
      "void ForceFeedSoundEvent()",
      "void ForceDrinkSoundEvent()"
    ]
  },
  "ForceDrinkSoundEvent": {
    "parent": "ForceConsumeSoundEvent",
    "methods": [
      "void ForceDrinkSoundEvent()"
    ]
  },
  "StaminaSoundEventBase": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void StaminaSoundEventBase()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void OnPlay(PlayerBase player)",
      "void StaminaDownLight()",
      "void StaminaDownHeavy()",
      "void StaminaUpHeavy()",
      "void StaminaUpLight()",
      "void StaminaUpEnd()",
      "void StaminaNormalDummy()",
      "void StaminaLowFilterBase()",
      "void StaminaLowFilterUpper()",
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaDownLight": {
    "parent": "StaminaSoundEventBase",
    "methods": [
      "void StaminaDownLight()",
      "void StaminaDownHeavy()",
      "void StaminaUpHeavy()",
      "void StaminaUpLight()",
      "void StaminaUpEnd()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void StaminaNormalDummy()",
      "void StaminaLowFilterBase()",
      "void StaminaLowFilterUpper()",
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaDownHeavy": {
    "parent": "StaminaSoundEventBase",
    "methods": [
      "void StaminaDownHeavy()",
      "void StaminaUpHeavy()",
      "void StaminaUpLight()",
      "void StaminaUpEnd()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void StaminaNormalDummy()",
      "void StaminaLowFilterBase()",
      "void StaminaLowFilterUpper()",
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaUpHeavy": {
    "parent": "StaminaSoundEventBase",
    "methods": [
      "void StaminaUpHeavy()",
      "void StaminaUpLight()",
      "void StaminaUpEnd()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void StaminaNormalDummy()",
      "void StaminaLowFilterBase()",
      "void StaminaLowFilterUpper()",
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaUpLight": {
    "parent": "StaminaSoundEventBase",
    "methods": [
      "void StaminaUpLight()",
      "void StaminaUpEnd()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void StaminaNormalDummy()",
      "void StaminaLowFilterBase()",
      "void StaminaLowFilterUpper()",
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaUpEnd": {
    "parent": "StaminaSoundEventBase",
    "methods": [
      "void StaminaUpEnd()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void StaminaNormalDummy()",
      "void StaminaLowFilterBase()",
      "void StaminaLowFilterUpper()",
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaNormalDummy": {
    "parent": "StaminaSoundEventBase",
    "methods": [
      "void StaminaNormalDummy()",
      "void StaminaLowFilterBase()",
      "void StaminaLowFilterUpper()",
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaLowFilterBase": {
    "parent": "StaminaSoundEventBase",
    "methods": [
      "void StaminaLowFilterBase()",
      "void StaminaLowFilterUpper()",
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaLowFilterUpper": {
    "parent": "StaminaLowFilterBase",
    "methods": [
      "void StaminaLowFilterUpper()",
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaLowFilterMid": {
    "parent": "StaminaLowFilterBase",
    "methods": [
      "void StaminaLowFilterMid()",
      "void StaminaLowFilterLower()"
    ]
  },
  "StaminaLowFilterLower": {
    "parent": "StaminaLowFilterBase",
    "methods": [
      "void StaminaLowFilterLower()"
    ]
  },
  "SymptomSoundEventBase": {
    "parent": "PlayerSoundEventBase",
    "methods": [
      "void SymptomSoundEventBase()",
      "bool HasPriorityOverCurrent(PlayerBase player, EPlayerSoundEventID other_state_id, EPlayerSoundEventType type_other)",
      "void CoughSoundEvent()",
      "void LaugherSoundEvent()",
      "void SneezeSoundEvent()",
      "void GaspSoundEvent()",
      "void FatigueSoundEvent()",
      "void OnPlay(PlayerBase player)"
    ]
  },
  "CoughSoundEvent": {
    "parent": "SymptomSoundEventBase",
    "methods": [
      "void CoughSoundEvent()",
      "void LaugherSoundEvent()",
      "void SneezeSoundEvent()",
      "void GaspSoundEvent()",
      "void FatigueSoundEvent()",
      "void OnPlay(PlayerBase player)"
    ]
  },
  "LaugherSoundEvent": {
    "parent": "SymptomSoundEventBase",
    "methods": [
      "void LaugherSoundEvent()",
      "void SneezeSoundEvent()",
      "void GaspSoundEvent()",
      "void FatigueSoundEvent()",
      "void OnPlay(PlayerBase player)"
    ]
  },
  "SneezeSoundEvent": {
    "parent": "SymptomSoundEventBase",
    "methods": [
      "void SneezeSoundEvent()",
      "void GaspSoundEvent()",
      "void FatigueSoundEvent()",
      "void OnPlay(PlayerBase player)"
    ]
  },
  "GaspSoundEvent": {
    "parent": "SymptomSoundEventBase",
    "methods": [
      "void GaspSoundEvent()",
      "void FatigueSoundEvent()",
      "void OnPlay(PlayerBase player)"
    ]
  },
  "FatigueSoundEvent": {
    "parent": "SymptomSoundEventBase",
    "methods": [
      "void FatigueSoundEvent()",
      "void OnPlay(PlayerBase player)"
    ]
  },
  "DigPrimarySoundEvent": {
    "parent": "DigSoundEventBase",
    "methods": [
      "void DigPrimarySoundEvent()",
      "void DigSecondarySoundEvent()",
      "void SelectSoundID()",
      "void CleanHandsPrimarySoundEvent()",
      "void CleanHandsSecondarySoundEvent()"
    ]
  },
  "DigSecondarySoundEvent": {
    "parent": "DigSoundEventBase",
    "methods": [
      "void DigSecondarySoundEvent()",
      "void SelectSoundID()",
      "void CleanHandsPrimarySoundEvent()",
      "void CleanHandsSecondarySoundEvent()"
    ]
  },
  "DigSoundEventBase": {
    "parent": "ReplaceSoundEventBase",
    "methods": [
      "void SelectSoundID()",
      "void CleanHandsPrimarySoundEvent()",
      "void CleanHandsSecondarySoundEvent()"
    ]
  },
  "CleanHandsPrimarySoundEvent": {
    "parent": "CleanHandsSoundEventBase",
    "methods": [
      "void CleanHandsPrimarySoundEvent()",
      "void CleanHandsSecondarySoundEvent()",
      "void SelectSoundID()"
    ]
  },
  "CleanHandsSecondarySoundEvent": {
    "parent": "CleanHandsSoundEventBase",
    "methods": [
      "void CleanHandsSecondarySoundEvent()",
      "void SelectSoundID()"
    ]
  },
  "CleanHandsSoundEventBase": {
    "parent": "ReplaceSoundEventBase",
    "methods": [
      "void SelectSoundID()"
    ]
  },
  "ActionActivateTrapCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void InitActionComponent()",
      "void ActionActivateTrap()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEnd( ActionData action_data )",
      "void OnEndAnimationLoop(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionActivateTrap": {
    "parent": null,
    "methods": [
      "void ActionActivateTrap()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEnd( ActionData action_data )",
      "void OnEndAnimationLoop(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionArmExplosiveCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void InitActionComponent()",
      "void ActionArmExplosive()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionArmExplosive": {
    "parent": null,
    "methods": [
      "void ActionArmExplosive()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionAttachExplosivesTriggerCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionAttachExplosivesTrigger()",
      "void CreateConditionComponents()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool CanBeSetFromInventory()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnFinishProgressClient(ActionData action_data)",
      "void CreateRemoteDetonatorReceiverAsAttachment(ActionData action_data)",
      "void AttachItem(ActionData action_data)"
    ]
  },
  "ActionAttachExplosivesTrigger": {
    "parent": null,
    "methods": [
      "void ActionAttachExplosivesTrigger()",
      "void CreateConditionComponents()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool CanBeSetFromInventory()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnFinishProgressClient(ActionData action_data)",
      "void CreateRemoteDetonatorReceiverAsAttachment(ActionData action_data)",
      "void AttachItem(ActionData action_data)"
    ]
  },
  "ActionBreakLongWoodenStickCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionBreakLongWoodenStick()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "void BreakLongWoodenStick(EntityAI old_item, string new_item_type, PlayerBase player, int count)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "ActionBreakLongWoodenStick": {
    "parent": null,
    "methods": [
      "void ActionBreakLongWoodenStick()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "void BreakLongWoodenStick(EntityAI old_item, string new_item_type, PlayerBase player, int count)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "BreakLongWoodenStick": {
    "parent": null,
    "methods": [
      "void BreakLongWoodenStick(EntityAI old_item, string new_item_type, PlayerBase player, int count)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "ActionBuildOvenCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionBuildOven()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionBuildOven": {
    "parent": null,
    "methods": [
      "void ActionBuildOven()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "BuildPartActionReciveData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float SetCallbackDuration(ItemBase item)",
      "void ActionBuildPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void SetBuildingAnimation(ItemBase item)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "string GetAdminLogMessage(ActionData action_data)",
      "bool UseMainItem()",
      "bool HasProgress()",
      "bool HasAlternativeInterrupt()"
    ]
  },
  "BuildPartActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float SetCallbackDuration(ItemBase item)",
      "void ActionBuildPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void SetBuildingAnimation(ItemBase item)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "string GetAdminLogMessage(ActionData action_data)",
      "bool UseMainItem()",
      "bool HasProgress()",
      "bool HasAlternativeInterrupt()"
    ]
  },
  "ActionBuildPartCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float SetCallbackDuration(ItemBase item)",
      "void ActionBuildPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void SetBuildingAnimation(ItemBase item)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "string GetAdminLogMessage(ActionData action_data)",
      "bool UseMainItem()",
      "bool HasProgress()",
      "bool HasAlternativeInterrupt()"
    ]
  },
  "ActionBuildPart": {
    "parent": null,
    "methods": [
      "void ActionBuildPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void SetBuildingAnimation(ItemBase item)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "string GetAdminLogMessage(ActionData action_data)",
      "bool UseMainItem()",
      "bool HasProgress()",
      "bool HasAlternativeInterrupt()"
    ]
  },
  "ActionActionBuildPartNoTool": {
    "parent": null,
    "methods": [
      "bool UseMainItem()",
      "bool HasProgress()",
      "bool HasAlternativeInterrupt()"
    ]
  },
  "ActionBuildStoneCircleCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionBuildStoneCircle()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionBuildStoneCircle": {
    "parent": null,
    "methods": [
      "void ActionBuildStoneCircle()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionBuryAshesCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionBuryAshes()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionBuryAshes": {
    "parent": null,
    "methods": [
      "void ActionBuryAshes()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionBuryBodyCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionBuryBody()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item, int condition_mask)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionBuryBody": {
    "parent": null,
    "methods": [
      "void ActionBuryBody()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item, int condition_mask)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionConsumeCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionConsume()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasProneException()",
      "bool HasTarget()",
      "void CreateConditionComponents()",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionConsume": {
    "parent": null,
    "methods": [
      "void ActionConsume()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasProneException()",
      "bool HasTarget()",
      "void CreateConditionComponents()",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionCookOnStickCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCookOnStick()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionCookOnStick": {
    "parent": null,
    "methods": [
      "void ActionCookOnStick()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionCoverHeadSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCoverHeadSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingHeadgear( PlayerBase player )"
    ]
  },
  "ActionCoverHeadSelf": {
    "parent": null,
    "methods": [
      "void ActionCoverHeadSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingHeadgear( PlayerBase player )"
    ]
  },
  "ActionCoverHeadTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCoverHeadTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingHeadgear( PlayerBase player)",
      "void CoverHeadOfTargetPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ActionCoverHeadTarget": {
    "parent": null,
    "methods": [
      "void ActionCoverHeadTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingHeadgear( PlayerBase player)",
      "void CoverHeadOfTargetPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "CoverHeadOfTargetPlayerLambda": {
    "parent": null,
    "methods": [
      "void CoverHeadOfTargetPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ActionCraftCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraft()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void ApplyModifiers( ActionData action_data )",
      "void CancelCraft(PlayerBase player)"
    ]
  },
  "ActionCraft": {
    "parent": null,
    "methods": [
      "void ActionCraft()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void ApplyModifiers( ActionData action_data )",
      "void CancelCraft(PlayerBase player)"
    ]
  },
  "ActionCraftArmbandCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftArmband()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftArmband": {
    "parent": null,
    "methods": [
      "void ActionCraftArmband()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftBoltsCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void InitCuttingTypes()",
      "void ActionCraftBolts()",
      "void CreateConditionComponents()",
      "bool IsCuttingType(Object item)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionCraftBolts": {
    "parent": null,
    "methods": [
      "void InitCuttingTypes()",
      "void ActionCraftBolts()",
      "void CreateConditionComponents()",
      "bool IsCuttingType(Object item)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionCraftBoltsFeatherCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftBoltsFeather()",
      "void CreateConditionComponents()",
      "bool IsFeatherType(string itemInHandsType)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionCraftBoltsFeather": {
    "parent": null,
    "methods": [
      "void ActionCraftBoltsFeather()",
      "void CreateConditionComponents()",
      "bool IsFeatherType(string itemInHandsType)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionCraftBoneKnifeCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftBoneKnife()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftBoneKnife": {
    "parent": null,
    "methods": [
      "void ActionCraftBoneKnife()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftBoneKnifeEnvCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftBoneKnifeEnv()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftBoneKnifeEnv": {
    "parent": null,
    "methods": [
      "void ActionCraftBoneKnifeEnv()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedEyePatchCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftImprovisedEyePatch()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedEyePatch": {
    "parent": null,
    "methods": [
      "void ActionCraftImprovisedEyePatch()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedFaceCoverCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftImprovisedFaceCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedFaceCover": {
    "parent": null,
    "methods": [
      "void ActionCraftImprovisedFaceCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedFeetCoverCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftImprovisedFeetCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedFeetCover": {
    "parent": null,
    "methods": [
      "void ActionCraftImprovisedFeetCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedHandsCoverCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftImprovisedHandsCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedHandsCover": {
    "parent": null,
    "methods": [
      "void ActionCraftImprovisedHandsCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedHeadCoverCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftImprovisedHeadCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedHeadCover": {
    "parent": null,
    "methods": [
      "void ActionCraftImprovisedHeadCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedLegsCoverCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftImprovisedLegsCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedLegsCover": {
    "parent": null,
    "methods": [
      "void ActionCraftImprovisedLegsCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedTorsoCoverCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftImprovisedTorsoCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftImprovisedTorsoCover": {
    "parent": null,
    "methods": [
      "void ActionCraftImprovisedTorsoCover()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCraftRopeBeltCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftRopeBelt()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionCraftRopeBelt": {
    "parent": null,
    "methods": [
      "void ActionCraftRopeBelt()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionCraftStoneKnifeEnvCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCraftStoneKnifeEnv()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionCraftStoneKnifeEnv": {
    "parent": null,
    "methods": [
      "void ActionCraftStoneKnifeEnv()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionCreateGreenhouseGardenPlotCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCreateGreenhouseGardenPlot()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionCreateGreenhouseGardenPlot": {
    "parent": null,
    "methods": [
      "void ActionCreateGreenhouseGardenPlot()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionDeCraftDrysackBagCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDeCraftDrysackBag()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data )"
    ]
  },
  "ActionDeCraftDrysackBag": {
    "parent": null,
    "methods": [
      "void ActionDeCraftDrysackBag()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data )"
    ]
  },
  "ActionDeCraftRopeBeltCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDeCraftRopeBelt()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDeCraftRopeBelt": {
    "parent": null,
    "methods": [
      "void ActionDeCraftRopeBelt()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDeCraftWitchHoodCoifCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDeCraftWitchHoodCoif()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDeCraftWitchHoodCoif": {
    "parent": null,
    "methods": [
      "void ActionDeCraftWitchHoodCoif()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDestroyCombinationLockCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDestroyCombinationLock()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionDestroyCombinationLock": {
    "parent": null,
    "methods": [
      "void ActionDestroyCombinationLock()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionDestroyPartCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDestroyPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanBeUsedLeaning()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool DestroyCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionDestroyPart": {
    "parent": null,
    "methods": [
      "void ActionDestroyPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanBeUsedLeaning()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool DestroyCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionDialCombinationLockCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDialCombinationLock()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnActionInfoUpdate(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDialCombinationLock": {
    "parent": null,
    "methods": [
      "void ActionDialCombinationLock()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnActionInfoUpdate(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDialCombinationLockOnTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDialCombinationLockOnTarget()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "void OnActionInfoUpdate(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDialCombinationLockOnTarget": {
    "parent": null,
    "methods": [
      "void ActionDialCombinationLockOnTarget()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "void OnActionInfoUpdate(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDigGardenPlotCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDigGardenPlot()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void SetupAnimation(ItemBase item)",
      "void CheckSurfaceBelowGardenPlot(PlayerBase player, GardenPlot item_GP, Hologram hologram)",
      "void DropDuringPlacing(PlayerBase player)",
      "void OnFinishProgressClient(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDigGardenPlot": {
    "parent": null,
    "methods": [
      "void ActionDigGardenPlot()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void SetupAnimation(ItemBase item)",
      "void CheckSurfaceBelowGardenPlot(PlayerBase player, GardenPlot item_GP, Hologram hologram)",
      "void DropDuringPlacing(PlayerBase player)",
      "void OnFinishProgressClient(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDigInStashCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDigInStash()",
      "void CreateConditionComponents()",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item, int condition_mask)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteClient(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "void SpawnParticleShovelRaise(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionDigInStash": {
    "parent": null,
    "methods": [
      "void ActionDigInStash()",
      "void CreateConditionComponents()",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item, int condition_mask)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteClient(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "void SpawnParticleShovelRaise(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionDigOutStashCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDigOutStash()",
      "void CreateConditionComponents()",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item, int condition_mask)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteClient(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "void SpawnParticleShovelRaise(ActionData action_data)",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)",
      "void DigOutStashLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "ActionDigOutStash": {
    "parent": null,
    "methods": [
      "void ActionDigOutStash()",
      "void CreateConditionComponents()",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item, int condition_mask)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteClient(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "void SpawnParticleShovelRaise(ActionData action_data)",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)",
      "void DigOutStashLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "DigOutStashLambda": {
    "parent": null,
    "methods": [
      "void DigOutStashLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "ActionDigWormsCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDigWorms()",
      "void CreateConditionComponents()",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item, int condition_mask)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data)",
      "bool IsTargetFertile(ActionTarget target)",
      "bool IsPlayerOnGround(PlayerBase player)",
      "void SetDiggignAnimation(ItemBase item)"
    ]
  },
  "ActionDigWorms": {
    "parent": null,
    "methods": [
      "void ActionDigWorms()",
      "void CreateConditionComponents()",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item, int condition_mask)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data)",
      "bool IsTargetFertile(ActionTarget target)",
      "bool IsPlayerOnGround(PlayerBase player)",
      "void SetDiggignAnimation(ItemBase item)"
    ]
  },
  "ActionDisarmExplosiveCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDisarmExplosive()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDisarmExplosive": {
    "parent": null,
    "methods": [
      "void ActionDisarmExplosive()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDisarmExplosiveWithRemoteDetonatorCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDisarmExplosiveWithRemoteDetonator()",
      "void CreateConditionComponents()",
      "bool CanBeSetFromInventory()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDisarmExplosiveWithRemoteDetonator": {
    "parent": null,
    "methods": [
      "void ActionDisarmExplosiveWithRemoteDetonator()",
      "void CreateConditionComponents()",
      "bool CanBeSetFromInventory()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDisarmExplosiveWithRemoteDetonatorUnpairedCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDisarmExplosiveWithRemoteDetonatorUnpaired()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDisarmExplosiveWithRemoteDetonatorUnpaired": {
    "parent": null,
    "methods": [
      "void ActionDisarmExplosiveWithRemoteDetonatorUnpaired()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDisarmMineCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDisarmMine()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop(ActionData action_data)",
      "void OnExecute(ActionData action_data)",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDisarmMine": {
    "parent": null,
    "methods": [
      "void ActionDisarmMine()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop(ActionData action_data)",
      "void OnExecute(ActionData action_data)",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionDisinfectPlantCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDisinfectPlant()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionDisinfectPlant": {
    "parent": null,
    "methods": [
      "void ActionDisinfectPlant()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionDismantleGardenPlotCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void CreateConditionComponents()",
      "void ActionDismantleGardenPlot()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void SetupAnimation( ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDismantleGardenPlot": {
    "parent": null,
    "methods": [
      "void CreateConditionComponents()",
      "void ActionDismantleGardenPlot()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void SetupAnimation( ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDismantleOvenCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDismantleOven()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDismantleOven": {
    "parent": null,
    "methods": [
      "void ActionDismantleOven()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDismantlePartCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float SetCallbackDuration( ItemBase item )",
      "void ActionDismantlePart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool SetupAction( PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void SetBuildingAnimation( ItemBase item )",
      "bool DismantleCondition(PlayerBase player, ActionTarget target, ItemBase item, bool camera_check)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionDismantlePart": {
    "parent": null,
    "methods": [
      "void ActionDismantlePart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool CanBeUsedLeaning()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool SetupAction( PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void SetBuildingAnimation( ItemBase item )",
      "bool DismantleCondition(PlayerBase player, ActionTarget target, ItemBase item, bool camera_check)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionDismantleStoneCircleCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDismantleStoneCircle()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDismantleStoneCircle": {
    "parent": null,
    "methods": [
      "void ActionDismantleStoneCircle()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDrainLiquidCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDrainLiquid()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnEnd( ActionData action_data )"
    ]
  },
  "ActionDrainLiquid": {
    "parent": null,
    "methods": [
      "void ActionDrainLiquid()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnEnd( ActionData action_data )"
    ]
  },
  "ActionDrinkCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDrink()",
      "void CreateConditionComponents()",
      "bool IsDrink()",
      "bool HasTarget()"
    ]
  },
  "ActionDrink": {
    "parent": null,
    "methods": [
      "void ActionDrink()",
      "void CreateConditionComponents()",
      "bool IsDrink()",
      "bool HasTarget()"
    ]
  },
  "ActionDrinkCan": {
    "parent": null,
    "methods": [
      "void ActionDrinkCan()"
    ]
  },
  "ActionDrinkCookingPot": {
    "parent": null,
    "methods": [
      "void ActionDrinkCookingPot()"
    ]
  },
  "ActionDrinkPondContinuousCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDrinkPondContinuous()",
      "bool IsDrink()",
      "bool CanBeUsedInFreelook()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "int GetLiquidSource(ActionTarget target)"
    ]
  },
  "ActionDrinkPondContinuous": {
    "parent": null,
    "methods": [
      "void ActionDrinkPondContinuous()",
      "bool IsDrink()",
      "bool CanBeUsedInFreelook()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "int GetLiquidSource(ActionTarget target)"
    ]
  },
  "ActionDrinkThroughContinuous": {
    "parent": null,
    "methods": [
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionDrinkWellContinuousCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDrinkWellContinuous()",
      "bool IsDrink()",
      "bool CanBeUsedInFreelook()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionDrinkWellContinuous": {
    "parent": null,
    "methods": [
      "void ActionDrinkWellContinuous()",
      "bool IsDrink()",
      "bool CanBeUsedInFreelook()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionDummyContinuousRelease": {
    "parent": null,
    "methods": [
      "void ActionDummyContinuousRelease()",
      "bool HasTarget()"
    ]
  },
  "ActionEatBigCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEatBig()",
      "void CreateConditionComponents()",
      "int IsEat()",
      "bool HasTarget()",
      "void ActionEat()",
      "void ActionEatSmall()"
    ]
  },
  "ActionEatBig": {
    "parent": null,
    "methods": [
      "void ActionEatBig()",
      "void CreateConditionComponents()",
      "int IsEat()",
      "bool HasTarget()",
      "void CreateActionComponent()",
      "void ActionEat()",
      "void ActionEatSmall()"
    ]
  },
  "ActionEatCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEat()",
      "void ActionEatSmall()"
    ]
  },
  "ActionEat": {
    "parent": null,
    "methods": [
      "void ActionEat()",
      "void CreateActionComponent()",
      "void ActionEatSmall()"
    ]
  },
  "ActionEatSmallCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEatSmall()"
    ]
  },
  "ActionEatSmall": {
    "parent": null,
    "methods": [
      "void ActionEatSmall()"
    ]
  },
  "ActionEatCanCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEatCan()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void ActionEatSmallCan()"
    ]
  },
  "ActionEatCan": {
    "parent": null,
    "methods": [
      "void ActionEatCan()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateActionComponent()",
      "void ActionEatSmallCan()"
    ]
  },
  "ActionEatSmallCanCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEatSmallCan()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionEatSmallCan": {
    "parent": null,
    "methods": [
      "void ActionEatSmallCan()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionEatCereal": {
    "parent": null,
    "methods": [
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionEatFruitCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEatFruit()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionEatFruit": {
    "parent": null,
    "methods": [
      "void ActionEatFruit()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionEatMeatCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEatMeat()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionEatMeat": {
    "parent": null,
    "methods": [
      "void ActionEatMeat()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionEatSnowContinuousCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEatSnowContinuous()",
      "bool IsDrink()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)"
    ]
  },
  "ActionEatSnowContinuous": {
    "parent": null,
    "methods": [
      "void ActionEatSnowContinuous()",
      "bool IsDrink()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)"
    ]
  },
  "ActionEmptyBottleBaseCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void EndActionComponent()",
      "void ActionEmptyBottleBase()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasAlternativeInterrupt()",
      "bool UseAlternativeInterrupt(ActionData action_data)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void SendRPC(ActionData actionData, bool enable)"
    ]
  },
  "ActionEmptyBottleBase": {
    "parent": null,
    "methods": [
      "void ActionEmptyBottleBase()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasAlternativeInterrupt()",
      "bool UseAlternativeInterrupt(ActionData action_data)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void SendRPC(ActionData actionData, bool enable)"
    ]
  },
  "ActionEmptyCookingPot": {
    "parent": null,
    "methods": []
  },
  "EmptyMagazineActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEmptyMagazine()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool CanEmpty(ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionEmptyMagazineCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionEmptyMagazine()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool CanEmpty(ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionEmptyMagazine": {
    "parent": null,
    "methods": [
      "void ActionEmptyMagazine()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool CanEmpty(ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionExtinguishFireplaceByExtinguisherCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionExtinguishFireplaceByExtinguisher()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoop(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionExtinguishFireplaceByExtinguisher": {
    "parent": null,
    "methods": [
      "void ActionExtinguishFireplaceByExtinguisher()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoop(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionExtinguishFireplaceByLiquidCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionExtinguishFireplaceByLiquid()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoop(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionExtinguishFireplaceByLiquid": {
    "parent": null,
    "methods": [
      "void ActionExtinguishFireplaceByLiquid()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoop(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionFertilizeSlotCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFertilizeSlot()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionFertilizeSlot": {
    "parent": null,
    "methods": [
      "void ActionFertilizeSlot()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionFillBottleBaseCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFillBottleBase()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "int GetStanceMask(PlayerBase player)",
      "int GetActionCommandEx(ActionData actionData)",
      "int GetLiquidType(PlayerBase player, ActionTarget target, ItemBase item)",
      "void SetupStance(PlayerBase player)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionFillBottleBase": {
    "parent": null,
    "methods": [
      "void ActionFillBottleBase()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "int GetStanceMask(PlayerBase player)",
      "int GetActionCommandEx(ActionData actionData)",
      "int GetLiquidType(PlayerBase player, ActionTarget target, ItemBase item)",
      "void SetupStance(PlayerBase player)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionFillBottleSnow": {
    "parent": null,
    "methods": [
      "void ActionFillBottleSnow()",
      "int GetActionCommandEx(ActionData actionData)"
    ]
  },
  "ActionFillGeneratorTankCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFillGeneratorTank()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionFillGeneratorTank": {
    "parent": null,
    "methods": [
      "void ActionFillGeneratorTank()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionFillObjectCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFillObject()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate(  PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionFillObject": {
    "parent": null,
    "methods": [
      "void ActionFillObject()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate(  PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "FishingActionReceiveData": {
    "parent": null,
    "methods": [
      "void RollNextResultChance()",
      "void RandomizeSignalValues()",
      "void AnimateRod(float phase, bool instant = false)",
      "void InitBait(ItemBase item)",
      "bool IsBaitEmptyHook()",
      "void CreateActionComponent()",
      "void InitActionComponent()",
      "void EndActionComponent()",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void ToggleFishBiting()",
      "void DestroySplashEffectSynced()",
      "void HandleFishingResultSuccess()",
      "void HandleFishingResultFailure()",
      "void ActionFishingNew()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasAlternativeInterrupt()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item )",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "void ComposeLocalContextData(FishingActionData data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void CreateAndSetupActionCallback(ActionData action_data)",
      "void OnAnimationEvent( ActionData action_data )",
      "void OnUpdate(ActionData action_data)",
      "void PlaySplashEffectSynced(FishingActionData actionDataFishing)",
      "bool CheckForSea(ActionData action_data)",
      "void OnFinishProgress(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "int EvaluateFishingResult(ActionData action_data)",
      "void OnSignalStart(FishingActionData action_data)",
      "void OnSignalEnd(FishingActionData action_data)"
    ]
  },
  "FishingActionData": {
    "parent": null,
    "methods": [
      "void RollNextResultChance()",
      "void RandomizeSignalValues()",
      "void AnimateRod(float phase, bool instant = false)",
      "void InitBait(ItemBase item)",
      "bool IsBaitEmptyHook()",
      "void CreateActionComponent()",
      "void InitActionComponent()",
      "void EndActionComponent()",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void ToggleFishBiting()",
      "void DestroySplashEffectSynced()",
      "void HandleFishingResultSuccess()",
      "void HandleFishingResultFailure()",
      "void ActionFishingNew()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasAlternativeInterrupt()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item )",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "void ComposeLocalContextData(FishingActionData data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void CreateAndSetupActionCallback(ActionData action_data)",
      "void OnAnimationEvent( ActionData action_data )",
      "void OnUpdate(ActionData action_data)",
      "void PlaySplashEffectSynced(FishingActionData actionDataFishing)",
      "bool CheckForSea(ActionData action_data)",
      "void OnFinishProgress(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "int EvaluateFishingResult(ActionData action_data)",
      "void OnSignalStart(FishingActionData action_data)",
      "void OnSignalEnd(FishingActionData action_data)"
    ]
  },
  "ActionFishingNewCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void InitActionComponent()",
      "void EndActionComponent()",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void ToggleFishBiting()",
      "void DestroySplashEffectSynced()",
      "void HandleFishingResultSuccess()",
      "void HandleFishingResultFailure()",
      "void ActionFishingNew()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasAlternativeInterrupt()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item )",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "void ComposeLocalContextData(FishingActionData data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void CreateAndSetupActionCallback(ActionData action_data)",
      "void OnAnimationEvent( ActionData action_data )",
      "void OnUpdate(ActionData action_data)",
      "void PlaySplashEffectSynced(FishingActionData actionDataFishing)",
      "bool CheckForSea(ActionData action_data)",
      "void OnFinishProgress(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "int EvaluateFishingResult(ActionData action_data)",
      "void OnSignalStart(FishingActionData action_data)",
      "void OnSignalEnd(FishingActionData action_data)"
    ]
  },
  "ActionFishingNew": {
    "parent": null,
    "methods": [
      "void ActionFishingNew()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasAlternativeInterrupt()",
      "bool CanBeUsedInFreelook()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item )",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "void ComposeLocalContextData(FishingActionData data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void CreateAndSetupActionCallback(ActionData action_data)",
      "void OnAnimationEvent( ActionData action_data )",
      "void OnUpdate(ActionData action_data)",
      "void PlaySplashEffectSynced(FishingActionData actionDataFishing)",
      "bool CheckForSea(ActionData action_data)",
      "void OnFinishProgress(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "int EvaluateFishingResult(ActionData action_data)",
      "void OnSignalStart(FishingActionData action_data)",
      "void OnSignalEnd(FishingActionData action_data)"
    ]
  },
  "ActionFoldBaseBuildingObjectCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFoldBaseBuildingObject()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionFoldBaseBuildingObject": {
    "parent": null,
    "methods": [
      "void ActionFoldBaseBuildingObject()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionForceConsumeCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionForceConsume()",
      "void CreateConditionComponents()",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void PlaySound(PlayerBase player)"
    ]
  },
  "ActionForceConsume": {
    "parent": null,
    "methods": [
      "void ActionForceConsume()",
      "void CreateConditionComponents()",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void PlaySound(PlayerBase player)"
    ]
  },
  "ActionForceDrinkCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionForceDrink()",
      "void CreateConditionComponents()",
      "void PlaySound(PlayerBase player)"
    ]
  },
  "ActionForceDrink": {
    "parent": null,
    "methods": [
      "void ActionForceDrink()",
      "void CreateConditionComponents()",
      "void PlaySound(PlayerBase player)"
    ]
  },
  "ActionForceFeedCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionForceFeed()",
      "void CreateConditionComponents()",
      "string GetText()"
    ]
  },
  "ActionForceFeed": {
    "parent": null,
    "methods": [
      "void ActionForceFeed()",
      "void CreateConditionComponents()",
      "void CreateActionComponent()",
      "string GetText()"
    ]
  },
  "ActionForceFeedSmallCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionForceFeed()",
      "void CreateConditionComponents()",
      "string GetText()"
    ]
  },
  "ActionForceFeedSmall": {
    "parent": null,
    "methods": [
      "void ActionForceFeed()",
      "void CreateConditionComponents()",
      "string GetText()"
    ]
  },
  "ActionForceFeedCan": {
    "parent": null,
    "methods": [
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)"
    ]
  },
  "ActionForceFeedMeatCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionForceFeedMeat()",
      "void CreateConditionComponents()"
    ]
  },
  "ActionForceFeedMeat": {
    "parent": null,
    "methods": [
      "void ActionForceFeedMeat()",
      "void CreateConditionComponents()"
    ]
  },
  "ActionGagSelf": {
    "parent": null,
    "methods": [
      "void ActionGagSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingMask( PlayerBase player)"
    ]
  },
  "ActionGagTarget": {
    "parent": null,
    "methods": [
      "void ActionGagTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingMask( PlayerBase player)"
    ]
  },
  "ActionIgniteFireplaceByAirCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionIgniteFireplaceByAir()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool SkipKindlingCheck()"
    ]
  },
  "ActionIgniteFireplaceByAir": {
    "parent": null,
    "methods": [
      "void ActionIgniteFireplaceByAir()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool SkipKindlingCheck()"
    ]
  },
  "ActionLightItemOnFireCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionLightItemOnFire()",
      "void CreateConditionComponents()",
      "bool CanBePerformedFromQuickbar()",
      "bool IsItemInCargoOfSomething(ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool SetupAction( PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void SetIgnitingAnimation( ItemBase target_item )"
    ]
  },
  "ActionLightItemOnFire": {
    "parent": null,
    "methods": [
      "void ActionLightItemOnFire()",
      "void CreateConditionComponents()",
      "bool CanBePerformedFromQuickbar()",
      "bool IsItemInCargoOfSomething(ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool SetupAction( PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void SetIgnitingAnimation( ItemBase target_item )"
    ]
  },
  "ActionLightItemOnFireWithBlowtorchCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionLightItemOnFireWithBlowtorch()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdateServer(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionLightItemOnFireWithBlowtorch": {
    "parent": null,
    "methods": [
      "void ActionLightItemOnFireWithBlowtorch()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdateServer(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionLoadMagazineCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionLoadMagazine()",
      "bool HasProneException()",
      "void CreateConditionComponents()",
      "bool CanLoadMagazine(ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanBePerformedFromQuickbar()",
      "void OnExecuteServer( ActionData action_data )",
      "void ActionLoadMagazineQuick()",
      "bool HasTarget()",
      "bool CanLoadMagazine( PlayerBase player, ItemBase item )"
    ]
  },
  "ActionLoadMagazine": {
    "parent": null,
    "methods": [
      "void ActionLoadMagazine()",
      "bool HasProneException()",
      "void CreateConditionComponents()",
      "bool CanLoadMagazine(ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanBePerformedFromQuickbar()",
      "void OnExecuteServer( ActionData action_data )",
      "void CreateActionComponent()",
      "void ActionLoadMagazineQuick()",
      "bool HasTarget()",
      "bool CanLoadMagazine( PlayerBase player, ItemBase item )"
    ]
  },
  "ActionLoadMagazineQuickCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionLoadMagazineQuick()",
      "bool HasProneException()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool CanLoadMagazine( PlayerBase player, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionLoadMagazineQuick": {
    "parent": null,
    "methods": [
      "void ActionLoadMagazineQuick()",
      "bool HasProneException()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool CanLoadMagazine( PlayerBase player, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionLockAttachmentCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionLockAttachment()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEnd( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionLockAttachment": {
    "parent": null,
    "methods": [
      "void ActionLockAttachment()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEnd( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionLockDoorsCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionLockDoors()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void LockDoor(ActionTarget target)",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionLockDoors": {
    "parent": null,
    "methods": [
      "void ActionLockDoors()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void LockDoor(ActionTarget target)",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionLowerFlag": {
    "parent": null,
    "methods": [
      "void ActionLowerFlag()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionMineBushCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionMineBush()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer(ActionData action_data)",
      "bool HasMultipleExecution(ActionData action_data)"
    ]
  },
  "ActionMineBush": {
    "parent": null,
    "methods": [
      "void ActionMineBush()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer(ActionData action_data)",
      "bool HasMultipleExecution(ActionData action_data)"
    ]
  },
  "ActionMineBushByHand": {
    "parent": null,
    "methods": [
      "void ActionMineBushByHand()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionMineRockCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionMineRock()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetSoundCategory(ActionData action_data)",
      "void ActionMineRock1H()"
    ]
  },
  "ActionMineRock": {
    "parent": null,
    "methods": [
      "void ActionMineRock()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetSoundCategory(ActionData action_data)",
      "void ActionMineRock1H()"
    ]
  },
  "ActionMineRock1H": {
    "parent": null,
    "methods": [
      "void ActionMineRock1H()"
    ]
  },
  "MineActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "bool CanBeUsedInFreelook()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetYieldName( PlayerBase player, ActionTarget target, ItemBase item )",
      "void ActionMineTree()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanContinue(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "bool HasMultipleExecution(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionMineTreeCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "bool CanBeUsedInFreelook()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetYieldName( PlayerBase player, ActionTarget target, ItemBase item )",
      "void ActionMineTree()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanContinue(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "bool HasMultipleExecution(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionMineBase": {
    "parent": null,
    "methods": [
      "bool CanBeUsedInFreelook()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetYieldName( PlayerBase player, ActionTarget target, ItemBase item )",
      "void ActionMineTree()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanContinue(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "bool HasMultipleExecution(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionMineTree": {
    "parent": null,
    "methods": [
      "void ActionMineTree()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanContinue(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "bool HasMultipleExecution(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionMineTreeBark": {
    "parent": null,
    "methods": [
      "void ActionMineTreeBark()"
    ]
  },
  "BarbedWireActionReceiveData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionMountBarbedWire()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetZoneSelection(ActionTarget target)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "BarbedWireActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionMountBarbedWire()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetZoneSelection(ActionTarget target)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionMountBarbedWireCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionMountBarbedWire()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetZoneSelection(ActionTarget target)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionMountBarbedWire": {
    "parent": null,
    "methods": [
      "void ActionMountBarbedWire()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetZoneSelection(ActionTarget target)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionPackGiftCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionPackGift()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressClient( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void ReplaceWithNewReciveCargoLambda(EntityAI old_item, string new_item_type, PlayerBase player, EntityAI item_to_cargo)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "ActionPackGift": {
    "parent": null,
    "methods": [
      "void ActionPackGift()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressClient( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void ReplaceWithNewReciveCargoLambda(EntityAI old_item, string new_item_type, PlayerBase player, EntityAI item_to_cargo)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "ReplaceWithNewReciveCargoLambda": {
    "parent": null,
    "methods": [
      "void ReplaceWithNewReciveCargoLambda(EntityAI old_item, string new_item_type, PlayerBase player, EntityAI item_to_cargo)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "ActionPlaceObjectCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionPlaceObject()",
      "bool HasProgress()"
    ]
  },
  "ActionPlaceObject": {
    "parent": null,
    "methods": [
      "void ActionPlaceObject()",
      "bool HasProgress()"
    ]
  },
  "ActionPlaceOnGroundCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionPlaceOnGround()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionPlaceOnGround": {
    "parent": null,
    "methods": [
      "void ActionPlaceOnGround()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionPourLiquidCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionPourLiquid()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnEnd( ActionData action_data )"
    ]
  },
  "ActionPourLiquid": {
    "parent": null,
    "methods": [
      "void ActionPourLiquid()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "void OnEnd( ActionData action_data )"
    ]
  },
  "CAContinuousRepeatPushBoat": {
    "parent": null,
    "methods": [
      "float GetProgressWidgetMultiplier()",
      "void CreateActionComponent()",
      "void ActionPushBoat()",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionPushBoatCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionPushBoat()",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionPushBoat": {
    "parent": null,
    "methods": [
      "void ActionPushBoat()",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionPushCarData": {
    "parent": null,
    "methods": [
      "float GetProgressWidgetMultiplier()",
      "void CreateActionComponent()",
      "void ApplyForce(ActionPushObjectData actionData)",
      "void ActionPushCar()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetDirectionDot(Object target, EntityAI player)"
    ]
  },
  "CAContinuousRepeatPushCar": {
    "parent": null,
    "methods": [
      "float GetProgressWidgetMultiplier()",
      "void CreateActionComponent()",
      "void ApplyForce(ActionPushObjectData actionData)",
      "void ActionPushCar()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetDirectionDot(Object target, EntityAI player)"
    ]
  },
  "ActionPushCarCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ApplyForce(ActionPushObjectData actionData)",
      "void ActionPushCar()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetDirectionDot(Object target, EntityAI player)"
    ]
  },
  "ActionPushCar": {
    "parent": null,
    "methods": [
      "void ActionPushCar()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "float GetDirectionDot(Object target, EntityAI player)"
    ]
  },
  "ActionPushCarDataReceiveData": {
    "parent": null,
    "methods": []
  },
  "ActionPushObjectDataReceiveData": {
    "parent": null,
    "methods": [
      "void CAContinuousRepeatPushObject(float time_to_complete_action)",
      "int Execute(ActionData action_data)",
      "void CreateActionComponent()",
      "void ProgressActionComponent()",
      "void EndActionComponent()",
      "void ApplyForce(ActionPushObjectData actionData)",
      "void CreateConditionComponents()",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnEndInput(ActionData action_data)"
    ]
  },
  "ActionPushObjectData": {
    "parent": null,
    "methods": [
      "void CAContinuousRepeatPushObject(float time_to_complete_action)",
      "int Execute(ActionData action_data)",
      "void CreateActionComponent()",
      "void ProgressActionComponent()",
      "void EndActionComponent()",
      "void ApplyForce(ActionPushObjectData actionData)",
      "void CreateConditionComponents()",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnEndInput(ActionData action_data)"
    ]
  },
  "CAContinuousRepeatPushObject": {
    "parent": null,
    "methods": [
      "void CAContinuousRepeatPushObject(float time_to_complete_action)",
      "int Execute(ActionData action_data)",
      "void CreateActionComponent()",
      "void ProgressActionComponent()",
      "void EndActionComponent()",
      "void ApplyForce(ActionPushObjectData actionData)",
      "void CreateConditionComponents()",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnEndInput(ActionData action_data)"
    ]
  },
  "ActionPushObjectCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ProgressActionComponent()",
      "void EndActionComponent()",
      "void ApplyForce(ActionPushObjectData actionData)",
      "void CreateConditionComponents()",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnEndInput(ActionData action_data)"
    ]
  },
  "ActionPushObject": {
    "parent": null,
    "methods": [
      "void CreateConditionComponents()",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnEndInput(ActionData action_data)"
    ]
  },
  "ActionManipulateFlagCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRaiseFlag()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionRaiseFlag": {
    "parent": null,
    "methods": [
      "void ActionRaiseFlag()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionRaiseMegaphoneCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRaiseMegaphone()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasProgress()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void OnStartClient( ActionData action_data )",
      "void OnEndClient( ActionData action_data )"
    ]
  },
  "ActionRaiseMegaphone": {
    "parent": null,
    "methods": [
      "void ActionRaiseMegaphone()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasProgress()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void OnStartClient( ActionData action_data )",
      "void OnEndClient( ActionData action_data )"
    ]
  },
  "ActionRefuelTorch": {
    "parent": null,
    "methods": [
      "void ActionRefuelTorch()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionRepairBoatChassis": {
    "parent": null,
    "methods": [
      "void ActionRepairBoatChassis()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)"
    ]
  },
  "ActionRepairBoatEngineCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairBoatEngine()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void AdjustVehicleHealthServer(ActionData action_data)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRepairBoatEngine": {
    "parent": null,
    "methods": [
      "void ActionRepairBoatEngine()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void AdjustVehicleHealthServer(ActionData action_data)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRepairCarChassisCB": {
    "parent": null,
    "methods": [
      "void ActionRepairCarChassis()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void AdjustItemQuantityServer(ActionData action_data)"
    ]
  },
  "ActionRepairCarChassis": {
    "parent": null,
    "methods": [
      "void ActionRepairCarChassis()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void AdjustItemQuantityServer(ActionData action_data)"
    ]
  },
  "RepairCarChassisActionReciveData": {
    "parent": null,
    "methods": []
  },
  "RepairCarChassisActionData": {
    "parent": null,
    "methods": []
  },
  "ActionRepairCarChassisWithBlowtorchCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairCarChassisWithBlowtorch()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRepairCarChassisWithBlowtorch": {
    "parent": null,
    "methods": [
      "void ActionRepairCarChassisWithBlowtorch()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRepairCarEngineCB": {
    "parent": null,
    "methods": [
      "void ActionRepairCarEngine()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void AdjustVehicleHealthServer(ActionData action_data)"
    ]
  },
  "ActionRepairCarEngine": {
    "parent": null,
    "methods": [
      "void ActionRepairCarEngine()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void AdjustVehicleHealthServer(ActionData action_data)"
    ]
  },
  "RepairCarEngineActionReciveData": {
    "parent": null,
    "methods": []
  },
  "RepairCarEngineActionData": {
    "parent": null,
    "methods": []
  },
  "ActionRepairCarEngineWithBlowtorchCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairCarEngineWithBlowtorch()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRepairCarEngineWithBlowtorch": {
    "parent": null,
    "methods": [
      "void ActionRepairCarEngineWithBlowtorch()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "RepairCarPartActionReciveData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairCarPart()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "RepairCarPartActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairCarPart()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionRepairCarPartCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairCarPart()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionRepairCarPart": {
    "parent": null,
    "methods": [
      "void ActionRepairCarPart()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionRepairCarPartWithBlowtorchCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairCarPartWithBlowtorch()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRepairCarPartWithBlowtorch": {
    "parent": null,
    "methods": [
      "void ActionRepairCarPartWithBlowtorch()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRepairItemWithBlowtorchCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairItemWithBlowtorch()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRepairItemWithBlowtorch": {
    "parent": null,
    "methods": [
      "void ActionRepairItemWithBlowtorch()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "RepairPartActionReciveData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float SetCallbackDuration( ItemBase item )",
      "void ActionRepairPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void SetBuildingAnimation( ItemBase item )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool RepairCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "RepairPartActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float SetCallbackDuration( ItemBase item )",
      "void ActionRepairPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void SetBuildingAnimation( ItemBase item )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool RepairCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionRepairPartCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float SetCallbackDuration( ItemBase item )",
      "void ActionRepairPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void SetBuildingAnimation( ItemBase item )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool RepairCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionRepairPart": {
    "parent": null,
    "methods": [
      "void ActionRepairPart()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void SetBuildingAnimation( ItemBase item )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool RepairCondition( PlayerBase player, ActionTarget target, ItemBase item, bool camera_check )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionRepairShelter": {
    "parent": null,
    "methods": [
      "void ActionRepairShelter()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "RepairTentActionReciveData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairTent()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void RepairDamageTransfer(PlayerBase player, ItemBase repair_kit, ItemBase item, float specialty_weight, string damage_zone = )"
    ]
  },
  "RepairTentActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairTent()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void RepairDamageTransfer(PlayerBase player, ItemBase repair_kit, ItemBase item, float specialty_weight, string damage_zone = )"
    ]
  },
  "ActionRepairTentCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairTent()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void RepairDamageTransfer(PlayerBase player, ItemBase repair_kit, ItemBase item, float specialty_weight, string damage_zone = )"
    ]
  },
  "ActionRepairTent": {
    "parent": null,
    "methods": [
      "void ActionRepairTent()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void RepairDamageTransfer(PlayerBase player, ItemBase repair_kit, ItemBase item, float specialty_weight, string damage_zone = )"
    ]
  },
  "RepairTentPartActionReciveData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairTentPart()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "RepairTentPartActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairTentPart()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionRepairTentPartCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRepairTentPart()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionRepairTentPart": {
    "parent": null,
    "methods": [
      "void ActionRepairTentPart()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "RepairVehiclePartActionReciveData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void CreateConditionComponents()",
      "void OnFinishProgressServer(ActionData action_data)",
      "void AdjustVehicleHealthServer(ActionData action_data)",
      "void AdjustItemQuantityServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "RepairVehiclePartActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void CreateConditionComponents()",
      "void OnFinishProgressServer(ActionData action_data)",
      "void AdjustVehicleHealthServer(ActionData action_data)",
      "void AdjustItemQuantityServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionRepairVehiclePartCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void CreateConditionComponents()",
      "void OnFinishProgressServer(ActionData action_data)",
      "void AdjustVehicleHealthServer(ActionData action_data)",
      "void AdjustItemQuantityServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionRepairVehiclePartBase": {
    "parent": null,
    "methods": [
      "void CreateConditionComponents()",
      "void OnFinishProgressServer(ActionData action_data)",
      "void AdjustVehicleHealthServer(ActionData action_data)",
      "void AdjustItemQuantityServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionRestrainSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRestrainSelf()",
      "int GetStanceMask(PlayerBase player)",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRestrainSelf": {
    "parent": null,
    "methods": [
      "void ActionRestrainSelf()",
      "int GetStanceMask(PlayerBase player)",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionRestrainTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionRestrainTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "int GetStanceMask(PlayerBase player)",
      "bool ActionConditionContinue(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )",
      "void ChainedDropAndRestrainLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false, PlayerBase src_player = null)",
      "void OnSuccess(EntityAI new_item)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void RestrainTargetPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void End()"
    ]
  },
  "ActionRestrainTarget": {
    "parent": null,
    "methods": [
      "void ActionRestrainTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "int GetStanceMask(PlayerBase player)",
      "bool ActionConditionContinue(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )",
      "void ChainedDropAndRestrainLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false, PlayerBase src_player = null)",
      "void OnSuccess(EntityAI new_item)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void RestrainTargetPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void End()"
    ]
  },
  "ChainedDropAndRestrainLambda": {
    "parent": null,
    "methods": [
      "void ChainedDropAndRestrainLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false, PlayerBase src_player = null)",
      "void OnSuccess(EntityAI new_item)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void RestrainTargetPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void End()"
    ]
  },
  "RestrainTargetPlayerLambda": {
    "parent": null,
    "methods": [
      "void RestrainTargetPlayerLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void OnSuccess(EntityAI new_item)",
      "void End()"
    ]
  },
  "SurrenderDataRestrain": {
    "parent": "SurrenderData",
    "methods": [
      "void End()"
    ]
  },
  "SawPlanksActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float GetDefaultTime()",
      "void ActionSawPlanks()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void SpawnNewPlankPile(SawPlanksActionData data, float quantity)"
    ]
  },
  "ActionSawPlanksCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float GetDefaultTime()",
      "void ActionSawPlanks()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void SpawnNewPlankPile(SawPlanksActionData data, float quantity)"
    ]
  },
  "ActionSawPlanks": {
    "parent": null,
    "methods": [
      "void ActionSawPlanks()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void SpawnNewPlankPile(SawPlanksActionData data, float quantity)"
    ]
  },
  "ActionShaveCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionShave()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "bool IsShaveSelf()",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionShave": {
    "parent": null,
    "methods": [
      "void ActionShave()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "bool IsShaveSelf()",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionShaveTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionShaveTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionShaveTarget": {
    "parent": null,
    "methods": [
      "void ActionShaveTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionSkinningCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionSkinning()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnFinishProgressClient(ActionData action_data)",
      "void HandlePlayerBody(ActionData action_data)",
      "void DropInventoryItems(PlayerBase body, float newLifetime)",
      "void SpawnItems(ActionData action_data)"
    ]
  },
  "ActionSkinning": {
    "parent": null,
    "methods": [
      "void ActionSkinning()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnFinishProgressClient(ActionData action_data)",
      "void HandlePlayerBody(ActionData action_data)",
      "void DropInventoryItems(PlayerBase body, float newLifetime)",
      "void SpawnItems(ActionData action_data)"
    ]
  },
  "ActionSortAmmoPileCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionSortAmmoPile()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void SortAmmo(ItemBase item)"
    ]
  },
  "ActionSortAmmoPile": {
    "parent": null,
    "methods": [
      "void ActionSortAmmoPile()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void SortAmmo(ItemBase item)"
    ]
  },
  "ActionStripCarrierVestCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionStripCarrierVest()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionStripCarrierVest": {
    "parent": null,
    "methods": [
      "void ActionStripCarrierVest()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "TransferLiquidActionReciveData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTransferLiquid()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartClient( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )"
    ]
  },
  "TransferLiquidActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTransferLiquid()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartClient( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )"
    ]
  },
  "ActionTransferLiquidCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTransferLiquid()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartClient( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )"
    ]
  },
  "ActionTransferLiquid": {
    "parent": null,
    "methods": [
      "void ActionTransferLiquid()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartClient( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void OnStartAnimationLoop( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )"
    ]
  },
  "ActionTuneFrequencyCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTuneFrequency()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionTuneFrequency": {
    "parent": null,
    "methods": [
      "void ActionTuneFrequency()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionTuneRadioStationCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTuneRadioStation()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionTuneRadioStation": {
    "parent": null,
    "methods": [
      "void ActionTuneRadioStation()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionTurnValveCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTurnValve()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionTurnValve": {
    "parent": null,
    "methods": [
      "void ActionTurnValve()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionTurnValveUndergroundReservoirCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTurnValveUndergroundReservoir()",
      "void CreateAndSetupActionCallback( ActionData action_data )",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnEndAnimationLoop(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionTurnValveUndergroundReservoir": {
    "parent": null,
    "methods": [
      "void ActionTurnValveUndergroundReservoir()",
      "void CreateAndSetupActionCallback( ActionData action_data )",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnEndAnimationLoop(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionUncoverHeadSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void UncoverHead(PlayerBase target, PlayerBase source)",
      "void ActionUncoverHeadSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingBurlap( PlayerBase player )"
    ]
  },
  "ActionUncoverHeadBase": {
    "parent": null,
    "methods": [
      "void UncoverHead(PlayerBase target, PlayerBase source)",
      "void ActionUncoverHeadSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingBurlap( PlayerBase player )"
    ]
  },
  "ActionUncoverHeadSelf": {
    "parent": null,
    "methods": [
      "void ActionUncoverHeadSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingBurlap( PlayerBase player )"
    ]
  },
  "ActionUncoverHeadTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionUncoverHeadTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "bool IsWearingBurlap(PlayerBase player)"
    ]
  },
  "ActionUncoverHeadTarget": {
    "parent": null,
    "methods": [
      "void ActionUncoverHeadTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "bool IsWearingBurlap(PlayerBase player)"
    ]
  },
  "ActionUngagSelf": {
    "parent": null,
    "methods": [
      "void ActionUngagSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsWearingGag( PlayerBase player )",
      "void UngagSelfLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void OnSuccess(EntityAI new_item)",
      "void OnAbort()"
    ]
  },
  "UngagSelfLambda": {
    "parent": null,
    "methods": [
      "void UngagSelfLambda(EntityAI old_item, string new_item_type, PlayerBase player)",
      "void OnSuccess(EntityAI new_item)",
      "void OnAbort()"
    ]
  },
  "ActionUngagTarget": {
    "parent": null,
    "methods": [
      "void ActionUngagTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "bool IsWearingGag(PlayerBase player)"
    ]
  },
  "ActionUnlockShippingContainer": {
    "parent": null,
    "methods": [
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void UnlockDoor(ActionTarget target)",
      "int TranslateLockSelectionIntoDoorIdx(ActionTarget target)"
    ]
  },
  "ActionUnlockDoorsCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionUnlockDoors()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void UnlockDoor(ActionTarget target)",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionUnlockDoors": {
    "parent": null,
    "methods": [
      "void ActionUnlockDoors()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void UnlockDoor(ActionTarget target)",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionUnmountBarbedWireCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionUnmountBarbedWire()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetZoneSelection(ActionTarget target)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionUnmountBarbedWire": {
    "parent": null,
    "methods": [
      "void ActionUnmountBarbedWire()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetZoneSelection(ActionTarget target)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionUnpackBoxCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionUnpackBox()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "void UnboxLambda(EntityAI old_item, string new_item_type, PlayerBase player, int count)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "ActionUnpackBox": {
    "parent": null,
    "methods": [
      "void ActionUnpackBox()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "void UnboxLambda(EntityAI old_item, string new_item_type, PlayerBase player, int count)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "UnboxLambda": {
    "parent": null,
    "methods": [
      "void UnboxLambda(EntityAI old_item, string new_item_type, PlayerBase player, int count)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)",
      "void OnSuccess(EntityAI new_item)"
    ]
  },
  "ActionUnpackGiftCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionUnpackGift()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionUnpackGift": {
    "parent": null,
    "methods": [
      "void ActionUnpackGift()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionUnrestrainSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void EndActionComponent()",
      "void ActionUnrestrainSelf()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool CanBeUsedInRestrain()"
    ]
  },
  "ActionUnrestrainSelf": {
    "parent": null,
    "methods": [
      "void ActionUnrestrainSelf()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool CanBeUsedInRestrain()"
    ]
  },
  "UnrestrainSelfPlayer": {
    "parent": null,
    "methods": []
  },
  "ActionUnrestrainTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "float ObtainUnrestrainTime()",
      "void ActionUnrestrainTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void ReplaceAndDestroyLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void OnSuccess(EntityAI new_item)",
      "void ReplaceAndDestroyLambdaEx(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false, bool enableDrop = true)"
    ]
  },
  "ActionUnrestrainTarget": {
    "parent": null,
    "methods": [
      "void ActionUnrestrainTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void ReplaceAndDestroyLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void OnSuccess(EntityAI new_item)",
      "void ReplaceAndDestroyLambdaEx(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false, bool enableDrop = true)"
    ]
  },
  "ReplaceAndDestroyLambda": {
    "parent": null,
    "methods": [
      "void ReplaceAndDestroyLambda(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false)",
      "void OnSuccess(EntityAI new_item)",
      "void ReplaceAndDestroyLambdaEx(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false, bool enableDrop = true)"
    ]
  },
  "ReplaceAndDestroyLambdaEx": {
    "parent": null,
    "methods": [
      "void ReplaceAndDestroyLambdaEx(EntityAI old_item, string new_item_type, PlayerBase player, bool destroy = false, bool enableDrop = true)"
    ]
  },
  "ActionUnrestrainTargetHandsCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionUnrestrainTargetHands()",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnStartClient(ActionData action_data)",
      "void OnEndClient( ActionData action_data )"
    ]
  },
  "ActionUnrestrainTargetHands": {
    "parent": null,
    "methods": [
      "void ActionUnrestrainTargetHands()",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnStartClient(ActionData action_data)",
      "void OnEndClient( ActionData action_data )"
    ]
  },
  "ActionUpgradeTorchFromGasPumpCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionUpgradeTorchFromGasPump()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionUpgradeTorchFromGasPump": {
    "parent": null,
    "methods": [
      "void ActionUpgradeTorchFromGasPump()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionUseRangefinderCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionUseRangefinder()",
      "void CreateConditionComponents()",
      "bool IsFullBody(PlayerBase player)",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionUseRangefinder": {
    "parent": null,
    "methods": [
      "void ActionUseRangefinder()",
      "void CreateConditionComponents()",
      "bool IsFullBody(PlayerBase player)",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionViewBinoculars": {
    "parent": null,
    "methods": [
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void EnterOptics(ItemOptics optic, PlayerBase player)",
      "void ExitOptics(ItemOptics optic, PlayerBase player)"
    ]
  },
  "ActionRaiseAndViewCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void ActionViewCompass()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool HasTarget()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionViewCompass": {
    "parent": null,
    "methods": [
      "void ActionViewCompass()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool HasTarget()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionViewOptics": {
    "parent": null,
    "methods": [
      "void ActionViewOptics()",
      "void CreateConditionComponents()",
      "bool IsFullBody(PlayerBase player)",
      "bool IsCameraLockOnPerform()",
      "bool HasProgress()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnStartAnimationLoopServer(ActionData action_data)",
      "void OnStartAnimationLoopClient(ActionData action_data)",
      "void OnEndClient(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnEndAnimationLoopClient(ActionData action_data)",
      "void OnEndAnimationLoopServer(ActionData action_data)",
      "bool CanWork(ItemBase item)",
      "void EnterOptics(ItemOptics optic, PlayerBase player)",
      "void ExitOptics(ItemOptics optic, PlayerBase player)"
    ]
  },
  "ActionWashHandsItemContinuousCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWashHandsItemContinuous()",
      "bool HasProneException()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionWashHandsItemContinuous": {
    "parent": null,
    "methods": [
      "void ActionWashHandsItemContinuous()",
      "bool HasProneException()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionWashHandsSnowCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWashHandsSnow()",
      "void CreateConditionComponents()"
    ]
  },
  "ActionWashHandsSnow": {
    "parent": null,
    "methods": [
      "void ActionWashHandsSnow()",
      "void CreateConditionComponents()"
    ]
  },
  "ActionWashHandsWaterCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWashHandsWater()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionWashHandsWater": {
    "parent": null,
    "methods": [
      "void ActionWashHandsWater()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionWashHandsWellCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWashHandsWell()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionWashHandsWell": {
    "parent": null,
    "methods": [
      "void ActionWashHandsWell()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionWaterGardenSlotCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWaterGardenSlot()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionWaterGardenSlot": {
    "parent": null,
    "methods": [
      "void ActionWaterGardenSlot()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionWaterPlantCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWaterPlant()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionWaterPlant": {
    "parent": null,
    "methods": [
      "void ActionWaterPlant()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "WorldCraftActionReciveData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWorldCraft()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void Start( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void OnEndClient( ActionData action_data )",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "WorldCraftActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWorldCraft()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void Start( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void OnEndClient( ActionData action_data )",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionWorldCraftCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWorldCraft()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void Start( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void OnEndClient( ActionData action_data )",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionWorldCraft": {
    "parent": null,
    "methods": [
      "void ActionWorldCraft()",
      "void CreateConditionComponents()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "string GetText()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue(ActionData action_data)",
      "string GetSoundCategory(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void Start( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void OnEndClient( ActionData action_data )",
      "void OnFinishProgressServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionWringClothesCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWringClothes()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionWringClothes": {
    "parent": null,
    "methods": [
      "void ActionWringClothes()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDebugReciveData": {
    "parent": null,
    "methods": [
      "bool HasTarget()",
      "void CreateConditionComponents()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void Start(ActionData action_data)",
      "bool UseAcknowledgment()"
    ]
  },
  "ActionDebugData": {
    "parent": null,
    "methods": [
      "bool HasTarget()",
      "void CreateConditionComponents()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void Start(ActionData action_data)",
      "bool UseAcknowledgment()"
    ]
  },
  "ActionDebug": {
    "parent": null,
    "methods": [
      "bool HasTarget()",
      "void CreateConditionComponents()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void Start(ActionData action_data)",
      "bool UseAcknowledgment()"
    ]
  },
  "ActionBuildShelter": {
    "parent": null,
    "methods": [
      "void ActionBuildShelter()",
      "void CreateConditionComponents()",
      "string GetText()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanBeUsedLeaning()",
      "bool UseMainItem()",
      "bool HasProgress()",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool SetupAction( PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnStart( ActionData action_data )",
      "void OnStartClient( ActionData action_data )",
      "void OnStartAnimationLoopClient( ActionData action_data )",
      "void OnEnd( ActionData action_data )",
      "void OnEndClient( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )",
      "void DetermineConstructionSounds( ActionData action_data )",
      "void PlayActionStartSound( ActionData action_data )",
      "void PlayActionLoopSound( ActionData action_data )",
      "void StopActionLoopSound()",
      "void DestroyActionLoopSound()",
      "void PlayActionFinishSound( ActionData action_data )",
      "string GetSoundCategory(ActionData action_data)"
    ]
  },
  "ActionCloseBarrel": {
    "parent": null,
    "methods": [
      "void ActionCloseBarrel()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionCloseBarrelHoles": {
    "parent": null,
    "methods": [
      "void ActionCloseBarrelHoles()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionCloseDoors": {
    "parent": null,
    "methods": [
      "void ActionCloseDoors()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionCloseFence": {
    "parent": null,
    "methods": [
      "void ActionCloseFence()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "DetachActionData": {
    "parent": null,
    "methods": [
      "void ActionDetach()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecute( ActionData action_data )",
      "void CreateAndSetupActionCallback( ActionData action_data )"
    ]
  },
  "ActionDetach": {
    "parent": null,
    "methods": [
      "void ActionDetach()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecute( ActionData action_data )",
      "void CreateAndSetupActionCallback( ActionData action_data )"
    ]
  },
  "ActionDetachFromTarget": {
    "parent": null,
    "methods": [
      "void CreateConditionComponents()",
      "void ActionDetachFromTarget()",
      "int FindSlotIdToDetach(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecute(ActionData action_data)",
      "void Process( ActionData action_data )",
      "void ActionDetachFromTarget_SpecificSlot_WoodenLogs()",
      "void ActionDetachFromTarget_SpecificSlot_WoodenPlanks()",
      "void ActionDetachFromTarget_SpecificSlot_MetalSheets()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_Barrel()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_WoodenCrate()"
    ]
  },
  "ActionDetachFromTarget_SpecificSlot": {
    "parent": null,
    "methods": [
      "int FindSlotIdToDetach(PlayerBase player, ActionTarget target, ItemBase item)",
      "void ActionDetachFromTarget_SpecificSlot_WoodenLogs()",
      "void ActionDetachFromTarget_SpecificSlot_WoodenPlanks()",
      "void ActionDetachFromTarget_SpecificSlot_MetalSheets()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_Barrel()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_WoodenCrate()"
    ]
  },
  "ActionDetachFromTarget_SpecificSlotsCategory": {
    "parent": null,
    "methods": [
      "int FindSlotIdToDetach(PlayerBase player, ActionTarget target, ItemBase item)",
      "void ActionDetachFromTarget_SpecificSlot_WoodenLogs()",
      "void ActionDetachFromTarget_SpecificSlot_WoodenPlanks()",
      "void ActionDetachFromTarget_SpecificSlot_MetalSheets()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_Barrel()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_WoodenCrate()"
    ]
  },
  "ActionDetachFromTarget_SpecificSlot_WoodenLogs": {
    "parent": null,
    "methods": [
      "void ActionDetachFromTarget_SpecificSlot_WoodenLogs()",
      "void ActionDetachFromTarget_SpecificSlot_WoodenPlanks()",
      "void ActionDetachFromTarget_SpecificSlot_MetalSheets()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_Barrel()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_WoodenCrate()"
    ]
  },
  "ActionDetachFromTarget_SpecificSlot_WoodenPlanks": {
    "parent": null,
    "methods": [
      "void ActionDetachFromTarget_SpecificSlot_WoodenPlanks()",
      "void ActionDetachFromTarget_SpecificSlot_MetalSheets()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_Barrel()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_WoodenCrate()"
    ]
  },
  "ActionDetachFromTarget_SpecificSlot_MetalSheets": {
    "parent": null,
    "methods": [
      "void ActionDetachFromTarget_SpecificSlot_MetalSheets()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_Barrel()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_WoodenCrate()"
    ]
  },
  "ActionDetachFromTarget_SpecificSlotsCategory_Barrel": {
    "parent": null,
    "methods": [
      "void ActionDetachFromTarget_SpecificSlotsCategory_Barrel()",
      "void ActionDetachFromTarget_SpecificSlotsCategory_WoodenCrate()"
    ]
  },
  "ActionDetachFromTarget_SpecificSlotsCategory_WoodenCrate": {
    "parent": null,
    "methods": [
      "void ActionDetachFromTarget_SpecificSlotsCategory_WoodenCrate()"
    ]
  },
  "ActionDetachPowerSourceFromPanel": {
    "parent": null,
    "methods": [
      "void ActionDetachPowerSourceFromPanel()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteClient( ActionData action_data )",
      "void OnExecuteServer( ActionData action_data )",
      "void Process( ActionData action_data )"
    ]
  },
  "ActionEnterLadder": {
    "parent": null,
    "methods": [
      "void ActionEnterLadder()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "bool IsLockTargetOnUse()",
      "bool IsInstant()",
      "bool CanBeUsedSwimming()"
    ]
  },
  "ActionExitLadder": {
    "parent": null,
    "methods": [
      "void ActionExitLadder()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "bool IsInstant()",
      "bool CanBeUsedOnLadder()",
      "bool HasTarget()"
    ]
  },
  "ActionFoldObject": {
    "parent": null,
    "methods": [
      "void ActionFoldObject()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionGetInTransport": {
    "parent": null,
    "methods": [
      "void ActionGetInTransport()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void Start(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "bool CanBeUsedInRestrain()",
      "void OnUpdate(ActionData action_data)",
      "int GetActionCategory()",
      "void OnEndClient(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "bool AddActionJuncture(ActionData action_data)"
    ]
  },
  "GetOutTransportActionData": {
    "parent": null,
    "methods": [
      "void ActionGetOutTransport()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void ProcessGetOutTransportActionData(Transport veh, GetOutTransportActionData got_action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void Unhide(PlayerBase player)",
      "void OnUpdate(ActionData action_data)",
      "bool CanBeUsedInRestrain()",
      "bool CanBeUsedInVehicle()",
      "bool HasTarget()",
      "int GetActionCategory()",
      "void OnEnd(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void ApplyJumpOutDmg(ActionData action_data)",
      "void ProcessGetOutActionData(Car car, GetOutTransportActionData got_action_data)"
    ]
  },
  "GetOutTransportActionReciveData": {
    "parent": null,
    "methods": [
      "void ActionGetOutTransport()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void ProcessGetOutTransportActionData(Transport veh, GetOutTransportActionData got_action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void Unhide(PlayerBase player)",
      "void OnUpdate(ActionData action_data)",
      "bool CanBeUsedInRestrain()",
      "bool CanBeUsedInVehicle()",
      "bool HasTarget()",
      "int GetActionCategory()",
      "void OnEnd(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void ApplyJumpOutDmg(ActionData action_data)",
      "void ProcessGetOutActionData(Car car, GetOutTransportActionData got_action_data)"
    ]
  },
  "ActionGetOutTransport": {
    "parent": null,
    "methods": [
      "void ActionGetOutTransport()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void ProcessGetOutTransportActionData(Transport veh, GetOutTransportActionData got_action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void Unhide(PlayerBase player)",
      "void OnUpdate(ActionData action_data)",
      "bool CanBeUsedInRestrain()",
      "bool CanBeUsedInVehicle()",
      "bool HasTarget()",
      "int GetActionCategory()",
      "void OnEnd(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void ApplyJumpOutDmg(ActionData action_data)",
      "void ProcessGetOutActionData(Car car, GetOutTransportActionData got_action_data)"
    ]
  },
  "ActionHandsPartSwitch": {
    "parent": null,
    "methods": [
      "void ActionHandsPartSwitch()",
      "void CreateConditionComponents()",
      "bool IsInstant()",
      "bool RemoveForceTargetAfterUse()",
      "bool UseAcknowledgment()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void SetNextIndex(ActionData action_data)"
    ]
  },
  "ActionHarvestCropsCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionHarvestCrops()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionHarvestCrops": {
    "parent": null,
    "methods": [
      "void ActionHarvestCrops()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionITest": {
    "parent": null,
    "methods": [
      "void ActionITest()"
    ]
  },
  "ActionNextCombinationLockDialOnTarget": {
    "parent": null,
    "methods": [
      "void ActionNextCombinationLockDialOnTarget()",
      "void CreateConditionComponents()",
      "bool IsInstant()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "ActionOpenBarrel": {
    "parent": null,
    "methods": [
      "void ActionOpenBarrel()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionOpenBarrelHoles": {
    "parent": null,
    "methods": [
      "void ActionOpenBarrelHoles()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionOpenDoors": {
    "parent": null,
    "methods": [
      "void ActionOpenDoors()",
      "void CreateConditionComponents()",
      "bool CheckIfDoorIsLocked()",
      "bool CreatesNoise()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionLockedDoors": {
    "parent": null,
    "methods": [
      "bool CheckIfDoorIsLocked()",
      "bool CreatesNoise()"
    ]
  },
  "ActionOpenFence": {
    "parent": null,
    "methods": [
      "void ActionOpenFence()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionOperatePanel": {
    "parent": null,
    "methods": [
      "void ActionOperatePanel()",
      "void CreateConditionComponents()",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionOperatePanelPowerStation": {
    "parent": null,
    "methods": [
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)"
    ]
  },
  "ActionDeconstructShelter": {
    "parent": null,
    "methods": [
      "void ActionDeconstructShelter()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool HasAlternativeInterrupt()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStart(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionPackTentCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionPackTent()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasProgress()",
      "bool HasAlternativeInterrupt()",
      "bool UseMainItem()",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "void OnExecute( ActionData action_data )",
      "void OnEnd( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionPackTent": {
    "parent": null,
    "methods": [
      "void ActionPackTent()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool HasProgress()",
      "bool HasAlternativeInterrupt()",
      "bool UseMainItem()",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "void OnExecute( ActionData action_data )",
      "void OnEnd( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)"
    ]
  },
  "ActionPickBerryCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionPickBerry()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionPickBerry": {
    "parent": null,
    "methods": [
      "void ActionPickBerry()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionPickupChicken": {
    "parent": null,
    "methods": [
      "void ActionPickupChicken()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionPullBodyFromTransport": {
    "parent": null,
    "methods": [
      "void ActionPullBodyFromTransport()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "bool IsInstant()"
    ]
  },
  "ActionPullOutPlug": {
    "parent": null,
    "methods": [
      "void ActionPullOutPlug()",
      "bool DisplayTargetInActionText()",
      "string GetTargetName(PlayerBase player, ActionTarget target)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionRemovePlant": {
    "parent": null,
    "methods": [
      "void ActionRemovePlant()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionRemoveSeed": {
    "parent": null,
    "methods": [
      "void ActionRemoveSeed()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool InventoryReservation(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)"
    ]
  },
  "ActionRepackTentCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void DropDuringRepacking()",
      "void ActionRepackTent()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void OnStartServer( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void SetupAnimation( ItemBase item )",
      "void OnStartAnimationLoopClient( ActionData action_data )",
      "void OnStartAnimationLoopServer( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)",
      "void RepackLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ActionRepackTent": {
    "parent": null,
    "methods": [
      "void ActionRepackTent()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool HasAlternativeInterrupt()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void OnStartServer( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void SetupAnimation( ItemBase item )",
      "void OnStartAnimationLoopClient( ActionData action_data )",
      "void OnStartAnimationLoopServer( ActionData action_data )",
      "void OnEndAnimationLoop( ActionData action_data )",
      "string GetAdminLogMessage(ActionData action_data)",
      "void RepackLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "RepackLambda": {
    "parent": null,
    "methods": [
      "void RepackLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ActionRepositionPluggedItem": {
    "parent": null,
    "methods": [
      "void ActionRepositionPluggedItem()",
      "bool HasProgress()",
      "bool CanBeUsedOnBack()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanContinue(ActionData action_data)",
      "void Start(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)",
      "void CreateAndSetupActionCallback(ActionData action_data)"
    ]
  },
  "ActionSetAlarmClockCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionSetAlarmClock()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnStart(ActionData action_data)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer(ActionData action_data)",
      "void OnUpdate(ActionData action_data)"
    ]
  },
  "ActionSetAlarmClock": {
    "parent": null,
    "methods": [
      "void ActionSetAlarmClock()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnStart(ActionData action_data)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer(ActionData action_data)",
      "void OnUpdate(ActionData action_data)"
    ]
  },
  "ActionSetKitchenTimerCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionSetKitchenTimer()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer(ActionData action_data)",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnUpdate(ActionData action_data)"
    ]
  },
  "ActionSetKitchenTimer": {
    "parent": null,
    "methods": [
      "void ActionSetKitchenTimer()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer(ActionData action_data)",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnUpdate(ActionData action_data)"
    ]
  },
  "ActionTakeArrow": {
    "parent": null,
    "methods": [
      "void ActionTakeArrow()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanBeUsedOnBack()",
      "bool InventoryReservation(ActionData action_data)",
      "void OnExecute(ActionData action_data)"
    ]
  },
  "ActionTakeArrowToHands": {
    "parent": null,
    "methods": [
      "void ActionTakeArrowToHands()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanContinue(ActionData action_data)",
      "bool InventoryReservation(ActionData action_data)",
      "void OnExecute(ActionData action_data)",
      "void CreateAndSetupActionCallback(ActionData action_data)",
      "bool CanBeUsedOnBack()"
    ]
  },
  "ActionTakeFireplaceFromBarrel": {
    "parent": null,
    "methods": [
      "void ActionTakeFireplaceFromBarrel()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "void TakeFireplaceFromBarrelLambda( EntityAI old_item, string new_item_type, PlayerBase player )",
      "void RemoveOldItemFromLocation()",
      "void UndoRemoveOldItemFromLocation()",
      "void CopyOldPropertiesToNew( notnull EntityAI old_item, EntityAI new_item )",
      "void DeleteOldEntity()",
      "void CreateNetworkObjectInfo(EntityAI new_item)"
    ]
  },
  "TakeFireplaceFromBarrelLambda": {
    "parent": null,
    "methods": [
      "void TakeFireplaceFromBarrelLambda( EntityAI old_item, string new_item_type, PlayerBase player )",
      "void RemoveOldItemFromLocation()",
      "void UndoRemoveOldItemFromLocation()",
      "void CopyOldPropertiesToNew( notnull EntityAI old_item, EntityAI new_item )",
      "void DeleteOldEntity()",
      "void CreateNetworkObjectInfo(EntityAI new_item)"
    ]
  },
  "ActionTakeFireplaceIndoor": {
    "parent": null,
    "methods": [
      "void ActionTakeFireplaceIndoor()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "void TakeFireplaceFromIndoorLambda( EntityAI old_item, string new_item_type, PlayerBase player )",
      "void CopyOldPropertiesToNew( notnull EntityAI old_item, EntityAI new_item )"
    ]
  },
  "TakeFireplaceFromIndoorLambda": {
    "parent": null,
    "methods": [
      "void TakeFireplaceFromIndoorLambda( EntityAI old_item, string new_item_type, PlayerBase player )",
      "void CopyOldPropertiesToNew( notnull EntityAI old_item, EntityAI new_item )"
    ]
  },
  "ActionTakeHybridAttachment": {
    "parent": null,
    "methods": [
      "void ActionTakeHybridAttachment()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanBeUsedOnBack()",
      "bool InventoryReservation(ActionData action_data)",
      "void OnExecute( ActionData action_data )"
    ]
  },
  "ActionTakeHybridAttachmentToHands": {
    "parent": null,
    "methods": [
      "void ActionTakeHybridAttachmentToHands()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanContinue( ActionData action_data )",
      "void OnExecute( ActionData action_data )",
      "void OnExecuteImpl( ActionData action_data )",
      "void CreateAndSetupActionCallback( ActionData action_data )"
    ]
  },
  "ActionTakeItem": {
    "parent": null,
    "methods": [
      "void ActionTakeItem()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool ActionConditionContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanBeUsedOnBack()",
      "bool InventoryReservation(ActionData action_data)",
      "void OnExecute(ActionData action_data)"
    ]
  },
  "ActionTakeItemToHands": {
    "parent": null,
    "methods": [
      "void ActionTakeItemToHands()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool CanContinue(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnExecute(ActionData action_data)",
      "void CreateAndSetupActionCallback(ActionData action_data)",
      "bool CanBeUsedOnBack()",
      "bool UseMainItem()",
      "bool MainItemAlwaysInHands()",
      "void Start(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void PerformSwap( ActionData action_data )"
    ]
  },
  "ActionSwapItemToHands": {
    "parent": null,
    "methods": [
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool UseMainItem()",
      "bool MainItemAlwaysInHands()",
      "void CreateAndSetupActionCallback(ActionData action_data)",
      "void Start(ActionData action_data)",
      "void OnExecute(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "void PerformSwap( ActionData action_data )"
    ]
  },
  "ActionTakeMaterialToHands": {
    "parent": null,
    "methods": [
      "void ActionTakeMaterialToHands()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanContinue( ActionData action_data )",
      "void OnExecute( ActionData action_data )",
      "void OnExecuteImpl( ActionData action_data )",
      "void CreateAndSetupActionCallback( ActionData action_data )"
    ]
  },
  "ActionTakeOvenIndoor": {
    "parent": null,
    "methods": [
      "void ActionTakeOvenIndoor()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "void TakeOvenFromIndoorLambda( EntityAI old_item, string new_item_type, PlayerBase player )",
      "void CopyOldPropertiesToNew( notnull EntityAI old_item, EntityAI new_item )"
    ]
  },
  "TakeOvenFromIndoorLambda": {
    "parent": null,
    "methods": [
      "void TakeOvenFromIndoorLambda( EntityAI old_item, string new_item_type, PlayerBase player )",
      "void CopyOldPropertiesToNew( notnull EntityAI old_item, EntityAI new_item )"
    ]
  },
  "ActionToggleTentOpen": {
    "parent": null,
    "methods": [
      "void ActionToggleTentOpen()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTuneFrequencyOnGround": {
    "parent": null,
    "methods": [
      "void ActionTuneFrequencyOnGround()",
      "void OnActionInfoUpdate( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOffPowerGenerator": {
    "parent": null,
    "methods": [
      "void ActionTurnOffPowerGenerator()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOffSpotlight": {
    "parent": null,
    "methods": [
      "void ActionTurnOffSpotlight()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOffTransmitterOnGround": {
    "parent": null,
    "methods": [
      "void ActionTurnOffTransmitterOnGround()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOffWhileOnGround": {
    "parent": null,
    "methods": [
      "void ActionTurnOffWhileOnGround()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOnPowerGenerator": {
    "parent": null,
    "methods": [
      "void ActionTurnOnPowerGenerator()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionTurnOnSpotlight": {
    "parent": null,
    "methods": [
      "void ActionTurnOnSpotlight()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOnTransmitterOnGround": {
    "parent": null,
    "methods": [
      "void ActionTurnOnTransmitterOnGround()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOnWhileOnGround": {
    "parent": null,
    "methods": [
      "void ActionTurnOnWhileOnGround()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionUnplugThisByCord": {
    "parent": null,
    "methods": [
      "void ActionUnplugThisByCord()",
      "bool HasProgress()",
      "bool DisplayTargetInActionText()",
      "string GetTargetName(PlayerBase player, ActionTarget target)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionUseUndergroundLever": {
    "parent": null,
    "methods": [
      "void ActionUseUndergroundLever()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionUseUndergroundPanel": {
    "parent": null,
    "methods": [
      "void ActionUseUndergroundPanel()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionWashHandsWaterOneCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWashHandsWaterOne()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionWashHandsWaterOne": {
    "parent": "ActionInteractLoopBase",
    "methods": [
      "void ActionWashHandsWaterOne()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionWashHandsWellOneCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionWashHandsWellOne()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionWashHandsWellOne": {
    "parent": "ActionInteractLoopBase",
    "methods": [
      "void ActionWashHandsWellOne()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "AttachActionData": {
    "parent": null,
    "methods": [
      "void ActionAttach()",
      "void CreateConditionComponents()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)",
      "void AttachItem(AttachActionData action_data)",
      "bool CanBeSetFromInventory()"
    ]
  },
  "ActionAttach": {
    "parent": null,
    "methods": [
      "void ActionAttach()",
      "void CreateConditionComponents()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)",
      "void AttachItem(AttachActionData action_data)",
      "bool CanBeSetFromInventory()"
    ]
  },
  "ActionAttachOnProxy": {
    "parent": null,
    "methods": [
      "void ActionAttachOnProxy()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteClient( ActionData action_data )"
    ]
  },
  "ActionAttachOnSelection": {
    "parent": null,
    "methods": [
      "void ActionAttachOnSelection()",
      "void CreateConditionComponents()",
      "int FindSlotIdToAttachOrCombine(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = null)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer( ActionData action_data )",
      "void OnExecuteClient(ActionData action_data)"
    ]
  },
  "ActionAttachOnTentProxy": {
    "parent": null,
    "methods": [
      "void ActionAttachOnTentProxy()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionAttachOnTrap": {
    "parent": null,
    "methods": [
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)"
    ]
  },
  "ActionAttachPowerSourceToPanel": {
    "parent": null,
    "methods": [
      "void ActionAttachPowerSourceToPanel()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteImpl( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )",
      "void OnExecuteServer( ActionData action_data )",
      "void OnEndClient( ActionData action_data )"
    ]
  },
  "ActionAttachSeeds": {
    "parent": null,
    "methods": [
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)"
    ]
  },
  "ActionAttachToConstruction": {
    "parent": null,
    "methods": [
      "void ActionAttachToConstruction()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartClient( ActionData action_data )",
      "void OnExecuteImpl( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionAttachWheels": {
    "parent": null,
    "methods": [
      "void ActionAttachWheels()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )"
    ]
  },
  "ActionAttachWithSwitch": {
    "parent": null,
    "methods": [
      "void ActionAttachWithSwitch()",
      "void CreateConditionComponents()",
      "bool CanBePerformedFromInventory()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )"
    ]
  },
  "ActionBuildPartSwitch": {
    "parent": null,
    "methods": [
      "void ActionBuildPartSwitch()",
      "void CreateConditionComponents()",
      "bool IsInstant()",
      "bool RemoveForceTargetAfterUse()",
      "bool UseAcknowledgment()",
      "bool CanBeUsedLeaning()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void SetNextIndex(ActionData action_data)"
    ]
  },
  "ActionClapBearTrapWithThisItem": {
    "parent": null,
    "methods": [
      "void ActionClapBearTrapWithThisItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionClose": {
    "parent": null,
    "methods": [
      "void ActionClose()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool SetupAction( PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void SetCloseAnimation( ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionConsumeSingle": {
    "parent": null,
    "methods": [
      "void ActionConsumeSingle()",
      "int GetConsumedQuantity()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void CreateActionComponent()"
    ]
  },
  "ActionConsumeSingleCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()"
    ]
  },
  "ActionCreateIndoorFireplace": {
    "parent": null,
    "methods": [
      "void ActionCreateIndoorFireplace()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionCreateIndoorOven": {
    "parent": null,
    "methods": [
      "void ActionCreateIndoorOven()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "bool IsLockTargetOnUse()"
    ]
  },
  "ActionDisinfectPlantBitCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDisinfectPlantBit()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionDisinfectPlantBit": {
    "parent": null,
    "methods": [
      "void ActionDisinfectPlantBit()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionDropItemCB": {
    "parent": null,
    "methods": [
      "void EndActionComponent()",
      "void ActionDropItem()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool CanBeUsedThrowing()",
      "bool HasTarget()",
      "bool UseAcknowledgment()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)",
      "void PhysicalDropItem( ActionData action_data )"
    ]
  },
  "ActionDropItem": {
    "parent": null,
    "methods": [
      "void ActionDropItem()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool CanBeUsedThrowing()",
      "bool HasTarget()",
      "bool UseAcknowledgment()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)",
      "void PhysicalDropItem( ActionData action_data )"
    ]
  },
  "ActionDropItemSimple": {
    "parent": null,
    "methods": [
      "void ActionDropItemSimple()",
      "bool IsInstant()",
      "bool MainItemAlwaysInHands()",
      "bool CanBeUsedOnBack()",
      "void Start(ActionData action_data)",
      "void PhysicalDropItem(ActionData action_data)"
    ]
  },
  "ActionEmptySeedsPack": {
    "parent": null,
    "methods": [
      "void ActionEmptySeedsPack()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionExtinquishTorchVideo": {
    "parent": null,
    "methods": [
      "void ActionExtinquishTorchVideo()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool IsInstant()",
      "bool HasTarget()",
      "void OnStartServer( ActionData action_data )"
    ]
  },
  "ActionFoldBandanaToHead": {
    "parent": null,
    "methods": [
      "void ActionFoldBandanaToHead()",
      "string GetText()"
    ]
  },
  "ActionFoldBandanaToMask": {
    "parent": null,
    "methods": [
      "void ActionFoldBandanaToMask()",
      "string GetText()"
    ]
  },
  "ActionFoldEntityToSlot": {
    "parent": null,
    "methods": [
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )",
      "void OnExecuteServer( ActionData action_data )",
      "void FoldBandanaToSlotLambda(EntityAI old_item, string new_item_type, PlayerBase player, int slot)"
    ]
  },
  "FoldBandanaToSlotLambda": {
    "parent": null,
    "methods": [
      "void FoldBandanaToSlotLambda(EntityAI old_item, string new_item_type, PlayerBase player, int slot)"
    ]
  },
  "ActionFoldMap": {
    "parent": null,
    "methods": [
      "void ActionFoldMap()",
      "bool IsInstant()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "int GetActionCategory()"
    ]
  },
  "ActionForceABiteCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionForceABite()",
      "void CreateConditionComponents()",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionForceABite": {
    "parent": null,
    "methods": [
      "void ActionForceABite()",
      "void CreateConditionComponents()",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionForceABiteCan": {
    "parent": null,
    "methods": [
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionForceASip": {
    "parent": null,
    "methods": [
      "void ActionForceASip()",
      "void CreateConditionComponents()"
    ]
  },
  "ActionForceConsumeSingleCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionForceConsumeSingle()",
      "void CreateConditionComponents()",
      "int GetConsumedQuantity()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnEndServer(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionForceConsumeSingle": {
    "parent": null,
    "methods": [
      "void ActionForceConsumeSingle()",
      "void CreateConditionComponents()",
      "int GetConsumedQuantity()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnEndServer(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionHandcuffTarget": {
    "parent": null,
    "methods": [
      "void ActionHandcuffTarget()",
      "void CreateConditionComponents()",
      "void OnExecuteServer( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )"
    ]
  },
  "ActionInsertSparkplug": {
    "parent": null,
    "methods": [
      "void ActionInsertSparkplug()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )"
    ]
  },
  "ActionLightTorchVideo": {
    "parent": null,
    "methods": [
      "void ActionLightTorchVideo()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool IsInstant()",
      "bool HasTarget()",
      "void OnStartServer( ActionData action_data )"
    ]
  },
  "ActionMeasureBattery": {
    "parent": null,
    "methods": [
      "void ActionMeasureBattery()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionNextCombinationLockDial": {
    "parent": null,
    "methods": [
      "void ActionNextCombinationLockDial()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool IsInstant()",
      "bool RemoveForceTargetAfterUse()",
      "bool UseAcknowledgment()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "ActionOpen": {
    "parent": null,
    "methods": [
      "void ActionOpen()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionPin": {
    "parent": "ActionSingleUseBase",
    "methods": [
      "void ActionPin()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecute( ActionData action_data )"
    ]
  },
  "ActionPlaceFireplaceIndoor": {
    "parent": null,
    "methods": [
      "void ActionPlaceFireplaceIndoor()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer(ActionData action_data)",
      "bool IsLockTargetOnUse()",
      "void FireplaceToIndoorsLambda( EntityAI old_item, string new_item_type, PlayerBase player, vector pos, Object target )",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "FireplaceToIndoorsLambda": {
    "parent": null,
    "methods": [
      "void FireplaceToIndoorsLambda( EntityAI old_item, string new_item_type, PlayerBase player, vector pos, Object target )",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "ActionPlaceFireplaceIntoBarrel": {
    "parent": null,
    "methods": [
      "void ActionPlaceFireplaceIntoBarrel()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionPlaceOvenIndoor": {
    "parent": null,
    "methods": [
      "void ActionPlaceOvenIndoor()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "bool IsLockTargetOnUse()",
      "void FireplaceToIndoorOvenLambda( EntityAI old_item, string new_item_type, PlayerBase player, vector pos, Object target )",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "FireplaceToIndoorOvenLambda": {
    "parent": null,
    "methods": [
      "void FireplaceToIndoorOvenLambda( EntityAI old_item, string new_item_type, PlayerBase player, vector pos, Object target )",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "ActionPlantSeed": {
    "parent": null,
    "methods": [
      "void ActionPlantSeed()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)",
      "void Process(ActionData action_data)"
    ]
  },
  "ActionPlugIn": {
    "parent": null,
    "methods": [
      "void ActionPlugIn()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)",
      "void Process(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)"
    ]
  },
  "ActionPlugIntoFence": {
    "parent": null,
    "methods": [
      "void ActionPlugIntoFence()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionPlugTargetIntoThis": {
    "parent": null,
    "methods": [
      "void ActionPlugTargetIntoThis()",
      "void CreateConditionComponents()",
      "bool Can(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsDeploymentAction()",
      "void OnExecuteServer(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)",
      "void Process(ActionData action_data)"
    ]
  },
  "ActionReadPaperCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void EndActionComponent()",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void ActionReadPaper()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnUpdate(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)"
    ]
  },
  "ActionReadPaper": {
    "parent": null,
    "methods": [
      "void ActionReadPaper()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnUpdate(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)"
    ]
  },
  "ActionRepairWithToolFromHands": {
    "parent": null,
    "methods": [
      "void ActionRepairWithToolFromHands()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionResetKitchenTimerClockCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionResetKitchenTimer()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionResetKitchenTimer": {
    "parent": null,
    "methods": [
      "void ActionResetKitchenTimer()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTakeABiteCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTakeABite()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateConditionComponents()"
    ]
  },
  "ActionTakeABite": {
    "parent": null,
    "methods": [
      "void ActionTakeABite()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateConditionComponents()"
    ]
  },
  "ActionTakeABiteCan": {
    "parent": null,
    "methods": [
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionTakeASip": {
    "parent": null,
    "methods": [
      "void ActionTakeASip()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionTakeMaterialToHandsSwitch": {
    "parent": null,
    "methods": [
      "void ActionTakeMaterialToHandsSwitch()",
      "void CreateConditionComponents()",
      "bool IsInstant()",
      "bool RemoveForceTargetAfterUse()",
      "bool UseAcknowledgment()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "ActionToggleNVG": {
    "parent": null,
    "methods": [
      "void ActionToggleNVG()",
      "bool IsInstant()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool UseMainItem()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "ActionToggleNVMode": {
    "parent": null,
    "methods": [
      "void ActionToggleNVMode()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )",
      "void SwitchMode( ActionData action_data )"
    ]
  },
  "ActionTogglePlaceObject": {
    "parent": null,
    "methods": [
      "void ActionTogglePlaceObject()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool IsLocal()",
      "bool IsInstant()",
      "bool IsDeploymentAction()",
      "bool RemoveForceTargetAfterUse()",
      "bool CanBeUsedWithBrokenLegs()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void Start(ActionData action_data)"
    ]
  },
  "ActionTogglePlaceObjectDigging": {
    "parent": null,
    "methods": [
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)"
    ]
  },
  "ActionTriggerRemotely": {
    "parent": null,
    "methods": [
      "void ActionTriggerRemotely()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool HasTarget()",
      "bool HasProneException()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionTurnOffAlarmClockCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTurnOffAlarmClock()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOffAlarmClock": {
    "parent": null,
    "methods": [
      "void ActionTurnOffAlarmClock()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOffHeadtorch": {
    "parent": null,
    "methods": [
      "void ActionTurnOffHeadtorch()",
      "bool IsInstant()",
      "bool HasTarget()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "ActionTurnOffHelmetFlashlight": {
    "parent": null,
    "methods": [
      "void ActionTurnOffHelmetFlashlight()",
      "bool IsInstant()",
      "bool HasTarget()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "ActionTurnOffTransmitterCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTurnOffTransmitter()",
      "bool HasProneException()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionTurnOffTransmitter": {
    "parent": null,
    "methods": [
      "void ActionTurnOffTransmitter()",
      "bool HasProneException()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionTurnOffWeaponFlashlight": {
    "parent": null,
    "methods": [
      "void ActionTurnOffWeaponFlashlight()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOffWhileInHands": {
    "parent": null,
    "methods": [
      "void ActionTurnOffWhileInHands()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProneException()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionTurnOnAlarmClockCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTurnOnAlarmClock()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOnAlarmClock": {
    "parent": null,
    "methods": [
      "void ActionTurnOnAlarmClock()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOnChemlight": {
    "parent": null,
    "methods": [
      "void ActionTurnOnChemlight()"
    ]
  },
  "ActionTurnOnHeadtorch": {
    "parent": null,
    "methods": [
      "void ActionTurnOnHeadtorch()",
      "bool IsInstant()",
      "bool HasTarget()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "ActionTurnOnHeatpack": {
    "parent": null,
    "methods": [
      "void ActionTurnOnHeatpack()"
    ]
  },
  "ActionTurnOnHelmetFlashlight": {
    "parent": null,
    "methods": [
      "void ActionTurnOnHelmetFlashlight()",
      "bool IsInstant()",
      "bool HasTarget()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "ActionTurnOnTransmitterCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTurnOnTransmitter()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionTurnOnTransmitter": {
    "parent": null,
    "methods": [
      "void ActionTurnOnTransmitter()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)"
    ]
  },
  "ActionTurnOnWeaponFlashlight": {
    "parent": null,
    "methods": [
      "void ActionTurnOnWeaponFlashlight()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )"
    ]
  },
  "ActionTurnOnWhileInHands": {
    "parent": null,
    "methods": [
      "void ActionTurnOnWhileInHands()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProneException()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer( ActionData action_data )"
    ]
  },
  "ActionUnfoldBandana": {
    "parent": null,
    "methods": [
      "void ActionUnfoldBandana()",
      "void UnfoldBandanaLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "UnfoldBandanaLambda": {
    "parent": null,
    "methods": [
      "void UnfoldBandanaLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ActionUnfoldEntity": {
    "parent": null,
    "methods": [
      "void ActionUnfoldEntity()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )",
      "void OnExecuteServer( ActionData action_data )",
      "void UnfoldEntityLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "UnfoldEntityLambda": {
    "parent": null,
    "methods": [
      "void UnfoldEntityLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ActionUnfoldMapCB": {
    "parent": null,
    "methods": [
      "void ActionUnfoldMapCB()",
      "void SetActionData(ActionData action_data)",
      "bool CancelCondition()",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void OnAnimationEvent(int pEventID)",
      "void OnFinish(bool pCanceled)",
      "void PerformMapChange()",
      "bool StateCheck()",
      "void ActionUnfoldMap()",
      "bool IsInstant()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "int GetActionCategory()",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)",
      "void Interrupt(ActionData action_data)",
      "void OpenMap(ActionData action_data)"
    ]
  },
  "ActionUnfoldMap": {
    "parent": null,
    "methods": [
      "void ActionUnfoldMap()",
      "bool IsInstant()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "int GetActionCategory()",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)",
      "void Interrupt(ActionData action_data)",
      "void OpenMap(ActionData action_data)"
    ]
  },
  "ActionUnpin": {
    "parent": "ActionSingleUseBase",
    "methods": [
      "void ActionUnpin()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecute( ActionData action_data )"
    ]
  },
  "ActionWashHandsItem": {
    "parent": null,
    "methods": [
      "void ActionWashHandsItem()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProneException()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionWorldCraftCancel": {
    "parent": null,
    "methods": [
      "void ActionWorldCraftCancel()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "bool IsLocal()"
    ]
  },
  "ActionWorldCraftSwitch": {
    "parent": null,
    "methods": [
      "void ActionWorldCraftSwitch()",
      "void CreateConditionComponents()",
      "bool IsLocal()",
      "bool IsInstant()",
      "bool RemoveForceTargetAfterUse()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "FlagTendencyActionReciveData": {
    "parent": null,
    "methods": [
      "void ActionWorldFlagActionSwitch()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "bool IsInstant()",
      "bool RemoveForceTargetAfterUse()",
      "void SetFlagTendencyOnCurrentActionInvalid(bool state)"
    ]
  },
  "FlagTendencyActionData": {
    "parent": null,
    "methods": [
      "void ActionWorldFlagActionSwitch()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "bool IsInstant()",
      "bool RemoveForceTargetAfterUse()",
      "void SetFlagTendencyOnCurrentActionInvalid(bool state)"
    ]
  },
  "ActionWorldFlagActionSwitch": {
    "parent": null,
    "methods": [
      "void ActionWorldFlagActionSwitch()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "bool IsInstant()",
      "bool RemoveForceTargetAfterUse()",
      "void SetFlagTendencyOnCurrentActionInvalid(bool state)"
    ]
  },
  "ActionWorldLiquidActionSwitch": {
    "parent": null,
    "methods": [
      "void ActionWorldLiquidActionSwitch()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "bool IsLocal()",
      "bool IsInstant()",
      "bool RemoveForceTargetAfterUse()"
    ]
  },
  "ActionWritePaperCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void EndActionComponent()",
      "void OnStateChange(int pOldState, int pCurrentState)",
      "void ActionWritePaper()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartClient( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void OnUpdate(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)"
    ]
  },
  "ActionWritePaper": {
    "parent": null,
    "methods": [
      "void ActionWritePaper()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartClient( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void OnUpdate(ActionData action_data)",
      "void OnEndRequest(ActionData action_data)"
    ]
  },
  "ActionZoomIn": {
    "parent": null,
    "methods": [
      "void ActionZoomIn()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionZoomOut": {
    "parent": null,
    "methods": [
      "void ActionZoomOut()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "AttachMagazineActionReciveData": {
    "parent": null,
    "methods": [
      "void FirearmActionAttachMagazine()",
      "int GetActionCategory()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool Post_SetupAction( ActionData action_data )",
      "bool InventoryReservation( ActionData action_data)",
      "void Start( ActionData action_data )",
      "bool CanBePerformedFromInventory()",
      "bool CanBePerformedFromQuickbar()",
      "void FirearmActionAttachMagazineQuick()",
      "bool HasTarget()",
      "bool HasProgress()",
      "void CreateConditionComponents()"
    ]
  },
  "AttachMagazineActionData": {
    "parent": null,
    "methods": [
      "void FirearmActionAttachMagazine()",
      "int GetActionCategory()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool Post_SetupAction( ActionData action_data )",
      "bool InventoryReservation( ActionData action_data)",
      "void Start( ActionData action_data )",
      "bool CanBePerformedFromInventory()",
      "bool CanBePerformedFromQuickbar()",
      "void FirearmActionAttachMagazineQuick()",
      "bool HasTarget()",
      "bool HasProgress()",
      "void CreateConditionComponents()"
    ]
  },
  "FirearmActionAttachMagazine": {
    "parent": null,
    "methods": [
      "void FirearmActionAttachMagazine()",
      "int GetActionCategory()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool Post_SetupAction( ActionData action_data )",
      "bool InventoryReservation( ActionData action_data)",
      "void Start( ActionData action_data )",
      "bool CanBePerformedFromInventory()",
      "bool CanBePerformedFromQuickbar()",
      "void FirearmActionAttachMagazineQuick()",
      "bool HasTarget()",
      "bool HasProgress()",
      "void CreateConditionComponents()"
    ]
  },
  "FirearmActionAttachMagazineQuick": {
    "parent": null,
    "methods": [
      "void FirearmActionAttachMagazineQuick()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool Post_SetupAction( ActionData action_data )",
      "bool InventoryReservation( ActionData action_data)",
      "void Start( ActionData action_data )",
      "bool HasTarget()",
      "bool HasProgress()",
      "void CreateConditionComponents()"
    ]
  },
  "FirearmActionBase": {
    "parent": null,
    "methods": [
      "void FirearmActionBase()",
      "int GetStanceMask(PlayerBase player)",
      "int GetActionCategory()",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void Start(ActionData action_data)",
      "bool CanBePerformedFromInventory()",
      "bool CanBeUsedOnBack()",
      "bool CanBeUsedRaised()",
      "void OnUpdate(ActionData action_data)",
      "float GetProgress(ActionData action_data)",
      "bool AddActionJuncture(ActionData action_data)"
    ]
  },
  "DetachMagActionReciveData": {
    "parent": null,
    "methods": [
      "void FirearmActionDetachMagazine_Old()",
      "bool HasTarget()",
      "bool CanBePerformedFromQuickbar()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool InventoryReservation( ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data)",
      "void Start( ActionData action_data )",
      "void FirearmActionDetachMagazine()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnStageStart(SequentialActionData action_data)",
      "void OnUpdate( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "DetachMagActionData": {
    "parent": null,
    "methods": [
      "void FirearmActionDetachMagazine_Old()",
      "bool HasTarget()",
      "bool CanBePerformedFromQuickbar()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool InventoryReservation( ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data)",
      "void Start( ActionData action_data )",
      "void FirearmActionDetachMagazine()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnStageStart(SequentialActionData action_data)",
      "void OnUpdate( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "FirearmActionDetachMagazine_Old": {
    "parent": null,
    "methods": [
      "void FirearmActionDetachMagazine_Old()",
      "bool HasTarget()",
      "bool CanBePerformedFromQuickbar()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool InventoryReservation( ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool ActionConditionContinue( ActionData action_data)",
      "void Start( ActionData action_data )",
      "void FirearmActionDetachMagazine()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnStageStart(SequentialActionData action_data)",
      "void OnUpdate( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "AdvDetachMagActionReciveData": {
    "parent": null,
    "methods": [
      "void FirearmActionDetachMagazine()",
      "bool InventoryReservation( ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void CreateConditionComponents()",
      "bool CanBePerformedFromQuickbar()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnStageStart(SequentialActionData action_data)",
      "void OnUpdate( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "AdvDetachMagActionData": {
    "parent": null,
    "methods": [
      "void FirearmActionDetachMagazine()",
      "bool InventoryReservation( ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void CreateConditionComponents()",
      "bool CanBePerformedFromQuickbar()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnStageStart(SequentialActionData action_data)",
      "void OnUpdate( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "FirearmActionDetachMagazine": {
    "parent": null,
    "methods": [
      "void FirearmActionDetachMagazine()",
      "bool InventoryReservation( ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data )",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void CreateConditionComponents()",
      "bool CanBePerformedFromQuickbar()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue( ActionData action_data )",
      "void OnStageStart(SequentialActionData action_data)",
      "void OnUpdate( ActionData action_data )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "FirearmActionLoadBullet": {
    "parent": null,
    "methods": [
      "void FirearmActionLoadBullet()",
      "int GetActionCategory()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void Start(ActionData action_data)",
      "bool CanBePerformedFromInventory()",
      "bool CanBePerformedFromQuickbar()",
      "void FirearmActionLoadBulletQuick()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)"
    ]
  },
  "FirearmActionLoadBulletQuick": {
    "parent": null,
    "methods": [
      "void FirearmActionLoadBulletQuick()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void Start(ActionData action_data)"
    ]
  },
  "FirearmActionLoadMultiBullet": {
    "parent": null,
    "methods": [
      "void FirearmActionLoadMultiBullet()",
      "int GetActionCategory()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "bool CanBePerformedFromInventory()",
      "bool CanBeSetFromInventory()",
      "void OnEndInput( ActionData action_data )",
      "bool CanBePerformedFromQuickbar()",
      "bool HasProgress()",
      "void FirearmActionLoadMultiBulletQuick()",
      "bool HasTarget()",
      "void CreateConditionComponents()",
      "void FirearmActionLoadMultiBulletRadial()",
      "bool CanContinue( ActionData action_data )",
      "void OnStart( ActionData action_data )",
      "void OnEnd( ActionData action_data )"
    ]
  },
  "FirearmActionLoadMultiBulletQuick": {
    "parent": null,
    "methods": [
      "void FirearmActionLoadMultiBulletQuick()",
      "bool HasTarget()",
      "bool HasProgress()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )",
      "void OnEndInput( ActionData action_data )",
      "void FirearmActionLoadMultiBulletRadial()",
      "bool CanContinue( ActionData action_data )",
      "void OnStart( ActionData action_data )",
      "void OnEnd( ActionData action_data )"
    ]
  },
  "FirearmActionLoadMultiBulletRadial": {
    "parent": null,
    "methods": [
      "void FirearmActionLoadMultiBulletRadial()",
      "bool HasProgress()",
      "void CreateConditionComponents()",
      "bool CanContinue( ActionData action_data )",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStart( ActionData action_data )",
      "void OnEnd( ActionData action_data )"
    ]
  },
  "FirearmActionMechanicManipulate": {
    "parent": null,
    "methods": [
      "void FirearmActionLoadBulletQuick()",
      "bool HasTarget()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "FirearmActionUnjam": {
    "parent": null,
    "methods": [
      "void FirearmActionUnjam()",
      "bool HasTarget()",
      "void CreateConditionComponents()",
      "bool HasProgress()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void Start( ActionData action_data )"
    ]
  },
  "BadgeBleeding": {
    "parent": "DisplayElementBadge",
    "methods": [
      "void BadgeBleeding(PlayerBase player)",
      "void UpdateHUD()"
    ]
  },
  "BadgeFracture": {
    "parent": "DisplayElementBadge",
    "methods": [
      "void BadgeFracture(PlayerBase player)"
    ]
  },
  "BadgeHeartbeat": {
    "parent": "DisplayElementBadge",
    "methods": [
      "void BadgeHeartbeat(PlayerBase player)",
      "void UpdateHUD()"
    ]
  },
  "BadgeLegs": {
    "parent": "DisplayElementBadge",
    "methods": [
      "void BadgeLegs(PlayerBase player)"
    ]
  },
  "BadgePills": {
    "parent": "DisplayElementBadge",
    "methods": [
      "void BadgePills(PlayerBase player)"
    ]
  },
  "BadgePoisoned": {
    "parent": "DisplayElementBadge",
    "methods": [
      "void BadgePoisoned(PlayerBase player)"
    ]
  },
  "BadgeSick": {
    "parent": "DisplayElementBadge",
    "methods": [
      "void BadgeSick(PlayerBase player)"
    ]
  },
  "BadgeStuffed": {
    "parent": "DisplayElementBadge",
    "methods": [
      "void BadgeStuffed(PlayerBase player)"
    ]
  },
  "BadgeWet": {
    "parent": "DisplayElementBadge",
    "methods": [
      "void BadgeWet(PlayerBase player)"
    ]
  },
  "ElementStance": {
    "parent": "DisplayElementBase",
    "methods": [
      "void ElementStance(PlayerBase player)",
      "void UpdateHUD()"
    ]
  },
  "TendencyBacteria": {
    "parent": "DisplayElementTendency",
    "methods": [
      "void TendencyBacteria(PlayerBase player)"
    ]
  },
  "TendencyBlood": {
    "parent": "DisplayElementTendency",
    "methods": [
      "void TendencyBlood(PlayerBase player)"
    ]
  },
  "TendencyHealth": {
    "parent": "DisplayElementTendency",
    "methods": [
      "void TendencyHealth(PlayerBase player)"
    ]
  },
  "TendencyHunger": {
    "parent": "DisplayElementTendency",
    "methods": [
      "void TendencyHunger(PlayerBase player)"
    ]
  },
  "TendencyTemperature": {
    "parent": "DisplayElementTendency",
    "methods": [
      "void TendencyTemperature(PlayerBase player)",
      "int TranslateLevelToStatus(int level)"
    ]
  },
  "TendencyThirst": {
    "parent": "DisplayElementTendency",
    "methods": [
      "void TendencyThirst(PlayerBase player)"
    ]
  },
  "Land_Misc_Through_Static": {
    "parent": null,
    "methods": [
      "int GetLiquidSourceType()",
      "void SetActions()"
    ]
  },
  "Land_Mil_Barracks1": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_Mil_Barracks3": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_Mil_Barracks4": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_HouseBlock_1F1": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_HouseBlock_1F3": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_HouseBlock_1F4": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_HouseBlock_2F1": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_HouseBlock_2F8": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_HouseBlock_2F9": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_HouseBlock_3F2": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_HouseBlock_5F": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_Airfield_Small_Control": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1B01_Pub": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W01": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W02": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W03": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W04": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W05": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W06": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W08": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W09": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W10": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W11": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_1W12": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_2B01": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_2W01": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_House_2W02": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_Village_Pub": {
    "parent": "BuildingWithFireplace",
    "methods": []
  },
  "Land_Misc_Greenhouse": {
    "parent": "BuildingSuper",
    "methods": [
      "void Land_Misc_Greenhouse()",
      "void Land_Misc_Polytunnel()"
    ]
  },
  "Land_Misc_Polytunnel": {
    "parent": "BuildingSuper",
    "methods": [
      "void Land_Misc_Polytunnel()"
    ]
  },
  "Land_Misc_Well_Pump_Blue": {
    "parent": "Well",
    "methods": []
  },
  "Land_Misc_Well_Pump_Yellow": {
    "parent": "Well",
    "methods": []
  },
  "AlarmLight": {
    "parent": null,
    "methods": [
      "void AlarmLight()",
      "void Land_Underground_EntranceBase()",
      "void CreateLights()",
      "void CleanUpOnDeleteClient()",
      "void CleanUpOnClosedClient()",
      "bool CanManipulate(Param param = null)",
      "void Manipulate(Param param = null)",
      "void NavmeshUpdate()",
      "void OnUpdateClient(float timeSlice)",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void OnUpdateServer()",
      "void GetConnectedPanels(array<Land_Underground_Panel> panels)",
      "bool CheckShouldPlayPersistent(EUndegroundEntranceState state, EUndegroundEntranceState lastValidState)",
      "float AdjustTime(float originalTime, float adjustedTime = -1)",
      "float GetOpeningTime()",
      "void RequestLatentTransition(float time, EUndegroundEntranceState targetState = EUndegroundEntranceState.UNINITIALIZED)",
      "void SetDoorStateServer(EUndegroundEntranceState newState)",
      "void OnDoorStateChangedServer(EUndegroundEntranceState newState)",
      "void OnDoorStateChangedClient(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)",
      "void OpenServer(bool force = false)",
      "void HandleVisualPlayback(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)",
      "void HandleAudioPlayback(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)",
      "void OnFinishedTimerServer()",
      "void OnVariablesSynchronized()",
      "bool IsInitDoorStateSync()",
      "string GetDebugText()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void SoundEnded(Effect eff)"
    ]
  },
  "Land_Underground_EntranceBase": {
    "parent": null,
    "methods": [
      "void Land_Underground_EntranceBase()",
      "void CreateLights()",
      "void CleanUpOnDeleteClient()",
      "void CleanUpOnClosedClient()",
      "bool CanManipulate(Param param = null)",
      "void Manipulate(Param param = null)",
      "void NavmeshUpdate()",
      "void OnUpdateClient(float timeSlice)",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void OnUpdateServer()",
      "void GetConnectedPanels(array<Land_Underground_Panel> panels)",
      "bool CheckShouldPlayPersistent(EUndegroundEntranceState state, EUndegroundEntranceState lastValidState)",
      "float AdjustTime(float originalTime, float adjustedTime = -1)",
      "float GetOpeningTime()",
      "void RequestLatentTransition(float time, EUndegroundEntranceState targetState = EUndegroundEntranceState.UNINITIALIZED)",
      "void SetDoorStateServer(EUndegroundEntranceState newState)",
      "void OnDoorStateChangedServer(EUndegroundEntranceState newState)",
      "void OnDoorStateChangedClient(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)",
      "void OpenServer(bool force = false)",
      "void HandleVisualPlayback(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)",
      "void HandleAudioPlayback(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)",
      "void OnFinishedTimerServer()",
      "void OnVariablesSynchronized()",
      "bool IsInitDoorStateSync()",
      "string GetDebugText()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "void SoundEnded(Effect eff)"
    ]
  },
  "Land_Underground_Entrance": {
    "parent": null,
    "methods": [
      "void CreateLights()",
      "void CleanUpOnClosedClient()",
      "void OnDoorStateChangedServer(EUndegroundEntranceState newState)",
      "void SoundEnded(Effect eff)",
      "void HandleAudioPlayback(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)",
      "void OnUpdateClient(float timeSlice)",
      "void HandleVisualPlayback(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)"
    ]
  },
  "Land_Underground_Panel": {
    "parent": null,
    "methods": [
      "void Land_Underground_Panel()",
      "bool CanInteract()",
      "void Interact()",
      "static void RegisterEntrance(Land_Underground_EntranceBase entrance)",
      "static void UnregisterEntrance(Land_Underground_EntranceBase entrance)",
      "static void RegisterPanel(Land_Underground_Panel panel)",
      "static void UnregisterPanel(Land_Underground_Panel panel)",
      "void SetLEDState(ELEDColors color, ELEDState state)",
      "void SetBlinkingTimer(bool enable)",
      "void OnLEDStateChanged()",
      "void ResetPanelUsed()",
      "void OnDoorStateChangedClient(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)",
      "void UpdateLED(string selection, string color)",
      "void ToggleFlipFlop()",
      "void OnPanelUsedSynchronized()",
      "void OnVariablesSynchronized()"
    ]
  },
  "Land_Underground_Panel_Lever": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void ResetPhase(EntityAI target)",
      "void OnPanelUsedSynchronized()",
      "void Interact()"
    ]
  },
  "Land_Underground_Stairs_Exit": {
    "parent": null,
    "methods": [
      "void Land_Underground_Stairs_Exit()",
      "void CleanUpOnClosedClient()",
      "float GetOpeningTime()",
      "void OnDoorStateChangedServer(EUndegroundEntranceState newState)",
      "void SoundEnded(Effect eff)",
      "void HandleAudioPlayback(EUndegroundEntranceState newState, EUndegroundEntranceState prevState)",
      "void CreateLights()"
    ]
  },
  "WaterLevelSettings": {
    "parent": null,
    "methods": [
      "void WaterLevelSettings(int pWaterLevel, float pDuration)",
      "void PressureLevelSettings(int pPressureLevel, float pDuration)",
      "void Land_Underground_WaterReservoir()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void OnVariablesSynchronized()",
      "void SetActions()",
      "bool HasTurnableValveBehavior()",
      "void Init()",
      "void LateInit()",
      "void ConfigureValvesAndGaugesCourse()",
      "bool IsValveTurnable(int pValveIndex)",
      "bool IsAnyValveActive()",
      "bool IsValveActive(int pValveIndex)",
      "int GetTurnableValveIndex(int pComponentIndex)",
      "void OnValveManipulationStart(int pValveIndex)",
      "void OnValveManipulationEnd(int pValveIndex)",
      "void OnValveManipulationCanceled(int pValveIndex)",
      "void SetLastActiveValve(int pValveIndex)",
      "void SetWaterLevelHeight(float pHeight)",
      "void RegisterValve(string pCompName, int pIndex)",
      "void TranslateMemoryPointsToWaterLevels()",
      "float WaterLevelToHeight(int pWaterLevel)",
      "int HeightToWaterLevel(float pHeight)",
      "float PressureLevelToValue(int pPressureLevel)",
      "void AdvanceToNextWaterLevelStageSettings(int pValveIndex)",
      "void AdvanceToNextPressureLevelStageSettings(int pValveIndex)",
      "void SetDefaultPressureLevelStageSettings(int pValveIndex)",
      "void AnimateValve(int pValveIndex, float pPhase)",
      "void SetValvePressureLevelGauge(int pValveIndex, float pValue)",
      "float GetValvePressureLevelGauge(int pValveIndex)",
      "bool IsValvePressureLevelGaugeAtBase(int pValveIndex)",
      "float AdjustTime(float originalTime)",
      "void HandleSoundEffects()",
      "void PlayValveManipulationSound()",
      "void HandleSoundEffectsPipeCreaking()",
      "void HandleSoundEffectsPipeSprinkling()",
      "void HandleSoundEffectsUnderwaterPipeSounds()",
      "void HandleSoundEffectsWaterLevelMovementSounds()",
      "void CleanSoundEffects()",
      "void PlayPipeCreakingSoundOnLocation()",
      "void HandleVisualEffects()",
      "void CleanVisualEffects()",
      "void ResetState()",
      "void SyncValveVariables()",
      "int PackArrayOfBoolStatesIntoBits(array<bool> pStates)",
      "string GetDebugText()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "PressureLevelSettings": {
    "parent": null,
    "methods": [
      "void PressureLevelSettings(int pPressureLevel, float pDuration)",
      "void Land_Underground_WaterReservoir()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void OnVariablesSynchronized()",
      "void SetActions()",
      "bool HasTurnableValveBehavior()",
      "void Init()",
      "void LateInit()",
      "void ConfigureValvesAndGaugesCourse()",
      "bool IsValveTurnable(int pValveIndex)",
      "bool IsAnyValveActive()",
      "bool IsValveActive(int pValveIndex)",
      "int GetTurnableValveIndex(int pComponentIndex)",
      "void OnValveManipulationStart(int pValveIndex)",
      "void OnValveManipulationEnd(int pValveIndex)",
      "void OnValveManipulationCanceled(int pValveIndex)",
      "void SetLastActiveValve(int pValveIndex)",
      "void SetWaterLevelHeight(float pHeight)",
      "void RegisterValve(string pCompName, int pIndex)",
      "void TranslateMemoryPointsToWaterLevels()",
      "float WaterLevelToHeight(int pWaterLevel)",
      "int HeightToWaterLevel(float pHeight)",
      "float PressureLevelToValue(int pPressureLevel)",
      "void AdvanceToNextWaterLevelStageSettings(int pValveIndex)",
      "void AdvanceToNextPressureLevelStageSettings(int pValveIndex)",
      "void SetDefaultPressureLevelStageSettings(int pValveIndex)",
      "void AnimateValve(int pValveIndex, float pPhase)",
      "void SetValvePressureLevelGauge(int pValveIndex, float pValue)",
      "float GetValvePressureLevelGauge(int pValveIndex)",
      "bool IsValvePressureLevelGaugeAtBase(int pValveIndex)",
      "float AdjustTime(float originalTime)",
      "void HandleSoundEffects()",
      "void PlayValveManipulationSound()",
      "void HandleSoundEffectsPipeCreaking()",
      "void HandleSoundEffectsPipeSprinkling()",
      "void HandleSoundEffectsUnderwaterPipeSounds()",
      "void HandleSoundEffectsWaterLevelMovementSounds()",
      "void CleanSoundEffects()",
      "void PlayPipeCreakingSoundOnLocation()",
      "void HandleVisualEffects()",
      "void CleanVisualEffects()",
      "void ResetState()",
      "void SyncValveVariables()",
      "int PackArrayOfBoolStatesIntoBits(array<bool> pStates)",
      "string GetDebugText()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "WaterLevelSnapshot": {
    "parent": null,
    "methods": [
      "void Land_Underground_WaterReservoir()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void OnVariablesSynchronized()",
      "void SetActions()",
      "bool HasTurnableValveBehavior()",
      "void Init()",
      "void LateInit()",
      "void ConfigureValvesAndGaugesCourse()",
      "bool IsValveTurnable(int pValveIndex)",
      "bool IsAnyValveActive()",
      "bool IsValveActive(int pValveIndex)",
      "int GetTurnableValveIndex(int pComponentIndex)",
      "void OnValveManipulationStart(int pValveIndex)",
      "void OnValveManipulationEnd(int pValveIndex)",
      "void OnValveManipulationCanceled(int pValveIndex)",
      "void SetLastActiveValve(int pValveIndex)",
      "void SetWaterLevelHeight(float pHeight)",
      "void RegisterValve(string pCompName, int pIndex)",
      "void TranslateMemoryPointsToWaterLevels()",
      "float WaterLevelToHeight(int pWaterLevel)",
      "int HeightToWaterLevel(float pHeight)",
      "float PressureLevelToValue(int pPressureLevel)",
      "void AdvanceToNextWaterLevelStageSettings(int pValveIndex)",
      "void AdvanceToNextPressureLevelStageSettings(int pValveIndex)",
      "void SetDefaultPressureLevelStageSettings(int pValveIndex)",
      "void AnimateValve(int pValveIndex, float pPhase)",
      "void SetValvePressureLevelGauge(int pValveIndex, float pValue)",
      "float GetValvePressureLevelGauge(int pValveIndex)",
      "bool IsValvePressureLevelGaugeAtBase(int pValveIndex)",
      "float AdjustTime(float originalTime)",
      "void HandleSoundEffects()",
      "void PlayValveManipulationSound()",
      "void HandleSoundEffectsPipeCreaking()",
      "void HandleSoundEffectsPipeSprinkling()",
      "void HandleSoundEffectsUnderwaterPipeSounds()",
      "void HandleSoundEffectsWaterLevelMovementSounds()",
      "void CleanSoundEffects()",
      "void PlayPipeCreakingSoundOnLocation()",
      "void HandleVisualEffects()",
      "void CleanVisualEffects()",
      "void ResetState()",
      "void SyncValveVariables()",
      "int PackArrayOfBoolStatesIntoBits(array<bool> pStates)",
      "string GetDebugText()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "Land_Underground_WaterReservoir": {
    "parent": null,
    "methods": [
      "void Land_Underground_WaterReservoir()",
      "void EOnPostSimulate(IEntity other, float timeSlice)",
      "void OnVariablesSynchronized()",
      "void SetActions()",
      "bool HasTurnableValveBehavior()",
      "void Init()",
      "void LateInit()",
      "void ConfigureValvesAndGaugesCourse()",
      "bool IsValveTurnable(int pValveIndex)",
      "bool IsAnyValveActive()",
      "bool IsValveActive(int pValveIndex)",
      "int GetTurnableValveIndex(int pComponentIndex)",
      "void OnValveManipulationStart(int pValveIndex)",
      "void OnValveManipulationEnd(int pValveIndex)",
      "void OnValveManipulationCanceled(int pValveIndex)",
      "void SetLastActiveValve(int pValveIndex)",
      "void SetWaterLevelHeight(float pHeight)",
      "void RegisterValve(string pCompName, int pIndex)",
      "void TranslateMemoryPointsToWaterLevels()",
      "float WaterLevelToHeight(int pWaterLevel)",
      "int HeightToWaterLevel(float pHeight)",
      "float PressureLevelToValue(int pPressureLevel)",
      "void AdvanceToNextWaterLevelStageSettings(int pValveIndex)",
      "void AdvanceToNextPressureLevelStageSettings(int pValveIndex)",
      "void SetDefaultPressureLevelStageSettings(int pValveIndex)",
      "void AnimateValve(int pValveIndex, float pPhase)",
      "void SetValvePressureLevelGauge(int pValveIndex, float pValue)",
      "float GetValvePressureLevelGauge(int pValveIndex)",
      "bool IsValvePressureLevelGaugeAtBase(int pValveIndex)",
      "float AdjustTime(float originalTime)",
      "void HandleSoundEffects()",
      "void PlayValveManipulationSound()",
      "void HandleSoundEffectsPipeCreaking()",
      "void HandleSoundEffectsPipeSprinkling()",
      "void HandleSoundEffectsUnderwaterPipeSounds()",
      "void HandleSoundEffectsWaterLevelMovementSounds()",
      "void CleanSoundEffects()",
      "void PlayPipeCreakingSoundOnLocation()",
      "void HandleVisualEffects()",
      "void CleanVisualEffects()",
      "void ResetState()",
      "void SyncValveVariables()",
      "int PackArrayOfBoolStatesIntoBits(array<bool> pStates)",
      "string GetDebugText()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)"
    ]
  },
  "Land_Underground_WaterReservoir_Water": {
    "parent": null,
    "methods": []
  },
  "BulletHide": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()"
    ]
  },
  "BulletHide_W4T": {
    "parent": "BulletHide",
    "methods": [
      "bool IsWaitingForActionFinish()"
    ]
  },
  "BulletShow": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()"
    ]
  },
  "BulletShow2": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()"
    ]
  },
  "BulletShow_W4T": {
    "parent": "BulletShow",
    "methods": [
      "bool IsWaitingForActionFinish()"
    ]
  },
  "BulletShow2_W4T": {
    "parent": "BulletShow2",
    "methods": [
      "bool IsWaitingForActionFinish()"
    ]
  },
  "MagazineHide": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()"
    ]
  },
  "MagazineHide_W4T": {
    "parent": "MagazineHide",
    "methods": [
      "bool IsWaitingForActionFinish()"
    ]
  },
  "MagazineShow": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()"
    ]
  },
  "MagazineShow_W4T": {
    "parent": "MagazineShow",
    "methods": [
      "bool IsWaitingForActionFinish()"
    ]
  },
  "RifleChambering": {
    "parent": "WeaponStateBase",
    "methods": [
      "void RifleChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "RifleEjectCasing": {
    "parent": "WeaponStateBase",
    "methods": [
      "void RifleEjectCasing(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "RifleReChambering": {
    "parent": "WeaponStateBase",
    "methods": [
      "void RifleReChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "RemoveNewMagazineFromInventory": {
    "parent": "WeaponStateBase",
    "methods": [
      "void RemoveNewMagazineFromInventory(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponAttachMagazine(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "RemoveNewMagazineFromInventory_OnEntryShowMag": {
    "parent": "RemoveNewMagazineFromInventory",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void WeaponAttachMagazine(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponAttachMagazine": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponAttachMagazine(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponChamberFromAttMag": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponChamberFromAttMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponChamberFromInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void WeaponChamberFromAttMagOnExit(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void WeaponEjectAndChamberFromAttMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponChamberFromInnerMag": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponChamberFromInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponChamberFromAttMagOnExit(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void WeaponEjectAndChamberFromAttMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponChamberFromAttMagOnExit": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponChamberFromAttMagOnExit(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponEjectAndChamberFromAttMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponEjectAndChamberFromAttMag": {
    "parent": "WeaponEjectAllMuzzles",
    "methods": [
      "void WeaponEjectAndChamberFromAttMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int action = -1, int actionType = -1)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponChambering_Start": {
    "parent": "WeaponStartAction",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponChambering_Base": {
    "parent": "WeaponStateBase",
    "methods": [
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponChambering_Cartridge": {
    "parent": "WeaponChambering_Base",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponChambering_Cartridge_ChambToMag": {
    "parent": "WeaponChambering_Cartridge",
    "methods": [
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponChambering_MultiMuzzleMagnum": {
    "parent": "WeaponChambering_Cartridge",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponChambering_MultiMuzzle": {
    "parent": "WeaponChambering_Cartridge",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponChambering_MultiMuzzle_W4T": {
    "parent": "WeaponChambering_MultiMuzzle",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponChambering_Cartridge_InnerMag": {
    "parent": "WeaponChambering_Base",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponChambering_W4T": {
    "parent": "WeaponStateBase",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponChambering": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool IsWaitingForActionFinish()",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponEndAction": {
    "parent": "WeaponStartAction",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "ChamberMultiBullet": {
    "parent": "WeaponStateBase",
    "methods": [
      "void ChamberMultiBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "WeaponCylinderRotate": {
    "parent": "WeaponStateBase",
    "methods": [
      "bool FindNextFreeMuzzle(int currentMuzzle, out int nextMuzzle)",
      "void OnEntry(WeaponEventBase e)",
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "WeaponMagnumChambering": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponMagnumChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "LoopedChambering_EndLoop": {
    "parent": "WeaponStartAction",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void LoopedChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void LoopedChamberingEjectLast(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "LoopedChambering_Wait4ShowBullet2": {
    "parent": "WeaponStateBase",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void LoopedChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void LoopedChamberingEjectLast(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "LoopedChambering": {
    "parent": "WeaponStateBase",
    "methods": [
      "void LoopedChambering(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void LoopedChamberingEjectLast(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)"
    ]
  },
  "LoopedChamberingEjectLast": {
    "parent": "WeaponStateBase",
    "methods": [
      "void LoopedChamberingEjectLast(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int startActionType = -1, int endActionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "WeaponCharging": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponCharging(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponChargingInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingMultiple(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponCharging_Start": {
    "parent": "WeaponStartAction",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponChargingInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingMultiple(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponCharging_BE": {
    "parent": "WeaponStateBase",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponChargingInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingMultiple(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponCharging_CK": {
    "parent": "WeaponStateBase",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponChargingInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingMultiple(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponEjectBullet_Cartridge": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool IsWaitingForActionFinish()",
      "void WeaponChargingInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingMultiple(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponEjectBulletMultiMuzzle_Cartridge": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool IsWaitingForActionFinish()",
      "void WeaponChargingInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingMultiple(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponEjectBullet_Cartridge_W4T": {
    "parent": "WeaponEjectBulletMultiMuzzle_Cartridge",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void WeaponChargingInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponChargingMultiple(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponChargingInnerMag": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponChargingInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponChargingMultiple(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponChargingMultiple": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponChargingMultiple(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponChargingStretch": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponChargingStretch(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponDetachingMag_1": {
    "parent": "WeaponStartAction",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponDetachingMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponDetachingMag_Store": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponDetachingMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponDetachingMag": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponDetachingMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "WeaponEjectBullet_Start": {
    "parent": "WeaponStartAction",
    "methods": [
      "void WeaponEjectBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "WeaponEjectBullet": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponEjectBullet(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "WeaponEjectCasing": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponEjectCasing(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "void OnEntry(WeaponEventBase e)",
      "void WeaponEjectCasingMultiMuzzle(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "bool IsWaitingForActionFinish()",
      "void WeaponEjectAllMuzzles(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponEjectCasingMultiMuzzle": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponEjectCasingMultiMuzzle(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "void OnEntry(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void WeaponEjectAllMuzzles(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponEjectCasing_W4T": {
    "parent": "WeaponEjectCasingMultiMuzzle",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void WeaponEjectAllMuzzles(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponEjectAllMuzzles": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponEjectAllMuzzles(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "void OnEntry(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponEjectCasingAndChamberFromAttMag": {
    "parent": "WeaponEjectCasing",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()"
    ]
  },
  "WeaponEjectCasingAndChamberFromAttMag_W4T": {
    "parent": "WeaponEjectCasingAndChamberFromAttMag",
    "methods": [
      "bool IsWaitingForActionFinish()"
    ]
  },
  "WeaponDryFire": {
    "parent": "WeaponStartAction",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponFire": {
    "parent": "WeaponStartAction",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponFireWithEject": {
    "parent": "WeaponFire",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponFireMultiMuzzle": {
    "parent": "WeaponStartAction",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)"
    ]
  },
  "WeaponFireMagnum": {
    "parent": "WeaponFireMultiMuzzle",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()"
    ]
  },
  "WeaponFireToJam": {
    "parent": "WeaponStartAction",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponFireAndChamber": {
    "parent": "WeaponFire",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponFireAndChamberFromInnerMagazine": {
    "parent": "WeaponFire",
    "methods": [
      "void OnEntry(WeaponEventBase e)"
    ]
  },
  "WeaponFireAndChamberNext": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponFireAndChamberNext(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "float GetCoolDown()"
    ]
  },
  "WeaponFireAndChamberNextFromInnerMag": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponFireAndChamberNextFromInnerMag(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponFireLast": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponFireLast(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponRechamber": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponRechamber(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int actionEject = -1, int actionTypeEject = -1, int actionLoad = -1, int actionTypeLoad = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "DetachOldMagazine": {
    "parent": "WeaponStateBase",
    "methods": [
      "void DetachOldMagazine(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void AttachNewMagazine(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "bool IsWaitingForActionFinish()",
      "void WeaponReplacingMagAndChamberNext(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "OldMagazineHide": {
    "parent": null,
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void AttachNewMagazine(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "bool IsWaitingForActionFinish()",
      "void WeaponReplacingMagAndChamberNext(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "SwapOldAndNewMagazine": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void AttachNewMagazine(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "bool IsWaitingForActionFinish()",
      "void WeaponReplacingMagAndChamberNext(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "AttachNewMagazine": {
    "parent": "WeaponStateBase",
    "methods": [
      "void AttachNewMagazine(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "bool IsWaitingForActionFinish()",
      "void OnEntry(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponReplacingMagAndChamberNext(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "AttachNewMagazine_W4T": {
    "parent": "WeaponStateBase",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void WeaponReplacingMagAndChamberNext(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "WeaponReplacingMagAndChamberNext": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponReplacingMagAndChamberNext(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "void OnAbort(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)"
    ]
  },
  "WeaponStableState": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponStableState(Weapon_Base w = NULL, WeaponStateBase parent = NULL, int anim_state = -1)",
      "void SyncAnimState()",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "bool IsIdle()",
      "int GetCurrentStateID()",
      "bool IsRepairEnabled()",
      "bool HasBullet()",
      "bool HasMagazine()",
      "bool IsJammed()",
      "bool IsDischarged()",
      "bool IsWeaponOpen()",
      "void InitMuzzleArray()",
      "bool IsSingleState()",
      "int GetMuzzleStateCount()",
      "bool IsChamberValid(int idx)",
      "bool IsChamberFiredOut(int idx)",
      "bool IsChamberFull(int idx)",
      "void ValidateMuzzleArray()"
    ]
  },
  "WeaponStartAction": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponStartAction(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponStateBase": {
    "parent": null,
    "methods": [
      "void WeaponStateBase(Weapon_Base w = NULL, WeaponStateBase parent = NULL)",
      "void SetparentState(WeaponStateBase parent)",
      "bool HasFSM()",
      "void SetInternalStateID(int i)",
      "int GetInternalStateID()",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool ProcessEvent(WeaponEventBase e)",
      "void AddTransition(WeaponTransition t)",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnAbort(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool IsWaitingForActionFinish()",
      "bool IsIdle()",
      "bool IsBoltOpen()",
      "void OnSubMachineChanged(WeaponStateBase src, WeaponStateBase dst)",
      "void OnStateChanged(WeaponStateBase src, WeaponStateBase dst)",
      "float GetCoolDown()"
    ]
  },
  "WeaponStateJammed": {
    "parent": "WeaponStableState",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponChamberFromAttMag_W4T": {
    "parent": "WeaponChamberFromAttMag",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void WeaponUnjamming_Start(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponUnjamming(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponChamberFromInnerMag_W4T": {
    "parent": "WeaponChamberFromInnerMag",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void WeaponUnjamming_Start(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "void WeaponUnjamming(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponUnjamming_Start": {
    "parent": "WeaponStartAction",
    "methods": [
      "void WeaponUnjamming_Start(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnUpdate(float dt)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool IsWaitingForActionFinish()",
      "void WeaponUnjamming(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponUnjamming_Cartridge": {
    "parent": "WeaponStateBase",
    "methods": [
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)",
      "bool SaveCurrentFSMState(ParamsWriteContext ctx)",
      "bool LoadCurrentFSMState(ParamsReadContext ctx, int version)",
      "bool IsWaitingForActionFinish()",
      "void WeaponUnjamming(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)"
    ]
  },
  "WeaponUnjamming_Cartridge_W4T": {
    "parent": "WeaponUnjamming_Cartridge",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void WeaponUnjamming(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponUnjamming_W4T": {
    "parent": "WeaponStateBase",
    "methods": [
      "bool IsWaitingForActionFinish()",
      "void WeaponUnjamming(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "WeaponUnjamming": {
    "parent": "WeaponStateBase",
    "methods": [
      "void WeaponUnjamming(Weapon_Base w = NULL, WeaponStateBase parent = NULL, WeaponActions action = WeaponActions.NONE, int actionType = -1)",
      "void OnEntry(WeaponEventBase e)",
      "void OnExit(WeaponEventBase e)"
    ]
  },
  "BallisticHelmet_ColorBase": {
    "parent": "HelmetBase",
    "methods": []
  },
  "BallisticHelmet_Green": {
    "parent": "BallisticHelmet_ColorBase",
    "methods": []
  },
  "BallisticHelmet_Black": {
    "parent": "BallisticHelmet_ColorBase",
    "methods": []
  },
  "BallisticHelmet_UN": {
    "parent": "BallisticHelmet_ColorBase",
    "methods": []
  },
  "BallisticHelmet_BDU": {
    "parent": "BallisticHelmet_ColorBase",
    "methods": []
  },
  "BallisticHelmet_Desert": {
    "parent": "BallisticHelmet_ColorBase",
    "methods": []
  },
  "BallisticHelmet_Woodland": {
    "parent": "BallisticHelmet_ColorBase",
    "methods": []
  },
  "BallisticHelmet_Winter": {
    "parent": "BallisticHelmet_ColorBase",
    "methods": []
  },
  "BallisticHelmet_Navy": {
    "parent": "BallisticHelmet_ColorBase",
    "methods": []
  },
  "ConstructionHelmet_ColorBase": {
    "parent": "HelmetBase",
    "methods": []
  },
  "ConstructionHelmet_Blue": {
    "parent": "ConstructionHelmet_ColorBase",
    "methods": []
  },
  "ConstructionHelmet_Lime": {
    "parent": "ConstructionHelmet_ColorBase",
    "methods": []
  },
  "ConstructionHelmet_Orange": {
    "parent": "ConstructionHelmet_ColorBase",
    "methods": []
  },
  "ConstructionHelmet_Red": {
    "parent": "ConstructionHelmet_ColorBase",
    "methods": []
  },
  "ConstructionHelmet_White": {
    "parent": "ConstructionHelmet_ColorBase",
    "methods": []
  },
  "ConstructionHelmet_Yellow": {
    "parent": "ConstructionHelmet_ColorBase",
    "methods": []
  },
  "DarkMotoHelmet_ColorBase": {
    "parent": "HelmetBase",
    "methods": [
      "bool IsObstructingVoice()",
      "int GetVoiceEffect()",
      "int GetGlassesEffectID()"
    ]
  },
  "DarkMotoHelmet_Black": {
    "parent": "DarkMotoHelmet_ColorBase",
    "methods": []
  },
  "DarkMotoHelmet_Grey": {
    "parent": "DarkMotoHelmet_ColorBase",
    "methods": []
  },
  "DarkMotoHelmet_Green": {
    "parent": "DarkMotoHelmet_ColorBase",
    "methods": []
  },
  "DarkMotoHelmet_Lime": {
    "parent": "DarkMotoHelmet_ColorBase",
    "methods": []
  },
  "DarkMotoHelmet_Blue": {
    "parent": "DarkMotoHelmet_ColorBase",
    "methods": []
  },
  "DarkMotoHelmet_Red": {
    "parent": "DarkMotoHelmet_ColorBase",
    "methods": []
  },
  "DarkMotoHelmet_White": {
    "parent": "DarkMotoHelmet_ColorBase",
    "methods": []
  },
  "DarkMotoHelmet_Yellow": {
    "parent": "DarkMotoHelmet_ColorBase",
    "methods": []
  },
  "DarkMotoHelmet_YellowScarred": {
    "parent": "DarkMotoHelmet_ColorBase",
    "methods": []
  },
  "DirtBikeHelmet_ColorBase": {
    "parent": "HelmetBase",
    "methods": [
      "void OnDebugSpawn()",
      "void InitGlobalExclusionValues()"
    ]
  },
  "DirtBikeHelmet_Green": {
    "parent": "DirtBikeHelmet_ColorBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DirtBikeHelmet_Chernarus": {
    "parent": "DirtBikeHelmet_ColorBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DirtBikeHelmet_Khaki": {
    "parent": "DirtBikeHelmet_ColorBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DirtBikeHelmet_Police": {
    "parent": "DirtBikeHelmet_ColorBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DirtBikeHelmet_Red": {
    "parent": "DirtBikeHelmet_ColorBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DirtBikeHelmet_Black": {
    "parent": "DirtBikeHelmet_ColorBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DirtBikeHelmet_Blue": {
    "parent": "DirtBikeHelmet_ColorBase",
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DirtBikeHelmet_Visor": {
    "parent": null,
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "DirtBikeHelmet_Mouthguard": {
    "parent": null,
    "methods": [
      "void InitGlobalExclusionValues()"
    ]
  },
  "FirefightersHelmet_ColorBase": {
    "parent": "HelmetBase",
    "methods": []
  },
  "FirefightersHelmet_Red": {
    "parent": "FirefightersHelmet_ColorBase",
    "methods": []
  },
  "FirefightersHelmet_White": {
    "parent": "FirefightersHelmet_ColorBase",
    "methods": []
  },
  "FirefightersHelmet_Yellow": {
    "parent": "FirefightersHelmet_ColorBase",
    "methods": []
  },
  "GorkaHelmet": {
    "parent": "HelmetBase",
    "methods": [
      "void OnDebugSpawn()"
    ]
  },
  "HockeyHelmet_ColorBase": {
    "parent": "HelmetBase",
    "methods": []
  },
  "HockeyHelmet_Black": {
    "parent": "HockeyHelmet_ColorBase",
    "methods": []
  },
  "HockeyHelmet_Blue": {
    "parent": "HockeyHelmet_ColorBase",
    "methods": []
  },
  "HockeyHelmet_Red": {
    "parent": "HockeyHelmet_ColorBase",
    "methods": []
  },
  "HockeyHelmet_White": {
    "parent": "HockeyHelmet_ColorBase",
    "methods": []
  },
  "Mich2001Helmet": {
    "parent": "HelmetBase",
    "methods": [
      "void SetActions()",
      "void OnDebugSpawn()",
      "void InitGlobalExclusionValues()"
    ]
  },
  "MotoHelmet_ColorBase": {
    "parent": "HelmetBase",
    "methods": [
      "bool IsObstructingVoice()",
      "int GetVoiceEffect()"
    ]
  },
  "MotoHelmet_Black": {
    "parent": "MotoHelmet_ColorBase",
    "methods": []
  },
  "MotoHelmet_Grey": {
    "parent": "MotoHelmet_ColorBase",
    "methods": []
  },
  "MotoHelmet_Green": {
    "parent": "MotoHelmet_ColorBase",
    "methods": []
  },
  "MotoHelmet_Lime": {
    "parent": "MotoHelmet_ColorBase",
    "methods": []
  },
  "MotoHelmet_Blue": {
    "parent": "MotoHelmet_ColorBase",
    "methods": []
  },
  "MotoHelmet_Red": {
    "parent": "MotoHelmet_ColorBase",
    "methods": []
  },
  "MotoHelmet_White": {
    "parent": "MotoHelmet_ColorBase",
    "methods": []
  },
  "MotoHelmet_Yellow": {
    "parent": "MotoHelmet_ColorBase",
    "methods": []
  },
  "SkateHelmet_ColorBase": {
    "parent": "HelmetBase",
    "methods": []
  },
  "SkateHelmet_Black": {
    "parent": "SkateHelmet_ColorBase",
    "methods": []
  },
  "SkateHelmet_Blue": {
    "parent": "SkateHelmet_ColorBase",
    "methods": []
  },
  "SkateHelmet_Gray": {
    "parent": "SkateHelmet_ColorBase",
    "methods": []
  },
  "SkateHelmet_Green": {
    "parent": "SkateHelmet_ColorBase",
    "methods": []
  },
  "SkateHelmet_Red": {
    "parent": "SkateHelmet_ColorBase",
    "methods": []
  },
  "Ssh68Helmet": {
    "parent": "HelmetBase",
    "methods": []
  },
  "ZSh3PilotHelmet": {
    "parent": "HelmetBase",
    "methods": []
  },
  "CanisterGasoline": {
    "parent": null,
    "methods": [
      "string GetPouringSoundset()",
      "string GetEmptyingLoopSoundsetHard()",
      "string GetEmptyingLoopSoundsetSoft()",
      "string GetEmptyingLoopSoundsetWater()",
      "string GetEmptyingEndSoundsetHard()",
      "string GetEmptyingEndSoundsetSoft()",
      "string GetEmptyingEndSoundsetWater()",
      "float GetLiquidThroughputCoef()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()"
    ]
  },
  "Canteen": {
    "parent": "Bottle_Base",
    "methods": [
      "void Canteen()",
      "string GetPouringSoundset()",
      "string GetEmptyingLoopSoundsetHard()",
      "string GetEmptyingLoopSoundsetSoft()",
      "string GetEmptyingLoopSoundsetWater()",
      "string GetEmptyingEndSoundsetHard()",
      "string GetEmptyingEndSoundsetSoft()",
      "string GetEmptyingEndSoundsetWater()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool IsOpen()",
      "void EEOnCECreate()"
    ]
  },
  "Cauldron": {
    "parent": null,
    "methods": [
      "bool IsContainer()",
      "bool IsCookware()",
      "string GetPouringSoundset()",
      "string GetEmptyingLoopSoundsetHard()",
      "string GetEmptyingLoopSoundsetSoft()",
      "string GetEmptyingLoopSoundsetWater()",
      "string GetEmptyingEndSoundsetHard()",
      "string GetEmptyingEndSoundsetSoft()",
      "string GetEmptyingEndSoundsetWater()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanReceiveItemIntoCargo(EntityAI item)",
      "bool CanLoadItemIntoCargo(EntityAI item)",
      "bool IsOpen()",
      "bool CanHaveWetness()",
      "float GetQuantityNormalizedScripted()",
      "void SetActions()"
    ]
  },
  "FilteringBottle": {
    "parent": null,
    "methods": [
      "string GetPouringSoundset()",
      "string GetEmptyingLoopSoundsetHard()",
      "string GetEmptyingLoopSoundsetSoft()",
      "string GetEmptyingLoopSoundsetWater()",
      "string GetEmptyingEndSoundsetHard()",
      "string GetEmptyingEndSoundsetSoft()",
      "string GetEmptyingEndSoundsetWater()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool IsOpen()",
      "int FilterAgents(int agentsIn)",
      "void OnConsume(float amount, PlayerBase consumer)",
      "void DamageBottleConsume(float amount, PlayerBase consumer)",
      "void AffectLiquidContainerOnFill(int liquid_type, float amount)",
      "void AffectLiquidContainerOnTransfer(int liquidType, float amount, float sourceLiquidTemperature)",
      "float GetItemOverheatThreshold()"
    ]
  },
  "Pot": {
    "parent": null,
    "methods": [
      "void Pot()",
      "bool IsContainer()",
      "bool IsCookware()",
      "string GetPouringSoundset()",
      "string GetEmptyingLoopSoundsetHard()",
      "string GetEmptyingLoopSoundsetSoft()",
      "string GetEmptyingLoopSoundsetWater()",
      "string GetEmptyingEndSoundsetHard()",
      "string GetEmptyingEndSoundsetSoft()",
      "string GetEmptyingEndSoundsetWater()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "bool CanLoadItemIntoCargo( EntityAI item )",
      "bool IsOpen()",
      "bool CanHaveWetness()",
      "float GetQuantityNormalizedScripted()",
      "void SetActions()"
    ]
  },
  "WaterBottle": {
    "parent": "Bottle_Base",
    "methods": [
      "string GetPouringSoundset()",
      "string GetEmptyingLoopSoundsetHard()",
      "string GetEmptyingLoopSoundsetSoft()",
      "string GetEmptyingLoopSoundsetWater()",
      "string GetEmptyingEndSoundsetHard()",
      "string GetEmptyingEndSoundsetSoft()",
      "string GetEmptyingEndSoundsetWater()",
      "bool CanPutInCargo( EntityAI parent )",
      "bool IsOpen()",
      "void EEOnCECreate()",
      "void OnDebugSpawn()",
      "void AffectLiquidContainerOnFill(int liquid_type, float amount)",
      "void AffectLiquidContainerOnTransfer(int liquidType, float amount, float sourceLiquidTemperature)",
      "float GetItemOverheatThreshold()"
    ]
  },
  "BarrelHoles_Blue": {
    "parent": "BarrelHoles_ColorBase",
    "methods": []
  },
  "BarrelHoles_Green": {
    "parent": "BarrelHoles_ColorBase",
    "methods": []
  },
  "BarrelHoles_Red": {
    "parent": "BarrelHoles_ColorBase",
    "methods": []
  },
  "BarrelHoles_Yellow": {
    "parent": "BarrelHoles_ColorBase",
    "methods": []
  },
  "CamoNetShelter": {
    "parent": null,
    "methods": [
      "void SeaChest()",
      "int GetDamageSystemVersionChange()",
      "void WoodenCrate()",
      "void SetActions()"
    ]
  },
  "MediumTentClutterCutter": {
    "parent": null,
    "methods": [
      "void SeaChest()",
      "int GetDamageSystemVersionChange()",
      "void WoodenCrate()",
      "void SetActions()"
    ]
  },
  "LargeTentClutterCutter": {
    "parent": null,
    "methods": [
      "void SeaChest()",
      "int GetDamageSystemVersionChange()",
      "void WoodenCrate()",
      "void SetActions()"
    ]
  },
  "SeaChest": {
    "parent": null,
    "methods": [
      "void SeaChest()",
      "int GetDamageSystemVersionChange()",
      "void WoodenCrate()",
      "void SetActions()"
    ]
  },
  "WoodenCrate": {
    "parent": null,
    "methods": [
      "void WoodenCrate()",
      "int GetDamageSystemVersionChange()",
      "void SetActions()"
    ]
  },
  "Bandana_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Bandana_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "void Shemag_ColorBase()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Bandana_RedPattern": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Shemag_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Bandana_BlackPattern": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Shemag_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Bandana_PolkaPattern": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Shemag_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Bandana_Greenpattern": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Shemag_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Bandana_CamoPattern": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Shemag_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Bandana_Blue": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Shemag_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Bandana_Pink": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Shemag_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Bandana_Yellow": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Shemag_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Shemag_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Shemag_ColorBase()",
      "bool CanBeDisinfected()",
      "float GetBandagingEffectivity()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Shemag_Brown": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Shemag_Green": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Shemag_Red": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Shemag_White": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "BatteryD": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Bone": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "BurlapStrip": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "ButaneCanister": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "DuctTape": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()"
    ]
  },
  "Flashbang": {
    "parent": null,
    "methods": [
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void SetActions()"
    ]
  },
  "LargeGasCanister": {
    "parent": null,
    "methods": [
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void SetActions()"
    ]
  },
  "MediumGasCanister": {
    "parent": null,
    "methods": [
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void SetActions()"
    ]
  },
  "NailBox": {
    "parent": null,
    "methods": [
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void SetActions()"
    ]
  },
  "Netting": {
    "parent": null,
    "methods": [
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void SetActions()"
    ]
  },
  "SmallGasCanister": {
    "parent": null,
    "methods": [
      "bool CanSwitchDuringAttach(EntityAI parent)",
      "string GetDestructionBehaviour()",
      "bool IsDestructionBehaviour()",
      "void SetActions()"
    ]
  },
  "SmallStone": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Spraycan_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Spraycan_Black": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Spraycan_Green": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "TannedLeather": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "EasterEgg": {
    "parent": null,
    "methods": [
      "void EasterEgg()",
      "void ContactEvent( IEntity other, vector pos )",
      "void EOnTouch( IEntity other, int extra )",
      "void EOnContact( IEntity other, Contact extra )",
      "void OnInventoryExit( Man player )",
      "void OnInventoryEnter( Man player )",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)",
      "void Capture( DayZCreatureAI capAnimal )",
      "void Release( vector pos )",
      "void PlayVFX()",
      "void ResizeParticle( DayZCreatureAI capAnimal )",
      "void PlaySFX( int releaseCase = eCaptureState.CAPTURE )",
      "void OnVariablesSynchronized()",
      "void RegisterSoundSetMap()",
      "void OnStoreSave( ParamsWriteContext ctx )",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void DestroyEg()"
    ]
  },
  "FishingHookBase": {
    "parent": null,
    "methods": [
      "void OnDebugSpawn()",
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)"
    ]
  },
  "Hook": {
    "parent": null,
    "methods": [
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)"
    ]
  },
  "BoneHook": {
    "parent": null,
    "methods": [
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)"
    ]
  },
  "WoodenHook": {
    "parent": null,
    "methods": [
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)"
    ]
  },
  "Jig": {
    "parent": null,
    "methods": [
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)"
    ]
  },
  "BaitBase": {
    "parent": null,
    "methods": [
      "void EEItemLocationChanged(notnull InventoryLocation oldLoc, notnull InventoryLocation newLoc)"
    ]
  },
  "Bait": {
    "parent": null,
    "methods": []
  },
  "BoneBait": {
    "parent": null,
    "methods": []
  },
  "AmmoBox": {
    "parent": null,
    "methods": [
      "int GetDamageSystemVersionChange()",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "bool CanLoadItemIntoCargo( EntityAI item )"
    ]
  },
  "FirstAidKit": {
    "parent": null,
    "methods": [
      "int GetDamageSystemVersionChange()",
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "bool CanLoadItemIntoCargo( EntityAI item )"
    ]
  },
  "PlateCarrierPouches": {
    "parent": null,
    "methods": [
      "bool CanPutInCargo(EntityAI parent)",
      "bool CanReceiveItemIntoCargo( EntityAI item )",
      "bool CanLoadItemIntoCargo( EntityAI item )",
      "int GetDamageSystemVersionChange()"
    ]
  },
  "PlateCarrierPouches_Black": {
    "parent": "PlateCarrierPouches",
    "methods": [
      "int GetDamageSystemVersionChange()"
    ]
  },
  "PlateCarrierPouches_Camo": {
    "parent": "PlateCarrierPouches",
    "methods": [
      "int GetDamageSystemVersionChange()"
    ]
  },
  "PlateCarrierPouches_Green": {
    "parent": "PlateCarrierPouches",
    "methods": [
      "int GetDamageSystemVersionChange()"
    ]
  },
  "PlateCarrierPouches_Winter": {
    "parent": "PlateCarrierPouches",
    "methods": [
      "int GetDamageSystemVersionChange()"
    ]
  },
  "Refrigerator": {
    "parent": null,
    "methods": [
      "int GetDamageSystemVersionChange()"
    ]
  },
  "RefrigeratorMinsk": {
    "parent": null,
    "methods": [
      "int GetDamageSystemVersionChange()"
    ]
  },
  "SmallProtectorCase": {
    "parent": null,
    "methods": [
      "int GetDamageSystemVersionChange()"
    ]
  },
  "TrashCan": {
    "parent": null,
    "methods": []
  },
  "BurlapSack": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void InitGlobalExclusionValues()",
      "void SetTargetLocation(InventoryLocation targetLocation)",
      "bool CanAssignToQuickbar()"
    ]
  },
  "GorkaHelmetVisor": {
    "parent": null,
    "methods": [
      "void InitGlobalExclusionValues()",
      "void SetActions()",
      "void SetTargetLocation(InventoryLocation targetLocation)",
      "bool CanAssignToQuickbar()"
    ]
  },
  "ChickenFeather": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void SetTargetLocation(InventoryLocation targetLocation)",
      "bool CanAssignToQuickbar()"
    ]
  },
  "LongWoodenStick": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void SetTargetLocation(InventoryLocation targetLocation)",
      "bool CanAssignToQuickbar()"
    ]
  },
  "SharpWoodenStick": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void SetTargetLocation(InventoryLocation targetLocation)",
      "bool CanAssignToQuickbar()"
    ]
  },
  "Rope": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void SetTargetLocation(InventoryLocation targetLocation)",
      "bool CanAssignToQuickbar()"
    ]
  },
  "Spear": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "SpearStone": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "SpearBone": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Fabric": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "AntiPestsSpray": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void Plant_Pepper()",
      "void Plant_Potato()",
      "void Plant_Pumpkin()",
      "void Plant_Tomato()",
      "void Plant_Zucchini()"
    ]
  },
  "CannabisSeeds": {
    "parent": null,
    "methods": [
      "void Plant_Pepper()",
      "void Plant_Potato()",
      "void Plant_Pumpkin()",
      "void Plant_Tomato()",
      "void Plant_Zucchini()",
      "void SetActions()"
    ]
  },
  "PepperSeeds": {
    "parent": null,
    "methods": [
      "void Plant_Pepper()",
      "void Plant_Potato()",
      "void Plant_Pumpkin()",
      "void Plant_Tomato()",
      "void Plant_Zucchini()",
      "void SetActions()"
    ]
  },
  "Plant_Cannabis": {
    "parent": null,
    "methods": [
      "void Plant_Pepper()",
      "void Plant_Potato()",
      "void Plant_Pumpkin()",
      "void Plant_Tomato()",
      "void Plant_Zucchini()",
      "void SetActions()"
    ]
  },
  "Plant_Pepper": {
    "parent": null,
    "methods": [
      "void Plant_Pepper()",
      "void Plant_Potato()",
      "void Plant_Pumpkin()",
      "void Plant_Tomato()",
      "void Plant_Zucchini()",
      "void SetActions()"
    ]
  },
  "Plant_Potato": {
    "parent": null,
    "methods": [
      "void Plant_Potato()",
      "void Plant_Pumpkin()",
      "void Plant_Tomato()",
      "void Plant_Zucchini()",
      "void SetActions()"
    ]
  },
  "Plant_Pumpkin": {
    "parent": null,
    "methods": [
      "void Plant_Pumpkin()",
      "void Plant_Tomato()",
      "void Plant_Zucchini()",
      "void SetActions()"
    ]
  },
  "Plant_Tomato": {
    "parent": null,
    "methods": [
      "void Plant_Tomato()",
      "void Plant_Zucchini()",
      "void SetActions()"
    ]
  },
  "Plant_Zucchini": {
    "parent": null,
    "methods": [
      "void Plant_Zucchini()",
      "void SetActions()"
    ]
  },
  "PumpkinSeeds": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "SeedBase": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "TomatoSeeds": {
    "parent": null,
    "methods": []
  },
  "ZucchiniSeeds": {
    "parent": null,
    "methods": []
  },
  "PotatoSeed": {
    "parent": null,
    "methods": []
  },
  "SodaCan_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "int GetConsumptionPenaltyContext()"
    ]
  },
  "GlassBottle": {
    "parent": null,
    "methods": [
      "string GetPouringSoundset()",
      "string GetEmptyingLoopSoundsetHard()",
      "string GetEmptyingLoopSoundsetSoft()",
      "string GetEmptyingLoopSoundsetWater()",
      "string GetEmptyingEndSoundsetHard()",
      "string GetEmptyingEndSoundsetSoft()",
      "string GetEmptyingEndSoundsetWater()"
    ]
  },
  "WaterPouch_ColorBase": {
    "parent": null,
    "methods": []
  },
  "BakedBeansCan_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()"
    ]
  },
  "DogFoodCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "void SetActions()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "DogFoodCan_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()",
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "CatFoodCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "void SetActions()",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "CatFoodCan_Opened": {
    "parent": null,
    "methods": [
      "void Open()",
      "void SetActions()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "PorkCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "void SetActions()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "PorkCan_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()",
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "Lunchmeat": {
    "parent": null,
    "methods": [
      "void Open()",
      "void SetActions()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "Lunchmeat_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()",
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "CrabCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "void SetActions()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "CrabCan_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()",
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "void UnknownFoodCan_Opened()"
    ]
  },
  "UnknownFoodCan": {
    "parent": null,
    "methods": [
      "void Open()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "void UnknownFoodCan_Opened()",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()"
    ]
  },
  "UnknownFoodCan_Opened": {
    "parent": null,
    "methods": [
      "void UnknownFoodCan_Opened()",
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()",
      "bool IsOpen()",
      "void Open()",
      "float GetQuantityNormalizedScripted()"
    ]
  },
  "Pajka": {
    "parent": null,
    "methods": [
      "void Open()",
      "void SetActions()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "bool CanDecay()",
      "bool CanProcessDecay()"
    ]
  },
  "Pajka_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()",
      "bool IsOpen()",
      "void Open()",
      "float GetQuantityNormalizedScripted()"
    ]
  },
  "Pate": {
    "parent": null,
    "methods": [
      "void Open()",
      "void SetActions()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "bool CanDecay()",
      "bool CanProcessDecay()"
    ]
  },
  "Pate_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()",
      "bool IsOpen()",
      "void Open()",
      "float GetQuantityNormalizedScripted()"
    ]
  },
  "BrisketSpread": {
    "parent": null,
    "methods": [
      "void Open()",
      "void SetActions()",
      "bool IsOpen()",
      "float GetQuantityNormalizedScripted()",
      "bool CanDecay()",
      "bool CanProcessDecay()"
    ]
  },
  "BrisketSpread_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()"
    ]
  },
  "Marmalade": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "MushroomBase": {
    "parent": null,
    "methods": [
      "bool CanBeCookedOnStick()",
      "bool CanBeCooked()",
      "bool IsMushroom()",
      "bool CanDecay()",
      "void SetActions()",
      "void EEOnCECreate()"
    ]
  },
  "Honey": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Zagorky_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Snack_ColorBase": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "PeachesCan_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()"
    ]
  },
  "PowderedMilk": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Rice": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "SardinesCan_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()"
    ]
  },
  "SpaghettiCan_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()"
    ]
  },
  "TacticalBaconCan_Opened": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "TunaCan_Opened": {
    "parent": null,
    "methods": [
      "bool CanDecay()",
      "bool CanProcessDecay()",
      "void SetActions()"
    ]
  },
  "AntiChemInjector": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void OnApply(PlayerBase player)"
    ]
  },
  "BloodTestKit": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "CigarettePack_ColorBase": {
    "parent": null,
    "methods": []
  },
  "CigarettePack_Chernamorka": {
    "parent": null,
    "methods": []
  },
  "CigarettePack_Merkur": {
    "parent": null,
    "methods": []
  },
  "CigarettePack_Partyzanka": {
    "parent": null,
    "methods": []
  },
  "ClearSyringe": {
    "parent": null,
    "methods": []
  },
  "DisinfectantAlcohol": {
    "parent": null,
    "methods": [
      "void InitItemVariables()",
      "float GetDisinfectQuantity(int system = 0, Param param1 = null)",
      "void SetActions()"
    ]
  },
  "Epinephrine": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void OnApply(PlayerBase player)"
    ]
  },
  "InjectionVial": {
    "parent": null,
    "methods": []
  },
  "IodineTincture": {
    "parent": null,
    "methods": [
      "void InitItemVariables()",
      "void SetActions()",
      "float GetDisinfectQuantity(int system = 0, Param param1 = null)"
    ]
  },
  "Morphine": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "void OnApply(PlayerBase player)"
    ]
  },
  "SalineBag": {
    "parent": null,
    "methods": []
  },
  "SalineBagIV": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Splint": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Splint_Applied": {
    "parent": null,
    "methods": []
  },
  "StartKitIV": {
    "parent": null,
    "methods": []
  },
  "GPSReceiver": {
    "parent": null,
    "methods": [
      "void GPSReceiver()",
      "void PositionalUpdate()",
      "void OnMovedInsideCargo(EntityAI container)",
      "void SetActions()",
      "bool IsTurnedOn()",
      "void OnWorkStart()",
      "void OnWorkStop()",
      "void OnWork(float consumed_energy)",
      "void UpdateDisplayState(bool pIsTurnedOn)",
      "void UpdateDisplayPosition()",
      "void UpdateDisplayElevation()",
      "int GetHiddenSelection(string selection)",
      "void OnDebugSpawn()"
    ]
  },
  "OrienteeringCompass": {
    "parent": null,
    "methods": []
  },
  "Binoculars": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "AlarmClock_ColorBase": {
    "parent": null,
    "methods": [
      "void Init()",
      "void SetActions()",
      "string GetToggleSound()",
      "string GetRingingSound()",
      "string GetDestroyedSound()",
      "string GetHitSound()",
      "string GetExplosiveTriggerSlotName()",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "string GetDebugText()",
      "void OnUpdate()",
      "void AnimateAlarmHand(float value)",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void OnDebugSpawn()"
    ]
  },
  "AlarmClock_Red": {
    "parent": null,
    "methods": []
  },
  "AlarmClock_Blue": {
    "parent": null,
    "methods": []
  },
  "AlarmClock_Green": {
    "parent": null,
    "methods": []
  },
  "BroomBase": {
    "parent": null,
    "methods": [
      "void Init()",
      "void SetActions()",
      "bool CanReceiveUpgrade()",
      "void OnWorkStart()",
      "void ApplyResultModifications(ItemBase result)",
      "bool CanTransformIntoStick()",
      "void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)",
      "void CalculateQuantity()",
      "void UpdateParticle()",
      "void DebugSetHealthAndEnergy(float time)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "string GetBurningMaterial()",
      "string GetBurntMaterial()"
    ]
  },
  "Broom": {
    "parent": null,
    "methods": [
      "string GetBurningMaterial()",
      "string GetBurntMaterial()"
    ]
  },
  "Broom_Birch": {
    "parent": null,
    "methods": [
      "string GetBurningMaterial()",
      "string GetBurntMaterial()"
    ]
  },
  "CanOpener": {
    "parent": null,
    "methods": []
  },
  "Cassette": {
    "parent": null,
    "methods": []
  },
  "Crowbar": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "DoorTestCamera": {
    "parent": null,
    "methods": []
  },
  "ElectronicRepairKit": {
    "parent": null,
    "methods": []
  },
  "EpoxyPutty": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "FarmingHoe": {
    "parent": null,
    "methods": [
      "bool CanMakeGardenplot()",
      "void SetActions()",
      "void SetActionAnimOverrides()",
      "int GetOnDigWormsAmount()"
    ]
  },
  "FireExtinguisher": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "ExplosionLight": {
    "parent": null,
    "methods": [
      "void ExplosionLight()",
      "void OnFired()",
      "int GetSoundDelay()",
      "int GetLightDelay()",
      "float GetExplosionDistance()",
      "float GetShotDispersionAngle()",
      "string GetExplosionSoundSet()",
      "float GetExplosionDelay()",
      "void FireworksLauncherClientEvent(FireworksLauncher item, int index)",
      "void CalculateExplosionPosition()",
      "int GetSecondaryExplosionCount()",
      "void OnExplode()",
      "void RequestSecondaryExplosion()",
      "void SpawnSecondaryExplosion()",
      "int GetSecondaryExplosionDelay()",
      "int GetExplParticleFromSequence()",
      "void SetupLight(PointLightBase light)",
      "void SpawnLight()",
      "void PlayExplosionSound()",
      "void Init(vector pos)",
      "void FireworksLauncher()",
      "bool IsDeployable()",
      "float GetDeployTime()",
      "void SetupColorSequences()",
      "string GetColorSequence()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "float GetMaxAllowedWetness()",
      "float GetEventDelay()",
      "string GetFuseSoundSet()",
      "int GetMaxShots()",
      "float GetFuseDelay()",
      "string GetAmmoType()",
      "int GetDamageType()",
      "void OnStateChangedServer(EFireworksState currentState)",
      "void OnStateChangedClient(EFireworksState currentState)",
      "void OnIgnitedThis( EntityAI fire_source)",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "void OnFuseIgnitedServer()",
      "void OnFuseIgnitedClient()",
      "void OnFiringStartServer()",
      "void OnFiringStartClient()",
      "void OnFiringStop()",
      "void RestartEventTimer()",
      "bool IsIgnited()",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "void OnEventServer(int type)",
      "void OnIndexChangedClient()",
      "void OnVariablesSynchronized()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "string GetDebugText()"
    ]
  },
  "FireworksLauncherClientEventBase": {
    "parent": null,
    "methods": [
      "void OnFired()",
      "int GetSoundDelay()",
      "int GetLightDelay()",
      "float GetExplosionDistance()",
      "float GetShotDispersionAngle()",
      "string GetExplosionSoundSet()",
      "float GetExplosionDelay()",
      "void FireworksLauncherClientEvent(FireworksLauncher item, int index)",
      "void CalculateExplosionPosition()",
      "int GetSecondaryExplosionCount()",
      "void OnExplode()",
      "void RequestSecondaryExplosion()",
      "void SpawnSecondaryExplosion()",
      "int GetSecondaryExplosionDelay()",
      "int GetExplParticleFromSequence()",
      "void SetupLight(PointLightBase light)",
      "void SpawnLight()",
      "void PlayExplosionSound()",
      "void Init(vector pos)",
      "void FireworksLauncher()",
      "bool IsDeployable()",
      "float GetDeployTime()",
      "void SetupColorSequences()",
      "string GetColorSequence()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "float GetMaxAllowedWetness()",
      "float GetEventDelay()",
      "string GetFuseSoundSet()",
      "int GetMaxShots()",
      "float GetFuseDelay()",
      "string GetAmmoType()",
      "int GetDamageType()",
      "void OnStateChangedServer(EFireworksState currentState)",
      "void OnStateChangedClient(EFireworksState currentState)",
      "void OnIgnitedThis( EntityAI fire_source)",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "void OnFuseIgnitedServer()",
      "void OnFuseIgnitedClient()",
      "void OnFiringStartServer()",
      "void OnFiringStartClient()",
      "void OnFiringStop()",
      "void RestartEventTimer()",
      "bool IsIgnited()",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "void OnEventServer(int type)",
      "void OnIndexChangedClient()",
      "void OnVariablesSynchronized()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "string GetDebugText()"
    ]
  },
  "FireworksLauncherClientEvent": {
    "parent": null,
    "methods": [
      "int GetSoundDelay()",
      "int GetLightDelay()",
      "float GetExplosionDistance()",
      "float GetShotDispersionAngle()",
      "string GetExplosionSoundSet()",
      "float GetExplosionDelay()",
      "void FireworksLauncherClientEvent(FireworksLauncher item, int index)",
      "void OnFired()",
      "void CalculateExplosionPosition()",
      "int GetSecondaryExplosionCount()",
      "void OnExplode()",
      "void RequestSecondaryExplosion()",
      "void SpawnSecondaryExplosion()",
      "int GetSecondaryExplosionDelay()",
      "int GetExplParticleFromSequence()",
      "void SetupLight(PointLightBase light)",
      "void SpawnLight()",
      "void PlayExplosionSound()",
      "void Init(vector pos)",
      "void FireworksLauncher()",
      "bool IsDeployable()",
      "float GetDeployTime()",
      "void SetupColorSequences()",
      "string GetColorSequence()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "float GetMaxAllowedWetness()",
      "float GetEventDelay()",
      "string GetFuseSoundSet()",
      "int GetMaxShots()",
      "float GetFuseDelay()",
      "string GetAmmoType()",
      "int GetDamageType()",
      "void OnStateChangedServer(EFireworksState currentState)",
      "void OnStateChangedClient(EFireworksState currentState)",
      "void OnIgnitedThis( EntityAI fire_source)",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "void OnFuseIgnitedServer()",
      "void OnFuseIgnitedClient()",
      "void OnFiringStartServer()",
      "void OnFiringStartClient()",
      "void OnFiringStop()",
      "void RestartEventTimer()",
      "bool IsIgnited()",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "void OnEventServer(int type)",
      "void OnIndexChangedClient()",
      "void OnVariablesSynchronized()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "string GetDebugText()"
    ]
  },
  "FireworksLauncherClientEventSecondary": {
    "parent": null,
    "methods": [
      "void Init(vector pos)",
      "float GetExplosionDistance()",
      "void OnExplode()",
      "void FireworksLauncher()",
      "bool IsDeployable()",
      "float GetDeployTime()",
      "void SetupColorSequences()",
      "string GetColorSequence()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "float GetMaxAllowedWetness()",
      "float GetEventDelay()",
      "string GetFuseSoundSet()",
      "int GetMaxShots()",
      "float GetFuseDelay()",
      "string GetAmmoType()",
      "int GetDamageType()",
      "void OnStateChangedServer(EFireworksState currentState)",
      "void OnStateChangedClient(EFireworksState currentState)",
      "void OnIgnitedThis( EntityAI fire_source)",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "void OnFuseIgnitedServer()",
      "void OnFuseIgnitedClient()",
      "void OnFiringStartServer()",
      "void OnFiringStartClient()",
      "void OnFiringStop()",
      "void RestartEventTimer()",
      "bool IsIgnited()",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "void OnEventServer(int type)",
      "void OnIndexChangedClient()",
      "void OnVariablesSynchronized()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "string GetDebugText()"
    ]
  },
  "FireworksLauncher": {
    "parent": null,
    "methods": [
      "void FireworksLauncher()",
      "bool IsDeployable()",
      "float GetDeployTime()",
      "void SetupColorSequences()",
      "string GetColorSequence()",
      "void OnPlacementComplete(Man player, vector position = , vector orientation = )",
      "float GetMaxAllowedWetness()",
      "float GetEventDelay()",
      "string GetFuseSoundSet()",
      "int GetMaxShots()",
      "float GetFuseDelay()",
      "string GetAmmoType()",
      "int GetDamageType()",
      "void OnStateChangedServer(EFireworksState currentState)",
      "void OnStateChangedClient(EFireworksState currentState)",
      "void OnIgnitedThis( EntityAI fire_source)",
      "bool CanPutInCargo( EntityAI parent )",
      "bool CanPutIntoHands( EntityAI parent )",
      "void OnFuseIgnitedServer()",
      "void OnFuseIgnitedClient()",
      "void OnFiringStartServer()",
      "void OnFiringStartClient()",
      "void OnFiringStop()",
      "void RestartEventTimer()",
      "bool IsIgnited()",
      "bool CanIgniteItem(EntityAI ignite_target = NULL)",
      "void OnEventServer(int type)",
      "void OnIndexChangedClient()",
      "void OnVariablesSynchronized()",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "bool OnStoreLoad( ParamsReadContext ctx, int version )",
      "string GetDeploySoundset()",
      "string GetLoopDeploySoundset()",
      "string GetDebugText()"
    ]
  },
  "AnniversaryFireworksLauncherClientEvent": {
    "parent": null,
    "methods": [
      "int GetExplParticleFromSequence()",
      "void SetupLight(PointLightBase light)",
      "void SpawnSecondaryExplosion()",
      "void Init(vector pos)",
      "float GetExplosionDistance()",
      "void OnExplode()",
      "void SetupColorSequences()",
      "bool IsTakeable()",
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "bool DisableVicinityIcon()",
      "int GetMaxShots()",
      "float GetFuseDelay()",
      "void OnEventServer(int type)"
    ]
  },
  "AnniversaryFireworksLauncherClientEventSecondary": {
    "parent": null,
    "methods": [
      "void Init(vector pos)",
      "float GetExplosionDistance()",
      "void OnExplode()",
      "void SetupColorSequences()",
      "bool IsTakeable()",
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "bool DisableVicinityIcon()",
      "int GetMaxShots()",
      "float GetFuseDelay()",
      "void OnEventServer(int type)"
    ]
  },
  "Anniversary_FireworksLauncher": {
    "parent": null,
    "methods": [
      "void SetupColorSequences()",
      "bool IsTakeable()",
      "bool CanSwapEntities(EntityAI otherItem, InventoryLocation otherDestination, InventoryLocation destination)",
      "bool DisableVicinityIcon()",
      "int GetMaxShots()",
      "float GetFuseDelay()",
      "void OnEventServer(int type)"
    ]
  },
  "FishingRod": {
    "parent": null,
    "methods": [
      "void FishingRod()",
      "float GetFishingEffectivityBonus()"
    ]
  },
  "HandcuffKeys": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Handcuffs": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "HandSaw": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "HayHook": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Iceaxe": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "ImprovisedFishingRod": {
    "parent": null,
    "methods": []
  },
  "KitchenTimer": {
    "parent": null,
    "methods": [
      "void Init()",
      "void SetActions()",
      "string GetExplosiveTriggerSlotName()",
      "string GetToggleSound()",
      "string GetRingingSound()",
      "string GetRingingStopSound()",
      "string GetDestroyedSound()",
      "string GetHitSound()",
      "string GetWorkingSound()",
      "int GetMinutesMax()",
      "int Time01ToSeconds(float time01)",
      "float SecondsTo01(int seconds)",
      "float GetRingingDurationMax()",
      "void TurnOff()",
      "void OnUpdate()",
      "void Disarm()",
      "void OnRingingStopClient()",
      "bool OnStoreLoad(ParamsReadContext ctx, int version)",
      "void OnStoreSave(ParamsWriteContext ctx)",
      "void SetAlarmTimeServer(float time01)",
      "void SetAlarmTimeServerSecs(int inSecs)",
      "void GetDebugActions(out TSelectableActionInfoArrayEx outputList)",
      "bool OnAction(int action_id, Man player, ParamsReadContext ctx)",
      "string GetDebugText()"
    ]
  },
  "LeatherSewingKit": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Lockpick": {
    "parent": null,
    "methods": [
      "void Lockpick()",
      "int GetKeyCompatibilityType()",
      "void SetActions()"
    ]
  },
  "LugWrench": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Mace": {
    "parent": "Inventory_Base",
    "methods": [
      "void SetActions()"
    ]
  },
  "MeatTenderizer": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "MessTin": {
    "parent": null,
    "methods": []
  },
  "ObsoleteFishingRod": {
    "parent": null,
    "methods": []
  },
  "Paddle": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "Pen_ColorBase": {
    "parent": null,
    "methods": []
  },
  "Pen_Black": {
    "parent": null,
    "methods": []
  },
  "Pen_Red": {
    "parent": null,
    "methods": []
  },
  "Pen_Green": {
    "parent": null,
    "methods": []
  },
  "Pen_Blue": {
    "parent": null,
    "methods": []
  },
  "SewingKit": {
    "parent": null,
    "methods": [
      "void SetActions()",
      "float GetInfectionChance(int system = 0, Param param = null)",
      "bool CanBeDisinfected()",
      "void OnCombine(ItemBase other_item)"
    ]
  },
  "WeaponCleaningKit": {
    "parent": null,
    "methods": []
  },
  "Whetstone": {
    "parent": null,
    "methods": []
  },
  "Wrench": {
    "parent": null,
    "methods": [
      "void SetActions()"
    ]
  },
  "CarRearLightBase": {
    "parent": "CarLightBase",
    "methods": [
      "void CarRearLight()",
      "void SetAsSegregatedBrakeLight()",
      "void SetAsSegregatedReverseLight()"
    ]
  },
  "CivilianSedanFrontLight": {
    "parent": "CarLightBase",
    "methods": [
      "void CivilianSedanFrontLight()"
    ]
  },
  "Hatchback_02FrontLight": {
    "parent": "CarLightBase",
    "methods": [
      "void Hatchback_02FrontLight()"
    ]
  },
  "OffroadHatchbackFrontLight": {
    "parent": "CarLightBase",
    "methods": [
      "void OffroadHatchbackFrontLight()"
    ]
  },
  "Offroad_02FrontLight": {
    "parent": "CarLightBase",
    "methods": [
      "void Offroad_02FrontLight()"
    ]
  },
  "Sedan_02FrontLight": {
    "parent": "CarLightBase",
    "methods": [
      "void Sedan_02FrontLight()"
    ]
  },
  "Truck_01FrontLight": {
    "parent": "CarLightBase",
    "methods": [
      "void Truck_01FrontLight()"
    ]
  },
  "ScriptConsoleCameraDOFPreset": {
    "parent": null,
    "methods": [
      "void ScriptConsoleCameraDOFPreset(string name, float focusDistance, float focusLength, float focusLengthNear, float blur, float focusDepthOffset)",
      "void ScriptConsoleWeatherPreset(string name, float overcast, float rain, float snow, float fog, float windMagnitude, float windDir, float volFogDD, float volFogHD, float volFogHB)",
      "bool GetBool( string key )",
      "float GetFloat( string key )",
      "int GetInt( string key )",
      "string GetString( string key )",
      "void GetSubParametersInStringArray( string setting_name, string sub_param_name, out TStringArray arr )",
      "void PluginConfigDebugProfile()",
      "void OnInit()",
      "void LoadCameraPresets()",
      "void LoadWeatherPresets()",
      "void AddCameraPreset(string name, float focusDistance, float focusLength, float focusLengthNear, float blur, float focusDepthOffset)",
      "void RemoveCameraPreset(string name)",
      "void AddWeatherPreset(string name, float overcast, float rain, float snow, float fog, float windM, float windD, float volFogDD, float volFogHD, float volFogHB)",
      "void RemoveWeatherPreset(string name)",
      "string GetFileName()",
      "string GetSubFolderName()",
      "bool GetSceneEditorDrawSelection()",
      "void SetSceneEditorDrawSelection( bool value )",
      "bool GetSceneEditorLoadPlayerPos()",
      "void SetSceneEditorLoadPlayerPos( bool value )",
      "int GetSceneEditorRotationAngle()",
      "void SetSceneEditorRotationAngle( int value )",
      "int GetTabSelected()",
      "void SetTabSelected( int value )",
      "int GetSpawnLocIndex()",
      "void SetSpawnLocIndex( int value )",
      "int GetFilterOrderReversed()",
      "void SetFilterOrderReversed( bool reversed )",
      "string GetDefaultPreset()",
      "void SetDefaultPreset( string value )",
      "void SetBatchSpawnRectangle( int row, int column, float rowStep, float columnStep)",
      "int GetBatchSpawnQuantity()",
      "void SetBatchSpawnQuantity(int value)",
      "string GetItemSearch()",
      "void SetItemSearch( string value )",
      "float GetSpawnDistance()",
      "void SetSpawnDistance( float value )",
      "bool GetLogsEnabled()",
      "void SetLogsEnabled( bool value )",
      "bool GetCharacterLevelsVisible()",
      "void SetCharacterLevelsVisible( bool is_visible )",
      "void SetItemDebugPos(vector pos)",
      "bool GetCharacterStatsVisible()",
      "void SetCharacterStatsVisible( bool is_visible )",
      "bool GetCharacterModifiersVisible()",
      "void SetCharacterModifiersVisible( bool is_visible )",
      "bool GetCharacterAgentsVisible()",
      "void SetCharacterAgentsVisible( bool is_visible )",
      "bool GetCharacterDebugVisible()",
      "void SetCharacterDebugVisible( bool is_visible )",
      "bool GetCharacterStomachVisible()",
      "void SetCharacterStomachVisible( bool is_visible )",
      "bool GetFreeCameraCrosshairVisible()",
      "void SetFreeCameraCrosshairVisible( bool is_visible )",
      "bool GetVersionVisible()",
      "void SetVersionVisible( bool is_visible )",
      "bool GetMergeType()",
      "void SetMergeType( bool is_visible )",
      "string GetSoundsetFilter()",
      "void SetSoundsetFilter( string content )",
      "bool GetTempVisible()",
      "void SetTempVisible( bool is_visible )",
      "bool GetHealthVisible()",
      "void SetHealthVisible( bool is_visible )",
      "bool GetHorticultureVisible()",
      "void SetHorticultureVisible( bool is_visible )",
      "bool GetShowItemPreview()",
      "void SetShowItemPreview( bool show )",
      "int GetConfigClassesFlag()",
      "void SetConfigClassesFlag( int flag )",
      "int GetItemCategoryFlag()",
      "void SetItemCategoryFlag( int flag )",
      "bool CustomLocationsAdd( string name, vector position )",
      "void CustomLocationsRemove( string name )",
      "void SetPreset( string preset_name, int index = -1 )",
      "void RemovePreset( string preset_name )",
      "bool GetPresetItems( string preset_name, out TStringArray arr, string param_name =  )",
      "bool PresetAdd( string preset_name )",
      "bool PresetRemove( string preset_name )",
      "bool PresetRename( string old_preset_name, string new_preset_name )",
      "bool ItemAddToPreset( string preset_name, string item_name )",
      "bool ItemRemoveFromPreset( string preset_name, int item_index )",
      "bool SwapItem( string preset_name, int item1_index, int item2_index )",
      "float GetItemHealth( string preset_name, int item_index )",
      "bool SetItemHealth( string preset_name, int item_index, float health )",
      "int GetItemQuantity( string preset_name, int item_index )",
      "bool SetItemQuantity( string preset_name, int item_index, int quantity )",
      "bool GetItemWithPhysics( string preset_name, int item_index )",
      "bool SetItemWithPhysics( string preset_name, int item_index, bool with_physics )",
      "void GetLocationsData( out array<ref LocationParams> arr , bool isCustom)"
    ]
  },
  "ScriptConsoleWeatherPreset": {
    "parent": null,
    "methods": [
      "void ScriptConsoleWeatherPreset(string name, float overcast, float rain, float snow, float fog, float windMagnitude, float windDir, float volFogDD, float volFogHD, float volFogHB)",
      "bool GetBool( string key )",
      "float GetFloat( string key )",
      "int GetInt( string key )",
      "string GetString( string key )",
      "void GetSubParametersInStringArray( string setting_name, string sub_param_name, out TStringArray arr )",
      "void PluginConfigDebugProfile()",
      "void OnInit()",
      "void LoadCameraPresets()",
      "void LoadWeatherPresets()",
      "void AddCameraPreset(string name, float focusDistance, float focusLength, float focusLengthNear, float blur, float focusDepthOffset)",
      "void RemoveCameraPreset(string name)",
      "void AddWeatherPreset(string name, float overcast, float rain, float snow, float fog, float windM, float windD, float volFogDD, float volFogHD, float volFogHB)",
      "void RemoveWeatherPreset(string name)",
      "string GetFileName()",
      "string GetSubFolderName()",
      "bool GetSceneEditorDrawSelection()",
      "void SetSceneEditorDrawSelection( bool value )",
      "bool GetSceneEditorLoadPlayerPos()",
      "void SetSceneEditorLoadPlayerPos( bool value )",
      "int GetSceneEditorRotationAngle()",
      "void SetSceneEditorRotationAngle( int value )",
      "int GetTabSelected()",
      "void SetTabSelected( int value )",
      "int GetSpawnLocIndex()",
      "void SetSpawnLocIndex( int value )",
      "int GetFilterOrderReversed()",
      "void SetFilterOrderReversed( bool reversed )",
      "string GetDefaultPreset()",
      "void SetDefaultPreset( string value )",
      "void SetBatchSpawnRectangle( int row, int column, float rowStep, float columnStep)",
      "int GetBatchSpawnQuantity()",
      "void SetBatchSpawnQuantity(int value)",
      "string GetItemSearch()",
      "void SetItemSearch( string value )",
      "float GetSpawnDistance()",
      "void SetSpawnDistance( float value )",
      "bool GetLogsEnabled()",
      "void SetLogsEnabled( bool value )",
      "bool GetCharacterLevelsVisible()",
      "void SetCharacterLevelsVisible( bool is_visible )",
      "void SetItemDebugPos(vector pos)",
      "bool GetCharacterStatsVisible()",
      "void SetCharacterStatsVisible( bool is_visible )",
      "bool GetCharacterModifiersVisible()",
      "void SetCharacterModifiersVisible( bool is_visible )",
      "bool GetCharacterAgentsVisible()",
      "void SetCharacterAgentsVisible( bool is_visible )",
      "bool GetCharacterDebugVisible()",
      "void SetCharacterDebugVisible( bool is_visible )",
      "bool GetCharacterStomachVisible()",
      "void SetCharacterStomachVisible( bool is_visible )",
      "bool GetFreeCameraCrosshairVisible()",
      "void SetFreeCameraCrosshairVisible( bool is_visible )",
      "bool GetVersionVisible()",
      "void SetVersionVisible( bool is_visible )",
      "bool GetMergeType()",
      "void SetMergeType( bool is_visible )",
      "string GetSoundsetFilter()",
      "void SetSoundsetFilter( string content )",
      "bool GetTempVisible()",
      "void SetTempVisible( bool is_visible )",
      "bool GetHealthVisible()",
      "void SetHealthVisible( bool is_visible )",
      "bool GetHorticultureVisible()",
      "void SetHorticultureVisible( bool is_visible )",
      "bool GetShowItemPreview()",
      "void SetShowItemPreview( bool show )",
      "int GetConfigClassesFlag()",
      "void SetConfigClassesFlag( int flag )",
      "int GetItemCategoryFlag()",
      "void SetItemCategoryFlag( int flag )",
      "bool CustomLocationsAdd( string name, vector position )",
      "void CustomLocationsRemove( string name )",
      "void SetPreset( string preset_name, int index = -1 )",
      "void RemovePreset( string preset_name )",
      "bool GetPresetItems( string preset_name, out TStringArray arr, string param_name =  )",
      "bool PresetAdd( string preset_name )",
      "bool PresetRemove( string preset_name )",
      "bool PresetRename( string old_preset_name, string new_preset_name )",
      "bool ItemAddToPreset( string preset_name, string item_name )",
      "bool ItemRemoveFromPreset( string preset_name, int item_index )",
      "bool SwapItem( string preset_name, int item1_index, int item2_index )",
      "float GetItemHealth( string preset_name, int item_index )",
      "bool SetItemHealth( string preset_name, int item_index, float health )",
      "int GetItemQuantity( string preset_name, int item_index )",
      "bool SetItemQuantity( string preset_name, int item_index, int quantity )",
      "bool GetItemWithPhysics( string preset_name, int item_index )",
      "bool SetItemWithPhysics( string preset_name, int item_index, bool with_physics )",
      "void GetLocationsData( out array<ref LocationParams> arr , bool isCustom)"
    ]
  },
  "PluginConfigDebugProfile": {
    "parent": "PluginConfigHandler",
    "methods": [
      "bool GetBool( string key )",
      "float GetFloat( string key )",
      "int GetInt( string key )",
      "string GetString( string key )",
      "void GetSubParametersInStringArray( string setting_name, string sub_param_name, out TStringArray arr )",
      "void PluginConfigDebugProfile()",
      "void OnInit()",
      "void LoadCameraPresets()",
      "void LoadWeatherPresets()",
      "void AddCameraPreset(string name, float focusDistance, float focusLength, float focusLengthNear, float blur, float focusDepthOffset)",
      "void RemoveCameraPreset(string name)",
      "void AddWeatherPreset(string name, float overcast, float rain, float snow, float fog, float windM, float windD, float volFogDD, float volFogHD, float volFogHB)",
      "void RemoveWeatherPreset(string name)",
      "string GetFileName()",
      "string GetSubFolderName()",
      "bool GetSceneEditorDrawSelection()",
      "void SetSceneEditorDrawSelection( bool value )",
      "bool GetSceneEditorLoadPlayerPos()",
      "void SetSceneEditorLoadPlayerPos( bool value )",
      "int GetSceneEditorRotationAngle()",
      "void SetSceneEditorRotationAngle( int value )",
      "int GetTabSelected()",
      "void SetTabSelected( int value )",
      "int GetSpawnLocIndex()",
      "void SetSpawnLocIndex( int value )",
      "int GetFilterOrderReversed()",
      "void SetFilterOrderReversed( bool reversed )",
      "string GetDefaultPreset()",
      "void SetDefaultPreset( string value )",
      "void SetBatchSpawnRectangle( int row, int column, float rowStep, float columnStep)",
      "int GetBatchSpawnQuantity()",
      "void SetBatchSpawnQuantity(int value)",
      "string GetItemSearch()",
      "void SetItemSearch( string value )",
      "float GetSpawnDistance()",
      "void SetSpawnDistance( float value )",
      "bool GetLogsEnabled()",
      "void SetLogsEnabled( bool value )",
      "bool GetCharacterLevelsVisible()",
      "void SetCharacterLevelsVisible( bool is_visible )",
      "void SetItemDebugPos(vector pos)",
      "bool GetCharacterStatsVisible()",
      "void SetCharacterStatsVisible( bool is_visible )",
      "bool GetCharacterModifiersVisible()",
      "void SetCharacterModifiersVisible( bool is_visible )",
      "bool GetCharacterAgentsVisible()",
      "void SetCharacterAgentsVisible( bool is_visible )",
      "bool GetCharacterDebugVisible()",
      "void SetCharacterDebugVisible( bool is_visible )",
      "bool GetCharacterStomachVisible()",
      "void SetCharacterStomachVisible( bool is_visible )",
      "bool GetFreeCameraCrosshairVisible()",
      "void SetFreeCameraCrosshairVisible( bool is_visible )",
      "bool GetVersionVisible()",
      "void SetVersionVisible( bool is_visible )",
      "bool GetMergeType()",
      "void SetMergeType( bool is_visible )",
      "string GetSoundsetFilter()",
      "void SetSoundsetFilter( string content )",
      "bool GetTempVisible()",
      "void SetTempVisible( bool is_visible )",
      "bool GetHealthVisible()",
      "void SetHealthVisible( bool is_visible )",
      "bool GetHorticultureVisible()",
      "void SetHorticultureVisible( bool is_visible )",
      "bool GetShowItemPreview()",
      "void SetShowItemPreview( bool show )",
      "int GetConfigClassesFlag()",
      "void SetConfigClassesFlag( int flag )",
      "int GetItemCategoryFlag()",
      "void SetItemCategoryFlag( int flag )",
      "bool CustomLocationsAdd( string name, vector position )",
      "void CustomLocationsRemove( string name )",
      "void SetPreset( string preset_name, int index = -1 )",
      "void RemovePreset( string preset_name )",
      "bool GetPresetItems( string preset_name, out TStringArray arr, string param_name =  )",
      "bool PresetAdd( string preset_name )",
      "bool PresetRemove( string preset_name )",
      "bool PresetRename( string old_preset_name, string new_preset_name )",
      "bool ItemAddToPreset( string preset_name, string item_name )",
      "bool ItemRemoveFromPreset( string preset_name, int item_index )",
      "bool SwapItem( string preset_name, int item1_index, int item2_index )",
      "float GetItemHealth( string preset_name, int item_index )",
      "bool SetItemHealth( string preset_name, int item_index, float health )",
      "int GetItemQuantity( string preset_name, int item_index )",
      "bool SetItemQuantity( string preset_name, int item_index, int quantity )",
      "bool GetItemWithPhysics( string preset_name, int item_index )",
      "bool SetItemWithPhysics( string preset_name, int item_index, bool with_physics )",
      "void GetLocationsData( out array<ref LocationParams> arr , bool isCustom)"
    ]
  },
  "PluginConfigDebugProfileFixed": {
    "parent": "PluginConfigDebugProfile",
    "methods": [
      "void PluginConfigDebugProfileFixed()",
      "string GetFileName()"
    ]
  },
  "PluginConfigEmotesProfile": {
    "parent": "PluginConfigHandler",
    "methods": [
      "int GetInt( string key )",
      "void PluginConfigEmotesProfile()",
      "string GetFileName()",
      "int GetEmoteSlot1()",
      "void SetEmoteSlot1( int emoted_id )",
      "int GetEmoteSlot2()",
      "void SetEmoteSlot2( int emoted_id )",
      "int GetEmoteSlot3()",
      "void SetEmoteSlot3( int emoted_id )",
      "int GetEmoteSlot4()",
      "void SetEmoteSlot4( int emoted_id )",
      "int GetEmoteSlot5()",
      "void SetEmoteSlot5( int emoted_id )",
      "int GetEmoteSlot6()",
      "void SetEmoteSlot6( int emoted_id )",
      "int GetEmoteSlot7()",
      "void SetEmoteSlot7( int emoted_id )",
      "int GetEmoteSlot8()",
      "void SetEmoteSlot8( int emoted_id )",
      "int GetEmoteSlot9()",
      "void SetEmoteSlot9( int emoted_id )",
      "int GetEmoteSlot10()",
      "void SetEmoteSlot10( int emoted_id )",
      "int GetEmoteSlot11()",
      "void SetEmoteSlot11( int emoted_id )",
      "int GetEmoteFromSlot(string slot)"
    ]
  },
  "PluginConfigScene": {
    "parent": "PluginConfigHandler",
    "methods": [
      "void OnInit()",
      "string GetPathScenes()",
      "string GetFileName()",
      "void SceneRename(string scene_name, string scene_name_new)",
      "void SceneDelete(string scene_name)",
      "void SceneDuplicate(string scene_name)",
      "string EncodeInitScript( string script )",
      "void SceneDataSave(SceneData scene)",
      "void SaveSceneSettings(SceneData scene)",
      "void SaveSceneWeather(SceneData scene)",
      "void SaveScenePlayer(SceneData scene)",
      "void SaveSceneObjects(SceneData scene)",
      "void LoadSceneSettings(SceneData scene)",
      "void LoadSceneWeather(SceneData scene)",
      "void LoadScenePlayer(SceneData scene)",
      "void LoadSceneObjects(SceneData scene)"
    ]
  },
  "PluginMissionConfig": {
    "parent": "PluginConfigHandler",
    "methods": [
      "void OnInit()",
      "string GetFileName()",
      "string GetSceneEditorName()",
      "void SetSceneEditorName( string value )"
    ]
  },
  "PluginAdditionalInfo": {
    "parent": "PluginLocalProfile",
    "methods": [
      "string GetFileName()"
    ]
  },
  "PluginLocalProfileScene": {
    "parent": "PluginLocalProfile",
    "methods": [
      "string GetPathScenes()",
      "string GetFileName()",
      "void OnInit()",
      "void SceneSave(SceneData scene)"
    ]
  },
  "ClosableHeader": {
    "parent": null,
    "methods": [
      "void ClosableHeader( LayoutHolder parent, string function_name )",
      "void SetLayoutName()",
      "void SetName( string name )",
      "void OnDragHeader( Widget w, int x, int y )",
      "void UpdateFlip( bool flipped )",
      "void OnDropHeader( Widget w )",
      "bool MouseEnter(Widget w, int x, int y)",
      "bool MouseLeave( Widget w, Widget enter_w, int x, int y\t)",
      "void SetActive( bool active )"
    ]
  },
  "CollapsibleHeader": {
    "parent": null,
    "methods": [
      "void CollapsibleHeader( LayoutHolder parent, string function_name )",
      "void SetLayoutName()",
      "void SetArrowButtonOpened(bool state)",
      "bool IsHeaderVisible()",
      "void SetHeaderVisible(bool show)"
    ]
  },
  "HandsHeader": {
    "parent": null,
    "methods": [
      "void HandsHeader( LayoutHolder parent, string function_name )",
      "void SetLayoutName()",
      "void UpdateInterval()",
      "void ShowCollapseButtons( bool show, bool force = false )"
    ]
  },
  "Header": {
    "parent": null,
    "methods": [
      "void Header( LayoutHolder parent, string function_name )",
      "void SetName( string name )",
      "void SetItemPreview( EntityAI entity_ai )",
      "void DraggingOverHeader( Widget w, int x, int y, Widget receiver )",
      "void OnDropReceivedFromHeader( Widget w, int x, int y, Widget receiver )",
      "void SetActive( bool active )",
      "void ShowCollapseButton(bool state)"
    ]
  },
  "CreditsDepartmentElement": {
    "parent": "CreditsElement",
    "methods": [
      "void CreditsDepartmentElement( int index, Widget parent, JsonDataCreditsDepartment department_data )",
      "void LoadDataAsync( array<ref JsonDataCreditsSection> department_data )",
      "void CreditsDepartmentSection( int index, Widget parent, JsonDataCreditsSection section_data )",
      "void LoadDataAsync( array<string> section_data )"
    ]
  },
  "CreditsDepartmentSection": {
    "parent": "CreditsElement",
    "methods": [
      "void CreditsDepartmentSection( int index, Widget parent, JsonDataCreditsSection section_data )",
      "void LoadDataAsync( array<string> section_data )"
    ]
  },
  "CreditsElement": {
    "parent": "ScriptedWidgetEventHandler",
    "methods": [
      "void CreditsElement( int index, Widget parent )"
    ]
  },
  "CreditsGraphicalElement": {
    "parent": "CreditsElement",
    "methods": [
      "void CreditsGraphicalElement( int index, Widget parent )"
    ]
  },
  "PlaceObjectActionData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void DropDuringPlacing()",
      "void ActionDeployBase()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnItemLocationChanged(ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void DropDuringPlacing(PlayerBase player)",
      "void MoveEntityToFinalPosition(ActionData action_data, vector position, vector orientation)",
      "void MoveEntityToFinalPositionSinglePlayer(ActionData action_data, InventoryLocation source, InventoryLocation destination)"
    ]
  },
  "ActiondeployObjectCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void DropDuringPlacing()",
      "void ActionDeployBase()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnItemLocationChanged(ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void DropDuringPlacing(PlayerBase player)",
      "void MoveEntityToFinalPosition(ActionData action_data, vector position, vector orientation)",
      "void MoveEntityToFinalPositionSinglePlayer(ActionData action_data, InventoryLocation source, InventoryLocation destination)"
    ]
  },
  "ActionDeployBase": {
    "parent": null,
    "methods": [
      "void ActionDeployBase()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool HasProgress()",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnItemLocationChanged(ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void DropDuringPlacing(PlayerBase player)",
      "void MoveEntityToFinalPosition(ActionData action_data, vector position, vector orientation)",
      "void MoveEntityToFinalPositionSinglePlayer(ActionData action_data, InventoryLocation source, InventoryLocation destination)"
    ]
  },
  "ActionDeployHuntingTrap": {
    "parent": null,
    "methods": [
      "void ActionDeployHuntingTrap()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateConditionComponents()",
      "bool ActionConditionContinue( ActionData action_data )",
      "void MoveEntityToFinalPosition(ActionData action_data, vector position, vector orientation)"
    ]
  },
  "PlaceObjectActionReciveData": {
    "parent": null,
    "methods": [
      "void ActionDeployObject()",
      "bool HasAlternativeInterrupt()",
      "bool IsDeploymentAction()",
      "bool CanBeUsedWithBrokenLegs()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressClient(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndClient(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnStartAnimationLoop(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void SetupAnimation(ItemBase item)"
    ]
  },
  "ActionDeployObject": {
    "parent": null,
    "methods": [
      "void ActionDeployObject()",
      "bool HasAlternativeInterrupt()",
      "bool IsDeploymentAction()",
      "bool CanBeUsedWithBrokenLegs()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool ActionConditionContinue(ActionData action_data)",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL)",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressClient(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnEndClient(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnStartAnimationLoop(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void SetupAnimation(ItemBase item)"
    ]
  },
  "ActionBandageBase": {
    "parent": null,
    "methods": [
      "void ApplyBandage(ItemBase item, PlayerBase player)"
    ]
  },
  "ActionBandageSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionBandageSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionBandageSelf": {
    "parent": null,
    "methods": [
      "void ActionBandageSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionBandageTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionBandageTarget()",
      "void CreateConditionComponents()",
      "int GetStanceMask(PlayerBase player)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnFinishProgressClient(ActionData action_data)",
      "bool CanTargetBeInVehicle()"
    ]
  },
  "ActionBandageTarget": {
    "parent": null,
    "methods": [
      "void ActionBandageTarget()",
      "void CreateConditionComponents()",
      "int GetStanceMask(PlayerBase player)",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnFinishProgressClient(ActionData action_data)",
      "bool CanTargetBeInVehicle()"
    ]
  },
  "ActionBurnSewSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionBurnSewSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionBurnSewSelf": {
    "parent": null,
    "methods": [
      "void ActionBurnSewSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionBurnSewTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionBurnSewTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionBurnSewTarget": {
    "parent": null,
    "methods": [
      "void ActionBurnSewTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionCheckPulse": {
    "parent": null,
    "methods": [
      "void ActionCheckPulse()",
      "void CreateConditionComponents()",
      "static string GetPulseMessage(EPulseType pulse_type, int blood_level)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "void OnExecuteClient( ActionData action_data )"
    ]
  },
  "ActionCheckPulseTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCheckPulseTarget()",
      "static string GetPulseMessage(EPulseType pulse_type, int blood_level)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateConditionComponents()",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionCheckPulseTarget": {
    "parent": null,
    "methods": [
      "void ActionCheckPulseTarget()",
      "static string GetPulseMessage(EPulseType pulse_type, int blood_level)",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void CreateConditionComponents()",
      "void OnFinishProgressServer( ActionData action_data )",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionCollectBloodSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCollectBloodSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionCollectBloodSelf": {
    "parent": null,
    "methods": [
      "void ActionCollectBloodSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionCollectBloodTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCollectBloodTarget()",
      "void CreateConditionComponents()",
      "void OnEndServer( ActionData action_data )",
      "void ActionCollectBloodTargetLambda(EntityAI old_item, string new_item_type, PlayerBase player, float specialtyWeight, PlayerBase target, float delta)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "ActionCollectBloodTarget": {
    "parent": null,
    "methods": [
      "void ActionCollectBloodTarget()",
      "void CreateConditionComponents()",
      "void OnEndServer( ActionData action_data )",
      "void ActionCollectBloodTargetLambda(EntityAI old_item, string new_item_type, PlayerBase player, float specialtyWeight, PlayerBase target, float delta)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "ActionCollectBloodTargetLambda": {
    "parent": null,
    "methods": [
      "void ActionCollectBloodTargetLambda(EntityAI old_item, string new_item_type, PlayerBase player, float specialtyWeight, PlayerBase target, float delta)",
      "void CopyOldPropertiesToNew(notnull EntityAI old_item, EntityAI new_item)"
    ]
  },
  "ActionCollectSampleSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCollectSampleSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionCollectSampleSelf": {
    "parent": null,
    "methods": [
      "void ActionCollectSampleSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionCollectSampleTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCollectSampleTarget()",
      "void CreateConditionComponents()",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionCollectSampleTarget": {
    "parent": null,
    "methods": [
      "void ActionCollectSampleTarget()",
      "void CreateConditionComponents()",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionCPRCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionCPR()",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnEndServer( ActionData action_data )",
      "void OnEndClient( ActionData action_data )"
    ]
  },
  "ActionCPR": {
    "parent": null,
    "methods": [
      "void ActionCPR()",
      "void OnStartClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnEndServer( ActionData action_data )",
      "void OnEndClient( ActionData action_data )"
    ]
  },
  "ActionDefibrilateBase": {
    "parent": null,
    "methods": [
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanDefibrillate(Defibrillator defib)",
      "void DefibrillateClient(PlayerBase player, Defibrillator defib)",
      "void DefibrillateServer(PlayerBase player, Defibrillator defib)"
    ]
  },
  "ActionDefibrilateSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDefibrilateSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnFinishProgressClient( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDefibrilateSelf": {
    "parent": null,
    "methods": [
      "void ActionDefibrilateSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnFinishProgressClient( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDefibrilateTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDefibrilateTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressClient( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDefibrilateTarget": {
    "parent": null,
    "methods": [
      "void ActionDefibrilateTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressClient( ActionData action_data )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDrinkAlcohol": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionDrinkDisinfectant": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionDrinkDisinfectant2": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionEatCharcoalTablets": {
    "parent": null,
    "methods": [
      "void ActionEatCharcoalTablets()",
      "int IsEat()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionEatPainkillerTablets": {
    "parent": null,
    "methods": [
      "void ActionEatPainkillerTablets()",
      "int IsEat()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionEatPurificationTablets": {
    "parent": null,
    "methods": [
      "void ActionEatPurificationTablets()",
      "int IsEat()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionEatTetracyclineAntibiotics": {
    "parent": null,
    "methods": [
      "void ActionEatTetracyclineAntibiotics()",
      "int IsEat()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionEatVitaminBottle": {
    "parent": null,
    "methods": [
      "void ActionEatVitaminBottle()",
      "int IsEat()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionFeedCharcoalTablets": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionFeedPainkillerTablets": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionFeedPurificationTablets": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionFeedTetracyclineAntibiotics": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionFeedVitaminBottleCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFeedVitaminBottle()"
    ]
  },
  "ActionFeedVitaminBottle": {
    "parent": null,
    "methods": [
      "void ActionFeedVitaminBottle()"
    ]
  },
  "ActionForceDrinkAlcohol": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionForceDrinkDisinfectant": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionGiveBloodData": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionGiveBloodSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnEndServer(ActionData action_data)",
      "void SyringeLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ActionGiveBloodSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionGiveBloodSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnEndServer(ActionData action_data)",
      "void SyringeLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ActionGiveBloodSelf": {
    "parent": null,
    "methods": [
      "void ActionGiveBloodSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnEndServer(ActionData action_data)",
      "void SyringeLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "SyringeLambda": {
    "parent": null,
    "methods": [
      "void SyringeLambda(EntityAI old_item, string new_item_type, PlayerBase player)"
    ]
  },
  "ActionGiveBloodTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionGiveBloodTarget()",
      "void CreateConditionComponents()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionGiveBloodTarget": {
    "parent": null,
    "methods": [
      "void ActionGiveBloodTarget()",
      "void CreateConditionComponents()",
      "bool SetupAction(PlayerBase player, ActionTarget target, ItemBase item, out ActionData action_data, Param extra_data = NULL )",
      "void OnEndAnimationLoopServer( ActionData action_data )",
      "void OnEndServer(ActionData action_data)"
    ]
  },
  "ActionGiveSalineSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionGiveSalineSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionGiveSalineSelf": {
    "parent": null,
    "methods": [
      "void ActionGiveSalineSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionGiveSalineTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionGiveSalineTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionGiveSalineTarget": {
    "parent": null,
    "methods": [
      "void ActionGiveSalineTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionMeasureTemperatureSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionMeasureTemperatureSelf()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionMeasureTemperatureSelf": {
    "parent": null,
    "methods": [
      "void ActionMeasureTemperatureSelf()",
      "void CreateConditionComponents()",
      "bool HasProneException()",
      "bool HasTarget()",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionMeasureTemperatureTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionMeasureTemperatureTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionMeasureTemperatureTarget": {
    "parent": null,
    "methods": [
      "void ActionMeasureTemperatureTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressClient( ActionData action_data )"
    ]
  },
  "ActionSewSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionSewSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void ApplyBandage(ItemBase item, PlayerBase player)"
    ]
  },
  "ActionSewSelf": {
    "parent": null,
    "methods": [
      "void ActionSewSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void ApplyBandage(ItemBase item, PlayerBase player)"
    ]
  },
  "ActionSewTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionSewTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void ApplyBandage(ItemBase item, PlayerBase player)",
      "bool CanTargetBeInVehicle()"
    ]
  },
  "ActionSewTarget": {
    "parent": null,
    "methods": [
      "void ActionSewTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void ApplyBandage(ItemBase item, PlayerBase player)",
      "bool CanTargetBeInVehicle()"
    ]
  },
  "ActionSplintSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionSplintSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsWearingSplint( PlayerBase player )"
    ]
  },
  "ActionSplintSelf": {
    "parent": null,
    "methods": [
      "void ActionSplintSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsWearingSplint( PlayerBase player )"
    ]
  },
  "ActionSplintTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionSplintTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsWearingSplint( PlayerBase player )"
    ]
  },
  "ActionSplintTarget": {
    "parent": null,
    "methods": [
      "void ActionSplintTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressServer( ActionData action_data )",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "bool IsWearingSplint( PlayerBase player )"
    ]
  },
  "ActionTestBloodSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTestBloodSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionTestBloodSelf": {
    "parent": null,
    "methods": [
      "void ActionTestBloodSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionTestBloodTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionTestBloodTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionTestBloodTarget": {
    "parent": null,
    "methods": [
      "void ActionTestBloodTarget()",
      "void CreateConditionComponents()",
      "void OnFinishProgressClient(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)"
    ]
  },
  "ActionCarHornBase": {
    "parent": null,
    "methods": [
      "static bool ActionCondition(PlayerBase player)",
      "static void SetCarHornState(CarHornActionData pActionData, int pState)",
      "static bool PlayerIsDriver(Transport trans, PlayerBase player)",
      "static bool BatteryIsVital(ItemBase battery)",
      "void ActionCarHornShort()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool CanBeUsedInVehicle()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void ActionCarHornLong()"
    ]
  },
  "CarHornActionReceiveData": {
    "parent": null,
    "methods": [
      "void ActionCarHornShort()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool CanBeUsedInVehicle()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void ActionCarHornLong()"
    ]
  },
  "CarHornActionData": {
    "parent": null,
    "methods": [
      "void ActionCarHornShort()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool CanBeUsedInVehicle()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void ActionCarHornLong()"
    ]
  },
  "ActionCarHornShortCB": {
    "parent": null,
    "methods": [
      "void ActionCarHornShort()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool CanBeUsedInVehicle()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void ActionCarHornLong()"
    ]
  },
  "ActionCarHornShort": {
    "parent": null,
    "methods": [
      "void ActionCarHornShort()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool CanBeUsedInVehicle()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)",
      "void ActionCarHornLong()"
    ]
  },
  "ActionCarHornLong": {
    "parent": null,
    "methods": [
      "void ActionCarHornLong()",
      "bool HasTarget()",
      "bool HasProgress()",
      "bool CanBeUsedInVehicle()",
      "bool UseMainItem()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnUpdate(ActionData action_data)",
      "void OnEndInput(ActionData action_data)",
      "void OnStart(ActionData action_data)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void WriteToContext(ParamsWriteContext ctx, ActionData action_data)",
      "bool ReadFromContext(ParamsReadContext ctx, out ActionReciveData action_recive_data)",
      "void HandleReciveData(ActionReciveData action_recive_data, ActionData action_data)"
    ]
  },
  "ActionFillBrakesCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFillBrakes()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndAnimationLoopServer( ActionData action_data )"
    ]
  },
  "ActionFillBrakes": {
    "parent": null,
    "methods": [
      "void ActionFillBrakes()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndAnimationLoopServer( ActionData action_data )"
    ]
  },
  "ActionFillCoolantCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFillCoolant()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionFillCoolant": {
    "parent": null,
    "methods": [
      "void ActionFillCoolant()",
      "void CreateConditionComponents()",
      "bool IsUsingProxies()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionFillFuelCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFillFuel()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionFillFuel": {
    "parent": null,
    "methods": [
      "void ActionFillFuel()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )"
    ]
  },
  "ActionFillOilCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionFillOil()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndAnimationLoopServer( ActionData action_data )"
    ]
  },
  "ActionFillOil": {
    "parent": null,
    "methods": [
      "void ActionFillOil()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnEndAnimationLoopServer( ActionData action_data )"
    ]
  },
  "ActionStartCarCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionStartEngine()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "bool CanBeUsedInVehicle()",
      "bool HasTarget()"
    ]
  },
  "ActionStartEngine": {
    "parent": null,
    "methods": [
      "void ActionStartEngine()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnFinishProgressServer(ActionData action_data)",
      "void OnExecuteServer(ActionData action_data)",
      "bool CanBeUsedInVehicle()",
      "bool HasTarget()"
    ]
  },
  "ActionStartEngineBoatCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionStartEngineBoat()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgress(ActionData action_data)",
      "void OnExecute(ActionData action_data)",
      "bool CanBeUsedInVehicle()",
      "bool HasTarget()"
    ]
  },
  "ActionStartEngineBoat": {
    "parent": null,
    "methods": [
      "void ActionStartEngineBoat()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnFinishProgress(ActionData action_data)",
      "void OnExecute(ActionData action_data)",
      "bool CanBeUsedInVehicle()",
      "bool HasTarget()"
    ]
  },
  "ActionAnimateCarSelection": {
    "parent": null,
    "methods": [
      "void ActionAnimateCarSelection()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer( ActionData action_data )"
    ]
  },
  "ActionAnimateSeats": {
    "parent": null,
    "methods": [
      "void ActionAnimateSeats()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "bool CanBeUsedInVehicle()",
      "bool AddActionJuncture(ActionData action_data)"
    ]
  },
  "ActionCarDoors": {
    "parent": null,
    "methods": [
      "void ActionCarDoors()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer(ActionData action_data)",
      "void OnEndServer(ActionData action_data)",
      "void OnEnd(ActionData action_data)",
      "bool CanBeUsedInVehicle()",
      "bool HasTarget()",
      "void FillCommandUIDPerCrewIdx(int crewIdx0, int crewIdx1, int crewIdx2, int crewIdx3)",
      "void FillCommandUIDPerCrewIdx(int evenCrewIdx0, int unevenCrewIdx1)"
    ]
  },
  "ActionCarDoorsOutside": {
    "parent": null,
    "methods": [
      "void ActionCarDoorsOutside()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStartServer( ActionData action_data )",
      "void OnEndServer(ActionData action_data)",
      "void FillCommandUIDPerCrewIdx(int crewIdx0, int crewIdx1, int crewIdx2, int crewIdx3)",
      "void FillCommandUIDPerCrewIdx(int evenCrewIdx0, int unevenCrewIdx1)"
    ]
  },
  "ActionCloseCarDoors": {
    "parent": null,
    "methods": [
      "void ActionCloseCarDoors()"
    ]
  },
  "ActionCloseCarDoorsOutside": {
    "parent": null,
    "methods": [
      "void ActionCloseCarDoorsOutside()"
    ]
  },
  "ActionOpenCarDoors": {
    "parent": null,
    "methods": [
      "void ActionOpenCarDoors()"
    ]
  },
  "ActionOpenCarDoorsOutside": {
    "parent": null,
    "methods": [
      "void ActionOpenCarDoorsOutside()"
    ]
  },
  "ActionSidePlateInteract": {
    "parent": null,
    "methods": [
      "void ActionSidePlateInteract()"
    ]
  },
  "ActionSwitchLights": {
    "parent": null,
    "methods": [
      "void ActionSwitchLights()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnExecuteServer( ActionData action_data )",
      "bool CanBeUsedInVehicle()"
    ]
  },
  "ActionBiteCharcoalTablets": {
    "parent": null,
    "methods": [
      "void ActionBiteCharcoalTablets()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionBitePainkillerTablets": {
    "parent": null,
    "methods": [
      "void ActionBitePainkillerTablets()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionBitePurificationTablets": {
    "parent": null,
    "methods": [
      "void ActionBitePurificationTablets()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionBiteTetracyclineAntibiotics": {
    "parent": null,
    "methods": [
      "void ActionBiteTetracyclineAntibiotics()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionBiteVitaminBottle": {
    "parent": null,
    "methods": [
      "void ActionBiteVitaminBottle()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionDisinfectSelfCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void Apply( ActionData action_data )",
      "void ActionDisinfectSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDisinfectBase": {
    "parent": null,
    "methods": [
      "void Apply( ActionData action_data )",
      "void ActionDisinfectSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDisinfectSelf": {
    "parent": null,
    "methods": [
      "void ActionDisinfectSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDisinfectTargetCB": {
    "parent": null,
    "methods": [
      "void CreateActionComponent()",
      "void ActionDisinfectTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionDisinfectTarget": {
    "parent": null,
    "methods": [
      "void ActionDisinfectTarget()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnFinishProgressServer( ActionData action_data )"
    ]
  },
  "ActionEatPillFromBottle": {
    "parent": null,
    "methods": [
      "void ActionEatPillFromBottle()"
    ]
  },
  "ActionEatTabletFromWrapper": {
    "parent": null,
    "methods": [
      "void ActionEatTabletFromWrapper()"
    ]
  },
  "ActionForceBiteCharcoalTablets": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionForceBitePainkillerTablets": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionForceBitePurificationTablets": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionForceBiteTetracyclineAntibiotics": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionForceBiteVitaminBottle": {
    "parent": null,
    "methods": []
  },
  "ActionInjectEpinephrineSelf": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionInjectEpinephrineTarget": {
    "parent": null,
    "methods": [
      "void ActionInjectEpinephrineTarget()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionInjectMorphineSelf": {
    "parent": null,
    "methods": [
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionInjectMorphineTarget": {
    "parent": null,
    "methods": [
      "void ActionInjectMorphineTarget()",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionInjectSelf": {
    "parent": null,
    "methods": [
      "void ActionInjectSelf()",
      "void CreateConditionComponents()",
      "bool HasTarget()",
      "void OnExecuteServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void OnEndClient( ActionData action_data )",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionInjectTarget": {
    "parent": null,
    "methods": [
      "void ActionInjectTarget()",
      "void CreateConditionComponents()",
      "void OnExecuteServer( ActionData action_data )",
      "void OnEndServer( ActionData action_data )",
      "void ApplyModifiers( ActionData action_data )"
    ]
  },
  "ActionStopEngine": {
    "parent": null,
    "methods": [
      "void ActionStopEngine()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecuteServer(ActionData action_data)",
      "void OnExecuteClient(ActionData action_data)",
      "bool CanBeUsedInVehicle()",
      "bool UseMainItem()",
      "bool HasTarget()"
    ]
  },
  "ActionStopEngineBoat": {
    "parent": null,
    "methods": [
      "void ActionStopEngineBoat()",
      "void CreateConditionComponents()",
      "bool ActionCondition(PlayerBase player, ActionTarget target, ItemBase item)",
      "void OnExecute(ActionData action_data)",
      "bool CanBeUsedInVehicle()",
      "bool UseMainItem()",
      "bool HasTarget()"
    ]
  },
  "ActionSwitchSeats": {
    "parent": null,
    "methods": [
      "void ActionSwitchSeats()",
      "void CreateConditionComponents()",
      "bool ActionCondition( PlayerBase player, ActionTarget target, ItemBase item )",
      "void OnStart(ActionData action_data)",
      "void OnUpdate(ActionData action_data)",
      "bool CanBeUsedInVehicle()",
      "bool AddActionJuncture(ActionData action_data)"
    ]
  },
  "CivilianSedanRearLight": {
    "parent": "CarRearLightBase",
    "methods": [
      "void CivilianSedanRearLight()"
    ]
  },
  "Hatchback_02RearLight": {
    "parent": "CarRearLightBase",
    "methods": [
      "void Hatchback_02RearLight()"
    ]
  },
  "OffroadHatchbackRearLight": {
    "parent": "CarRearLightBase",
    "methods": [
      "void OffroadHatchbackRearLight()"
    ]
  },
  "Offroad_02RearLight": {
    "parent": "CarRearLightBase",
    "methods": [
      "void Offroad_02RearLight()"
    ]
  },
  "Sedan_02RearLight": {
    "parent": "CarRearLightBase",
    "methods": [
      "void Sedan_02RearLight()"
    ]
  },
  "Truck_01RearLight": {
    "parent": "CarRearLightBase",
    "methods": [
      "void Truck_01RearLight()"
    ]
  }
}